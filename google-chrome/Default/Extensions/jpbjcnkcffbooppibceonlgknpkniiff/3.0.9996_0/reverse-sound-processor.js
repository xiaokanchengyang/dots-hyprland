(()=>{class e extends AudioWorkletProcessor{buffer=new Float32Array(441e3);recordSize=0;playSize=0;phase=s.pre;constructor(e){super(),this.maxBufferSize=e.processorOptions.maxSize||2646e3,this.port.onmessage=({data:e})=>{"RELEASE"===e.type&&this.release()}}release=()=>{this.phase!==s.released&&(this.phase=s.released,this.port.postMessage({type:"RELEASED"}))};process(e,r,i){if(this.phase===s.released)return!1;const t=e[0],a=r[0],h=a[0].length;if(this.phase===s.pre){if(!t[0])return!0;this.phase=s.recording}if(this.phase===s.recording)if(t[0]){const e=this.recordSize+h;if(e>this.maxBufferSize)this.phase=s.playing,this.buffer.subarray(0,this.recordSize).reverse(),this.port.postMessage({type:"PLAYING"});else{if(e>this.buffer.length){const e=new Float32Array(2*this.buffer.length);e.set(this.buffer),this.buffer=e}this.buffer.set(t[0],this.recordSize),this.recordSize=e}}else this.phase=s.playing,this.buffer.subarray(0,this.recordSize).reverse(),this.port.postMessage({type:"PLAYING"});return this.phase===s.playing?this.playSize<this.recordSize?(a[0].set(this.buffer.subarray(this.playSize,this.playSize+h)),this.playSize+=h,!0):(this.release(),!1):(a[0].set(t[0]),!0)}}var s=function(e){return e[e.pre=1]="pre",e[e.recording=2]="recording",e[e.playing=3]="playing",e[e.released=4]="released",e}(s||{});registerProcessor("reverse-sound-processor",e)})();