(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __defProps = Object.defineProperties;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getOwnPropSymbols = Object.getOwnPropertySymbols;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __propIsEnum = Object.prototype.propertyIsEnumerable;
  var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
  var __spreadValues = (a, b) => {
    for (var prop in b || (b = {}))
      if (__hasOwnProp.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    if (__getOwnPropSymbols)
      for (var prop of __getOwnPropSymbols(b)) {
        if (__propIsEnum.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      }
    return a;
  };
  var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
  var __require = /* @__PURE__ */ ((x) => typeof require !== "undefined" ? require : typeof Proxy !== "undefined" ? new Proxy(x, {
    get: (a, b) => (typeof require !== "undefined" ? require : a)[b]
  }) : x)(function(x) {
    if (typeof require !== "undefined")
      return require.apply(this, arguments);
    throw new Error('Dynamic require of "' + x + '" is not supported');
  });
  var __commonJS = (cb, mod2) => function __require2() {
    return mod2 || (0, cb[__getOwnPropNames(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod2, isNodeMode, target) => (target = mod2 != null ? __create(__getProtoOf(mod2)) : {}, __copyProps(
    isNodeMode || !mod2 || !mod2.__esModule ? __defProp(target, "default", { value: mod2, enumerable: true }) : target,
    mod2
  ));
  var __async = (__this, __arguments, generator) => {
    return new Promise((resolve, reject) => {
      var fulfilled = (value) => {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      };
      var rejected = (value) => {
        try {
          step(generator.throw(value));
        } catch (e) {
          reject(e);
        }
      };
      var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
      step((generator = generator.apply(__this, __arguments)).next());
    });
  };

  // node_modules/tslib/tslib.js
  var require_tslib = __commonJS({
    "node_modules/tslib/tslib.js"(exports2, module2) {
      var __extends3;
      var __assign3;
      var __rest2;
      var __decorate2;
      var __param2;
      var __metadata2;
      var __awaiter3;
      var __generator3;
      var __exportStar2;
      var __values3;
      var __read2;
      var __spread2;
      var __spreadArrays2;
      var __await2;
      var __asyncGenerator2;
      var __asyncDelegator2;
      var __asyncValues3;
      var __makeTemplateObject2;
      var __importStar2;
      var __importDefault2;
      var __classPrivateFieldGet2;
      var __classPrivateFieldSet2;
      var __createBinding2;
      (function(factory) {
        var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
        if (typeof define === "function" && define.amd) {
          define("tslib", ["exports"], function(exports3) {
            factory(createExporter(root, createExporter(exports3)));
          });
        } else if (typeof module2 === "object" && typeof module2.exports === "object") {
          factory(createExporter(root, createExporter(module2.exports)));
        } else {
          factory(createExporter(root));
        }
        function createExporter(exports3, previous) {
          if (exports3 !== root) {
            if (typeof Object.create === "function") {
              Object.defineProperty(exports3, "__esModule", { value: true });
            } else {
              exports3.__esModule = true;
            }
          }
          return function(id, v) {
            return exports3[id] = previous ? previous(id, v) : v;
          };
        }
      })(function(exporter) {
        var extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
          d.__proto__ = b;
        } || function(d, b) {
          for (var p in b)
            if (b.hasOwnProperty(p))
              d[p] = b[p];
        };
        __extends3 = function(d, b) {
          extendStatics2(d, b);
          function __() {
            this.constructor = d;
          }
          d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
        __assign3 = Object.assign || function(t) {
          for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s)
              if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
          }
          return t;
        };
        __rest2 = function(s, e) {
          var t = {};
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
              t[p] = s[p];
          if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
            }
          return t;
        };
        __decorate2 = function(decorators, target, key, desc) {
          var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
          if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
          else
            for (var i = decorators.length - 1; i >= 0; i--)
              if (d = decorators[i])
                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
          return c > 3 && r && Object.defineProperty(target, key, r), r;
        };
        __param2 = function(paramIndex, decorator) {
          return function(target, key) {
            decorator(target, key, paramIndex);
          };
        };
        __metadata2 = function(metadataKey, metadataValue) {
          if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
        };
        __awaiter3 = function(thisArg, _arguments, P, generator) {
          function adopt(value) {
            return value instanceof P ? value : new P(function(resolve) {
              resolve(value);
            });
          }
          return new (P || (P = Promise))(function(resolve, reject) {
            function fulfilled(value) {
              try {
                step(generator.next(value));
              } catch (e) {
                reject(e);
              }
            }
            function rejected(value) {
              try {
                step(generator["throw"](value));
              } catch (e) {
                reject(e);
              }
            }
            function step(result) {
              result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
            }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
          });
        };
        __generator3 = function(thisArg, body) {
          var _ = { label: 0, sent: function() {
            if (t[0] & 1)
              throw t[1];
            return t[1];
          }, trys: [], ops: [] }, f, y, t, g;
          return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
            return this;
          }), g;
          function verb(n) {
            return function(v) {
              return step([n, v]);
            };
          }
          function step(op) {
            if (f)
              throw new TypeError("Generator is already executing.");
            while (_)
              try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                  return t;
                if (y = 0, t)
                  op = [op[0] & 2, t.value];
                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;
                  case 4:
                    _.label++;
                    return { value: op[1], done: false };
                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;
                  case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }
                    if (t && _.label < t[2]) {
                      _.label = t[2];
                      _.ops.push(op);
                      break;
                    }
                    if (t[2])
                      _.ops.pop();
                    _.trys.pop();
                    continue;
                }
                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }
            if (op[0] & 5)
              throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
          }
        };
        __createBinding2 = function(o, m, k, k2) {
          if (k2 === void 0)
            k2 = k;
          o[k2] = m[k];
        };
        __exportStar2 = function(m, exports3) {
          for (var p in m)
            if (p !== "default" && !exports3.hasOwnProperty(p))
              exports3[p] = m[p];
        };
        __values3 = function(o) {
          var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
          if (m)
            return m.call(o);
          if (o && typeof o.length === "number")
            return {
              next: function() {
                if (o && i >= o.length)
                  o = void 0;
                return { value: o && o[i++], done: !o };
              }
            };
          throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
        };
        __read2 = function(o, n) {
          var m = typeof Symbol === "function" && o[Symbol.iterator];
          if (!m)
            return o;
          var i = m.call(o), r, ar = [], e;
          try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
              ar.push(r.value);
          } catch (error) {
            e = { error };
          } finally {
            try {
              if (r && !r.done && (m = i["return"]))
                m.call(i);
            } finally {
              if (e)
                throw e.error;
            }
          }
          return ar;
        };
        __spread2 = function() {
          for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read2(arguments[i]));
          return ar;
        };
        __spreadArrays2 = function() {
          for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
          for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
              r[k] = a[j];
          return r;
        };
        __await2 = function(v) {
          return this instanceof __await2 ? (this.v = v, this) : new __await2(v);
        };
        __asyncGenerator2 = function(thisArg, _arguments, generator) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var g = generator.apply(thisArg, _arguments || []), i, q = [];
          return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i;
          function verb(n) {
            if (g[n])
              i[n] = function(v) {
                return new Promise(function(a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v);
                });
              };
          }
          function resume(n, v) {
            try {
              step(g[n](v));
            } catch (e) {
              settle(q[0][3], e);
            }
          }
          function step(r) {
            r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
          }
          function fulfill(value) {
            resume("next", value);
          }
          function reject(value) {
            resume("throw", value);
          }
          function settle(f, v) {
            if (f(v), q.shift(), q.length)
              resume(q[0][0], q[0][1]);
          }
        };
        __asyncDelegator2 = function(o) {
          var i, p;
          return i = {}, verb("next"), verb("throw", function(e) {
            throw e;
          }), verb("return"), i[Symbol.iterator] = function() {
            return this;
          }, i;
          function verb(n, f) {
            i[n] = o[n] ? function(v) {
              return (p = !p) ? { value: __await2(o[n](v)), done: n === "return" } : f ? f(v) : v;
            } : f;
          }
        };
        __asyncValues3 = function(o) {
          if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
          var m = o[Symbol.asyncIterator], i;
          return m ? m.call(o) : (o = typeof __values3 === "function" ? __values3(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
            return this;
          }, i);
          function verb(n) {
            i[n] = o[n] && function(v) {
              return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
              });
            };
          }
          function settle(resolve, reject, d, v) {
            Promise.resolve(v).then(function(v2) {
              resolve({ value: v2, done: d });
            }, reject);
          }
        };
        __makeTemplateObject2 = function(cooked, raw) {
          if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
          } else {
            cooked.raw = raw;
          }
          return cooked;
        };
        __importStar2 = function(mod2) {
          if (mod2 && mod2.__esModule)
            return mod2;
          var result = {};
          if (mod2 != null) {
            for (var k in mod2)
              if (Object.hasOwnProperty.call(mod2, k))
                result[k] = mod2[k];
          }
          result["default"] = mod2;
          return result;
        };
        __importDefault2 = function(mod2) {
          return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
        };
        __classPrivateFieldGet2 = function(receiver, privateMap) {
          if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
          }
          return privateMap.get(receiver);
        };
        __classPrivateFieldSet2 = function(receiver, privateMap, value) {
          if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
          }
          privateMap.set(receiver, value);
          return value;
        };
        exporter("__extends", __extends3);
        exporter("__assign", __assign3);
        exporter("__rest", __rest2);
        exporter("__decorate", __decorate2);
        exporter("__param", __param2);
        exporter("__metadata", __metadata2);
        exporter("__awaiter", __awaiter3);
        exporter("__generator", __generator3);
        exporter("__exportStar", __exportStar2);
        exporter("__createBinding", __createBinding2);
        exporter("__values", __values3);
        exporter("__read", __read2);
        exporter("__spread", __spread2);
        exporter("__spreadArrays", __spreadArrays2);
        exporter("__await", __await2);
        exporter("__asyncGenerator", __asyncGenerator2);
        exporter("__asyncDelegator", __asyncDelegator2);
        exporter("__asyncValues", __asyncValues3);
        exporter("__makeTemplateObject", __makeTemplateObject2);
        exporter("__importStar", __importStar2);
        exporter("__importDefault", __importDefault2);
        exporter("__classPrivateFieldGet", __classPrivateFieldGet2);
        exporter("__classPrivateFieldSet", __classPrivateFieldSet2);
      });
    }
  });

  // node_modules/@protobufjs/aspromise/index.js
  var require_aspromise = __commonJS({
    "node_modules/@protobufjs/aspromise/index.js"(exports2, module2) {
      "use strict";
      module2.exports = asPromise;
      function asPromise(fn, ctx) {
        var params = new Array(arguments.length - 1), offset = 0, index = 2, pending = true;
        while (index < arguments.length)
          params[offset++] = arguments[index++];
        return new Promise(function executor(resolve, reject) {
          params[offset] = function callback(err) {
            if (pending) {
              pending = false;
              if (err)
                reject(err);
              else {
                var params2 = new Array(arguments.length - 1), offset2 = 0;
                while (offset2 < params2.length)
                  params2[offset2++] = arguments[offset2];
                resolve.apply(null, params2);
              }
            }
          };
          try {
            fn.apply(ctx || null, params);
          } catch (err) {
            if (pending) {
              pending = false;
              reject(err);
            }
          }
        });
      }
    }
  });

  // node_modules/@protobufjs/base64/index.js
  var require_base64 = __commonJS({
    "node_modules/@protobufjs/base64/index.js"(exports2) {
      "use strict";
      var base64 = exports2;
      base64.length = function length(string) {
        var p = string.length;
        if (!p)
          return 0;
        var n = 0;
        while (--p % 4 > 1 && string.charAt(p) === "=")
          ++n;
        return Math.ceil(string.length * 3) / 4 - n;
      };
      var b64 = new Array(64);
      var s64 = new Array(123);
      for (i = 0; i < 64; )
        s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;
      var i;
      base64.encode = function encode(buffer, start, end) {
        var parts = null, chunk = [];
        var i2 = 0, j = 0, t;
        while (start < end) {
          var b = buffer[start++];
          switch (j) {
            case 0:
              chunk[i2++] = b64[b >> 2];
              t = (b & 3) << 4;
              j = 1;
              break;
            case 1:
              chunk[i2++] = b64[t | b >> 4];
              t = (b & 15) << 2;
              j = 2;
              break;
            case 2:
              chunk[i2++] = b64[t | b >> 6];
              chunk[i2++] = b64[b & 63];
              j = 0;
              break;
          }
          if (i2 > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i2 = 0;
          }
        }
        if (j) {
          chunk[i2++] = b64[t];
          chunk[i2++] = 61;
          if (j === 1)
            chunk[i2++] = 61;
        }
        if (parts) {
          if (i2)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i2)));
          return parts.join("");
        }
        return String.fromCharCode.apply(String, chunk.slice(0, i2));
      };
      var invalidEncoding = "invalid encoding";
      base64.decode = function decode(string, buffer, offset) {
        var start = offset;
        var j = 0, t;
        for (var i2 = 0; i2 < string.length; ) {
          var c = string.charCodeAt(i2++);
          if (c === 61 && j > 1)
            break;
          if ((c = s64[c]) === void 0)
            throw Error(invalidEncoding);
          switch (j) {
            case 0:
              t = c;
              j = 1;
              break;
            case 1:
              buffer[offset++] = t << 2 | (c & 48) >> 4;
              t = c;
              j = 2;
              break;
            case 2:
              buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
              t = c;
              j = 3;
              break;
            case 3:
              buffer[offset++] = (t & 3) << 6 | c;
              j = 0;
              break;
          }
        }
        if (j === 1)
          throw Error(invalidEncoding);
        return offset - start;
      };
      base64.test = function test(string) {
        return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
      };
    }
  });

  // node_modules/@protobufjs/eventemitter/index.js
  var require_eventemitter = __commonJS({
    "node_modules/@protobufjs/eventemitter/index.js"(exports2, module2) {
      "use strict";
      module2.exports = EventEmitter2;
      function EventEmitter2() {
        this._listeners = {};
      }
      EventEmitter2.prototype.on = function on(evt, fn, ctx) {
        (this._listeners[evt] || (this._listeners[evt] = [])).push({
          fn,
          ctx: ctx || this
        });
        return this;
      };
      EventEmitter2.prototype.off = function off(evt, fn) {
        if (evt === void 0)
          this._listeners = {};
        else {
          if (fn === void 0)
            this._listeners[evt] = [];
          else {
            var listeners = this._listeners[evt];
            for (var i = 0; i < listeners.length; )
              if (listeners[i].fn === fn)
                listeners.splice(i, 1);
              else
                ++i;
          }
        }
        return this;
      };
      EventEmitter2.prototype.emit = function emit(evt) {
        var listeners = this._listeners[evt];
        if (listeners) {
          var args = [], i = 1;
          for (; i < arguments.length; )
            args.push(arguments[i++]);
          for (i = 0; i < listeners.length; )
            listeners[i].fn.apply(listeners[i++].ctx, args);
        }
        return this;
      };
    }
  });

  // node_modules/@protobufjs/float/index.js
  var require_float = __commonJS({
    "node_modules/@protobufjs/float/index.js"(exports2, module2) {
      "use strict";
      module2.exports = factory(factory);
      function factory(exports3) {
        if (typeof Float32Array !== "undefined")
          (function() {
            var f32 = new Float32Array([-0]), f8b = new Uint8Array(f32.buffer), le = f8b[3] === 128;
            function writeFloat_f32_cpy(val, buf, pos) {
              f32[0] = val;
              buf[pos] = f8b[0];
              buf[pos + 1] = f8b[1];
              buf[pos + 2] = f8b[2];
              buf[pos + 3] = f8b[3];
            }
            function writeFloat_f32_rev(val, buf, pos) {
              f32[0] = val;
              buf[pos] = f8b[3];
              buf[pos + 1] = f8b[2];
              buf[pos + 2] = f8b[1];
              buf[pos + 3] = f8b[0];
            }
            exports3.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
            exports3.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;
            function readFloat_f32_cpy(buf, pos) {
              f8b[0] = buf[pos];
              f8b[1] = buf[pos + 1];
              f8b[2] = buf[pos + 2];
              f8b[3] = buf[pos + 3];
              return f32[0];
            }
            function readFloat_f32_rev(buf, pos) {
              f8b[3] = buf[pos];
              f8b[2] = buf[pos + 1];
              f8b[1] = buf[pos + 2];
              f8b[0] = buf[pos + 3];
              return f32[0];
            }
            exports3.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
            exports3.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;
          })();
        else
          (function() {
            function writeFloat_ieee754(writeUint, val, buf, pos) {
              var sign = val < 0 ? 1 : 0;
              if (sign)
                val = -val;
              if (val === 0)
                writeUint(1 / val > 0 ? 0 : 2147483648, buf, pos);
              else if (isNaN(val))
                writeUint(2143289344, buf, pos);
              else if (val > 34028234663852886e22)
                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
              else if (val < 11754943508222875e-54)
                writeUint((sign << 31 | Math.round(val / 1401298464324817e-60)) >>> 0, buf, pos);
              else {
                var exponent = Math.floor(Math.log(val) / Math.LN2), mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
              }
            }
            exports3.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
            exports3.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);
            function readFloat_ieee754(readUint, buf, pos) {
              var uint = readUint(buf, pos), sign = (uint >> 31) * 2 + 1, exponent = uint >>> 23 & 255, mantissa = uint & 8388607;
              return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 1401298464324817e-60 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
            }
            exports3.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
            exports3.readFloatBE = readFloat_ieee754.bind(null, readUintBE);
          })();
        if (typeof Float64Array !== "undefined")
          (function() {
            var f64 = new Float64Array([-0]), f8b = new Uint8Array(f64.buffer), le = f8b[7] === 128;
            function writeDouble_f64_cpy(val, buf, pos) {
              f64[0] = val;
              buf[pos] = f8b[0];
              buf[pos + 1] = f8b[1];
              buf[pos + 2] = f8b[2];
              buf[pos + 3] = f8b[3];
              buf[pos + 4] = f8b[4];
              buf[pos + 5] = f8b[5];
              buf[pos + 6] = f8b[6];
              buf[pos + 7] = f8b[7];
            }
            function writeDouble_f64_rev(val, buf, pos) {
              f64[0] = val;
              buf[pos] = f8b[7];
              buf[pos + 1] = f8b[6];
              buf[pos + 2] = f8b[5];
              buf[pos + 3] = f8b[4];
              buf[pos + 4] = f8b[3];
              buf[pos + 5] = f8b[2];
              buf[pos + 6] = f8b[1];
              buf[pos + 7] = f8b[0];
            }
            exports3.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
            exports3.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;
            function readDouble_f64_cpy(buf, pos) {
              f8b[0] = buf[pos];
              f8b[1] = buf[pos + 1];
              f8b[2] = buf[pos + 2];
              f8b[3] = buf[pos + 3];
              f8b[4] = buf[pos + 4];
              f8b[5] = buf[pos + 5];
              f8b[6] = buf[pos + 6];
              f8b[7] = buf[pos + 7];
              return f64[0];
            }
            function readDouble_f64_rev(buf, pos) {
              f8b[7] = buf[pos];
              f8b[6] = buf[pos + 1];
              f8b[5] = buf[pos + 2];
              f8b[4] = buf[pos + 3];
              f8b[3] = buf[pos + 4];
              f8b[2] = buf[pos + 5];
              f8b[1] = buf[pos + 6];
              f8b[0] = buf[pos + 7];
              return f64[0];
            }
            exports3.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
            exports3.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;
          })();
        else
          (function() {
            function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
              var sign = val < 0 ? 1 : 0;
              if (sign)
                val = -val;
              if (val === 0) {
                writeUint(0, buf, pos + off0);
                writeUint(1 / val > 0 ? 0 : 2147483648, buf, pos + off1);
              } else if (isNaN(val)) {
                writeUint(0, buf, pos + off0);
                writeUint(2146959360, buf, pos + off1);
              } else if (val > 17976931348623157e292) {
                writeUint(0, buf, pos + off0);
                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
              } else {
                var mantissa;
                if (val < 22250738585072014e-324) {
                  mantissa = val / 5e-324;
                  writeUint(mantissa >>> 0, buf, pos + off0);
                  writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
                } else {
                  var exponent = Math.floor(Math.log(val) / Math.LN2);
                  if (exponent === 1024)
                    exponent = 1023;
                  mantissa = val * Math.pow(2, -exponent);
                  writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
                  writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
                }
              }
            }
            exports3.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
            exports3.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);
            function readDouble_ieee754(readUint, off0, off1, buf, pos) {
              var lo = readUint(buf, pos + off0), hi = readUint(buf, pos + off1);
              var sign = (hi >> 31) * 2 + 1, exponent = hi >>> 20 & 2047, mantissa = 4294967296 * (hi & 1048575) + lo;
              return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
            }
            exports3.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
            exports3.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);
          })();
        return exports3;
      }
      function writeUintLE(val, buf, pos) {
        buf[pos] = val & 255;
        buf[pos + 1] = val >>> 8 & 255;
        buf[pos + 2] = val >>> 16 & 255;
        buf[pos + 3] = val >>> 24;
      }
      function writeUintBE(val, buf, pos) {
        buf[pos] = val >>> 24;
        buf[pos + 1] = val >>> 16 & 255;
        buf[pos + 2] = val >>> 8 & 255;
        buf[pos + 3] = val & 255;
      }
      function readUintLE(buf, pos) {
        return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;
      }
      function readUintBE(buf, pos) {
        return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;
      }
    }
  });

  // node_modules/@protobufjs/inquire/index.js
  var require_inquire = __commonJS({
    "node_modules/@protobufjs/inquire/index.js"(exports, module) {
      "use strict";
      module.exports = inquire;
      function inquire(moduleName) {
        try {
          var mod = eval("quire".replace(/^/, "re"))(moduleName);
          if (mod && (mod.length || Object.keys(mod).length))
            return mod;
        } catch (e) {
        }
        return null;
      }
    }
  });

  // node_modules/@protobufjs/utf8/index.js
  var require_utf8 = __commonJS({
    "node_modules/@protobufjs/utf8/index.js"(exports2) {
      "use strict";
      var utf8 = exports2;
      utf8.length = function utf8_length(string) {
        var len = 0, c = 0;
        for (var i = 0; i < string.length; ++i) {
          c = string.charCodeAt(i);
          if (c < 128)
            len += 1;
          else if (c < 2048)
            len += 2;
          else if ((c & 64512) === 55296 && (string.charCodeAt(i + 1) & 64512) === 56320) {
            ++i;
            len += 4;
          } else
            len += 3;
        }
        return len;
      };
      utf8.read = function utf8_read(buffer, start, end) {
        var len = end - start;
        if (len < 1)
          return "";
        var parts = null, chunk = [], i = 0, t;
        while (start < end) {
          t = buffer[start++];
          if (t < 128)
            chunk[i++] = t;
          else if (t > 191 && t < 224)
            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
          else if (t > 239 && t < 365) {
            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 65536;
            chunk[i++] = 55296 + (t >> 10);
            chunk[i++] = 56320 + (t & 1023);
          } else
            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
          if (i > 8191) {
            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
            i = 0;
          }
        }
        if (parts) {
          if (i)
            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
          return parts.join("");
        }
        return String.fromCharCode.apply(String, chunk.slice(0, i));
      };
      utf8.write = function utf8_write(string, buffer, offset) {
        var start = offset, c1, c2;
        for (var i = 0; i < string.length; ++i) {
          c1 = string.charCodeAt(i);
          if (c1 < 128) {
            buffer[offset++] = c1;
          } else if (c1 < 2048) {
            buffer[offset++] = c1 >> 6 | 192;
            buffer[offset++] = c1 & 63 | 128;
          } else if ((c1 & 64512) === 55296 && ((c2 = string.charCodeAt(i + 1)) & 64512) === 56320) {
            c1 = 65536 + ((c1 & 1023) << 10) + (c2 & 1023);
            ++i;
            buffer[offset++] = c1 >> 18 | 240;
            buffer[offset++] = c1 >> 12 & 63 | 128;
            buffer[offset++] = c1 >> 6 & 63 | 128;
            buffer[offset++] = c1 & 63 | 128;
          } else {
            buffer[offset++] = c1 >> 12 | 224;
            buffer[offset++] = c1 >> 6 & 63 | 128;
            buffer[offset++] = c1 & 63 | 128;
          }
        }
        return offset - start;
      };
    }
  });

  // node_modules/@protobufjs/pool/index.js
  var require_pool = __commonJS({
    "node_modules/@protobufjs/pool/index.js"(exports2, module2) {
      "use strict";
      module2.exports = pool;
      function pool(alloc, slice, size) {
        var SIZE = size || 8192;
        var MAX = SIZE >>> 1;
        var slab = null;
        var offset = SIZE;
        return function pool_alloc(size2) {
          if (size2 < 1 || size2 > MAX)
            return alloc(size2);
          if (offset + size2 > SIZE) {
            slab = alloc(SIZE);
            offset = 0;
          }
          var buf = slice.call(slab, offset, offset += size2);
          if (offset & 7)
            offset = (offset | 7) + 1;
          return buf;
        };
      }
    }
  });

  // node_modules/protobufjs/src/util/longbits.js
  var require_longbits = __commonJS({
    "node_modules/protobufjs/src/util/longbits.js"(exports2, module2) {
      "use strict";
      module2.exports = LongBits;
      var util = require_minimal();
      function LongBits(lo, hi) {
        this.lo = lo >>> 0;
        this.hi = hi >>> 0;
      }
      var zero = LongBits.zero = new LongBits(0, 0);
      zero.toNumber = function() {
        return 0;
      };
      zero.zzEncode = zero.zzDecode = function() {
        return this;
      };
      zero.length = function() {
        return 1;
      };
      var zeroHash = LongBits.zeroHash = "\0\0\0\0\0\0\0\0";
      LongBits.fromNumber = function fromNumber(value) {
        if (value === 0)
          return zero;
        var sign = value < 0;
        if (sign)
          value = -value;
        var lo = value >>> 0, hi = (value - lo) / 4294967296 >>> 0;
        if (sign) {
          hi = ~hi >>> 0;
          lo = ~lo >>> 0;
          if (++lo > 4294967295) {
            lo = 0;
            if (++hi > 4294967295)
              hi = 0;
          }
        }
        return new LongBits(lo, hi);
      };
      LongBits.from = function from(value) {
        if (typeof value === "number")
          return LongBits.fromNumber(value);
        if (util.isString(value)) {
          if (util.Long)
            value = util.Long.fromString(value);
          else
            return LongBits.fromNumber(parseInt(value, 10));
        }
        return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;
      };
      LongBits.prototype.toNumber = function toNumber(unsigned) {
        if (!unsigned && this.hi >>> 31) {
          var lo = ~this.lo + 1 >>> 0, hi = ~this.hi >>> 0;
          if (!lo)
            hi = hi + 1 >>> 0;
          return -(lo + hi * 4294967296);
        }
        return this.lo + this.hi * 4294967296;
      };
      LongBits.prototype.toLong = function toLong(unsigned) {
        return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned)) : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
      };
      var charCodeAt = String.prototype.charCodeAt;
      LongBits.fromHash = function fromHash(hash) {
        if (hash === zeroHash)
          return zero;
        return new LongBits(
          (charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0,
          (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0
        );
      };
      LongBits.prototype.toHash = function toHash() {
        return String.fromCharCode(
          this.lo & 255,
          this.lo >>> 8 & 255,
          this.lo >>> 16 & 255,
          this.lo >>> 24,
          this.hi & 255,
          this.hi >>> 8 & 255,
          this.hi >>> 16 & 255,
          this.hi >>> 24
        );
      };
      LongBits.prototype.zzEncode = function zzEncode() {
        var mask = this.hi >> 31;
        this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
        this.lo = (this.lo << 1 ^ mask) >>> 0;
        return this;
      };
      LongBits.prototype.zzDecode = function zzDecode() {
        var mask = -(this.lo & 1);
        this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
        this.hi = (this.hi >>> 1 ^ mask) >>> 0;
        return this;
      };
      LongBits.prototype.length = function length() {
        var part0 = this.lo, part1 = (this.lo >>> 28 | this.hi << 4) >>> 0, part2 = this.hi >>> 24;
        return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
      };
    }
  });

  // node_modules/protobufjs/src/util/minimal.js
  var require_minimal = __commonJS({
    "node_modules/protobufjs/src/util/minimal.js"(exports2) {
      "use strict";
      var util = exports2;
      util.asPromise = require_aspromise();
      util.base64 = require_base64();
      util.EventEmitter = require_eventemitter();
      util.float = require_float();
      util.inquire = require_inquire();
      util.utf8 = require_utf8();
      util.pool = require_pool();
      util.LongBits = require_longbits();
      util.isNode = Boolean(typeof global !== "undefined" && global && global.process && global.process.versions && global.process.versions.node);
      util.global = util.isNode && global || typeof window !== "undefined" && window || typeof self !== "undefined" && self || exports2;
      util.emptyArray = Object.freeze ? Object.freeze([]) : [];
      util.emptyObject = Object.freeze ? Object.freeze({}) : {};
      util.isInteger = Number.isInteger || function isInteger(value) {
        return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
      };
      util.isString = function isString(value) {
        return typeof value === "string" || value instanceof String;
      };
      util.isObject = function isObject(value) {
        return value && typeof value === "object";
      };
      util.isset = util.isSet = function isSet(obj, prop) {
        var value = obj[prop];
        if (value != null && obj.hasOwnProperty(prop))
          return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
        return false;
      };
      util.Buffer = function() {
        try {
          var Buffer2 = util.inquire("buffer").Buffer;
          return Buffer2.prototype.utf8Write ? Buffer2 : null;
        } catch (e) {
          return null;
        }
      }();
      util._Buffer_from = null;
      util._Buffer_allocUnsafe = null;
      util.newBuffer = function newBuffer(sizeOrArray) {
        return typeof sizeOrArray === "number" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === "undefined" ? sizeOrArray : new Uint8Array(sizeOrArray);
      };
      util.Array = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      util.Long = util.global.dcodeIO && util.global.dcodeIO.Long || util.global.Long || util.inquire("long");
      util.key2Re = /^true|false|0|1$/;
      util.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
      util.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
      util.longToHash = function longToHash(value) {
        return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;
      };
      util.longFromHash = function longFromHash(hash, unsigned) {
        var bits = util.LongBits.fromHash(hash);
        if (util.Long)
          return util.Long.fromBits(bits.lo, bits.hi, unsigned);
        return bits.toNumber(Boolean(unsigned));
      };
      function merge(dst, src, ifNotSet) {
        for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)
          if (dst[keys[i]] === void 0 || !ifNotSet)
            dst[keys[i]] = src[keys[i]];
        return dst;
      }
      util.merge = merge;
      util.lcFirst = function lcFirst(str) {
        return str.charAt(0).toLowerCase() + str.substring(1);
      };
      function newError(name) {
        function CustomError(message, properties) {
          if (!(this instanceof CustomError))
            return new CustomError(message, properties);
          Object.defineProperty(this, "message", { get: function() {
            return message;
          } });
          if (Error.captureStackTrace)
            Error.captureStackTrace(this, CustomError);
          else
            Object.defineProperty(this, "stack", { value: new Error().stack || "" });
          if (properties)
            merge(this, properties);
        }
        CustomError.prototype = Object.create(Error.prototype, {
          constructor: {
            value: CustomError,
            writable: true,
            enumerable: false,
            configurable: true
          },
          name: {
            get: function get() {
              return name;
            },
            set: void 0,
            enumerable: false,
            configurable: true
          },
          toString: {
            value: function value() {
              return this.name + ": " + this.message;
            },
            writable: true,
            enumerable: false,
            configurable: true
          }
        });
        return CustomError;
      }
      util.newError = newError;
      util.ProtocolError = newError("ProtocolError");
      util.oneOfGetter = function getOneOf(fieldNames) {
        var fieldMap = {};
        for (var i = 0; i < fieldNames.length; ++i)
          fieldMap[fieldNames[i]] = 1;
        return function() {
          for (var keys = Object.keys(this), i2 = keys.length - 1; i2 > -1; --i2)
            if (fieldMap[keys[i2]] === 1 && this[keys[i2]] !== void 0 && this[keys[i2]] !== null)
              return keys[i2];
        };
      };
      util.oneOfSetter = function setOneOf(fieldNames) {
        return function(name) {
          for (var i = 0; i < fieldNames.length; ++i)
            if (fieldNames[i] !== name)
              delete this[fieldNames[i]];
        };
      };
      util.toJSONOptions = {
        longs: String,
        enums: String,
        bytes: String,
        json: true
      };
      util._configure = function() {
        var Buffer2 = util.Buffer;
        if (!Buffer2) {
          util._Buffer_from = util._Buffer_allocUnsafe = null;
          return;
        }
        util._Buffer_from = Buffer2.from !== Uint8Array.from && Buffer2.from || function Buffer_from(value, encoding) {
          return new Buffer2(value, encoding);
        };
        util._Buffer_allocUnsafe = Buffer2.allocUnsafe || function Buffer_allocUnsafe(size) {
          return new Buffer2(size);
        };
      };
    }
  });

  // node_modules/protobufjs/src/writer.js
  var require_writer = __commonJS({
    "node_modules/protobufjs/src/writer.js"(exports2, module2) {
      "use strict";
      module2.exports = Writer;
      var util = require_minimal();
      var BufferWriter;
      var LongBits = util.LongBits;
      var base64 = util.base64;
      var utf8 = util.utf8;
      function Op(fn, len, val) {
        this.fn = fn;
        this.len = len;
        this.next = void 0;
        this.val = val;
      }
      function noop() {
      }
      function State(writer) {
        this.head = writer.head;
        this.tail = writer.tail;
        this.len = writer.len;
        this.next = writer.states;
      }
      function Writer() {
        this.len = 0;
        this.head = new Op(noop, 0, 0);
        this.tail = this.head;
        this.states = null;
      }
      var create = function create2() {
        return util.Buffer ? function create_buffer_setup() {
          return (Writer.create = function create_buffer() {
            return new BufferWriter();
          })();
        } : function create_array() {
          return new Writer();
        };
      };
      Writer.create = create();
      Writer.alloc = function alloc(size) {
        return new util.Array(size);
      };
      if (util.Array !== Array)
        Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);
      Writer.prototype._push = function push(fn, len, val) {
        this.tail = this.tail.next = new Op(fn, len, val);
        this.len += len;
        return this;
      };
      function writeByte(val, buf, pos) {
        buf[pos] = val & 255;
      }
      function writeVarint32(val, buf, pos) {
        while (val > 127) {
          buf[pos++] = val & 127 | 128;
          val >>>= 7;
        }
        buf[pos] = val;
      }
      function VarintOp(len, val) {
        this.len = len;
        this.next = void 0;
        this.val = val;
      }
      VarintOp.prototype = Object.create(Op.prototype);
      VarintOp.prototype.fn = writeVarint32;
      Writer.prototype.uint32 = function write_uint32(value) {
        this.len += (this.tail = this.tail.next = new VarintOp(
          (value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5,
          value
        )).len;
        return this;
      };
      Writer.prototype.int32 = function write_int32(value) {
        return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) : this.uint32(value);
      };
      Writer.prototype.sint32 = function write_sint32(value) {
        return this.uint32((value << 1 ^ value >> 31) >>> 0);
      };
      function writeVarint64(val, buf, pos) {
        while (val.hi) {
          buf[pos++] = val.lo & 127 | 128;
          val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
          val.hi >>>= 7;
        }
        while (val.lo > 127) {
          buf[pos++] = val.lo & 127 | 128;
          val.lo = val.lo >>> 7;
        }
        buf[pos++] = val.lo;
      }
      Writer.prototype.uint64 = function write_uint64(value) {
        var bits = LongBits.from(value);
        return this._push(writeVarint64, bits.length(), bits);
      };
      Writer.prototype.int64 = Writer.prototype.uint64;
      Writer.prototype.sint64 = function write_sint64(value) {
        var bits = LongBits.from(value).zzEncode();
        return this._push(writeVarint64, bits.length(), bits);
      };
      Writer.prototype.bool = function write_bool(value) {
        return this._push(writeByte, 1, value ? 1 : 0);
      };
      function writeFixed32(val, buf, pos) {
        buf[pos] = val & 255;
        buf[pos + 1] = val >>> 8 & 255;
        buf[pos + 2] = val >>> 16 & 255;
        buf[pos + 3] = val >>> 24;
      }
      Writer.prototype.fixed32 = function write_fixed32(value) {
        return this._push(writeFixed32, 4, value >>> 0);
      };
      Writer.prototype.sfixed32 = Writer.prototype.fixed32;
      Writer.prototype.fixed64 = function write_fixed64(value) {
        var bits = LongBits.from(value);
        return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
      };
      Writer.prototype.sfixed64 = Writer.prototype.fixed64;
      Writer.prototype.float = function write_float(value) {
        return this._push(util.float.writeFloatLE, 4, value);
      };
      Writer.prototype.double = function write_double(value) {
        return this._push(util.float.writeDoubleLE, 8, value);
      };
      var writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {
        buf.set(val, pos);
      } : function writeBytes_for(val, buf, pos) {
        for (var i = 0; i < val.length; ++i)
          buf[pos + i] = val[i];
      };
      Writer.prototype.bytes = function write_bytes(value) {
        var len = value.length >>> 0;
        if (!len)
          return this._push(writeByte, 1, 0);
        if (util.isString(value)) {
          var buf = Writer.alloc(len = base64.length(value));
          base64.decode(value, buf, 0);
          value = buf;
        }
        return this.uint32(len)._push(writeBytes, len, value);
      };
      Writer.prototype.string = function write_string(value) {
        var len = utf8.length(value);
        return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);
      };
      Writer.prototype.fork = function fork() {
        this.states = new State(this);
        this.head = this.tail = new Op(noop, 0, 0);
        this.len = 0;
        return this;
      };
      Writer.prototype.reset = function reset() {
        if (this.states) {
          this.head = this.states.head;
          this.tail = this.states.tail;
          this.len = this.states.len;
          this.states = this.states.next;
        } else {
          this.head = this.tail = new Op(noop, 0, 0);
          this.len = 0;
        }
        return this;
      };
      Writer.prototype.ldelim = function ldelim() {
        var head = this.head, tail = this.tail, len = this.len;
        this.reset().uint32(len);
        if (len) {
          this.tail.next = head.next;
          this.tail = tail;
          this.len += len;
        }
        return this;
      };
      Writer.prototype.finish = function finish() {
        var head = this.head.next, buf = this.constructor.alloc(this.len), pos = 0;
        while (head) {
          head.fn(head.val, buf, pos);
          pos += head.len;
          head = head.next;
        }
        return buf;
      };
      Writer._configure = function(BufferWriter_) {
        BufferWriter = BufferWriter_;
        Writer.create = create();
        BufferWriter._configure();
      };
    }
  });

  // node_modules/protobufjs/src/writer_buffer.js
  var require_writer_buffer = __commonJS({
    "node_modules/protobufjs/src/writer_buffer.js"(exports2, module2) {
      "use strict";
      module2.exports = BufferWriter;
      var Writer = require_writer();
      (BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;
      var util = require_minimal();
      function BufferWriter() {
        Writer.call(this);
      }
      BufferWriter._configure = function() {
        BufferWriter.alloc = util._Buffer_allocUnsafe;
        BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === "set" ? function writeBytesBuffer_set(val, buf, pos) {
          buf.set(val, pos);
        } : function writeBytesBuffer_copy(val, buf, pos) {
          if (val.copy)
            val.copy(buf, pos, 0, val.length);
          else
            for (var i = 0; i < val.length; )
              buf[pos++] = val[i++];
        };
      };
      BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
        if (util.isString(value))
          value = util._Buffer_from(value, "base64");
        var len = value.length >>> 0;
        this.uint32(len);
        if (len)
          this._push(BufferWriter.writeBytesBuffer, len, value);
        return this;
      };
      function writeStringBuffer(val, buf, pos) {
        if (val.length < 40)
          util.utf8.write(val, buf, pos);
        else if (buf.utf8Write)
          buf.utf8Write(val, pos);
        else
          buf.write(val, pos);
      }
      BufferWriter.prototype.string = function write_string_buffer(value) {
        var len = util.Buffer.byteLength(value);
        this.uint32(len);
        if (len)
          this._push(writeStringBuffer, len, value);
        return this;
      };
      BufferWriter._configure();
    }
  });

  // node_modules/protobufjs/src/reader.js
  var require_reader = __commonJS({
    "node_modules/protobufjs/src/reader.js"(exports2, module2) {
      "use strict";
      module2.exports = Reader;
      var util = require_minimal();
      var BufferReader;
      var LongBits = util.LongBits;
      var utf8 = util.utf8;
      function indexOutOfRange(reader, writeLength) {
        return RangeError("index out of range: " + reader.pos + " + " + (writeLength || 1) + " > " + reader.len);
      }
      function Reader(buffer) {
        this.buf = buffer;
        this.pos = 0;
        this.len = buffer.length;
      }
      var create_array = typeof Uint8Array !== "undefined" ? function create_typed_array(buffer) {
        if (buffer instanceof Uint8Array || Array.isArray(buffer))
          return new Reader(buffer);
        throw Error("illegal buffer");
      } : function create_array2(buffer) {
        if (Array.isArray(buffer))
          return new Reader(buffer);
        throw Error("illegal buffer");
      };
      var create = function create2() {
        return util.Buffer ? function create_buffer_setup(buffer) {
          return (Reader.create = function create_buffer(buffer2) {
            return util.Buffer.isBuffer(buffer2) ? new BufferReader(buffer2) : create_array(buffer2);
          })(buffer);
        } : create_array;
      };
      Reader.create = create();
      Reader.prototype._slice = util.Array.prototype.subarray || util.Array.prototype.slice;
      Reader.prototype.uint32 = function read_uint32_setup() {
        var value = 4294967295;
        return function read_uint32() {
          value = (this.buf[this.pos] & 127) >>> 0;
          if (this.buf[this.pos++] < 128)
            return value;
          value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;
          if (this.buf[this.pos++] < 128)
            return value;
          value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;
          if (this.buf[this.pos++] < 128)
            return value;
          value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;
          if (this.buf[this.pos++] < 128)
            return value;
          value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;
          if (this.buf[this.pos++] < 128)
            return value;
          if ((this.pos += 5) > this.len) {
            this.pos = this.len;
            throw indexOutOfRange(this, 10);
          }
          return value;
        };
      }();
      Reader.prototype.int32 = function read_int32() {
        return this.uint32() | 0;
      };
      Reader.prototype.sint32 = function read_sint32() {
        var value = this.uint32();
        return value >>> 1 ^ -(value & 1) | 0;
      };
      function readLongVarint() {
        var bits = new LongBits(0, 0);
        var i = 0;
        if (this.len - this.pos > 4) {
          for (; i < 4; ++i) {
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
              return bits;
          }
          bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
          bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;
          if (this.buf[this.pos++] < 128)
            return bits;
          i = 0;
        } else {
          for (; i < 3; ++i) {
            if (this.pos >= this.len)
              throw indexOutOfRange(this);
            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
            if (this.buf[this.pos++] < 128)
              return bits;
          }
          bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
          return bits;
        }
        if (this.len - this.pos > 4) {
          for (; i < 5; ++i) {
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
              return bits;
          }
        } else {
          for (; i < 5; ++i) {
            if (this.pos >= this.len)
              throw indexOutOfRange(this);
            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
            if (this.buf[this.pos++] < 128)
              return bits;
          }
        }
        throw Error("invalid varint encoding");
      }
      Reader.prototype.bool = function read_bool() {
        return this.uint32() !== 0;
      };
      function readFixed32_end(buf, end) {
        return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;
      }
      Reader.prototype.fixed32 = function read_fixed32() {
        if (this.pos + 4 > this.len)
          throw indexOutOfRange(this, 4);
        return readFixed32_end(this.buf, this.pos += 4);
      };
      Reader.prototype.sfixed32 = function read_sfixed32() {
        if (this.pos + 4 > this.len)
          throw indexOutOfRange(this, 4);
        return readFixed32_end(this.buf, this.pos += 4) | 0;
      };
      function readFixed64() {
        if (this.pos + 8 > this.len)
          throw indexOutOfRange(this, 8);
        return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
      }
      Reader.prototype.float = function read_float() {
        if (this.pos + 4 > this.len)
          throw indexOutOfRange(this, 4);
        var value = util.float.readFloatLE(this.buf, this.pos);
        this.pos += 4;
        return value;
      };
      Reader.prototype.double = function read_double() {
        if (this.pos + 8 > this.len)
          throw indexOutOfRange(this, 4);
        var value = util.float.readDoubleLE(this.buf, this.pos);
        this.pos += 8;
        return value;
      };
      Reader.prototype.bytes = function read_bytes() {
        var length = this.uint32(), start = this.pos, end = this.pos + length;
        if (end > this.len)
          throw indexOutOfRange(this, length);
        this.pos += length;
        if (Array.isArray(this.buf))
          return this.buf.slice(start, end);
        return start === end ? new this.buf.constructor(0) : this._slice.call(this.buf, start, end);
      };
      Reader.prototype.string = function read_string() {
        var bytes = this.bytes();
        return utf8.read(bytes, 0, bytes.length);
      };
      Reader.prototype.skip = function skip(length) {
        if (typeof length === "number") {
          if (this.pos + length > this.len)
            throw indexOutOfRange(this, length);
          this.pos += length;
        } else {
          do {
            if (this.pos >= this.len)
              throw indexOutOfRange(this);
          } while (this.buf[this.pos++] & 128);
        }
        return this;
      };
      Reader.prototype.skipType = function(wireType) {
        switch (wireType) {
          case 0:
            this.skip();
            break;
          case 1:
            this.skip(8);
            break;
          case 2:
            this.skip(this.uint32());
            break;
          case 3:
            while ((wireType = this.uint32() & 7) !== 4) {
              this.skipType(wireType);
            }
            break;
          case 5:
            this.skip(4);
            break;
          default:
            throw Error("invalid wire type " + wireType + " at offset " + this.pos);
        }
        return this;
      };
      Reader._configure = function(BufferReader_) {
        BufferReader = BufferReader_;
        Reader.create = create();
        BufferReader._configure();
        var fn = util.Long ? "toLong" : "toNumber";
        util.merge(Reader.prototype, {
          int64: function read_int64() {
            return readLongVarint.call(this)[fn](false);
          },
          uint64: function read_uint64() {
            return readLongVarint.call(this)[fn](true);
          },
          sint64: function read_sint64() {
            return readLongVarint.call(this).zzDecode()[fn](false);
          },
          fixed64: function read_fixed64() {
            return readFixed64.call(this)[fn](true);
          },
          sfixed64: function read_sfixed64() {
            return readFixed64.call(this)[fn](false);
          }
        });
      };
    }
  });

  // node_modules/protobufjs/src/reader_buffer.js
  var require_reader_buffer = __commonJS({
    "node_modules/protobufjs/src/reader_buffer.js"(exports2, module2) {
      "use strict";
      module2.exports = BufferReader;
      var Reader = require_reader();
      (BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;
      var util = require_minimal();
      function BufferReader(buffer) {
        Reader.call(this, buffer);
      }
      BufferReader._configure = function() {
        if (util.Buffer)
          BufferReader.prototype._slice = util.Buffer.prototype.slice;
      };
      BufferReader.prototype.string = function read_string_buffer() {
        var len = this.uint32();
        return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
      };
      BufferReader._configure();
    }
  });

  // node_modules/protobufjs/src/rpc/service.js
  var require_service = __commonJS({
    "node_modules/protobufjs/src/rpc/service.js"(exports2, module2) {
      "use strict";
      module2.exports = Service;
      var util = require_minimal();
      (Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;
      function Service(rpcImpl, requestDelimited, responseDelimited) {
        if (typeof rpcImpl !== "function")
          throw TypeError("rpcImpl must be a function");
        util.EventEmitter.call(this);
        this.rpcImpl = rpcImpl;
        this.requestDelimited = Boolean(requestDelimited);
        this.responseDelimited = Boolean(responseDelimited);
      }
      Service.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {
        if (!request)
          throw TypeError("request must be specified");
        var self2 = this;
        if (!callback)
          return util.asPromise(rpcCall, self2, method, requestCtor, responseCtor, request);
        if (!self2.rpcImpl) {
          setTimeout(function() {
            callback(Error("already ended"));
          }, 0);
          return void 0;
        }
        try {
          return self2.rpcImpl(
            method,
            requestCtor[self2.requestDelimited ? "encodeDelimited" : "encode"](request).finish(),
            function rpcCallback(err, response) {
              if (err) {
                self2.emit("error", err, method);
                return callback(err);
              }
              if (response === null) {
                self2.end(true);
                return void 0;
              }
              if (!(response instanceof responseCtor)) {
                try {
                  response = responseCtor[self2.responseDelimited ? "decodeDelimited" : "decode"](response);
                } catch (err2) {
                  self2.emit("error", err2, method);
                  return callback(err2);
                }
              }
              self2.emit("data", response, method);
              return callback(null, response);
            }
          );
        } catch (err) {
          self2.emit("error", err, method);
          setTimeout(function() {
            callback(err);
          }, 0);
          return void 0;
        }
      };
      Service.prototype.end = function end(endedByRPC) {
        if (this.rpcImpl) {
          if (!endedByRPC)
            this.rpcImpl(null, null, null);
          this.rpcImpl = null;
          this.emit("end").off();
        }
        return this;
      };
    }
  });

  // node_modules/protobufjs/src/rpc.js
  var require_rpc = __commonJS({
    "node_modules/protobufjs/src/rpc.js"(exports2) {
      "use strict";
      var rpc = exports2;
      rpc.Service = require_service();
    }
  });

  // node_modules/protobufjs/src/roots.js
  var require_roots = __commonJS({
    "node_modules/protobufjs/src/roots.js"(exports2, module2) {
      "use strict";
      module2.exports = {};
    }
  });

  // node_modules/protobufjs/src/index-minimal.js
  var require_index_minimal = __commonJS({
    "node_modules/protobufjs/src/index-minimal.js"(exports2) {
      "use strict";
      var protobuf = exports2;
      protobuf.build = "minimal";
      protobuf.Writer = require_writer();
      protobuf.BufferWriter = require_writer_buffer();
      protobuf.Reader = require_reader();
      protobuf.BufferReader = require_reader_buffer();
      protobuf.util = require_minimal();
      protobuf.rpc = require_rpc();
      protobuf.roots = require_roots();
      protobuf.configure = configure;
      function configure() {
        protobuf.util._configure();
        protobuf.Writer._configure(protobuf.BufferWriter);
        protobuf.Reader._configure(protobuf.BufferReader);
      }
      configure();
    }
  });

  // node_modules/protobufjs/minimal.js
  var require_minimal2 = __commonJS({
    "node_modules/protobufjs/minimal.js"(exports2, module2) {
      "use strict";
      module2.exports = require_index_minimal();
    }
  });

  // src/background/nativeApp/proto/LocalServerProto.js
  var require_LocalServerProto = __commonJS({
    "src/background/nativeApp/proto/LocalServerProto.js"(exports2, module2) {
      "use strict";
      var $protobuf = require_minimal2();
      var $Reader = $protobuf.Reader;
      var $Writer = $protobuf.Writer;
      var $util = $protobuf.util;
      var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
      $root.BrowserType = function() {
        var valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "INVALID"] = 0;
        values[valuesById[1] = "IE"] = 1;
        values[valuesById[2] = "FIREFOX"] = 2;
        values[valuesById[3] = "CHROME"] = 3;
        values[valuesById[4] = "OPERA"] = 4;
        values[valuesById[5] = "SAFARI"] = 5;
        values[valuesById[6] = "EDGE"] = 6;
        values[valuesById[7] = "CHROMIUMEDGE"] = 7;
        return values;
      }();
      $root.GetInfoRequest = function() {
        function GetInfoRequest2(properties) {
          if (properties) {
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
              if (properties[keys[i]] != null)
                this[keys[i]] = properties[keys[i]];
          }
        }
        GetInfoRequest2.prototype.clientVersion = "";
        GetInfoRequest2.prototype.browser = 0;
        GetInfoRequest2.create = function create(properties) {
          return new GetInfoRequest2(properties);
        };
        GetInfoRequest2.encode = function encode(message, writer) {
          if (!writer)
            writer = $Writer.create();
          if (message.clientVersion != null && Object.hasOwnProperty.call(message, "clientVersion"))
            writer.uint32(10).string(message.clientVersion);
          if (message.browser != null && Object.hasOwnProperty.call(message, "browser"))
            writer.uint32(16).int32(message.browser);
          return writer;
        };
        GetInfoRequest2.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        GetInfoRequest2.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
          var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.GetInfoRequest();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.clientVersion = reader.string();
                break;
              case 2:
                message.browser = reader.int32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        GetInfoRequest2.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        GetInfoRequest2.verify = function verify(message) {
          if (typeof message !== "object" || message === null)
            return "object expected";
          if (message.clientVersion != null && message.hasOwnProperty("clientVersion")) {
            if (!$util.isString(message.clientVersion))
              return "clientVersion: string expected";
          }
          if (message.browser != null && message.hasOwnProperty("browser"))
            switch (message.browser) {
              default:
                return "browser: enum value expected";
              case 0:
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
                break;
            }
          return null;
        };
        GetInfoRequest2.fromObject = function fromObject(object) {
          if (object instanceof $root.GetInfoRequest)
            return object;
          var message = new $root.GetInfoRequest();
          if (object.clientVersion != null)
            message.clientVersion = String(object.clientVersion);
          switch (object.browser) {
            case "INVALID":
            case 0:
              message.browser = 0;
              break;
            case "IE":
            case 1:
              message.browser = 1;
              break;
            case "FIREFOX":
            case 2:
              message.browser = 2;
              break;
            case "CHROME":
            case 3:
              message.browser = 3;
              break;
            case "OPERA":
            case 4:
              message.browser = 4;
              break;
            case "SAFARI":
            case 5:
              message.browser = 5;
              break;
            case "EDGE":
            case 6:
              message.browser = 6;
              break;
            case "CHROMIUMEDGE":
            case 7:
              message.browser = 7;
              break;
          }
          return message;
        };
        GetInfoRequest2.toObject = function toObject(message, options) {
          if (!options)
            options = {};
          var object = {};
          if (options.defaults) {
            object.clientVersion = "";
            object.browser = options.enums === String ? "INVALID" : 0;
          }
          if (message.clientVersion != null && message.hasOwnProperty("clientVersion"))
            object.clientVersion = message.clientVersion;
          if (message.browser != null && message.hasOwnProperty("browser"))
            object.browser = options.enums === String ? $root.BrowserType[message.browser] : message.browser;
          return object;
        };
        GetInfoRequest2.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        GetInfoRequest2.getTypeUrl = function getTypeUrl() {
          return "type.googleapis.com/GetInfoRequest";
        };
        return GetInfoRequest2;
      }();
      $root.GetInfoResponse = function() {
        function GetInfoResponse2(properties) {
          if (properties) {
            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
              if (properties[keys[i]] != null)
                this[keys[i]] = properties[keys[i]];
          }
        }
        GetInfoResponse2.prototype.brand = "";
        GetInfoResponse2.prototype.product = "";
        GetInfoResponse2.prototype.productVersion = "";
        GetInfoResponse2.prototype.guid = "";
        GetInfoResponse2.prototype.hwid = "";
        GetInfoResponse2.create = function create(properties) {
          return new GetInfoResponse2(properties);
        };
        GetInfoResponse2.encode = function encode(message, writer) {
          if (!writer)
            writer = $Writer.create();
          if (message.brand != null && Object.hasOwnProperty.call(message, "brand"))
            writer.uint32(10).string(message.brand);
          if (message.product != null && Object.hasOwnProperty.call(message, "product"))
            writer.uint32(18).string(message.product);
          if (message.productVersion != null && Object.hasOwnProperty.call(message, "productVersion"))
            writer.uint32(26).string(message.productVersion);
          if (message.guid != null && Object.hasOwnProperty.call(message, "guid"))
            writer.uint32(34).string(message.guid);
          if (message.hwid != null && Object.hasOwnProperty.call(message, "hwid"))
            writer.uint32(42).string(message.hwid);
          return writer;
        };
        GetInfoResponse2.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        GetInfoResponse2.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
          var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.GetInfoResponse();
          while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.brand = reader.string();
                break;
              case 2:
                message.product = reader.string();
                break;
              case 3:
                message.productVersion = reader.string();
                break;
              case 4:
                message.guid = reader.string();
                break;
              case 5:
                message.hwid = reader.string();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        GetInfoResponse2.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        GetInfoResponse2.verify = function verify(message) {
          if (typeof message !== "object" || message === null)
            return "object expected";
          if (message.brand != null && message.hasOwnProperty("brand")) {
            if (!$util.isString(message.brand))
              return "brand: string expected";
          }
          if (message.product != null && message.hasOwnProperty("product")) {
            if (!$util.isString(message.product))
              return "product: string expected";
          }
          if (message.productVersion != null && message.hasOwnProperty("productVersion")) {
            if (!$util.isString(message.productVersion))
              return "productVersion: string expected";
          }
          if (message.guid != null && message.hasOwnProperty("guid")) {
            if (!$util.isString(message.guid))
              return "guid: string expected";
          }
          if (message.hwid != null && message.hasOwnProperty("hwid")) {
            if (!$util.isString(message.hwid))
              return "hwid: string expected";
          }
          return null;
        };
        GetInfoResponse2.fromObject = function fromObject(object) {
          if (object instanceof $root.GetInfoResponse)
            return object;
          var message = new $root.GetInfoResponse();
          if (object.brand != null)
            message.brand = String(object.brand);
          if (object.product != null)
            message.product = String(object.product);
          if (object.productVersion != null)
            message.productVersion = String(object.productVersion);
          if (object.guid != null)
            message.guid = String(object.guid);
          if (object.hwid != null)
            message.hwid = String(object.hwid);
          return message;
        };
        GetInfoResponse2.toObject = function toObject(message, options) {
          if (!options)
            options = {};
          var object = {};
          if (options.defaults) {
            object.brand = "";
            object.product = "";
            object.productVersion = "";
            object.guid = "";
            object.hwid = "";
          }
          if (message.brand != null && message.hasOwnProperty("brand"))
            object.brand = message.brand;
          if (message.product != null && message.hasOwnProperty("product"))
            object.product = message.product;
          if (message.productVersion != null && message.hasOwnProperty("productVersion"))
            object.productVersion = message.productVersion;
          if (message.guid != null && message.hasOwnProperty("guid"))
            object.guid = message.guid;
          if (message.hwid != null && message.hasOwnProperty("hwid"))
            object.hwid = message.hwid;
          return object;
        };
        GetInfoResponse2.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        GetInfoResponse2.getTypeUrl = function getTypeUrl() {
          return "type.googleapis.com/GetInfoResponse";
        };
        return GetInfoResponse2;
      }();
      module2.exports = $root;
    }
  });

  // src/background/nativeApp/proto/LegacyLocalServerProto.js
  var require_LegacyLocalServerProto = __commonJS({
    "src/background/nativeApp/proto/LegacyLocalServerProto.js"(exports2, module2) {
      var $protobuf = require_minimal2();
      var $Reader = $protobuf.Reader;
      var $Writer = $protobuf.Writer;
      var $util = $protobuf.util;
      var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
      $root.BrowserType = function() {
        const valuesById = {}, values = Object.create(valuesById);
        values[valuesById[0] = "INVALID"] = 0;
        values[valuesById[1] = "IE"] = 1;
        values[valuesById[2] = "FIREFOX"] = 2;
        values[valuesById[3] = "CHROME"] = 3;
        values[valuesById[4] = "OPERA"] = 4;
        values[valuesById[6] = "EDGE"] = 6;
        values[valuesById[7] = "CHROMIUMEDGE"] = 7;
        return values;
      }();
      $root.CommandType = function() {
        const valuesById = {}, values = Object.create(valuesById);
        values[valuesById[1] = "ACKNOWLEDGEMENT"] = 1;
        values[valuesById[6] = "IS_SAFEZONE_AVAILABLE"] = 6;
        values[valuesById[7] = "SWITCH_TO_SAFEZONE"] = 7;
        values[valuesById[10] = "GET_GUIDS"] = 10;
        values[valuesById[11] = "GET_PROPERTIES"] = 11;
        values[valuesById[12] = "IS_BANKING_SITE"] = 12;
        values[valuesById[13] = "IS_SAFEZONE_CUSTOM_SITE"] = 13;
        values[valuesById[14] = "SET_PROPERTIES"] = 14;
        values[valuesById[15] = "GET_VERSIONS"] = 15;
        values[valuesById[16] = "GET_BCU_DISTRIBUTION_ID"] = 16;
        return values;
      }();
      $root.LocalServerCommandRequest = (() => {
        function LocalServerCommandRequest(properties) {
          this.params = [];
          if (properties) {
            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
              if (properties[keys[i]] != null)
                this[keys[i]] = properties[keys[i]];
          }
        }
        LocalServerCommandRequest.prototype.type = 1;
        LocalServerCommandRequest.prototype.params = $util.emptyArray;
        LocalServerCommandRequest.prototype.browser = 0;
        LocalServerCommandRequest.create = function create(properties) {
          return new LocalServerCommandRequest(properties);
        };
        LocalServerCommandRequest.encode = function encode(message, writer) {
          if (!writer)
            writer = $Writer.create();
          if (message.type != null && message.hasOwnProperty("type"))
            writer.uint32(8).int32(message.type);
          if (message.params != null && message.params.length)
            for (let i = 0; i < message.params.length; ++i)
              writer.uint32(18).bytes(message.params[i]);
          if (message.browser != null && message.hasOwnProperty("browser"))
            writer.uint32(24).int32(message.browser);
          return writer;
        };
        LocalServerCommandRequest.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        LocalServerCommandRequest.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
          let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.LocalServerCommandRequest();
          while (reader.pos < end) {
            let tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                message.type = reader.int32();
                break;
              case 2:
                if (!(message.params && message.params.length))
                  message.params = [];
                message.params.push(reader.bytes());
                break;
              case 3:
                message.browser = reader.int32();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        LocalServerCommandRequest.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        LocalServerCommandRequest.verify = function verify(message) {
          if (typeof message !== "object" || message === null)
            return "object expected";
          if (message.type != null && message.hasOwnProperty("type"))
            switch (message.type) {
              default:
                return "type: enum value expected";
              case 1:
              case 6:
              case 7:
              case 10:
              case 11:
              case 12:
              case 13:
              case 14:
              case 15:
              case 16:
                break;
            }
          if (message.params != null && message.hasOwnProperty("params")) {
            if (!Array.isArray(message.params))
              return "params: array expected";
            for (let i = 0; i < message.params.length; ++i)
              if (!(message.params[i] && typeof message.params[i].length === "number" || $util.isString(message.params[i])))
                return "params: buffer[] expected";
          }
          if (message.browser != null && message.hasOwnProperty("browser"))
            switch (message.browser) {
              default:
                return "browser: enum value expected";
              case 0:
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
                break;
            }
          return null;
        };
        LocalServerCommandRequest.fromObject = function fromObject(object) {
          if (object instanceof $root.LocalServerCommandRequest)
            return object;
          let message = new $root.LocalServerCommandRequest();
          switch (object.type) {
            case "ACKNOWLEDGEMENT":
            case 1:
              message.type = 1;
              break;
            case "IS_SAFEZONE_AVAILABLE":
            case 6:
              message.type = 6;
              break;
            case "SWITCH_TO_SAFEZONE":
            case 7:
              message.type = 7;
              break;
            case "GET_GUIDS":
            case 10:
              message.type = 10;
              break;
            case "GET_PROPERTIES":
            case 11:
              message.type = 11;
              break;
            case "IS_BANKING_SITE":
            case 12:
              message.type = 12;
              break;
            case "IS_SAFEZONE_CUSTOM_SITE":
            case 13:
              message.type = 13;
              break;
            case "SET_PROPERTIES":
            case 14:
              message.type = 14;
              break;
            case "GET_VERSIONS":
            case 15:
              message.type = 15;
              break;
            case "GET_BCU_DISTRIBUTION_ID":
            case 16:
              message.type = 16;
              break;
          }
          if (object.params) {
            if (!Array.isArray(object.params))
              throw TypeError(".LocalServerCommandRequest.params: array expected");
            message.params = [];
            for (let i = 0; i < object.params.length; ++i)
              if (typeof object.params[i] === "string")
                $util.base64.decode(object.params[i], message.params[i] = $util.newBuffer($util.base64.length(object.params[i])), 0);
              else if (object.params[i].length)
                message.params[i] = object.params[i];
          }
          switch (object.browser) {
            case "INVALID":
            case 0:
              message.browser = 0;
              break;
            case "IE":
            case 1:
              message.browser = 1;
              break;
            case "FIREFOX":
            case 2:
              message.browser = 2;
              break;
            case "CHROME":
            case 3:
              message.browser = 3;
              break;
            case "OPERA":
            case 4:
              message.browser = 4;
              break;
          }
          return message;
        };
        LocalServerCommandRequest.toObject = function toObject(message, options) {
          if (!options)
            options = {};
          let object = {};
          if (options.arrays || options.defaults)
            object.params = [];
          if (options.defaults) {
            object.type = options.enums === String ? "ACKNOWLEDGEMENT" : 1;
            object.browser = options.enums === String ? "INVALID" : 0;
          }
          if (message.type != null && message.hasOwnProperty("type"))
            object.type = options.enums === String ? $root.CommandType[message.type] : message.type;
          if (message.params && message.params.length) {
            object.params = [];
            for (let j = 0; j < message.params.length; ++j)
              object.params[j] = options.bytes === String ? $util.base64.encode(message.params[j], 0, message.params[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.params[j]) : message.params[j];
          }
          if (message.browser != null && message.hasOwnProperty("browser"))
            object.browser = options.enums === String ? $root.BrowserType[message.browser] : message.browser;
          return object;
        };
        LocalServerCommandRequest.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return LocalServerCommandRequest;
      })();
      $root.LocalServerCommandResponse = (() => {
        function LocalServerCommandResponse(properties) {
          this.result = [];
          if (properties) {
            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)
              if (properties[keys[i]] != null)
                this[keys[i]] = properties[keys[i]];
          }
        }
        LocalServerCommandResponse.prototype.result = $util.emptyArray;
        LocalServerCommandResponse.prototype.error = $util.newBuffer([]);
        LocalServerCommandResponse.create = function create(properties) {
          return new LocalServerCommandResponse(properties);
        };
        LocalServerCommandResponse.encode = function encode(message, writer) {
          if (!writer)
            writer = $Writer.create();
          if (message.result != null && message.result.length)
            for (let i = 0; i < message.result.length; ++i)
              writer.uint32(10).bytes(message.result[i]);
          if (message.error != null && message.hasOwnProperty("error"))
            writer.uint32(18).bytes(message.error);
          return writer;
        };
        LocalServerCommandResponse.encodeDelimited = function encodeDelimited(message, writer) {
          return this.encode(message, writer).ldelim();
        };
        LocalServerCommandResponse.decode = function decode(reader, length) {
          if (!(reader instanceof $Reader))
            reader = $Reader.create(reader);
          let end = length === void 0 ? reader.len : reader.pos + length, message = new $root.LocalServerCommandResponse();
          while (reader.pos < end) {
            let tag = reader.uint32();
            switch (tag >>> 3) {
              case 1:
                if (!(message.result && message.result.length))
                  message.result = [];
                message.result.push(reader.bytes());
                break;
              case 2:
                message.error = reader.bytes();
                break;
              default:
                reader.skipType(tag & 7);
                break;
            }
          }
          return message;
        };
        LocalServerCommandResponse.decodeDelimited = function decodeDelimited(reader) {
          if (!(reader instanceof $Reader))
            reader = new $Reader(reader);
          return this.decode(reader, reader.uint32());
        };
        LocalServerCommandResponse.verify = function verify(message) {
          if (typeof message !== "object" || message === null)
            return "object expected";
          if (message.result != null && message.hasOwnProperty("result")) {
            if (!Array.isArray(message.result))
              return "result: array expected";
            for (let i = 0; i < message.result.length; ++i)
              if (!(message.result[i] && typeof message.result[i].length === "number" || $util.isString(message.result[i])))
                return "result: buffer[] expected";
          }
          if (message.error != null && message.hasOwnProperty("error")) {
            if (!(message.error && typeof message.error.length === "number" || $util.isString(message.error)))
              return "error: buffer expected";
          }
          return null;
        };
        LocalServerCommandResponse.fromObject = function fromObject(object) {
          if (object instanceof $root.LocalServerCommandResponse)
            return object;
          let message = new $root.LocalServerCommandResponse();
          if (object.result) {
            if (!Array.isArray(object.result))
              throw TypeError(".LocalServerCommandResponse.result: array expected");
            message.result = [];
            for (let i = 0; i < object.result.length; ++i)
              if (typeof object.result[i] === "string")
                $util.base64.decode(object.result[i], message.result[i] = $util.newBuffer($util.base64.length(object.result[i])), 0);
              else if (object.result[i].length)
                message.result[i] = object.result[i];
          }
          if (object.error != null) {
            if (typeof object.error === "string")
              $util.base64.decode(object.error, message.error = $util.newBuffer($util.base64.length(object.error)), 0);
            else if (object.error.length)
              message.error = object.error;
          }
          return message;
        };
        LocalServerCommandResponse.toObject = function toObject(message, options) {
          if (!options)
            options = {};
          let object = {};
          if (options.arrays || options.defaults)
            object.result = [];
          if (options.defaults)
            if (options.bytes === String)
              object.error = "";
            else {
              object.error = [];
              if (options.bytes !== Array)
                object.error = $util.newBuffer(object.error);
            }
          if (message.result && message.result.length) {
            object.result = [];
            for (let j = 0; j < message.result.length; ++j)
              object.result[j] = options.bytes === String ? $util.base64.encode(message.result[j], 0, message.result[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.result[j]) : message.result[j];
          }
          if (message.error != null && message.hasOwnProperty("error"))
            object.error = options.bytes === String ? $util.base64.encode(message.error, 0, message.error.length) : options.bytes === Array ? Array.prototype.slice.call(message.error) : message.error;
          return object;
        };
        LocalServerCommandResponse.prototype.toJSON = function toJSON() {
          return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
        };
        return LocalServerCommandResponse;
      })();
      module2.exports = $root;
    }
  });

  // src/background/proto/UrlInfo.js
  var require_UrlInfo = __commonJS({
    "src/background/proto/UrlInfo.js"(exports2, module2) {
      "use strict";
      var $protobuf = require_minimal2();
      var $Reader = $protobuf.Reader;
      var $Writer = $protobuf.Writer;
      var $util = $protobuf.util;
      var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
      $root.urlite = function() {
        var urlite3 = {};
        urlite3.Request = function() {
          function Request(properties) {
            this.queries = [];
            this.includeGeoBlocklists = [];
            if (properties) {
              for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          Request.prototype.queries = $util.emptyArray;
          Request.prototype.saveUrlFeed = false;
          Request.prototype.includeGeoBlocklists = $util.emptyArray;
          Request.create = function create(properties) {
            return new Request(properties);
          };
          Request.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer.create();
            if (message.queries != null && message.queries.length)
              for (var i = 0; i < message.queries.length; ++i)
                $root.urlite.Query.encode(message.queries[i], writer.uint32(10).fork()).ldelim();
            if (message.saveUrlFeed != null && Object.hasOwnProperty.call(message, "saveUrlFeed"))
              writer.uint32(16).bool(message.saveUrlFeed);
            if (message.includeGeoBlocklists != null && message.includeGeoBlocklists.length) {
              writer.uint32(26).fork();
              for (var i = 0; i < message.includeGeoBlocklists.length; ++i)
                writer.int32(message.includeGeoBlocklists[i]);
              writer.ldelim();
            }
            return writer;
          };
          Request.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          Request.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
              reader = $Reader.create(reader);
            var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.urlite.Request();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1: {
                  if (!(message.queries && message.queries.length))
                    message.queries = [];
                  message.queries.push($root.urlite.Query.decode(reader, reader.uint32()));
                  break;
                }
                case 2: {
                  message.saveUrlFeed = reader.bool();
                  break;
                }
                case 3: {
                  if (!(message.includeGeoBlocklists && message.includeGeoBlocklists.length))
                    message.includeGeoBlocklists = [];
                  if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                      message.includeGeoBlocklists.push(reader.int32());
                  } else
                    message.includeGeoBlocklists.push(reader.int32());
                  break;
                }
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          Request.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
              reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          Request.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.queries != null && message.hasOwnProperty("queries")) {
              if (!Array.isArray(message.queries))
                return "queries: array expected";
              for (var i = 0; i < message.queries.length; ++i) {
                var error = $root.urlite.Query.verify(message.queries[i]);
                if (error)
                  return "queries." + error;
              }
            }
            if (message.saveUrlFeed != null && message.hasOwnProperty("saveUrlFeed")) {
              if (typeof message.saveUrlFeed !== "boolean")
                return "saveUrlFeed: boolean expected";
            }
            if (message.includeGeoBlocklists != null && message.hasOwnProperty("includeGeoBlocklists")) {
              if (!Array.isArray(message.includeGeoBlocklists))
                return "includeGeoBlocklists: array expected";
              for (var i = 0; i < message.includeGeoBlocklists.length; ++i)
                switch (message.includeGeoBlocklists[i]) {
                  default:
                    return "includeGeoBlocklists: enum value[] expected";
                  case 0:
                  case 1:
                    break;
                }
            }
            return null;
          };
          Request.fromObject = function fromObject(object) {
            if (object instanceof $root.urlite.Request)
              return object;
            var message = new $root.urlite.Request();
            if (object.queries) {
              if (!Array.isArray(object.queries))
                throw TypeError(".urlite.Request.queries: array expected");
              message.queries = [];
              for (var i = 0; i < object.queries.length; ++i) {
                if (typeof object.queries[i] !== "object")
                  throw TypeError(".urlite.Request.queries: object expected");
                message.queries[i] = $root.urlite.Query.fromObject(object.queries[i]);
              }
            }
            if (object.saveUrlFeed != null)
              message.saveUrlFeed = Boolean(object.saveUrlFeed);
            if (object.includeGeoBlocklists) {
              if (!Array.isArray(object.includeGeoBlocklists))
                throw TypeError(".urlite.Request.includeGeoBlocklists: array expected");
              message.includeGeoBlocklists = [];
              for (var i = 0; i < object.includeGeoBlocklists.length; ++i)
                switch (object.includeGeoBlocklists[i]) {
                  default:
                    if (typeof object.includeGeoBlocklists[i] === "number") {
                      message.includeGeoBlocklists[i] = object.includeGeoBlocklists[i];
                      break;
                    }
                  case "UNKNOWN":
                  case 0:
                    message.includeGeoBlocklists[i] = 0;
                    break;
                  case "JP":
                  case 1:
                    message.includeGeoBlocklists[i] = 1;
                    break;
                }
            }
            return message;
          };
          Request.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            var object = {};
            if (options.arrays || options.defaults) {
              object.queries = [];
              object.includeGeoBlocklists = [];
            }
            if (options.defaults)
              object.saveUrlFeed = false;
            if (message.queries && message.queries.length) {
              object.queries = [];
              for (var j = 0; j < message.queries.length; ++j)
                object.queries[j] = $root.urlite.Query.toObject(message.queries[j], options);
            }
            if (message.saveUrlFeed != null && message.hasOwnProperty("saveUrlFeed"))
              object.saveUrlFeed = message.saveUrlFeed;
            if (message.includeGeoBlocklists && message.includeGeoBlocklists.length) {
              object.includeGeoBlocklists = [];
              for (var j = 0; j < message.includeGeoBlocklists.length; ++j)
                object.includeGeoBlocklists[j] = options.enums === String ? $root.urlite.SupportedGeoBlocklist[message.includeGeoBlocklists[j]] === void 0 ? message.includeGeoBlocklists[j] : $root.urlite.SupportedGeoBlocklist[message.includeGeoBlocklists[j]] : message.includeGeoBlocklists[j];
            }
            return object;
          };
          Request.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };
          Request.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === void 0) {
              typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/urlite.Request";
          };
          return Request;
        }();
        urlite3.Query = function() {
          function Query(properties) {
            if (properties) {
              for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          Query.prototype.clientInfo = null;
          Query.prototype.doNotTrack = false;
          Query.prototype.key = "";
          Query.prototype.keyType = 0;
          Query.prototype.includeDomainInfo = false;
          Query.create = function create(properties) {
            return new Query(properties);
          };
          Query.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer.create();
            if (message.key != null && Object.hasOwnProperty.call(message, "key"))
              writer.uint32(10).string(message.key);
            if (message.keyType != null && Object.hasOwnProperty.call(message, "keyType"))
              writer.uint32(16).int32(message.keyType);
            if (message.clientInfo != null && Object.hasOwnProperty.call(message, "clientInfo"))
              $root.com.avast.analytics.payload.urlite.ClientInfo.encode(message.clientInfo, writer.uint32(26).fork()).ldelim();
            if (message.doNotTrack != null && Object.hasOwnProperty.call(message, "doNotTrack"))
              writer.uint32(32).bool(message.doNotTrack);
            if (message.includeDomainInfo != null && Object.hasOwnProperty.call(message, "includeDomainInfo"))
              writer.uint32(40).bool(message.includeDomainInfo);
            return writer;
          };
          Query.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          Query.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
              reader = $Reader.create(reader);
            var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.urlite.Query();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 3: {
                  message.clientInfo = $root.com.avast.analytics.payload.urlite.ClientInfo.decode(reader, reader.uint32());
                  break;
                }
                case 4: {
                  message.doNotTrack = reader.bool();
                  break;
                }
                case 1: {
                  message.key = reader.string();
                  break;
                }
                case 2: {
                  message.keyType = reader.int32();
                  break;
                }
                case 5: {
                  message.includeDomainInfo = reader.bool();
                  break;
                }
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          Query.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
              reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          Query.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.clientInfo != null && message.hasOwnProperty("clientInfo")) {
              var error = $root.com.avast.analytics.payload.urlite.ClientInfo.verify(message.clientInfo);
              if (error)
                return "clientInfo." + error;
            }
            if (message.doNotTrack != null && message.hasOwnProperty("doNotTrack")) {
              if (typeof message.doNotTrack !== "boolean")
                return "doNotTrack: boolean expected";
            }
            if (message.key != null && message.hasOwnProperty("key")) {
              if (!$util.isString(message.key))
                return "key: string expected";
            }
            if (message.keyType != null && message.hasOwnProperty("keyType"))
              switch (message.keyType) {
                default:
                  return "keyType: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                  break;
              }
            if (message.includeDomainInfo != null && message.hasOwnProperty("includeDomainInfo")) {
              if (typeof message.includeDomainInfo !== "boolean")
                return "includeDomainInfo: boolean expected";
            }
            return null;
          };
          Query.fromObject = function fromObject(object) {
            if (object instanceof $root.urlite.Query)
              return object;
            var message = new $root.urlite.Query();
            if (object.clientInfo != null) {
              if (typeof object.clientInfo !== "object")
                throw TypeError(".urlite.Query.clientInfo: object expected");
              message.clientInfo = $root.com.avast.analytics.payload.urlite.ClientInfo.fromObject(object.clientInfo);
            }
            if (object.doNotTrack != null)
              message.doNotTrack = Boolean(object.doNotTrack);
            if (object.key != null)
              message.key = String(object.key);
            switch (object.keyType) {
              default:
                if (typeof object.keyType === "number") {
                  message.keyType = object.keyType;
                  break;
                }
                break;
              case "UNKNOWN_TYPE":
              case 0:
                message.keyType = 0;
                break;
              case "URL":
              case 1:
                message.keyType = 1;
                break;
              case "HOST":
              case 2:
                message.keyType = 2;
                break;
              case "URL_LIKE":
              case 3:
                message.keyType = 3;
                break;
            }
            if (object.includeDomainInfo != null)
              message.includeDomainInfo = Boolean(object.includeDomainInfo);
            return message;
          };
          Query.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            var object = {};
            if (options.defaults) {
              object.key = "";
              object.keyType = options.enums === String ? "UNKNOWN_TYPE" : 0;
              object.clientInfo = null;
              object.doNotTrack = false;
              object.includeDomainInfo = false;
            }
            if (message.key != null && message.hasOwnProperty("key"))
              object.key = message.key;
            if (message.keyType != null && message.hasOwnProperty("keyType"))
              object.keyType = options.enums === String ? $root.urlite.KeyType[message.keyType] === void 0 ? message.keyType : $root.urlite.KeyType[message.keyType] : message.keyType;
            if (message.clientInfo != null && message.hasOwnProperty("clientInfo"))
              object.clientInfo = $root.com.avast.analytics.payload.urlite.ClientInfo.toObject(message.clientInfo, options);
            if (message.doNotTrack != null && message.hasOwnProperty("doNotTrack"))
              object.doNotTrack = message.doNotTrack;
            if (message.includeDomainInfo != null && message.hasOwnProperty("includeDomainInfo"))
              object.includeDomainInfo = message.includeDomainInfo;
            return object;
          };
          Query.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };
          Query.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === void 0) {
              typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/urlite.Query";
          };
          return Query;
        }();
        urlite3.KeyType = function() {
          var valuesById = {}, values = Object.create(valuesById);
          values[valuesById[0] = "UNKNOWN_TYPE"] = 0;
          values[valuesById[1] = "URL"] = 1;
          values[valuesById[2] = "HOST"] = 2;
          values[valuesById[3] = "URL_LIKE"] = 3;
          return values;
        }();
        urlite3.Response = function() {
          function Response(properties) {
            this.answers = [];
            if (properties) {
              for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          Response.prototype.answers = $util.emptyArray;
          Response.create = function create(properties) {
            return new Response(properties);
          };
          Response.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer.create();
            if (message.answers != null && message.answers.length)
              for (var i = 0; i < message.answers.length; ++i)
                $root.urlite.Answer.encode(message.answers[i], writer.uint32(10).fork()).ldelim();
            return writer;
          };
          Response.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          Response.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
              reader = $Reader.create(reader);
            var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.urlite.Response();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1: {
                  if (!(message.answers && message.answers.length))
                    message.answers = [];
                  message.answers.push($root.urlite.Answer.decode(reader, reader.uint32()));
                  break;
                }
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          Response.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
              reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          Response.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.answers != null && message.hasOwnProperty("answers")) {
              if (!Array.isArray(message.answers))
                return "answers: array expected";
              for (var i = 0; i < message.answers.length; ++i) {
                var error = $root.urlite.Answer.verify(message.answers[i]);
                if (error)
                  return "answers." + error;
              }
            }
            return null;
          };
          Response.fromObject = function fromObject(object) {
            if (object instanceof $root.urlite.Response)
              return object;
            var message = new $root.urlite.Response();
            if (object.answers) {
              if (!Array.isArray(object.answers))
                throw TypeError(".urlite.Response.answers: array expected");
              message.answers = [];
              for (var i = 0; i < object.answers.length; ++i) {
                if (typeof object.answers[i] !== "object")
                  throw TypeError(".urlite.Response.answers: object expected");
                message.answers[i] = $root.urlite.Answer.fromObject(object.answers[i]);
              }
            }
            return message;
          };
          Response.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            var object = {};
            if (options.arrays || options.defaults)
              object.answers = [];
            if (message.answers && message.answers.length) {
              object.answers = [];
              for (var j = 0; j < message.answers.length; ++j)
                object.answers[j] = $root.urlite.Answer.toObject(message.answers[j], options);
            }
            return object;
          };
          Response.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };
          Response.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === void 0) {
              typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/urlite.Response";
          };
          return Response;
        }();
        urlite3.Answer = function() {
          function Answer(properties) {
            this.findings = [];
            this.matched = [];
            this.categories = [];
            this.dryRuns = [];
            this.warnings = [];
            this.detections = [];
            this.urlinfoCategories = [];
            if (properties) {
              for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          Answer.prototype.key = "";
          Answer.prototype.error = "";
          Answer.prototype.findings = $util.emptyArray;
          Answer.prototype.matched = $util.emptyArray;
          Answer.prototype.hintBlockIncoming = false;
          Answer.prototype.hintBlockOutgoing = false;
          Answer.prototype.categories = $util.emptyArray;
          Answer.prototype.dryRuns = $util.emptyArray;
          Answer.prototype.domainInfo = 0;
          Answer.prototype.incomplete = false;
          Answer.prototype.warnings = $util.emptyArray;
          Answer.prototype.detections = $util.emptyArray;
          Answer.prototype.urlinfoCategories = $util.emptyArray;
          Answer.create = function create(properties) {
            return new Answer(properties);
          };
          Answer.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer.create();
            if (message.key != null && Object.hasOwnProperty.call(message, "key"))
              writer.uint32(10).string(message.key);
            if (message.error != null && Object.hasOwnProperty.call(message, "error"))
              writer.uint32(18).string(message.error);
            if (message.findings != null && message.findings.length) {
              writer.uint32(26).fork();
              for (var i = 0; i < message.findings.length; ++i)
                writer.int32(message.findings[i]);
              writer.ldelim();
            }
            if (message.matched != null && message.matched.length) {
              writer.uint32(34).fork();
              for (var i = 0; i < message.matched.length; ++i)
                writer.int32(message.matched[i]);
              writer.ldelim();
            }
            if (message.hintBlockIncoming != null && Object.hasOwnProperty.call(message, "hintBlockIncoming"))
              writer.uint32(40).bool(message.hintBlockIncoming);
            if (message.hintBlockOutgoing != null && Object.hasOwnProperty.call(message, "hintBlockOutgoing"))
              writer.uint32(48).bool(message.hintBlockOutgoing);
            if (message.categories != null && message.categories.length) {
              writer.uint32(58).fork();
              for (var i = 0; i < message.categories.length; ++i)
                writer.int32(message.categories[i]);
              writer.ldelim();
            }
            if (message.dryRuns != null && message.dryRuns.length) {
              writer.uint32(66).fork();
              for (var i = 0; i < message.dryRuns.length; ++i)
                writer.int32(message.dryRuns[i]);
              writer.ldelim();
            }
            if (message.domainInfo != null && Object.hasOwnProperty.call(message, "domainInfo"))
              writer.uint32(72).int32(message.domainInfo);
            if (message.incomplete != null && Object.hasOwnProperty.call(message, "incomplete"))
              writer.uint32(80).bool(message.incomplete);
            if (message.warnings != null && message.warnings.length)
              for (var i = 0; i < message.warnings.length; ++i)
                writer.uint32(90).string(message.warnings[i]);
            if (message.detections != null && message.detections.length)
              for (var i = 0; i < message.detections.length; ++i)
                $root.urlite.Detection.encode(message.detections[i], writer.uint32(98).fork()).ldelim();
            if (message.urlinfoCategories != null && message.urlinfoCategories.length) {
              writer.uint32(106).fork();
              for (var i = 0; i < message.urlinfoCategories.length; ++i)
                writer.int32(message.urlinfoCategories[i]);
              writer.ldelim();
            }
            return writer;
          };
          Answer.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          Answer.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
              reader = $Reader.create(reader);
            var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.urlite.Answer();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1: {
                  message.key = reader.string();
                  break;
                }
                case 2: {
                  message.error = reader.string();
                  break;
                }
                case 3: {
                  if (!(message.findings && message.findings.length))
                    message.findings = [];
                  if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                      message.findings.push(reader.int32());
                  } else
                    message.findings.push(reader.int32());
                  break;
                }
                case 4: {
                  if (!(message.matched && message.matched.length))
                    message.matched = [];
                  if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                      message.matched.push(reader.int32());
                  } else
                    message.matched.push(reader.int32());
                  break;
                }
                case 5: {
                  message.hintBlockIncoming = reader.bool();
                  break;
                }
                case 6: {
                  message.hintBlockOutgoing = reader.bool();
                  break;
                }
                case 7: {
                  if (!(message.categories && message.categories.length))
                    message.categories = [];
                  if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                      message.categories.push(reader.int32());
                  } else
                    message.categories.push(reader.int32());
                  break;
                }
                case 8: {
                  if (!(message.dryRuns && message.dryRuns.length))
                    message.dryRuns = [];
                  if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                      message.dryRuns.push(reader.int32());
                  } else
                    message.dryRuns.push(reader.int32());
                  break;
                }
                case 9: {
                  message.domainInfo = reader.int32();
                  break;
                }
                case 10: {
                  message.incomplete = reader.bool();
                  break;
                }
                case 11: {
                  if (!(message.warnings && message.warnings.length))
                    message.warnings = [];
                  message.warnings.push(reader.string());
                  break;
                }
                case 12: {
                  if (!(message.detections && message.detections.length))
                    message.detections = [];
                  message.detections.push($root.urlite.Detection.decode(reader, reader.uint32()));
                  break;
                }
                case 13: {
                  if (!(message.urlinfoCategories && message.urlinfoCategories.length))
                    message.urlinfoCategories = [];
                  if ((tag & 7) === 2) {
                    var end2 = reader.uint32() + reader.pos;
                    while (reader.pos < end2)
                      message.urlinfoCategories.push(reader.int32());
                  } else
                    message.urlinfoCategories.push(reader.int32());
                  break;
                }
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          Answer.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
              reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          Answer.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.key != null && message.hasOwnProperty("key")) {
              if (!$util.isString(message.key))
                return "key: string expected";
            }
            if (message.error != null && message.hasOwnProperty("error")) {
              if (!$util.isString(message.error))
                return "error: string expected";
            }
            if (message.findings != null && message.hasOwnProperty("findings")) {
              if (!Array.isArray(message.findings))
                return "findings: array expected";
              for (var i = 0; i < message.findings.length; ++i)
                switch (message.findings[i]) {
                  default:
                    return "findings: enum value[] expected";
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                    break;
                }
            }
            if (message.matched != null && message.hasOwnProperty("matched")) {
              if (!Array.isArray(message.matched))
                return "matched: array expected";
              for (var i = 0; i < message.matched.length; ++i)
                switch (message.matched[i]) {
                  default:
                    return "matched: enum value[] expected";
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                  case 9:
                  case 10:
                  case 11:
                  case 13:
                  case 14:
                  case 15:
                  case 17:
                  case 18:
                  case 16:
                  case 12:
                    break;
                }
            }
            if (message.hintBlockIncoming != null && message.hasOwnProperty("hintBlockIncoming")) {
              if (typeof message.hintBlockIncoming !== "boolean")
                return "hintBlockIncoming: boolean expected";
            }
            if (message.hintBlockOutgoing != null && message.hasOwnProperty("hintBlockOutgoing")) {
              if (typeof message.hintBlockOutgoing !== "boolean")
                return "hintBlockOutgoing: boolean expected";
            }
            if (message.categories != null && message.hasOwnProperty("categories")) {
              if (!Array.isArray(message.categories))
                return "categories: array expected";
              for (var i = 0; i < message.categories.length; ++i)
                switch (message.categories[i]) {
                  default:
                    return "categories: enum value[] expected";
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                  case 9:
                  case 10:
                  case 11:
                  case 12:
                  case 13:
                  case 14:
                  case 15:
                  case 16:
                  case 17:
                  case 18:
                  case 19:
                  case 20:
                  case 21:
                  case 22:
                  case 23:
                  case 24:
                  case 25:
                  case 26:
                  case 27:
                  case 28:
                  case 29:
                  case 30:
                  case 31:
                  case 32:
                  case 33:
                  case 34:
                  case 35:
                  case 36:
                  case 37:
                  case 38:
                  case 39:
                  case 40:
                  case 41:
                  case 42:
                  case 43:
                  case 44:
                  case 45:
                  case 46:
                  case 47:
                  case 48:
                  case 49:
                    break;
                }
            }
            if (message.dryRuns != null && message.hasOwnProperty("dryRuns")) {
              if (!Array.isArray(message.dryRuns))
                return "dryRuns: array expected";
              for (var i = 0; i < message.dryRuns.length; ++i)
                switch (message.dryRuns[i]) {
                  default:
                    return "dryRuns: enum value[] expected";
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                    break;
                }
            }
            if (message.domainInfo != null && message.hasOwnProperty("domainInfo"))
              switch (message.domainInfo) {
                default:
                  return "domainInfo: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                  break;
              }
            if (message.incomplete != null && message.hasOwnProperty("incomplete")) {
              if (typeof message.incomplete !== "boolean")
                return "incomplete: boolean expected";
            }
            if (message.warnings != null && message.hasOwnProperty("warnings")) {
              if (!Array.isArray(message.warnings))
                return "warnings: array expected";
              for (var i = 0; i < message.warnings.length; ++i)
                if (!$util.isString(message.warnings[i]))
                  return "warnings: string[] expected";
            }
            if (message.detections != null && message.hasOwnProperty("detections")) {
              if (!Array.isArray(message.detections))
                return "detections: array expected";
              for (var i = 0; i < message.detections.length; ++i) {
                var error = $root.urlite.Detection.verify(message.detections[i]);
                if (error)
                  return "detections." + error;
              }
            }
            if (message.urlinfoCategories != null && message.hasOwnProperty("urlinfoCategories")) {
              if (!Array.isArray(message.urlinfoCategories))
                return "urlinfoCategories: array expected";
              for (var i = 0; i < message.urlinfoCategories.length; ++i)
                switch (message.urlinfoCategories[i]) {
                  default:
                    return "urlinfoCategories: enum value[] expected";
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                    break;
                }
            }
            return null;
          };
          Answer.fromObject = function fromObject(object) {
            if (object instanceof $root.urlite.Answer)
              return object;
            var message = new $root.urlite.Answer();
            if (object.key != null)
              message.key = String(object.key);
            if (object.error != null)
              message.error = String(object.error);
            if (object.findings) {
              if (!Array.isArray(object.findings))
                throw TypeError(".urlite.Answer.findings: array expected");
              message.findings = [];
              for (var i = 0; i < object.findings.length; ++i)
                switch (object.findings[i]) {
                  default:
                    if (typeof object.findings[i] === "number") {
                      message.findings[i] = object.findings[i];
                      break;
                    }
                  case "OTHER_FINDING":
                  case 0:
                    message.findings[i] = 0;
                    break;
                  case "MALWARE":
                  case 1:
                    message.findings[i] = 1;
                    break;
                  case "PHISHING":
                  case 2:
                    message.findings[i] = 2;
                    break;
                  case "BOTNET_CNC":
                  case 3:
                    message.findings[i] = 3;
                    break;
                  case "BOTNET_ZOMBIE":
                  case 4:
                    message.findings[i] = 4;
                    break;
                  case "TYPOSQUATTING":
                  case 5:
                    message.findings[i] = 5;
                    break;
                  case "GOVERNMENTAL_BLOCK":
                  case 6:
                    message.findings[i] = 6;
                    break;
                  case "ESHOP_SCAM":
                  case 7:
                    message.findings[i] = 7;
                    break;
                }
            }
            if (object.matched) {
              if (!Array.isArray(object.matched))
                throw TypeError(".urlite.Answer.matched: array expected");
              message.matched = [];
              for (var i = 0; i < object.matched.length; ++i)
                switch (object.matched[i]) {
                  default:
                    if (typeof object.matched[i] === "number") {
                      message.matched[i] = object.matched[i];
                      break;
                    }
                  case "OTHER_BLACKLIST":
                  case 0:
                    message.matched[i] = 0;
                    break;
                  case "VIRUSLAB_URL_BLOCK":
                  case 1:
                    message.matched[i] = 1;
                    break;
                  case "MAILSHELL":
                  case 2:
                    message.matched[i] = 2;
                    break;
                  case "APWG":
                  case 3:
                    message.matched[i] = 3;
                    break;
                  case "OPEN_PHISH":
                  case 4:
                    message.matched[i] = 4;
                    break;
                  case "PHISH_TANK":
                  case 5:
                    message.matched[i] = 5;
                    break;
                  case "PT_REALTIME":
                  case 6:
                    message.matched[i] = 6;
                    break;
                  case "VIRUSLAB_PHISHING":
                  case 7:
                    message.matched[i] = 7;
                    break;
                  case "VIRUSLAB_IOT_BOTNET":
                  case 8:
                    message.matched[i] = 8;
                    break;
                  case "VIRUSLAB_UNIFIED":
                  case 9:
                    message.matched[i] = 9;
                    break;
                  case "GOOGLE_PHISHING":
                  case 10:
                    message.matched[i] = 10;
                    break;
                  case "GOOGLE_MALWARE":
                  case 11:
                    message.matched[i] = 11;
                    break;
                  case "GOOGLE_UNIFIED":
                  case 13:
                    message.matched[i] = 13;
                    break;
                  case "IPADDR_BLACKLIST_UNIFIED":
                  case 14:
                    message.matched[i] = 14;
                    break;
                  case "RULESPACE":
                  case 15:
                    message.matched[i] = 15;
                    break;
                  case "URL_INFO_CATEGORIES":
                  case 17:
                    message.matched[i] = 17;
                    break;
                  case "GEO_BLOCKLIST_JAPAN":
                  case 18:
                    message.matched[i] = 18;
                    break;
                  case "URL_PATTERN":
                  case 16:
                    message.matched[i] = 16;
                    break;
                  case "DEBUG":
                  case 12:
                    message.matched[i] = 12;
                    break;
                }
            }
            if (object.hintBlockIncoming != null)
              message.hintBlockIncoming = Boolean(object.hintBlockIncoming);
            if (object.hintBlockOutgoing != null)
              message.hintBlockOutgoing = Boolean(object.hintBlockOutgoing);
            if (object.categories) {
              if (!Array.isArray(object.categories))
                throw TypeError(".urlite.Answer.categories: array expected");
              message.categories = [];
              for (var i = 0; i < object.categories.length; ++i)
                switch (object.categories[i]) {
                  default:
                    if (typeof object.categories[i] === "number") {
                      message.categories[i] = object.categories[i];
                      break;
                    }
                  case "CATEGORY_INVALID":
                  case 0:
                    message.categories[i] = 0;
                    break;
                  case "CATEGORY_ART":
                  case 1:
                    message.categories[i] = 1;
                    break;
                  case "CATEGORY_BUSINESS":
                  case 2:
                    message.categories[i] = 2;
                    break;
                  case "CATEGORY_BUSINESS_SERVICES":
                  case 3:
                    message.categories[i] = 3;
                    break;
                  case "CATEGORY_CARS":
                  case 4:
                    message.categories[i] = 4;
                    break;
                  case "CATEGORY_CELEBRITY":
                  case 5:
                    message.categories[i] = 5;
                    break;
                  case "CATEGORY_DO_NOT_SHOW":
                  case 6:
                    message.categories[i] = 6;
                    break;
                  case "CATEGORY_DOWNLOADS":
                  case 7:
                    message.categories[i] = 7;
                    break;
                  case "CATEGORY_DRUGS":
                  case 8:
                    message.categories[i] = 8;
                    break;
                  case "CATEGORY_EDUCATION":
                  case 9:
                    message.categories[i] = 9;
                    break;
                  case "CATEGORY_ENERGY":
                  case 10:
                    message.categories[i] = 10;
                    break;
                  case "CATEGORY_FINANCE":
                  case 11:
                    message.categories[i] = 11;
                    break;
                  case "CATEGORY_FOOD":
                  case 12:
                    message.categories[i] = 12;
                    break;
                  case "CATEGORY_GAME":
                  case 13:
                    message.categories[i] = 13;
                    break;
                  case "CATEGORY_GLAMOUR":
                  case 14:
                    message.categories[i] = 14;
                    break;
                  case "CATEGORY_GOVERNMENT":
                  case 15:
                    message.categories[i] = 15;
                    break;
                  case "CATEGORY_GROSS":
                  case 16:
                    message.categories[i] = 16;
                    break;
                  case "CATEGORY_HACKING":
                  case 17:
                    message.categories[i] = 17;
                    break;
                  case "CATEGORY_HATE":
                  case 18:
                    message.categories[i] = 18;
                    break;
                  case "CATEGORY_HEALTH":
                  case 19:
                    message.categories[i] = 19;
                    break;
                  case "CATEGORY_HOBBIES":
                  case 20:
                    message.categories[i] = 20;
                    break;
                  case "CATEGORY_JOB_SEARCH":
                  case 21:
                    message.categories[i] = 21;
                    break;
                  case "CATEGORY_KID_FRIENDLY":
                  case 22:
                    message.categories[i] = 22;
                    break;
                  case "CATEGORY_LAW":
                  case 23:
                    message.categories[i] = 23;
                    break;
                  case "CATEGORY_MAGIC":
                  case 24:
                    message.categories[i] = 24;
                    break;
                  case "CATEGORY_MALWARE":
                  case 25:
                    message.categories[i] = 25;
                    break;
                  case "CATEGORY_MESSAGING":
                  case 26:
                    message.categories[i] = 26;
                    break;
                  case "CATEGORY_MILITARY":
                  case 27:
                    message.categories[i] = 27;
                    break;
                  case "CATEGORY_MOVIES":
                  case 28:
                    message.categories[i] = 28;
                    break;
                  case "CATEGORY_MUSIC":
                  case 29:
                    message.categories[i] = 29;
                    break;
                  case "CATEGORY_NEWS":
                  case 30:
                    message.categories[i] = 30;
                    break;
                  case "CATEGORY_NUDITY":
                  case 31:
                    message.categories[i] = 31;
                    break;
                  case "CATEGORY_OTHER":
                  case 32:
                    message.categories[i] = 32;
                    break;
                  case "CATEGORY_PETS":
                  case 33:
                    message.categories[i] = 33;
                    break;
                  case "CATEGORY_PHOTOGRAPHY":
                  case 34:
                    message.categories[i] = 34;
                    break;
                  case "CATEGORY_PORNOGRAPHY":
                  case 35:
                    message.categories[i] = 35;
                    break;
                  case "CATEGORY_REAL_ESTATE":
                  case 36:
                    message.categories[i] = 36;
                    break;
                  case "CATEGORY_SEARCH_ENGINES":
                  case 37:
                    message.categories[i] = 37;
                    break;
                  case "CATEGORY_SELFHARM":
                  case 38:
                    message.categories[i] = 38;
                    break;
                  case "CATEGORY_SEXUAL":
                  case 39:
                    message.categories[i] = 39;
                    break;
                  case "CATEGORY_SHOPPING":
                  case 40:
                    message.categories[i] = 40;
                    break;
                  case "CATEGORY_SOCIAL":
                  case 41:
                    message.categories[i] = 41;
                    break;
                  case "CATEGORY_SPORTS":
                  case 42:
                    message.categories[i] = 42;
                    break;
                  case "CATEGORY_TECHNOLOGY":
                  case 43:
                    message.categories[i] = 43;
                    break;
                  case "CATEGORY_TRAVEL":
                  case 44:
                    message.categories[i] = 44;
                    break;
                  case "CATEGORY_UNKNOWN":
                  case 45:
                    message.categories[i] = 45;
                    break;
                  case "CATEGORY_VIDEO":
                  case 46:
                    message.categories[i] = 46;
                    break;
                  case "CATEGORY_VIOLENCE":
                  case 47:
                    message.categories[i] = 47;
                    break;
                  case "CATEGORY_VIOLENCE_SEXUAL_CONTENT":
                  case 48:
                    message.categories[i] = 48;
                    break;
                  case "CATEGORY_WEDDINGS":
                  case 49:
                    message.categories[i] = 49;
                    break;
                }
            }
            if (object.dryRuns) {
              if (!Array.isArray(object.dryRuns))
                throw TypeError(".urlite.Answer.dryRuns: array expected");
              message.dryRuns = [];
              for (var i = 0; i < object.dryRuns.length; ++i)
                switch (object.dryRuns[i]) {
                  default:
                    if (typeof object.dryRuns[i] === "number") {
                      message.dryRuns[i] = object.dryRuns[i];
                      break;
                    }
                  case "OTHER_FINDING":
                  case 0:
                    message.dryRuns[i] = 0;
                    break;
                  case "MALWARE":
                  case 1:
                    message.dryRuns[i] = 1;
                    break;
                  case "PHISHING":
                  case 2:
                    message.dryRuns[i] = 2;
                    break;
                  case "BOTNET_CNC":
                  case 3:
                    message.dryRuns[i] = 3;
                    break;
                  case "BOTNET_ZOMBIE":
                  case 4:
                    message.dryRuns[i] = 4;
                    break;
                  case "TYPOSQUATTING":
                  case 5:
                    message.dryRuns[i] = 5;
                    break;
                  case "GOVERNMENTAL_BLOCK":
                  case 6:
                    message.dryRuns[i] = 6;
                    break;
                  case "ESHOP_SCAM":
                  case 7:
                    message.dryRuns[i] = 7;
                    break;
                }
            }
            switch (object.domainInfo) {
              default:
                if (typeof object.domainInfo === "number") {
                  message.domainInfo = object.domainInfo;
                  break;
                }
                break;
              case "DI_UNKNOWN":
              case 0:
                message.domainInfo = 0;
                break;
              case "DI_CLEAN":
              case 1:
                message.domainInfo = 1;
                break;
              case "DI_PARTIALLY_INFECTED":
              case 2:
                message.domainInfo = 2;
                break;
              case "DI_INFECTED":
              case 3:
                message.domainInfo = 3;
                break;
            }
            if (object.incomplete != null)
              message.incomplete = Boolean(object.incomplete);
            if (object.warnings) {
              if (!Array.isArray(object.warnings))
                throw TypeError(".urlite.Answer.warnings: array expected");
              message.warnings = [];
              for (var i = 0; i < object.warnings.length; ++i)
                message.warnings[i] = String(object.warnings[i]);
            }
            if (object.detections) {
              if (!Array.isArray(object.detections))
                throw TypeError(".urlite.Answer.detections: array expected");
              message.detections = [];
              for (var i = 0; i < object.detections.length; ++i) {
                if (typeof object.detections[i] !== "object")
                  throw TypeError(".urlite.Answer.detections: object expected");
                message.detections[i] = $root.urlite.Detection.fromObject(object.detections[i]);
              }
            }
            if (object.urlinfoCategories) {
              if (!Array.isArray(object.urlinfoCategories))
                throw TypeError(".urlite.Answer.urlinfoCategories: array expected");
              message.urlinfoCategories = [];
              for (var i = 0; i < object.urlinfoCategories.length; ++i)
                switch (object.urlinfoCategories[i]) {
                  default:
                    if (typeof object.urlinfoCategories[i] === "number") {
                      message.urlinfoCategories[i] = object.urlinfoCategories[i];
                      break;
                    }
                  case "URL_INFO_CATEGORY_INVALID":
                  case 0:
                    message.urlinfoCategories[i] = 0;
                    break;
                  case "URL_INFO_CATEGORY_DATING":
                  case 1:
                    message.urlinfoCategories[i] = 1;
                    break;
                  case "URL_INFO_CATEGORY_PORN":
                  case 2:
                    message.urlinfoCategories[i] = 2;
                    break;
                  case "URL_INFO_CATEGORY_BANK":
                  case 3:
                    message.urlinfoCategories[i] = 3;
                    break;
                }
            }
            return message;
          };
          Answer.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            var object = {};
            if (options.arrays || options.defaults) {
              object.findings = [];
              object.matched = [];
              object.categories = [];
              object.dryRuns = [];
              object.warnings = [];
              object.detections = [];
              object.urlinfoCategories = [];
            }
            if (options.defaults) {
              object.key = "";
              object.error = "";
              object.hintBlockIncoming = false;
              object.hintBlockOutgoing = false;
              object.domainInfo = options.enums === String ? "DI_UNKNOWN" : 0;
              object.incomplete = false;
            }
            if (message.key != null && message.hasOwnProperty("key"))
              object.key = message.key;
            if (message.error != null && message.hasOwnProperty("error"))
              object.error = message.error;
            if (message.findings && message.findings.length) {
              object.findings = [];
              for (var j = 0; j < message.findings.length; ++j)
                object.findings[j] = options.enums === String ? $root.urlite.Finding[message.findings[j]] === void 0 ? message.findings[j] : $root.urlite.Finding[message.findings[j]] : message.findings[j];
            }
            if (message.matched && message.matched.length) {
              object.matched = [];
              for (var j = 0; j < message.matched.length; ++j)
                object.matched[j] = options.enums === String ? $root.urlite.Blacklist[message.matched[j]] === void 0 ? message.matched[j] : $root.urlite.Blacklist[message.matched[j]] : message.matched[j];
            }
            if (message.hintBlockIncoming != null && message.hasOwnProperty("hintBlockIncoming"))
              object.hintBlockIncoming = message.hintBlockIncoming;
            if (message.hintBlockOutgoing != null && message.hasOwnProperty("hintBlockOutgoing"))
              object.hintBlockOutgoing = message.hintBlockOutgoing;
            if (message.categories && message.categories.length) {
              object.categories = [];
              for (var j = 0; j < message.categories.length; ++j)
                object.categories[j] = options.enums === String ? $root.urlite.Category[message.categories[j]] === void 0 ? message.categories[j] : $root.urlite.Category[message.categories[j]] : message.categories[j];
            }
            if (message.dryRuns && message.dryRuns.length) {
              object.dryRuns = [];
              for (var j = 0; j < message.dryRuns.length; ++j)
                object.dryRuns[j] = options.enums === String ? $root.urlite.Finding[message.dryRuns[j]] === void 0 ? message.dryRuns[j] : $root.urlite.Finding[message.dryRuns[j]] : message.dryRuns[j];
            }
            if (message.domainInfo != null && message.hasOwnProperty("domainInfo"))
              object.domainInfo = options.enums === String ? $root.urlite.DomainInfo[message.domainInfo] === void 0 ? message.domainInfo : $root.urlite.DomainInfo[message.domainInfo] : message.domainInfo;
            if (message.incomplete != null && message.hasOwnProperty("incomplete"))
              object.incomplete = message.incomplete;
            if (message.warnings && message.warnings.length) {
              object.warnings = [];
              for (var j = 0; j < message.warnings.length; ++j)
                object.warnings[j] = message.warnings[j];
            }
            if (message.detections && message.detections.length) {
              object.detections = [];
              for (var j = 0; j < message.detections.length; ++j)
                object.detections[j] = $root.urlite.Detection.toObject(message.detections[j], options);
            }
            if (message.urlinfoCategories && message.urlinfoCategories.length) {
              object.urlinfoCategories = [];
              for (var j = 0; j < message.urlinfoCategories.length; ++j)
                object.urlinfoCategories[j] = options.enums === String ? $root.urlite.UrlInfoCategory[message.urlinfoCategories[j]] === void 0 ? message.urlinfoCategories[j] : $root.urlite.UrlInfoCategory[message.urlinfoCategories[j]] : message.urlinfoCategories[j];
            }
            return object;
          };
          Answer.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };
          Answer.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === void 0) {
              typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/urlite.Answer";
          };
          return Answer;
        }();
        urlite3.Detection = function() {
          function Detection(properties) {
            if (properties) {
              for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                if (properties[keys[i]] != null)
                  this[keys[i]] = properties[keys[i]];
            }
          }
          Detection.prototype.name = "";
          Detection.prototype.active = false;
          Detection.prototype.finding = 0;
          Detection.prototype.blacklist = 0;
          Detection.create = function create(properties) {
            return new Detection(properties);
          };
          Detection.encode = function encode(message, writer) {
            if (!writer)
              writer = $Writer.create();
            if (message.name != null && Object.hasOwnProperty.call(message, "name"))
              writer.uint32(10).string(message.name);
            if (message.active != null && Object.hasOwnProperty.call(message, "active"))
              writer.uint32(16).bool(message.active);
            if (message.finding != null && Object.hasOwnProperty.call(message, "finding"))
              writer.uint32(24).int32(message.finding);
            if (message.blacklist != null && Object.hasOwnProperty.call(message, "blacklist"))
              writer.uint32(32).int32(message.blacklist);
            return writer;
          };
          Detection.encodeDelimited = function encodeDelimited(message, writer) {
            return this.encode(message, writer).ldelim();
          };
          Detection.decode = function decode(reader, length) {
            if (!(reader instanceof $Reader))
              reader = $Reader.create(reader);
            var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.urlite.Detection();
            while (reader.pos < end) {
              var tag = reader.uint32();
              switch (tag >>> 3) {
                case 1: {
                  message.name = reader.string();
                  break;
                }
                case 2: {
                  message.active = reader.bool();
                  break;
                }
                case 3: {
                  message.finding = reader.int32();
                  break;
                }
                case 4: {
                  message.blacklist = reader.int32();
                  break;
                }
                default:
                  reader.skipType(tag & 7);
                  break;
              }
            }
            return message;
          };
          Detection.decodeDelimited = function decodeDelimited(reader) {
            if (!(reader instanceof $Reader))
              reader = new $Reader(reader);
            return this.decode(reader, reader.uint32());
          };
          Detection.verify = function verify(message) {
            if (typeof message !== "object" || message === null)
              return "object expected";
            if (message.name != null && message.hasOwnProperty("name")) {
              if (!$util.isString(message.name))
                return "name: string expected";
            }
            if (message.active != null && message.hasOwnProperty("active")) {
              if (typeof message.active !== "boolean")
                return "active: boolean expected";
            }
            if (message.finding != null && message.hasOwnProperty("finding"))
              switch (message.finding) {
                default:
                  return "finding: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                  break;
              }
            if (message.blacklist != null && message.hasOwnProperty("blacklist"))
              switch (message.blacklist) {
                default:
                  return "blacklist: enum value expected";
                case 0:
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 7:
                case 8:
                case 9:
                case 10:
                case 11:
                case 13:
                case 14:
                case 15:
                case 17:
                case 18:
                case 16:
                case 12:
                  break;
              }
            return null;
          };
          Detection.fromObject = function fromObject(object) {
            if (object instanceof $root.urlite.Detection)
              return object;
            var message = new $root.urlite.Detection();
            if (object.name != null)
              message.name = String(object.name);
            if (object.active != null)
              message.active = Boolean(object.active);
            switch (object.finding) {
              default:
                if (typeof object.finding === "number") {
                  message.finding = object.finding;
                  break;
                }
                break;
              case "OTHER_FINDING":
              case 0:
                message.finding = 0;
                break;
              case "MALWARE":
              case 1:
                message.finding = 1;
                break;
              case "PHISHING":
              case 2:
                message.finding = 2;
                break;
              case "BOTNET_CNC":
              case 3:
                message.finding = 3;
                break;
              case "BOTNET_ZOMBIE":
              case 4:
                message.finding = 4;
                break;
              case "TYPOSQUATTING":
              case 5:
                message.finding = 5;
                break;
              case "GOVERNMENTAL_BLOCK":
              case 6:
                message.finding = 6;
                break;
              case "ESHOP_SCAM":
              case 7:
                message.finding = 7;
                break;
            }
            switch (object.blacklist) {
              default:
                if (typeof object.blacklist === "number") {
                  message.blacklist = object.blacklist;
                  break;
                }
                break;
              case "OTHER_BLACKLIST":
              case 0:
                message.blacklist = 0;
                break;
              case "VIRUSLAB_URL_BLOCK":
              case 1:
                message.blacklist = 1;
                break;
              case "MAILSHELL":
              case 2:
                message.blacklist = 2;
                break;
              case "APWG":
              case 3:
                message.blacklist = 3;
                break;
              case "OPEN_PHISH":
              case 4:
                message.blacklist = 4;
                break;
              case "PHISH_TANK":
              case 5:
                message.blacklist = 5;
                break;
              case "PT_REALTIME":
              case 6:
                message.blacklist = 6;
                break;
              case "VIRUSLAB_PHISHING":
              case 7:
                message.blacklist = 7;
                break;
              case "VIRUSLAB_IOT_BOTNET":
              case 8:
                message.blacklist = 8;
                break;
              case "VIRUSLAB_UNIFIED":
              case 9:
                message.blacklist = 9;
                break;
              case "GOOGLE_PHISHING":
              case 10:
                message.blacklist = 10;
                break;
              case "GOOGLE_MALWARE":
              case 11:
                message.blacklist = 11;
                break;
              case "GOOGLE_UNIFIED":
              case 13:
                message.blacklist = 13;
                break;
              case "IPADDR_BLACKLIST_UNIFIED":
              case 14:
                message.blacklist = 14;
                break;
              case "RULESPACE":
              case 15:
                message.blacklist = 15;
                break;
              case "URL_INFO_CATEGORIES":
              case 17:
                message.blacklist = 17;
                break;
              case "GEO_BLOCKLIST_JAPAN":
              case 18:
                message.blacklist = 18;
                break;
              case "URL_PATTERN":
              case 16:
                message.blacklist = 16;
                break;
              case "DEBUG":
              case 12:
                message.blacklist = 12;
                break;
            }
            return message;
          };
          Detection.toObject = function toObject(message, options) {
            if (!options)
              options = {};
            var object = {};
            if (options.defaults) {
              object.name = "";
              object.active = false;
              object.finding = options.enums === String ? "OTHER_FINDING" : 0;
              object.blacklist = options.enums === String ? "OTHER_BLACKLIST" : 0;
            }
            if (message.name != null && message.hasOwnProperty("name"))
              object.name = message.name;
            if (message.active != null && message.hasOwnProperty("active"))
              object.active = message.active;
            if (message.finding != null && message.hasOwnProperty("finding"))
              object.finding = options.enums === String ? $root.urlite.Finding[message.finding] === void 0 ? message.finding : $root.urlite.Finding[message.finding] : message.finding;
            if (message.blacklist != null && message.hasOwnProperty("blacklist"))
              object.blacklist = options.enums === String ? $root.urlite.Blacklist[message.blacklist] === void 0 ? message.blacklist : $root.urlite.Blacklist[message.blacklist] : message.blacklist;
            return object;
          };
          Detection.prototype.toJSON = function toJSON() {
            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
          };
          Detection.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
            if (typeUrlPrefix === void 0) {
              typeUrlPrefix = "type.googleapis.com";
            }
            return typeUrlPrefix + "/urlite.Detection";
          };
          return Detection;
        }();
        urlite3.Blacklist = function() {
          var valuesById = {}, values = Object.create(valuesById);
          values[valuesById[0] = "OTHER_BLACKLIST"] = 0;
          values[valuesById[1] = "VIRUSLAB_URL_BLOCK"] = 1;
          values[valuesById[2] = "MAILSHELL"] = 2;
          values[valuesById[3] = "APWG"] = 3;
          values[valuesById[4] = "OPEN_PHISH"] = 4;
          values[valuesById[5] = "PHISH_TANK"] = 5;
          values[valuesById[6] = "PT_REALTIME"] = 6;
          values[valuesById[7] = "VIRUSLAB_PHISHING"] = 7;
          values[valuesById[8] = "VIRUSLAB_IOT_BOTNET"] = 8;
          values[valuesById[9] = "VIRUSLAB_UNIFIED"] = 9;
          values[valuesById[10] = "GOOGLE_PHISHING"] = 10;
          values[valuesById[11] = "GOOGLE_MALWARE"] = 11;
          values[valuesById[13] = "GOOGLE_UNIFIED"] = 13;
          values[valuesById[14] = "IPADDR_BLACKLIST_UNIFIED"] = 14;
          values[valuesById[15] = "RULESPACE"] = 15;
          values[valuesById[17] = "URL_INFO_CATEGORIES"] = 17;
          values[valuesById[18] = "GEO_BLOCKLIST_JAPAN"] = 18;
          values[valuesById[16] = "URL_PATTERN"] = 16;
          values[valuesById[12] = "DEBUG"] = 12;
          return values;
        }();
        urlite3.Finding = function() {
          var valuesById = {}, values = Object.create(valuesById);
          values[valuesById[0] = "OTHER_FINDING"] = 0;
          values[valuesById[1] = "MALWARE"] = 1;
          values[valuesById[2] = "PHISHING"] = 2;
          values[valuesById[3] = "BOTNET_CNC"] = 3;
          values[valuesById[4] = "BOTNET_ZOMBIE"] = 4;
          values[valuesById[5] = "TYPOSQUATTING"] = 5;
          values[valuesById[6] = "GOVERNMENTAL_BLOCK"] = 6;
          values[valuesById[7] = "ESHOP_SCAM"] = 7;
          return values;
        }();
        urlite3.Category = function() {
          var valuesById = {}, values = Object.create(valuesById);
          values[valuesById[0] = "CATEGORY_INVALID"] = 0;
          values[valuesById[1] = "CATEGORY_ART"] = 1;
          values[valuesById[2] = "CATEGORY_BUSINESS"] = 2;
          values[valuesById[3] = "CATEGORY_BUSINESS_SERVICES"] = 3;
          values[valuesById[4] = "CATEGORY_CARS"] = 4;
          values[valuesById[5] = "CATEGORY_CELEBRITY"] = 5;
          values[valuesById[6] = "CATEGORY_DO_NOT_SHOW"] = 6;
          values[valuesById[7] = "CATEGORY_DOWNLOADS"] = 7;
          values[valuesById[8] = "CATEGORY_DRUGS"] = 8;
          values[valuesById[9] = "CATEGORY_EDUCATION"] = 9;
          values[valuesById[10] = "CATEGORY_ENERGY"] = 10;
          values[valuesById[11] = "CATEGORY_FINANCE"] = 11;
          values[valuesById[12] = "CATEGORY_FOOD"] = 12;
          values[valuesById[13] = "CATEGORY_GAME"] = 13;
          values[valuesById[14] = "CATEGORY_GLAMOUR"] = 14;
          values[valuesById[15] = "CATEGORY_GOVERNMENT"] = 15;
          values[valuesById[16] = "CATEGORY_GROSS"] = 16;
          values[valuesById[17] = "CATEGORY_HACKING"] = 17;
          values[valuesById[18] = "CATEGORY_HATE"] = 18;
          values[valuesById[19] = "CATEGORY_HEALTH"] = 19;
          values[valuesById[20] = "CATEGORY_HOBBIES"] = 20;
          values[valuesById[21] = "CATEGORY_JOB_SEARCH"] = 21;
          values[valuesById[22] = "CATEGORY_KID_FRIENDLY"] = 22;
          values[valuesById[23] = "CATEGORY_LAW"] = 23;
          values[valuesById[24] = "CATEGORY_MAGIC"] = 24;
          values[valuesById[25] = "CATEGORY_MALWARE"] = 25;
          values[valuesById[26] = "CATEGORY_MESSAGING"] = 26;
          values[valuesById[27] = "CATEGORY_MILITARY"] = 27;
          values[valuesById[28] = "CATEGORY_MOVIES"] = 28;
          values[valuesById[29] = "CATEGORY_MUSIC"] = 29;
          values[valuesById[30] = "CATEGORY_NEWS"] = 30;
          values[valuesById[31] = "CATEGORY_NUDITY"] = 31;
          values[valuesById[32] = "CATEGORY_OTHER"] = 32;
          values[valuesById[33] = "CATEGORY_PETS"] = 33;
          values[valuesById[34] = "CATEGORY_PHOTOGRAPHY"] = 34;
          values[valuesById[35] = "CATEGORY_PORNOGRAPHY"] = 35;
          values[valuesById[36] = "CATEGORY_REAL_ESTATE"] = 36;
          values[valuesById[37] = "CATEGORY_SEARCH_ENGINES"] = 37;
          values[valuesById[38] = "CATEGORY_SELFHARM"] = 38;
          values[valuesById[39] = "CATEGORY_SEXUAL"] = 39;
          values[valuesById[40] = "CATEGORY_SHOPPING"] = 40;
          values[valuesById[41] = "CATEGORY_SOCIAL"] = 41;
          values[valuesById[42] = "CATEGORY_SPORTS"] = 42;
          values[valuesById[43] = "CATEGORY_TECHNOLOGY"] = 43;
          values[valuesById[44] = "CATEGORY_TRAVEL"] = 44;
          values[valuesById[45] = "CATEGORY_UNKNOWN"] = 45;
          values[valuesById[46] = "CATEGORY_VIDEO"] = 46;
          values[valuesById[47] = "CATEGORY_VIOLENCE"] = 47;
          values[valuesById[48] = "CATEGORY_VIOLENCE_SEXUAL_CONTENT"] = 48;
          values[valuesById[49] = "CATEGORY_WEDDINGS"] = 49;
          return values;
        }();
        urlite3.DomainInfo = function() {
          var valuesById = {}, values = Object.create(valuesById);
          values[valuesById[0] = "DI_UNKNOWN"] = 0;
          values[valuesById[1] = "DI_CLEAN"] = 1;
          values[valuesById[2] = "DI_PARTIALLY_INFECTED"] = 2;
          values[valuesById[3] = "DI_INFECTED"] = 3;
          return values;
        }();
        urlite3.UrlInfoCategory = function() {
          var valuesById = {}, values = Object.create(valuesById);
          values[valuesById[0] = "URL_INFO_CATEGORY_INVALID"] = 0;
          values[valuesById[1] = "URL_INFO_CATEGORY_DATING"] = 1;
          values[valuesById[2] = "URL_INFO_CATEGORY_PORN"] = 2;
          values[valuesById[3] = "URL_INFO_CATEGORY_BANK"] = 3;
          return values;
        }();
        urlite3.SupportedGeoBlocklist = function() {
          var valuesById = {}, values = Object.create(valuesById);
          values[valuesById[0] = "UNKNOWN"] = 0;
          values[valuesById[1] = "JP"] = 1;
          return values;
        }();
        return urlite3;
      }();
      $root.com = function() {
        var com = {};
        com.avast = function() {
          var avast = {};
          avast.analytics = function() {
            var analytics = {};
            analytics.payload = function() {
              var payload = {};
              payload.urlite = function() {
                var urlite3 = {};
                urlite3.HitEvent = function() {
                  function HitEvent(properties) {
                    this.matches = [];
                    this.detections = [];
                    if (properties) {
                      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                          this[keys[i]] = properties[keys[i]];
                    }
                  }
                  HitEvent.prototype.clientInfo = null;
                  HitEvent.prototype.userAgent = null;
                  HitEvent.prototype.query = null;
                  HitEvent.prototype.time = null;
                  HitEvent.prototype.matches = $util.emptyArray;
                  HitEvent.prototype.detections = $util.emptyArray;
                  var $oneOfFields;
                  Object.defineProperty(HitEvent.prototype, "_clientInfo", {
                    get: $util.oneOfGetter($oneOfFields = ["clientInfo"]),
                    set: $util.oneOfSetter($oneOfFields)
                  });
                  Object.defineProperty(HitEvent.prototype, "_userAgent", {
                    get: $util.oneOfGetter($oneOfFields = ["userAgent"]),
                    set: $util.oneOfSetter($oneOfFields)
                  });
                  Object.defineProperty(HitEvent.prototype, "_query", {
                    get: $util.oneOfGetter($oneOfFields = ["query"]),
                    set: $util.oneOfSetter($oneOfFields)
                  });
                  Object.defineProperty(HitEvent.prototype, "_time", {
                    get: $util.oneOfGetter($oneOfFields = ["time"]),
                    set: $util.oneOfSetter($oneOfFields)
                  });
                  HitEvent.create = function create(properties) {
                    return new HitEvent(properties);
                  };
                  HitEvent.encode = function encode(message, writer) {
                    if (!writer)
                      writer = $Writer.create();
                    if (message.clientInfo != null && Object.hasOwnProperty.call(message, "clientInfo"))
                      $root.com.avast.analytics.payload.urlite.ClientInfo.encode(message.clientInfo, writer.uint32(10).fork()).ldelim();
                    if (message.userAgent != null && Object.hasOwnProperty.call(message, "userAgent"))
                      writer.uint32(18).string(message.userAgent);
                    if (message.query != null && Object.hasOwnProperty.call(message, "query"))
                      $root.com.avast.analytics.payload.urlite.Query.encode(message.query, writer.uint32(26).fork()).ldelim();
                    if (message.time != null && Object.hasOwnProperty.call(message, "time"))
                      writer.uint32(32).int64(message.time);
                    if (message.matches != null && message.matches.length)
                      for (var i = 0; i < message.matches.length; ++i)
                        $root.com.avast.analytics.payload.urlite.Match.encode(message.matches[i], writer.uint32(82).fork()).ldelim();
                    if (message.detections != null && message.detections.length)
                      for (var i = 0; i < message.detections.length; ++i)
                        $root.com.avast.analytics.payload.urlite.Detection.encode(message.detections[i], writer.uint32(90).fork()).ldelim();
                    return writer;
                  };
                  HitEvent.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                  };
                  HitEvent.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                      reader = $Reader.create(reader);
                    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.com.avast.analytics.payload.urlite.HitEvent();
                    while (reader.pos < end) {
                      var tag = reader.uint32();
                      switch (tag >>> 3) {
                        case 1: {
                          message.clientInfo = $root.com.avast.analytics.payload.urlite.ClientInfo.decode(reader, reader.uint32());
                          break;
                        }
                        case 2: {
                          message.userAgent = reader.string();
                          break;
                        }
                        case 3: {
                          message.query = $root.com.avast.analytics.payload.urlite.Query.decode(reader, reader.uint32());
                          break;
                        }
                        case 4: {
                          message.time = reader.int64();
                          break;
                        }
                        case 10: {
                          if (!(message.matches && message.matches.length))
                            message.matches = [];
                          message.matches.push($root.com.avast.analytics.payload.urlite.Match.decode(reader, reader.uint32()));
                          break;
                        }
                        case 11: {
                          if (!(message.detections && message.detections.length))
                            message.detections = [];
                          message.detections.push($root.com.avast.analytics.payload.urlite.Detection.decode(reader, reader.uint32()));
                          break;
                        }
                        default:
                          reader.skipType(tag & 7);
                          break;
                      }
                    }
                    return message;
                  };
                  HitEvent.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                      reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                  };
                  HitEvent.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                      return "object expected";
                    var properties = {};
                    if (message.clientInfo != null && message.hasOwnProperty("clientInfo")) {
                      properties._clientInfo = 1;
                      {
                        var error = $root.com.avast.analytics.payload.urlite.ClientInfo.verify(message.clientInfo);
                        if (error)
                          return "clientInfo." + error;
                      }
                    }
                    if (message.userAgent != null && message.hasOwnProperty("userAgent")) {
                      properties._userAgent = 1;
                      if (!$util.isString(message.userAgent))
                        return "userAgent: string expected";
                    }
                    if (message.query != null && message.hasOwnProperty("query")) {
                      properties._query = 1;
                      {
                        var error = $root.com.avast.analytics.payload.urlite.Query.verify(message.query);
                        if (error)
                          return "query." + error;
                      }
                    }
                    if (message.time != null && message.hasOwnProperty("time")) {
                      properties._time = 1;
                      if (!$util.isInteger(message.time) && !(message.time && $util.isInteger(message.time.low) && $util.isInteger(message.time.high)))
                        return "time: integer|Long expected";
                    }
                    if (message.matches != null && message.hasOwnProperty("matches")) {
                      if (!Array.isArray(message.matches))
                        return "matches: array expected";
                      for (var i = 0; i < message.matches.length; ++i) {
                        var error = $root.com.avast.analytics.payload.urlite.Match.verify(message.matches[i]);
                        if (error)
                          return "matches." + error;
                      }
                    }
                    if (message.detections != null && message.hasOwnProperty("detections")) {
                      if (!Array.isArray(message.detections))
                        return "detections: array expected";
                      for (var i = 0; i < message.detections.length; ++i) {
                        var error = $root.com.avast.analytics.payload.urlite.Detection.verify(message.detections[i]);
                        if (error)
                          return "detections." + error;
                      }
                    }
                    return null;
                  };
                  HitEvent.fromObject = function fromObject(object) {
                    if (object instanceof $root.com.avast.analytics.payload.urlite.HitEvent)
                      return object;
                    var message = new $root.com.avast.analytics.payload.urlite.HitEvent();
                    if (object.clientInfo != null) {
                      if (typeof object.clientInfo !== "object")
                        throw TypeError(".com.avast.analytics.payload.urlite.HitEvent.clientInfo: object expected");
                      message.clientInfo = $root.com.avast.analytics.payload.urlite.ClientInfo.fromObject(object.clientInfo);
                    }
                    if (object.userAgent != null)
                      message.userAgent = String(object.userAgent);
                    if (object.query != null) {
                      if (typeof object.query !== "object")
                        throw TypeError(".com.avast.analytics.payload.urlite.HitEvent.query: object expected");
                      message.query = $root.com.avast.analytics.payload.urlite.Query.fromObject(object.query);
                    }
                    if (object.time != null) {
                      if ($util.Long)
                        (message.time = $util.Long.fromValue(object.time)).unsigned = false;
                      else if (typeof object.time === "string")
                        message.time = parseInt(object.time, 10);
                      else if (typeof object.time === "number")
                        message.time = object.time;
                      else if (typeof object.time === "object")
                        message.time = new $util.LongBits(object.time.low >>> 0, object.time.high >>> 0).toNumber();
                    }
                    if (object.matches) {
                      if (!Array.isArray(object.matches))
                        throw TypeError(".com.avast.analytics.payload.urlite.HitEvent.matches: array expected");
                      message.matches = [];
                      for (var i = 0; i < object.matches.length; ++i) {
                        if (typeof object.matches[i] !== "object")
                          throw TypeError(".com.avast.analytics.payload.urlite.HitEvent.matches: object expected");
                        message.matches[i] = $root.com.avast.analytics.payload.urlite.Match.fromObject(object.matches[i]);
                      }
                    }
                    if (object.detections) {
                      if (!Array.isArray(object.detections))
                        throw TypeError(".com.avast.analytics.payload.urlite.HitEvent.detections: array expected");
                      message.detections = [];
                      for (var i = 0; i < object.detections.length; ++i) {
                        if (typeof object.detections[i] !== "object")
                          throw TypeError(".com.avast.analytics.payload.urlite.HitEvent.detections: object expected");
                        message.detections[i] = $root.com.avast.analytics.payload.urlite.Detection.fromObject(object.detections[i]);
                      }
                    }
                    return message;
                  };
                  HitEvent.toObject = function toObject(message, options) {
                    if (!options)
                      options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                      object.matches = [];
                      object.detections = [];
                    }
                    if (message.clientInfo != null && message.hasOwnProperty("clientInfo")) {
                      object.clientInfo = $root.com.avast.analytics.payload.urlite.ClientInfo.toObject(message.clientInfo, options);
                      if (options.oneofs)
                        object._clientInfo = "clientInfo";
                    }
                    if (message.userAgent != null && message.hasOwnProperty("userAgent")) {
                      object.userAgent = message.userAgent;
                      if (options.oneofs)
                        object._userAgent = "userAgent";
                    }
                    if (message.query != null && message.hasOwnProperty("query")) {
                      object.query = $root.com.avast.analytics.payload.urlite.Query.toObject(message.query, options);
                      if (options.oneofs)
                        object._query = "query";
                    }
                    if (message.time != null && message.hasOwnProperty("time")) {
                      if (typeof message.time === "number")
                        object.time = options.longs === String ? String(message.time) : message.time;
                      else
                        object.time = options.longs === String ? $util.Long.prototype.toString.call(message.time) : options.longs === Number ? new $util.LongBits(message.time.low >>> 0, message.time.high >>> 0).toNumber() : message.time;
                      if (options.oneofs)
                        object._time = "time";
                    }
                    if (message.matches && message.matches.length) {
                      object.matches = [];
                      for (var j = 0; j < message.matches.length; ++j)
                        object.matches[j] = $root.com.avast.analytics.payload.urlite.Match.toObject(message.matches[j], options);
                    }
                    if (message.detections && message.detections.length) {
                      object.detections = [];
                      for (var j = 0; j < message.detections.length; ++j)
                        object.detections[j] = $root.com.avast.analytics.payload.urlite.Detection.toObject(message.detections[j], options);
                    }
                    return object;
                  };
                  HitEvent.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                  };
                  HitEvent.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === void 0) {
                      typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/com.avast.analytics.payload.urlite.HitEvent";
                  };
                  return HitEvent;
                }();
                urlite3.ClientInfo = function() {
                  function ClientInfo(properties) {
                    if (properties) {
                      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                          this[keys[i]] = properties[keys[i]];
                    }
                  }
                  ClientInfo.prototype.identity = null;
                  ClientInfo.prototype.platform = null;
                  ClientInfo.prototype.product = null;
                  ClientInfo.prototype.skyring = null;
                  ClientInfo.prototype.geo = null;
                  var $oneOfFields;
                  Object.defineProperty(ClientInfo.prototype, "_identity", {
                    get: $util.oneOfGetter($oneOfFields = ["identity"]),
                    set: $util.oneOfSetter($oneOfFields)
                  });
                  Object.defineProperty(ClientInfo.prototype, "_platform", {
                    get: $util.oneOfGetter($oneOfFields = ["platform"]),
                    set: $util.oneOfSetter($oneOfFields)
                  });
                  Object.defineProperty(ClientInfo.prototype, "_product", {
                    get: $util.oneOfGetter($oneOfFields = ["product"]),
                    set: $util.oneOfSetter($oneOfFields)
                  });
                  Object.defineProperty(ClientInfo.prototype, "_skyring", {
                    get: $util.oneOfGetter($oneOfFields = ["skyring"]),
                    set: $util.oneOfSetter($oneOfFields)
                  });
                  Object.defineProperty(ClientInfo.prototype, "_geo", {
                    get: $util.oneOfGetter($oneOfFields = ["geo"]),
                    set: $util.oneOfSetter($oneOfFields)
                  });
                  ClientInfo.create = function create(properties) {
                    return new ClientInfo(properties);
                  };
                  ClientInfo.encode = function encode(message, writer) {
                    if (!writer)
                      writer = $Writer.create();
                    if (message.identity != null && Object.hasOwnProperty.call(message, "identity"))
                      $root.com.avast.analytics.v4.proto.Identity.encode(message.identity, writer.uint32(10).fork()).ldelim();
                    if (message.platform != null && Object.hasOwnProperty.call(message, "platform"))
                      $root.com.avast.analytics.v4.proto.Platform.encode(message.platform, writer.uint32(18).fork()).ldelim();
                    if (message.product != null && Object.hasOwnProperty.call(message, "product"))
                      $root.com.avast.analytics.v4.proto.Product.encode(message.product, writer.uint32(26).fork()).ldelim();
                    if (message.skyring != null && Object.hasOwnProperty.call(message, "skyring"))
                      $root.com.avast.analytics.v4.proto.Skyring.encode(message.skyring, writer.uint32(34).fork()).ldelim();
                    if (message.geo != null && Object.hasOwnProperty.call(message, "geo"))
                      $root.com.avast.analytics.v4.proto.Geo.encode(message.geo, writer.uint32(42).fork()).ldelim();
                    return writer;
                  };
                  ClientInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                  };
                  ClientInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                      reader = $Reader.create(reader);
                    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.com.avast.analytics.payload.urlite.ClientInfo();
                    while (reader.pos < end) {
                      var tag = reader.uint32();
                      switch (tag >>> 3) {
                        case 1: {
                          message.identity = $root.com.avast.analytics.v4.proto.Identity.decode(reader, reader.uint32());
                          break;
                        }
                        case 2: {
                          message.platform = $root.com.avast.analytics.v4.proto.Platform.decode(reader, reader.uint32());
                          break;
                        }
                        case 3: {
                          message.product = $root.com.avast.analytics.v4.proto.Product.decode(reader, reader.uint32());
                          break;
                        }
                        case 4: {
                          message.skyring = $root.com.avast.analytics.v4.proto.Skyring.decode(reader, reader.uint32());
                          break;
                        }
                        case 5: {
                          message.geo = $root.com.avast.analytics.v4.proto.Geo.decode(reader, reader.uint32());
                          break;
                        }
                        default:
                          reader.skipType(tag & 7);
                          break;
                      }
                    }
                    return message;
                  };
                  ClientInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                      reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                  };
                  ClientInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                      return "object expected";
                    var properties = {};
                    if (message.identity != null && message.hasOwnProperty("identity")) {
                      properties._identity = 1;
                      {
                        var error = $root.com.avast.analytics.v4.proto.Identity.verify(message.identity);
                        if (error)
                          return "identity." + error;
                      }
                    }
                    if (message.platform != null && message.hasOwnProperty("platform")) {
                      properties._platform = 1;
                      {
                        var error = $root.com.avast.analytics.v4.proto.Platform.verify(message.platform);
                        if (error)
                          return "platform." + error;
                      }
                    }
                    if (message.product != null && message.hasOwnProperty("product")) {
                      properties._product = 1;
                      {
                        var error = $root.com.avast.analytics.v4.proto.Product.verify(message.product);
                        if (error)
                          return "product." + error;
                      }
                    }
                    if (message.skyring != null && message.hasOwnProperty("skyring")) {
                      properties._skyring = 1;
                      {
                        var error = $root.com.avast.analytics.v4.proto.Skyring.verify(message.skyring);
                        if (error)
                          return "skyring." + error;
                      }
                    }
                    if (message.geo != null && message.hasOwnProperty("geo")) {
                      properties._geo = 1;
                      {
                        var error = $root.com.avast.analytics.v4.proto.Geo.verify(message.geo);
                        if (error)
                          return "geo." + error;
                      }
                    }
                    return null;
                  };
                  ClientInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.com.avast.analytics.payload.urlite.ClientInfo)
                      return object;
                    var message = new $root.com.avast.analytics.payload.urlite.ClientInfo();
                    if (object.identity != null) {
                      if (typeof object.identity !== "object")
                        throw TypeError(".com.avast.analytics.payload.urlite.ClientInfo.identity: object expected");
                      message.identity = $root.com.avast.analytics.v4.proto.Identity.fromObject(object.identity);
                    }
                    if (object.platform != null) {
                      if (typeof object.platform !== "object")
                        throw TypeError(".com.avast.analytics.payload.urlite.ClientInfo.platform: object expected");
                      message.platform = $root.com.avast.analytics.v4.proto.Platform.fromObject(object.platform);
                    }
                    if (object.product != null) {
                      if (typeof object.product !== "object")
                        throw TypeError(".com.avast.analytics.payload.urlite.ClientInfo.product: object expected");
                      message.product = $root.com.avast.analytics.v4.proto.Product.fromObject(object.product);
                    }
                    if (object.skyring != null) {
                      if (typeof object.skyring !== "object")
                        throw TypeError(".com.avast.analytics.payload.urlite.ClientInfo.skyring: object expected");
                      message.skyring = $root.com.avast.analytics.v4.proto.Skyring.fromObject(object.skyring);
                    }
                    if (object.geo != null) {
                      if (typeof object.geo !== "object")
                        throw TypeError(".com.avast.analytics.payload.urlite.ClientInfo.geo: object expected");
                      message.geo = $root.com.avast.analytics.v4.proto.Geo.fromObject(object.geo);
                    }
                    return message;
                  };
                  ClientInfo.toObject = function toObject(message, options) {
                    if (!options)
                      options = {};
                    var object = {};
                    if (message.identity != null && message.hasOwnProperty("identity")) {
                      object.identity = $root.com.avast.analytics.v4.proto.Identity.toObject(message.identity, options);
                      if (options.oneofs)
                        object._identity = "identity";
                    }
                    if (message.platform != null && message.hasOwnProperty("platform")) {
                      object.platform = $root.com.avast.analytics.v4.proto.Platform.toObject(message.platform, options);
                      if (options.oneofs)
                        object._platform = "platform";
                    }
                    if (message.product != null && message.hasOwnProperty("product")) {
                      object.product = $root.com.avast.analytics.v4.proto.Product.toObject(message.product, options);
                      if (options.oneofs)
                        object._product = "product";
                    }
                    if (message.skyring != null && message.hasOwnProperty("skyring")) {
                      object.skyring = $root.com.avast.analytics.v4.proto.Skyring.toObject(message.skyring, options);
                      if (options.oneofs)
                        object._skyring = "skyring";
                    }
                    if (message.geo != null && message.hasOwnProperty("geo")) {
                      object.geo = $root.com.avast.analytics.v4.proto.Geo.toObject(message.geo, options);
                      if (options.oneofs)
                        object._geo = "geo";
                    }
                    return object;
                  };
                  ClientInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                  };
                  ClientInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === void 0) {
                      typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/com.avast.analytics.payload.urlite.ClientInfo";
                  };
                  return ClientInfo;
                }();
                urlite3.QueryType = function() {
                  var valuesById = {}, values = Object.create(valuesById);
                  values[valuesById[0] = "UNKNOWN_TYPE"] = 0;
                  values[valuesById[1] = "URL"] = 1;
                  values[valuesById[2] = "DOMAIN"] = 2;
                  return values;
                }();
                urlite3.Query = function() {
                  function Query(properties) {
                    if (properties) {
                      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                          this[keys[i]] = properties[keys[i]];
                    }
                  }
                  Query.prototype.type = null;
                  Query.prototype.value = null;
                  var $oneOfFields;
                  Object.defineProperty(Query.prototype, "_type", {
                    get: $util.oneOfGetter($oneOfFields = ["type"]),
                    set: $util.oneOfSetter($oneOfFields)
                  });
                  Object.defineProperty(Query.prototype, "_value", {
                    get: $util.oneOfGetter($oneOfFields = ["value"]),
                    set: $util.oneOfSetter($oneOfFields)
                  });
                  Query.create = function create(properties) {
                    return new Query(properties);
                  };
                  Query.encode = function encode(message, writer) {
                    if (!writer)
                      writer = $Writer.create();
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                      writer.uint32(8).int32(message.type);
                    if (message.value != null && Object.hasOwnProperty.call(message, "value"))
                      writer.uint32(18).string(message.value);
                    return writer;
                  };
                  Query.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                  };
                  Query.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                      reader = $Reader.create(reader);
                    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.com.avast.analytics.payload.urlite.Query();
                    while (reader.pos < end) {
                      var tag = reader.uint32();
                      switch (tag >>> 3) {
                        case 1: {
                          message.type = reader.int32();
                          break;
                        }
                        case 2: {
                          message.value = reader.string();
                          break;
                        }
                        default:
                          reader.skipType(tag & 7);
                          break;
                      }
                    }
                    return message;
                  };
                  Query.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                      reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                  };
                  Query.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                      return "object expected";
                    var properties = {};
                    if (message.type != null && message.hasOwnProperty("type")) {
                      properties._type = 1;
                      switch (message.type) {
                        default:
                          return "type: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                          break;
                      }
                    }
                    if (message.value != null && message.hasOwnProperty("value")) {
                      properties._value = 1;
                      if (!$util.isString(message.value))
                        return "value: string expected";
                    }
                    return null;
                  };
                  Query.fromObject = function fromObject(object) {
                    if (object instanceof $root.com.avast.analytics.payload.urlite.Query)
                      return object;
                    var message = new $root.com.avast.analytics.payload.urlite.Query();
                    switch (object.type) {
                      default:
                        if (typeof object.type === "number") {
                          message.type = object.type;
                          break;
                        }
                        break;
                      case "UNKNOWN_TYPE":
                      case 0:
                        message.type = 0;
                        break;
                      case "URL":
                      case 1:
                        message.type = 1;
                        break;
                      case "DOMAIN":
                      case 2:
                        message.type = 2;
                        break;
                    }
                    if (object.value != null)
                      message.value = String(object.value);
                    return message;
                  };
                  Query.toObject = function toObject(message, options) {
                    if (!options)
                      options = {};
                    var object = {};
                    if (message.type != null && message.hasOwnProperty("type")) {
                      object.type = options.enums === String ? $root.com.avast.analytics.payload.urlite.QueryType[message.type] === void 0 ? message.type : $root.com.avast.analytics.payload.urlite.QueryType[message.type] : message.type;
                      if (options.oneofs)
                        object._type = "type";
                    }
                    if (message.value != null && message.hasOwnProperty("value")) {
                      object.value = message.value;
                      if (options.oneofs)
                        object._value = "value";
                    }
                    return object;
                  };
                  Query.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                  };
                  Query.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === void 0) {
                      typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/com.avast.analytics.payload.urlite.Query";
                  };
                  return Query;
                }();
                urlite3.Match = function() {
                  function Match(properties) {
                    this.findings = [];
                    this.dryRuns = [];
                    if (properties) {
                      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                          this[keys[i]] = properties[keys[i]];
                    }
                  }
                  Match.prototype.matchKey = null;
                  Match.prototype.findings = $util.emptyArray;
                  Match.prototype.dryRuns = $util.emptyArray;
                  var $oneOfFields;
                  Object.defineProperty(Match.prototype, "_matchKey", {
                    get: $util.oneOfGetter($oneOfFields = ["matchKey"]),
                    set: $util.oneOfSetter($oneOfFields)
                  });
                  Match.create = function create(properties) {
                    return new Match(properties);
                  };
                  Match.encode = function encode(message, writer) {
                    if (!writer)
                      writer = $Writer.create();
                    if (message.matchKey != null && Object.hasOwnProperty.call(message, "matchKey"))
                      writer.uint32(10).bytes(message.matchKey);
                    if (message.findings != null && message.findings.length) {
                      writer.uint32(18).fork();
                      for (var i = 0; i < message.findings.length; ++i)
                        writer.int32(message.findings[i]);
                      writer.ldelim();
                    }
                    if (message.dryRuns != null && message.dryRuns.length) {
                      writer.uint32(26).fork();
                      for (var i = 0; i < message.dryRuns.length; ++i)
                        writer.int32(message.dryRuns[i]);
                      writer.ldelim();
                    }
                    return writer;
                  };
                  Match.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                  };
                  Match.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                      reader = $Reader.create(reader);
                    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.com.avast.analytics.payload.urlite.Match();
                    while (reader.pos < end) {
                      var tag = reader.uint32();
                      switch (tag >>> 3) {
                        case 1: {
                          message.matchKey = reader.bytes();
                          break;
                        }
                        case 2: {
                          if (!(message.findings && message.findings.length))
                            message.findings = [];
                          if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                              message.findings.push(reader.int32());
                          } else
                            message.findings.push(reader.int32());
                          break;
                        }
                        case 3: {
                          if (!(message.dryRuns && message.dryRuns.length))
                            message.dryRuns = [];
                          if ((tag & 7) === 2) {
                            var end2 = reader.uint32() + reader.pos;
                            while (reader.pos < end2)
                              message.dryRuns.push(reader.int32());
                          } else
                            message.dryRuns.push(reader.int32());
                          break;
                        }
                        default:
                          reader.skipType(tag & 7);
                          break;
                      }
                    }
                    return message;
                  };
                  Match.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                      reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                  };
                  Match.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                      return "object expected";
                    var properties = {};
                    if (message.matchKey != null && message.hasOwnProperty("matchKey")) {
                      properties._matchKey = 1;
                      if (!(message.matchKey && typeof message.matchKey.length === "number" || $util.isString(message.matchKey)))
                        return "matchKey: buffer expected";
                    }
                    if (message.findings != null && message.hasOwnProperty("findings")) {
                      if (!Array.isArray(message.findings))
                        return "findings: array expected";
                      for (var i = 0; i < message.findings.length; ++i)
                        switch (message.findings[i]) {
                          default:
                            return "findings: enum value[] expected";
                          case 0:
                          case 1:
                          case 2:
                          case 3:
                          case 4:
                          case 5:
                          case 6:
                          case 7:
                            break;
                        }
                    }
                    if (message.dryRuns != null && message.hasOwnProperty("dryRuns")) {
                      if (!Array.isArray(message.dryRuns))
                        return "dryRuns: array expected";
                      for (var i = 0; i < message.dryRuns.length; ++i)
                        switch (message.dryRuns[i]) {
                          default:
                            return "dryRuns: enum value[] expected";
                          case 0:
                          case 1:
                          case 2:
                          case 3:
                          case 4:
                          case 5:
                          case 6:
                          case 7:
                            break;
                        }
                    }
                    return null;
                  };
                  Match.fromObject = function fromObject(object) {
                    if (object instanceof $root.com.avast.analytics.payload.urlite.Match)
                      return object;
                    var message = new $root.com.avast.analytics.payload.urlite.Match();
                    if (object.matchKey != null) {
                      if (typeof object.matchKey === "string")
                        $util.base64.decode(object.matchKey, message.matchKey = $util.newBuffer($util.base64.length(object.matchKey)), 0);
                      else if (object.matchKey.length >= 0)
                        message.matchKey = object.matchKey;
                    }
                    if (object.findings) {
                      if (!Array.isArray(object.findings))
                        throw TypeError(".com.avast.analytics.payload.urlite.Match.findings: array expected");
                      message.findings = [];
                      for (var i = 0; i < object.findings.length; ++i)
                        switch (object.findings[i]) {
                          default:
                            if (typeof object.findings[i] === "number") {
                              message.findings[i] = object.findings[i];
                              break;
                            }
                          case "OTHER_FINDING":
                          case 0:
                            message.findings[i] = 0;
                            break;
                          case "MALWARE":
                          case 1:
                            message.findings[i] = 1;
                            break;
                          case "PHISHING":
                          case 2:
                            message.findings[i] = 2;
                            break;
                          case "BOTNET_CNC":
                          case 3:
                            message.findings[i] = 3;
                            break;
                          case "BOTNET_ZOMBIE":
                          case 4:
                            message.findings[i] = 4;
                            break;
                          case "TYPOSQUATTING":
                          case 5:
                            message.findings[i] = 5;
                            break;
                          case "GOVERNMENTAL_BLOCK":
                          case 6:
                            message.findings[i] = 6;
                            break;
                          case "ESHOP_SCAM":
                          case 7:
                            message.findings[i] = 7;
                            break;
                        }
                    }
                    if (object.dryRuns) {
                      if (!Array.isArray(object.dryRuns))
                        throw TypeError(".com.avast.analytics.payload.urlite.Match.dryRuns: array expected");
                      message.dryRuns = [];
                      for (var i = 0; i < object.dryRuns.length; ++i)
                        switch (object.dryRuns[i]) {
                          default:
                            if (typeof object.dryRuns[i] === "number") {
                              message.dryRuns[i] = object.dryRuns[i];
                              break;
                            }
                          case "OTHER_FINDING":
                          case 0:
                            message.dryRuns[i] = 0;
                            break;
                          case "MALWARE":
                          case 1:
                            message.dryRuns[i] = 1;
                            break;
                          case "PHISHING":
                          case 2:
                            message.dryRuns[i] = 2;
                            break;
                          case "BOTNET_CNC":
                          case 3:
                            message.dryRuns[i] = 3;
                            break;
                          case "BOTNET_ZOMBIE":
                          case 4:
                            message.dryRuns[i] = 4;
                            break;
                          case "TYPOSQUATTING":
                          case 5:
                            message.dryRuns[i] = 5;
                            break;
                          case "GOVERNMENTAL_BLOCK":
                          case 6:
                            message.dryRuns[i] = 6;
                            break;
                          case "ESHOP_SCAM":
                          case 7:
                            message.dryRuns[i] = 7;
                            break;
                        }
                    }
                    return message;
                  };
                  Match.toObject = function toObject(message, options) {
                    if (!options)
                      options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                      object.findings = [];
                      object.dryRuns = [];
                    }
                    if (message.matchKey != null && message.hasOwnProperty("matchKey")) {
                      object.matchKey = options.bytes === String ? $util.base64.encode(message.matchKey, 0, message.matchKey.length) : options.bytes === Array ? Array.prototype.slice.call(message.matchKey) : message.matchKey;
                      if (options.oneofs)
                        object._matchKey = "matchKey";
                    }
                    if (message.findings && message.findings.length) {
                      object.findings = [];
                      for (var j = 0; j < message.findings.length; ++j)
                        object.findings[j] = options.enums === String ? $root.com.avast.analytics.payload.urlite.Finding[message.findings[j]] === void 0 ? message.findings[j] : $root.com.avast.analytics.payload.urlite.Finding[message.findings[j]] : message.findings[j];
                    }
                    if (message.dryRuns && message.dryRuns.length) {
                      object.dryRuns = [];
                      for (var j = 0; j < message.dryRuns.length; ++j)
                        object.dryRuns[j] = options.enums === String ? $root.com.avast.analytics.payload.urlite.Finding[message.dryRuns[j]] === void 0 ? message.dryRuns[j] : $root.com.avast.analytics.payload.urlite.Finding[message.dryRuns[j]] : message.dryRuns[j];
                    }
                    return object;
                  };
                  Match.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                  };
                  Match.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === void 0) {
                      typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/com.avast.analytics.payload.urlite.Match";
                  };
                  return Match;
                }();
                urlite3.Detection = function() {
                  function Detection(properties) {
                    if (properties) {
                      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                          this[keys[i]] = properties[keys[i]];
                    }
                  }
                  Detection.prototype.name = null;
                  Detection.prototype.active = null;
                  Detection.prototype.finding = null;
                  Detection.prototype.blacklist = null;
                  var $oneOfFields;
                  Object.defineProperty(Detection.prototype, "_name", {
                    get: $util.oneOfGetter($oneOfFields = ["name"]),
                    set: $util.oneOfSetter($oneOfFields)
                  });
                  Object.defineProperty(Detection.prototype, "_active", {
                    get: $util.oneOfGetter($oneOfFields = ["active"]),
                    set: $util.oneOfSetter($oneOfFields)
                  });
                  Object.defineProperty(Detection.prototype, "_finding", {
                    get: $util.oneOfGetter($oneOfFields = ["finding"]),
                    set: $util.oneOfSetter($oneOfFields)
                  });
                  Object.defineProperty(Detection.prototype, "_blacklist", {
                    get: $util.oneOfGetter($oneOfFields = ["blacklist"]),
                    set: $util.oneOfSetter($oneOfFields)
                  });
                  Detection.create = function create(properties) {
                    return new Detection(properties);
                  };
                  Detection.encode = function encode(message, writer) {
                    if (!writer)
                      writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                      writer.uint32(10).string(message.name);
                    if (message.active != null && Object.hasOwnProperty.call(message, "active"))
                      writer.uint32(16).bool(message.active);
                    if (message.finding != null && Object.hasOwnProperty.call(message, "finding"))
                      writer.uint32(24).int32(message.finding);
                    if (message.blacklist != null && Object.hasOwnProperty.call(message, "blacklist"))
                      writer.uint32(32).int32(message.blacklist);
                    return writer;
                  };
                  Detection.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                  };
                  Detection.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                      reader = $Reader.create(reader);
                    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.com.avast.analytics.payload.urlite.Detection();
                    while (reader.pos < end) {
                      var tag = reader.uint32();
                      switch (tag >>> 3) {
                        case 1: {
                          message.name = reader.string();
                          break;
                        }
                        case 2: {
                          message.active = reader.bool();
                          break;
                        }
                        case 3: {
                          message.finding = reader.int32();
                          break;
                        }
                        case 4: {
                          message.blacklist = reader.int32();
                          break;
                        }
                        default:
                          reader.skipType(tag & 7);
                          break;
                      }
                    }
                    return message;
                  };
                  Detection.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                      reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                  };
                  Detection.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                      return "object expected";
                    var properties = {};
                    if (message.name != null && message.hasOwnProperty("name")) {
                      properties._name = 1;
                      if (!$util.isString(message.name))
                        return "name: string expected";
                    }
                    if (message.active != null && message.hasOwnProperty("active")) {
                      properties._active = 1;
                      if (typeof message.active !== "boolean")
                        return "active: boolean expected";
                    }
                    if (message.finding != null && message.hasOwnProperty("finding")) {
                      properties._finding = 1;
                      switch (message.finding) {
                        default:
                          return "finding: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                          break;
                      }
                    }
                    if (message.blacklist != null && message.hasOwnProperty("blacklist")) {
                      properties._blacklist = 1;
                      switch (message.blacklist) {
                        default:
                          return "blacklist: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 5:
                        case 4:
                          break;
                      }
                    }
                    return null;
                  };
                  Detection.fromObject = function fromObject(object) {
                    if (object instanceof $root.com.avast.analytics.payload.urlite.Detection)
                      return object;
                    var message = new $root.com.avast.analytics.payload.urlite.Detection();
                    if (object.name != null)
                      message.name = String(object.name);
                    if (object.active != null)
                      message.active = Boolean(object.active);
                    switch (object.finding) {
                      default:
                        if (typeof object.finding === "number") {
                          message.finding = object.finding;
                          break;
                        }
                        break;
                      case "OTHER_FINDING":
                      case 0:
                        message.finding = 0;
                        break;
                      case "MALWARE":
                      case 1:
                        message.finding = 1;
                        break;
                      case "PHISHING":
                      case 2:
                        message.finding = 2;
                        break;
                      case "BOTNET_CNC":
                      case 3:
                        message.finding = 3;
                        break;
                      case "BOTNET_ZOMBIE":
                      case 4:
                        message.finding = 4;
                        break;
                      case "TYPOSQUATTING":
                      case 5:
                        message.finding = 5;
                        break;
                      case "GOVERNMENTAL_BLOCK":
                      case 6:
                        message.finding = 6;
                        break;
                      case "ESHOP_SCAM":
                      case 7:
                        message.finding = 7;
                        break;
                    }
                    switch (object.blacklist) {
                      default:
                        if (typeof object.blacklist === "number") {
                          message.blacklist = object.blacklist;
                          break;
                        }
                        break;
                      case "OTHER_BLACKLIST":
                      case 0:
                        message.blacklist = 0;
                        break;
                      case "VIRUSLAB":
                      case 1:
                        message.blacklist = 1;
                        break;
                      case "IPADDR":
                      case 2:
                        message.blacklist = 2;
                        break;
                      case "URL_PATTERN":
                      case 3:
                        message.blacklist = 3;
                        break;
                      case "GEO_BLOCKLIST_JAPAN":
                      case 5:
                        message.blacklist = 5;
                        break;
                      case "DEBUG":
                      case 4:
                        message.blacklist = 4;
                        break;
                    }
                    return message;
                  };
                  Detection.toObject = function toObject(message, options) {
                    if (!options)
                      options = {};
                    var object = {};
                    if (message.name != null && message.hasOwnProperty("name")) {
                      object.name = message.name;
                      if (options.oneofs)
                        object._name = "name";
                    }
                    if (message.active != null && message.hasOwnProperty("active")) {
                      object.active = message.active;
                      if (options.oneofs)
                        object._active = "active";
                    }
                    if (message.finding != null && message.hasOwnProperty("finding")) {
                      object.finding = options.enums === String ? $root.com.avast.analytics.payload.urlite.Finding[message.finding] === void 0 ? message.finding : $root.com.avast.analytics.payload.urlite.Finding[message.finding] : message.finding;
                      if (options.oneofs)
                        object._finding = "finding";
                    }
                    if (message.blacklist != null && message.hasOwnProperty("blacklist")) {
                      object.blacklist = options.enums === String ? $root.com.avast.analytics.payload.urlite.Blacklist[message.blacklist] === void 0 ? message.blacklist : $root.com.avast.analytics.payload.urlite.Blacklist[message.blacklist] : message.blacklist;
                      if (options.oneofs)
                        object._blacklist = "blacklist";
                    }
                    return object;
                  };
                  Detection.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                  };
                  Detection.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === void 0) {
                      typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/com.avast.analytics.payload.urlite.Detection";
                  };
                  return Detection;
                }();
                urlite3.Finding = function() {
                  var valuesById = {}, values = Object.create(valuesById);
                  values[valuesById[0] = "OTHER_FINDING"] = 0;
                  values[valuesById[1] = "MALWARE"] = 1;
                  values[valuesById[2] = "PHISHING"] = 2;
                  values[valuesById[3] = "BOTNET_CNC"] = 3;
                  values[valuesById[4] = "BOTNET_ZOMBIE"] = 4;
                  values[valuesById[5] = "TYPOSQUATTING"] = 5;
                  values[valuesById[6] = "GOVERNMENTAL_BLOCK"] = 6;
                  values[valuesById[7] = "ESHOP_SCAM"] = 7;
                  return values;
                }();
                urlite3.Blacklist = function() {
                  var valuesById = {}, values = Object.create(valuesById);
                  values[valuesById[0] = "OTHER_BLACKLIST"] = 0;
                  values[valuesById[1] = "VIRUSLAB"] = 1;
                  values[valuesById[2] = "IPADDR"] = 2;
                  values[valuesById[3] = "URL_PATTERN"] = 3;
                  values[valuesById[5] = "GEO_BLOCKLIST_JAPAN"] = 5;
                  values[valuesById[4] = "DEBUG"] = 4;
                  return values;
                }();
                return urlite3;
              }();
              return payload;
            }();
            analytics.v4 = function() {
              var v4 = {};
              v4.proto = function() {
                var proto = {};
                proto.Identity = function() {
                  function Identity(properties) {
                    this.nortonAccountIds = [];
                    this.accountIds = [];
                    if (properties) {
                      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                          this[keys[i]] = properties[keys[i]];
                    }
                  }
                  Identity.prototype.guid = "";
                  Identity.prototype.hwid = "";
                  Identity.prototype.uuid = "";
                  Identity.prototype.beApplicationId = "";
                  Identity.prototype.endpointId = "";
                  Identity.prototype.fingerprint = "";
                  Identity.prototype.nortonAccountIds = $util.emptyArray;
                  Identity.prototype.accountIds = $util.emptyArray;
                  Identity.create = function create(properties) {
                    return new Identity(properties);
                  };
                  Identity.encode = function encode(message, writer) {
                    if (!writer)
                      writer = $Writer.create();
                    if (message.guid != null && Object.hasOwnProperty.call(message, "guid"))
                      writer.uint32(10).string(message.guid);
                    if (message.hwid != null && Object.hasOwnProperty.call(message, "hwid"))
                      writer.uint32(18).string(message.hwid);
                    if (message.uuid != null && Object.hasOwnProperty.call(message, "uuid"))
                      writer.uint32(26).string(message.uuid);
                    if (message.beApplicationId != null && Object.hasOwnProperty.call(message, "beApplicationId"))
                      writer.uint32(34).string(message.beApplicationId);
                    if (message.endpointId != null && Object.hasOwnProperty.call(message, "endpointId"))
                      writer.uint32(42).string(message.endpointId);
                    if (message.fingerprint != null && Object.hasOwnProperty.call(message, "fingerprint"))
                      writer.uint32(50).string(message.fingerprint);
                    if (message.nortonAccountIds != null && message.nortonAccountIds.length)
                      for (var i = 0; i < message.nortonAccountIds.length; ++i)
                        writer.uint32(58).string(message.nortonAccountIds[i]);
                    if (message.accountIds != null && message.accountIds.length)
                      for (var i = 0; i < message.accountIds.length; ++i)
                        writer.uint32(66).string(message.accountIds[i]);
                    return writer;
                  };
                  Identity.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                  };
                  Identity.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                      reader = $Reader.create(reader);
                    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.com.avast.analytics.v4.proto.Identity();
                    while (reader.pos < end) {
                      var tag = reader.uint32();
                      switch (tag >>> 3) {
                        case 1: {
                          message.guid = reader.string();
                          break;
                        }
                        case 2: {
                          message.hwid = reader.string();
                          break;
                        }
                        case 3: {
                          message.uuid = reader.string();
                          break;
                        }
                        case 4: {
                          message.beApplicationId = reader.string();
                          break;
                        }
                        case 5: {
                          message.endpointId = reader.string();
                          break;
                        }
                        case 6: {
                          message.fingerprint = reader.string();
                          break;
                        }
                        case 7: {
                          if (!(message.nortonAccountIds && message.nortonAccountIds.length))
                            message.nortonAccountIds = [];
                          message.nortonAccountIds.push(reader.string());
                          break;
                        }
                        case 8: {
                          if (!(message.accountIds && message.accountIds.length))
                            message.accountIds = [];
                          message.accountIds.push(reader.string());
                          break;
                        }
                        default:
                          reader.skipType(tag & 7);
                          break;
                      }
                    }
                    return message;
                  };
                  Identity.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                      reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                  };
                  Identity.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                      return "object expected";
                    if (message.guid != null && message.hasOwnProperty("guid")) {
                      if (!$util.isString(message.guid))
                        return "guid: string expected";
                    }
                    if (message.hwid != null && message.hasOwnProperty("hwid")) {
                      if (!$util.isString(message.hwid))
                        return "hwid: string expected";
                    }
                    if (message.uuid != null && message.hasOwnProperty("uuid")) {
                      if (!$util.isString(message.uuid))
                        return "uuid: string expected";
                    }
                    if (message.beApplicationId != null && message.hasOwnProperty("beApplicationId")) {
                      if (!$util.isString(message.beApplicationId))
                        return "beApplicationId: string expected";
                    }
                    if (message.endpointId != null && message.hasOwnProperty("endpointId")) {
                      if (!$util.isString(message.endpointId))
                        return "endpointId: string expected";
                    }
                    if (message.fingerprint != null && message.hasOwnProperty("fingerprint")) {
                      if (!$util.isString(message.fingerprint))
                        return "fingerprint: string expected";
                    }
                    if (message.nortonAccountIds != null && message.hasOwnProperty("nortonAccountIds")) {
                      if (!Array.isArray(message.nortonAccountIds))
                        return "nortonAccountIds: array expected";
                      for (var i = 0; i < message.nortonAccountIds.length; ++i)
                        if (!$util.isString(message.nortonAccountIds[i]))
                          return "nortonAccountIds: string[] expected";
                    }
                    if (message.accountIds != null && message.hasOwnProperty("accountIds")) {
                      if (!Array.isArray(message.accountIds))
                        return "accountIds: array expected";
                      for (var i = 0; i < message.accountIds.length; ++i)
                        if (!$util.isString(message.accountIds[i]))
                          return "accountIds: string[] expected";
                    }
                    return null;
                  };
                  Identity.fromObject = function fromObject(object) {
                    if (object instanceof $root.com.avast.analytics.v4.proto.Identity)
                      return object;
                    var message = new $root.com.avast.analytics.v4.proto.Identity();
                    if (object.guid != null)
                      message.guid = String(object.guid);
                    if (object.hwid != null)
                      message.hwid = String(object.hwid);
                    if (object.uuid != null)
                      message.uuid = String(object.uuid);
                    if (object.beApplicationId != null)
                      message.beApplicationId = String(object.beApplicationId);
                    if (object.endpointId != null)
                      message.endpointId = String(object.endpointId);
                    if (object.fingerprint != null)
                      message.fingerprint = String(object.fingerprint);
                    if (object.nortonAccountIds) {
                      if (!Array.isArray(object.nortonAccountIds))
                        throw TypeError(".com.avast.analytics.v4.proto.Identity.nortonAccountIds: array expected");
                      message.nortonAccountIds = [];
                      for (var i = 0; i < object.nortonAccountIds.length; ++i)
                        message.nortonAccountIds[i] = String(object.nortonAccountIds[i]);
                    }
                    if (object.accountIds) {
                      if (!Array.isArray(object.accountIds))
                        throw TypeError(".com.avast.analytics.v4.proto.Identity.accountIds: array expected");
                      message.accountIds = [];
                      for (var i = 0; i < object.accountIds.length; ++i)
                        message.accountIds[i] = String(object.accountIds[i]);
                    }
                    return message;
                  };
                  Identity.toObject = function toObject(message, options) {
                    if (!options)
                      options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                      object.nortonAccountIds = [];
                      object.accountIds = [];
                    }
                    if (options.defaults) {
                      object.guid = "";
                      object.hwid = "";
                      object.uuid = "";
                      object.beApplicationId = "";
                      object.endpointId = "";
                      object.fingerprint = "";
                    }
                    if (message.guid != null && message.hasOwnProperty("guid"))
                      object.guid = message.guid;
                    if (message.hwid != null && message.hasOwnProperty("hwid"))
                      object.hwid = message.hwid;
                    if (message.uuid != null && message.hasOwnProperty("uuid"))
                      object.uuid = message.uuid;
                    if (message.beApplicationId != null && message.hasOwnProperty("beApplicationId"))
                      object.beApplicationId = message.beApplicationId;
                    if (message.endpointId != null && message.hasOwnProperty("endpointId"))
                      object.endpointId = message.endpointId;
                    if (message.fingerprint != null && message.hasOwnProperty("fingerprint"))
                      object.fingerprint = message.fingerprint;
                    if (message.nortonAccountIds && message.nortonAccountIds.length) {
                      object.nortonAccountIds = [];
                      for (var j = 0; j < message.nortonAccountIds.length; ++j)
                        object.nortonAccountIds[j] = message.nortonAccountIds[j];
                    }
                    if (message.accountIds && message.accountIds.length) {
                      object.accountIds = [];
                      for (var j = 0; j < message.accountIds.length; ++j)
                        object.accountIds[j] = message.accountIds[j];
                    }
                    return object;
                  };
                  Identity.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                  };
                  Identity.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === void 0) {
                      typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/com.avast.analytics.v4.proto.Identity";
                  };
                  return Identity;
                }();
                proto.Platform = function() {
                  function Platform(properties) {
                    if (properties) {
                      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                          this[keys[i]] = properties[keys[i]];
                    }
                  }
                  Platform.prototype.os = 0;
                  Platform.prototype.version = "";
                  Platform.prototype.build = "";
                  Platform.prototype.ubr = 0;
                  Platform.prototype.architecture = 1;
                  Platform.prototype.score = "";
                  Platform.prototype.lang = "";
                  Platform.prototype.timeZone = 0;
                  Platform.create = function create(properties) {
                    return new Platform(properties);
                  };
                  Platform.encode = function encode(message, writer) {
                    if (!writer)
                      writer = $Writer.create();
                    if (message.os != null && Object.hasOwnProperty.call(message, "os"))
                      writer.uint32(8).int32(message.os);
                    if (message.version != null && Object.hasOwnProperty.call(message, "version"))
                      writer.uint32(18).string(message.version);
                    if (message.build != null && Object.hasOwnProperty.call(message, "build"))
                      writer.uint32(26).string(message.build);
                    if (message.ubr != null && Object.hasOwnProperty.call(message, "ubr"))
                      writer.uint32(32).int32(message.ubr);
                    if (message.architecture != null && Object.hasOwnProperty.call(message, "architecture"))
                      writer.uint32(40).int32(message.architecture);
                    if (message.score != null && Object.hasOwnProperty.call(message, "score"))
                      writer.uint32(50).string(message.score);
                    if (message.lang != null && Object.hasOwnProperty.call(message, "lang"))
                      writer.uint32(58).string(message.lang);
                    if (message.timeZone != null && Object.hasOwnProperty.call(message, "timeZone"))
                      writer.uint32(64).sint32(message.timeZone);
                    return writer;
                  };
                  Platform.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                  };
                  Platform.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                      reader = $Reader.create(reader);
                    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.com.avast.analytics.v4.proto.Platform();
                    while (reader.pos < end) {
                      var tag = reader.uint32();
                      switch (tag >>> 3) {
                        case 1: {
                          message.os = reader.int32();
                          break;
                        }
                        case 2: {
                          message.version = reader.string();
                          break;
                        }
                        case 3: {
                          message.build = reader.string();
                          break;
                        }
                        case 4: {
                          message.ubr = reader.int32();
                          break;
                        }
                        case 5: {
                          message.architecture = reader.int32();
                          break;
                        }
                        case 6: {
                          message.score = reader.string();
                          break;
                        }
                        case 7: {
                          message.lang = reader.string();
                          break;
                        }
                        case 8: {
                          message.timeZone = reader.sint32();
                          break;
                        }
                        default:
                          reader.skipType(tag & 7);
                          break;
                      }
                    }
                    return message;
                  };
                  Platform.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                      reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                  };
                  Platform.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                      return "object expected";
                    if (message.os != null && message.hasOwnProperty("os"))
                      switch (message.os) {
                        default:
                          return "os: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                          break;
                      }
                    if (message.version != null && message.hasOwnProperty("version")) {
                      if (!$util.isString(message.version))
                        return "version: string expected";
                    }
                    if (message.build != null && message.hasOwnProperty("build")) {
                      if (!$util.isString(message.build))
                        return "build: string expected";
                    }
                    if (message.ubr != null && message.hasOwnProperty("ubr")) {
                      if (!$util.isInteger(message.ubr))
                        return "ubr: integer expected";
                    }
                    if (message.architecture != null && message.hasOwnProperty("architecture"))
                      switch (message.architecture) {
                        default:
                          return "architecture: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                          break;
                      }
                    if (message.score != null && message.hasOwnProperty("score")) {
                      if (!$util.isString(message.score))
                        return "score: string expected";
                    }
                    if (message.lang != null && message.hasOwnProperty("lang")) {
                      if (!$util.isString(message.lang))
                        return "lang: string expected";
                    }
                    if (message.timeZone != null && message.hasOwnProperty("timeZone")) {
                      if (!$util.isInteger(message.timeZone))
                        return "timeZone: integer expected";
                    }
                    return null;
                  };
                  Platform.fromObject = function fromObject(object) {
                    if (object instanceof $root.com.avast.analytics.v4.proto.Platform)
                      return object;
                    var message = new $root.com.avast.analytics.v4.proto.Platform();
                    switch (object.os) {
                      default:
                        if (typeof object.os === "number") {
                          message.os = object.os;
                          break;
                        }
                        break;
                      case "UNKNOWN_OS":
                      case 0:
                        message.os = 0;
                        break;
                      case "WINDOWS":
                      case 1:
                        message.os = 1;
                        break;
                      case "OSX":
                      case 2:
                        message.os = 2;
                        break;
                      case "IOS":
                      case 3:
                        message.os = 3;
                        break;
                      case "LINUX":
                      case 4:
                        message.os = 4;
                        break;
                      case "ANDROID":
                      case 5:
                        message.os = 5;
                        break;
                      case "CHROMEOS":
                      case 6:
                        message.os = 6;
                        break;
                    }
                    if (object.version != null)
                      message.version = String(object.version);
                    if (object.build != null)
                      message.build = String(object.build);
                    if (object.ubr != null)
                      message.ubr = object.ubr | 0;
                    switch (object.architecture) {
                      default:
                        if (typeof object.architecture === "number") {
                          message.architecture = object.architecture;
                          break;
                        }
                        break;
                      case "X86":
                      case 1:
                        message.architecture = 1;
                        break;
                      case "X64":
                      case 2:
                        message.architecture = 2;
                        break;
                      case "ARM":
                      case 3:
                        message.architecture = 3;
                        break;
                      case "ARM64":
                      case 4:
                        message.architecture = 4;
                        break;
                      case "MIPS":
                      case 5:
                        message.architecture = 5;
                        break;
                    }
                    if (object.score != null)
                      message.score = String(object.score);
                    if (object.lang != null)
                      message.lang = String(object.lang);
                    if (object.timeZone != null)
                      message.timeZone = object.timeZone | 0;
                    return message;
                  };
                  Platform.toObject = function toObject(message, options) {
                    if (!options)
                      options = {};
                    var object = {};
                    if (options.defaults) {
                      object.os = options.enums === String ? "UNKNOWN_OS" : 0;
                      object.version = "";
                      object.build = "";
                      object.ubr = 0;
                      object.architecture = options.enums === String ? "X86" : 1;
                      object.score = "";
                      object.lang = "";
                      object.timeZone = 0;
                    }
                    if (message.os != null && message.hasOwnProperty("os"))
                      object.os = options.enums === String ? $root.com.avast.analytics.v4.proto.OperatingSystem[message.os] === void 0 ? message.os : $root.com.avast.analytics.v4.proto.OperatingSystem[message.os] : message.os;
                    if (message.version != null && message.hasOwnProperty("version"))
                      object.version = message.version;
                    if (message.build != null && message.hasOwnProperty("build"))
                      object.build = message.build;
                    if (message.ubr != null && message.hasOwnProperty("ubr"))
                      object.ubr = message.ubr;
                    if (message.architecture != null && message.hasOwnProperty("architecture"))
                      object.architecture = options.enums === String ? $root.com.avast.analytics.v4.proto.Architecture[message.architecture] === void 0 ? message.architecture : $root.com.avast.analytics.v4.proto.Architecture[message.architecture] : message.architecture;
                    if (message.score != null && message.hasOwnProperty("score"))
                      object.score = message.score;
                    if (message.lang != null && message.hasOwnProperty("lang"))
                      object.lang = message.lang;
                    if (message.timeZone != null && message.hasOwnProperty("timeZone"))
                      object.timeZone = message.timeZone;
                    return object;
                  };
                  Platform.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                  };
                  Platform.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === void 0) {
                      typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/com.avast.analytics.v4.proto.Platform";
                  };
                  return Platform;
                }();
                proto.OperatingSystem = function() {
                  var valuesById = {}, values = Object.create(valuesById);
                  values[valuesById[0] = "UNKNOWN_OS"] = 0;
                  values[valuesById[1] = "WINDOWS"] = 1;
                  values[valuesById[2] = "OSX"] = 2;
                  values[valuesById[3] = "IOS"] = 3;
                  values[valuesById[4] = "LINUX"] = 4;
                  values[valuesById[5] = "ANDROID"] = 5;
                  values[valuesById[6] = "CHROMEOS"] = 6;
                  return values;
                }();
                proto.Architecture = function() {
                  var valuesById = {}, values = Object.create(valuesById);
                  values[valuesById[1] = "X86"] = 1;
                  values[valuesById[2] = "X64"] = 2;
                  values[valuesById[3] = "ARM"] = 3;
                  values[valuesById[4] = "ARM64"] = 4;
                  values[valuesById[5] = "MIPS"] = 5;
                  return values;
                }();
                proto.Product = function() {
                  function Product(properties) {
                    if (properties) {
                      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                          this[keys[i]] = properties[keys[i]];
                    }
                  }
                  Product.prototype.id = 0;
                  Product.prototype.edition = 0;
                  Product.prototype.mode = 1;
                  Product.prototype.state = 1;
                  Product.prototype.lang = "";
                  Product.prototype.versionApp = "";
                  Product.prototype.versionGui = "";
                  Product.prototype.build = 0;
                  Product.prototype.partnerId = "";
                  Product.prototype.deal = "";
                  Product.prototype.frontendEnv = "";
                  Product.prototype.backendEnv = 1;
                  Product.prototype.ipmProduct = 0;
                  Product.prototype.storeId = "";
                  Product.prototype.tenantId = "";
                  Product.prototype.repoId = "";
                  Product.prototype.internalBuild = false;
                  Product.prototype.policySkup = "";
                  Product.prototype.internalName = "";
                  Product.create = function create(properties) {
                    return new Product(properties);
                  };
                  Product.encode = function encode(message, writer) {
                    if (!writer)
                      writer = $Writer.create();
                    if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                      writer.uint32(8).int32(message.id);
                    if (message.edition != null && Object.hasOwnProperty.call(message, "edition"))
                      writer.uint32(16).int32(message.edition);
                    if (message.mode != null && Object.hasOwnProperty.call(message, "mode"))
                      writer.uint32(24).int32(message.mode);
                    if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                      writer.uint32(32).int32(message.state);
                    if (message.lang != null && Object.hasOwnProperty.call(message, "lang"))
                      writer.uint32(42).string(message.lang);
                    if (message.versionApp != null && Object.hasOwnProperty.call(message, "versionApp"))
                      writer.uint32(50).string(message.versionApp);
                    if (message.versionGui != null && Object.hasOwnProperty.call(message, "versionGui"))
                      writer.uint32(58).string(message.versionGui);
                    if (message.build != null && Object.hasOwnProperty.call(message, "build"))
                      writer.uint32(64).int32(message.build);
                    if (message.partnerId != null && Object.hasOwnProperty.call(message, "partnerId"))
                      writer.uint32(74).string(message.partnerId);
                    if (message.deal != null && Object.hasOwnProperty.call(message, "deal"))
                      writer.uint32(82).string(message.deal);
                    if (message.frontendEnv != null && Object.hasOwnProperty.call(message, "frontendEnv"))
                      writer.uint32(90).string(message.frontendEnv);
                    if (message.backendEnv != null && Object.hasOwnProperty.call(message, "backendEnv"))
                      writer.uint32(104).int32(message.backendEnv);
                    if (message.ipmProduct != null && Object.hasOwnProperty.call(message, "ipmProduct"))
                      writer.uint32(112).int32(message.ipmProduct);
                    if (message.storeId != null && Object.hasOwnProperty.call(message, "storeId"))
                      writer.uint32(122).string(message.storeId);
                    if (message.tenantId != null && Object.hasOwnProperty.call(message, "tenantId"))
                      writer.uint32(130).string(message.tenantId);
                    if (message.repoId != null && Object.hasOwnProperty.call(message, "repoId"))
                      writer.uint32(138).string(message.repoId);
                    if (message.internalBuild != null && Object.hasOwnProperty.call(message, "internalBuild"))
                      writer.uint32(144).bool(message.internalBuild);
                    if (message.policySkup != null && Object.hasOwnProperty.call(message, "policySkup"))
                      writer.uint32(154).string(message.policySkup);
                    if (message.internalName != null && Object.hasOwnProperty.call(message, "internalName"))
                      writer.uint32(162).string(message.internalName);
                    return writer;
                  };
                  Product.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                  };
                  Product.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                      reader = $Reader.create(reader);
                    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.com.avast.analytics.v4.proto.Product();
                    while (reader.pos < end) {
                      var tag = reader.uint32();
                      switch (tag >>> 3) {
                        case 1: {
                          message.id = reader.int32();
                          break;
                        }
                        case 2: {
                          message.edition = reader.int32();
                          break;
                        }
                        case 3: {
                          message.mode = reader.int32();
                          break;
                        }
                        case 4: {
                          message.state = reader.int32();
                          break;
                        }
                        case 5: {
                          message.lang = reader.string();
                          break;
                        }
                        case 6: {
                          message.versionApp = reader.string();
                          break;
                        }
                        case 7: {
                          message.versionGui = reader.string();
                          break;
                        }
                        case 8: {
                          message.build = reader.int32();
                          break;
                        }
                        case 9: {
                          message.partnerId = reader.string();
                          break;
                        }
                        case 10: {
                          message.deal = reader.string();
                          break;
                        }
                        case 11: {
                          message.frontendEnv = reader.string();
                          break;
                        }
                        case 13: {
                          message.backendEnv = reader.int32();
                          break;
                        }
                        case 14: {
                          message.ipmProduct = reader.int32();
                          break;
                        }
                        case 15: {
                          message.storeId = reader.string();
                          break;
                        }
                        case 16: {
                          message.tenantId = reader.string();
                          break;
                        }
                        case 17: {
                          message.repoId = reader.string();
                          break;
                        }
                        case 18: {
                          message.internalBuild = reader.bool();
                          break;
                        }
                        case 19: {
                          message.policySkup = reader.string();
                          break;
                        }
                        case 20: {
                          message.internalName = reader.string();
                          break;
                        }
                        default:
                          reader.skipType(tag & 7);
                          break;
                      }
                    }
                    return message;
                  };
                  Product.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                      reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                  };
                  Product.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                      return "object expected";
                    if (message.id != null && message.hasOwnProperty("id")) {
                      if (!$util.isInteger(message.id))
                        return "id: integer expected";
                    }
                    if (message.edition != null && message.hasOwnProperty("edition")) {
                      if (!$util.isInteger(message.edition))
                        return "edition: integer expected";
                    }
                    if (message.mode != null && message.hasOwnProperty("mode"))
                      switch (message.mode) {
                        default:
                          return "mode: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                          break;
                      }
                    if (message.state != null && message.hasOwnProperty("state"))
                      switch (message.state) {
                        default:
                          return "state: enum value expected";
                        case 1:
                        case 2:
                          break;
                      }
                    if (message.lang != null && message.hasOwnProperty("lang")) {
                      if (!$util.isString(message.lang))
                        return "lang: string expected";
                    }
                    if (message.versionApp != null && message.hasOwnProperty("versionApp")) {
                      if (!$util.isString(message.versionApp))
                        return "versionApp: string expected";
                    }
                    if (message.versionGui != null && message.hasOwnProperty("versionGui")) {
                      if (!$util.isString(message.versionGui))
                        return "versionGui: string expected";
                    }
                    if (message.build != null && message.hasOwnProperty("build")) {
                      if (!$util.isInteger(message.build))
                        return "build: integer expected";
                    }
                    if (message.partnerId != null && message.hasOwnProperty("partnerId")) {
                      if (!$util.isString(message.partnerId))
                        return "partnerId: string expected";
                    }
                    if (message.deal != null && message.hasOwnProperty("deal")) {
                      if (!$util.isString(message.deal))
                        return "deal: string expected";
                    }
                    if (message.frontendEnv != null && message.hasOwnProperty("frontendEnv")) {
                      if (!$util.isString(message.frontendEnv))
                        return "frontendEnv: string expected";
                    }
                    if (message.backendEnv != null && message.hasOwnProperty("backendEnv"))
                      switch (message.backendEnv) {
                        default:
                          return "backendEnv: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                          break;
                      }
                    if (message.ipmProduct != null && message.hasOwnProperty("ipmProduct")) {
                      if (!$util.isInteger(message.ipmProduct))
                        return "ipmProduct: integer expected";
                    }
                    if (message.storeId != null && message.hasOwnProperty("storeId")) {
                      if (!$util.isString(message.storeId))
                        return "storeId: string expected";
                    }
                    if (message.tenantId != null && message.hasOwnProperty("tenantId")) {
                      if (!$util.isString(message.tenantId))
                        return "tenantId: string expected";
                    }
                    if (message.repoId != null && message.hasOwnProperty("repoId")) {
                      if (!$util.isString(message.repoId))
                        return "repoId: string expected";
                    }
                    if (message.internalBuild != null && message.hasOwnProperty("internalBuild")) {
                      if (typeof message.internalBuild !== "boolean")
                        return "internalBuild: boolean expected";
                    }
                    if (message.policySkup != null && message.hasOwnProperty("policySkup")) {
                      if (!$util.isString(message.policySkup))
                        return "policySkup: string expected";
                    }
                    if (message.internalName != null && message.hasOwnProperty("internalName")) {
                      if (!$util.isString(message.internalName))
                        return "internalName: string expected";
                    }
                    return null;
                  };
                  Product.fromObject = function fromObject(object) {
                    if (object instanceof $root.com.avast.analytics.v4.proto.Product)
                      return object;
                    var message = new $root.com.avast.analytics.v4.proto.Product();
                    if (object.id != null)
                      message.id = object.id | 0;
                    if (object.edition != null)
                      message.edition = object.edition | 0;
                    switch (object.mode) {
                      default:
                        if (typeof object.mode === "number") {
                          message.mode = object.mode;
                          break;
                        }
                        break;
                      case "NO_LICENSE":
                      case 1:
                        message.mode = 1;
                        break;
                      case "FREE":
                      case 2:
                        message.mode = 2;
                        break;
                      case "TRIAL":
                      case 3:
                        message.mode = 3;
                        break;
                      case "PAID":
                      case 4:
                        message.mode = 4;
                        break;
                      case "OEM":
                      case 5:
                        message.mode = 5;
                        break;
                      case "PRE_AUTH_TRIAL":
                      case 6:
                        message.mode = 6;
                        break;
                      case "BETA":
                      case 7:
                        message.mode = 7;
                        break;
                      case "FREEMIUM":
                      case 8:
                        message.mode = 8;
                        break;
                      case "TRIAL_HARDCODED":
                      case 9:
                        message.mode = 9;
                        break;
                    }
                    switch (object.state) {
                      default:
                        if (typeof object.state === "number") {
                          message.state = object.state;
                          break;
                        }
                        break;
                      case "ACTIVE":
                      case 1:
                        message.state = 1;
                        break;
                      case "EXPIRED":
                      case 2:
                        message.state = 2;
                        break;
                    }
                    if (object.lang != null)
                      message.lang = String(object.lang);
                    if (object.versionApp != null)
                      message.versionApp = String(object.versionApp);
                    if (object.versionGui != null)
                      message.versionGui = String(object.versionGui);
                    if (object.build != null)
                      message.build = object.build | 0;
                    if (object.partnerId != null)
                      message.partnerId = String(object.partnerId);
                    if (object.deal != null)
                      message.deal = String(object.deal);
                    if (object.frontendEnv != null)
                      message.frontendEnv = String(object.frontendEnv);
                    switch (object.backendEnv) {
                      default:
                        if (typeof object.backendEnv === "number") {
                          message.backendEnv = object.backendEnv;
                          break;
                        }
                        break;
                      case "PRODUCTION":
                      case 1:
                        message.backendEnv = 1;
                        break;
                      case "STAGE":
                      case 2:
                        message.backendEnv = 2;
                        break;
                      case "TEST":
                      case 3:
                        message.backendEnv = 3;
                        break;
                      case "DEVELOPMENT":
                      case 4:
                        message.backendEnv = 4;
                        break;
                    }
                    if (object.ipmProduct != null)
                      message.ipmProduct = object.ipmProduct | 0;
                    if (object.storeId != null)
                      message.storeId = String(object.storeId);
                    if (object.tenantId != null)
                      message.tenantId = String(object.tenantId);
                    if (object.repoId != null)
                      message.repoId = String(object.repoId);
                    if (object.internalBuild != null)
                      message.internalBuild = Boolean(object.internalBuild);
                    if (object.policySkup != null)
                      message.policySkup = String(object.policySkup);
                    if (object.internalName != null)
                      message.internalName = String(object.internalName);
                    return message;
                  };
                  Product.toObject = function toObject(message, options) {
                    if (!options)
                      options = {};
                    var object = {};
                    if (options.defaults) {
                      object.id = 0;
                      object.edition = 0;
                      object.mode = options.enums === String ? "NO_LICENSE" : 1;
                      object.state = options.enums === String ? "ACTIVE" : 1;
                      object.lang = "";
                      object.versionApp = "";
                      object.versionGui = "";
                      object.build = 0;
                      object.partnerId = "";
                      object.deal = "";
                      object.frontendEnv = "";
                      object.backendEnv = options.enums === String ? "PRODUCTION" : 1;
                      object.ipmProduct = 0;
                      object.storeId = "";
                      object.tenantId = "";
                      object.repoId = "";
                      object.internalBuild = false;
                      object.policySkup = "";
                      object.internalName = "";
                    }
                    if (message.id != null && message.hasOwnProperty("id"))
                      object.id = message.id;
                    if (message.edition != null && message.hasOwnProperty("edition"))
                      object.edition = message.edition;
                    if (message.mode != null && message.hasOwnProperty("mode"))
                      object.mode = options.enums === String ? $root.com.avast.analytics.v4.proto.ModeType[message.mode] === void 0 ? message.mode : $root.com.avast.analytics.v4.proto.ModeType[message.mode] : message.mode;
                    if (message.state != null && message.hasOwnProperty("state"))
                      object.state = options.enums === String ? $root.com.avast.analytics.v4.proto.StateType[message.state] === void 0 ? message.state : $root.com.avast.analytics.v4.proto.StateType[message.state] : message.state;
                    if (message.lang != null && message.hasOwnProperty("lang"))
                      object.lang = message.lang;
                    if (message.versionApp != null && message.hasOwnProperty("versionApp"))
                      object.versionApp = message.versionApp;
                    if (message.versionGui != null && message.hasOwnProperty("versionGui"))
                      object.versionGui = message.versionGui;
                    if (message.build != null && message.hasOwnProperty("build"))
                      object.build = message.build;
                    if (message.partnerId != null && message.hasOwnProperty("partnerId"))
                      object.partnerId = message.partnerId;
                    if (message.deal != null && message.hasOwnProperty("deal"))
                      object.deal = message.deal;
                    if (message.frontendEnv != null && message.hasOwnProperty("frontendEnv"))
                      object.frontendEnv = message.frontendEnv;
                    if (message.backendEnv != null && message.hasOwnProperty("backendEnv"))
                      object.backendEnv = options.enums === String ? $root.com.avast.analytics.v4.proto.Product.BackendEnvironment[message.backendEnv] === void 0 ? message.backendEnv : $root.com.avast.analytics.v4.proto.Product.BackendEnvironment[message.backendEnv] : message.backendEnv;
                    if (message.ipmProduct != null && message.hasOwnProperty("ipmProduct"))
                      object.ipmProduct = message.ipmProduct;
                    if (message.storeId != null && message.hasOwnProperty("storeId"))
                      object.storeId = message.storeId;
                    if (message.tenantId != null && message.hasOwnProperty("tenantId"))
                      object.tenantId = message.tenantId;
                    if (message.repoId != null && message.hasOwnProperty("repoId"))
                      object.repoId = message.repoId;
                    if (message.internalBuild != null && message.hasOwnProperty("internalBuild"))
                      object.internalBuild = message.internalBuild;
                    if (message.policySkup != null && message.hasOwnProperty("policySkup"))
                      object.policySkup = message.policySkup;
                    if (message.internalName != null && message.hasOwnProperty("internalName"))
                      object.internalName = message.internalName;
                    return object;
                  };
                  Product.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                  };
                  Product.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === void 0) {
                      typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/com.avast.analytics.v4.proto.Product";
                  };
                  Product.BackendEnvironment = function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "PRODUCTION"] = 1;
                    values[valuesById[2] = "STAGE"] = 2;
                    values[valuesById[3] = "TEST"] = 3;
                    values[valuesById[4] = "DEVELOPMENT"] = 4;
                    return values;
                  }();
                  return Product;
                }();
                proto.License = function() {
                  function License(properties) {
                    if (properties) {
                      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                          this[keys[i]] = properties[keys[i]];
                    }
                  }
                  License.prototype.walletKey = "";
                  License.prototype.containerId = "";
                  License.prototype.edition = 1;
                  License.prototype.type = 1;
                  License.prototype.subscriptionMode = false;
                  License.prototype.schemaId = "";
                  License.prototype.issued = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                  License.prototype.activation = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                  License.prototype.validThru = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                  License.prototype.count = 0;
                  License.prototype.countDevice = 0;
                  License.prototype.otherLicense = "";
                  License.prototype.stack = 0;
                  License.prototype.genLicense = null;
                  License.create = function create(properties) {
                    return new License(properties);
                  };
                  License.encode = function encode(message, writer) {
                    if (!writer)
                      writer = $Writer.create();
                    if (message.walletKey != null && Object.hasOwnProperty.call(message, "walletKey"))
                      writer.uint32(10).string(message.walletKey);
                    if (message.containerId != null && Object.hasOwnProperty.call(message, "containerId"))
                      writer.uint32(18).string(message.containerId);
                    if (message.edition != null && Object.hasOwnProperty.call(message, "edition"))
                      writer.uint32(24).int32(message.edition);
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                      writer.uint32(32).int32(message.type);
                    if (message.subscriptionMode != null && Object.hasOwnProperty.call(message, "subscriptionMode"))
                      writer.uint32(40).bool(message.subscriptionMode);
                    if (message.schemaId != null && Object.hasOwnProperty.call(message, "schemaId"))
                      writer.uint32(50).string(message.schemaId);
                    if (message.issued != null && Object.hasOwnProperty.call(message, "issued"))
                      writer.uint32(56).int64(message.issued);
                    if (message.activation != null && Object.hasOwnProperty.call(message, "activation"))
                      writer.uint32(64).int64(message.activation);
                    if (message.validThru != null && Object.hasOwnProperty.call(message, "validThru"))
                      writer.uint32(72).int64(message.validThru);
                    if (message.count != null && Object.hasOwnProperty.call(message, "count"))
                      writer.uint32(80).int32(message.count);
                    if (message.countDevice != null && Object.hasOwnProperty.call(message, "countDevice"))
                      writer.uint32(88).int32(message.countDevice);
                    if (message.otherLicense != null && Object.hasOwnProperty.call(message, "otherLicense"))
                      writer.uint32(98).string(message.otherLicense);
                    if (message.stack != null && Object.hasOwnProperty.call(message, "stack"))
                      writer.uint32(104).int32(message.stack);
                    if (message.genLicense != null && Object.hasOwnProperty.call(message, "genLicense"))
                      $root.com.avast.analytics.v4.proto.GenLicense.encode(message.genLicense, writer.uint32(114).fork()).ldelim();
                    return writer;
                  };
                  License.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                  };
                  License.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                      reader = $Reader.create(reader);
                    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.com.avast.analytics.v4.proto.License();
                    while (reader.pos < end) {
                      var tag = reader.uint32();
                      switch (tag >>> 3) {
                        case 1: {
                          message.walletKey = reader.string();
                          break;
                        }
                        case 2: {
                          message.containerId = reader.string();
                          break;
                        }
                        case 3: {
                          message.edition = reader.int32();
                          break;
                        }
                        case 4: {
                          message.type = reader.int32();
                          break;
                        }
                        case 5: {
                          message.subscriptionMode = reader.bool();
                          break;
                        }
                        case 6: {
                          message.schemaId = reader.string();
                          break;
                        }
                        case 7: {
                          message.issued = reader.int64();
                          break;
                        }
                        case 8: {
                          message.activation = reader.int64();
                          break;
                        }
                        case 9: {
                          message.validThru = reader.int64();
                          break;
                        }
                        case 10: {
                          message.count = reader.int32();
                          break;
                        }
                        case 11: {
                          message.countDevice = reader.int32();
                          break;
                        }
                        case 12: {
                          message.otherLicense = reader.string();
                          break;
                        }
                        case 13: {
                          message.stack = reader.int32();
                          break;
                        }
                        case 14: {
                          message.genLicense = $root.com.avast.analytics.v4.proto.GenLicense.decode(reader, reader.uint32());
                          break;
                        }
                        default:
                          reader.skipType(tag & 7);
                          break;
                      }
                    }
                    return message;
                  };
                  License.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                      reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                  };
                  License.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                      return "object expected";
                    if (message.walletKey != null && message.hasOwnProperty("walletKey")) {
                      if (!$util.isString(message.walletKey))
                        return "walletKey: string expected";
                    }
                    if (message.containerId != null && message.hasOwnProperty("containerId")) {
                      if (!$util.isString(message.containerId))
                        return "containerId: string expected";
                    }
                    if (message.edition != null && message.hasOwnProperty("edition"))
                      switch (message.edition) {
                        default:
                          return "edition: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                        case 30:
                        case 31:
                        case 32:
                        case 33:
                        case 34:
                        case 35:
                        case 36:
                          break;
                      }
                    if (message.type != null && message.hasOwnProperty("type"))
                      switch (message.type) {
                        default:
                          return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                          break;
                      }
                    if (message.subscriptionMode != null && message.hasOwnProperty("subscriptionMode")) {
                      if (typeof message.subscriptionMode !== "boolean")
                        return "subscriptionMode: boolean expected";
                    }
                    if (message.schemaId != null && message.hasOwnProperty("schemaId")) {
                      if (!$util.isString(message.schemaId))
                        return "schemaId: string expected";
                    }
                    if (message.issued != null && message.hasOwnProperty("issued")) {
                      if (!$util.isInteger(message.issued) && !(message.issued && $util.isInteger(message.issued.low) && $util.isInteger(message.issued.high)))
                        return "issued: integer|Long expected";
                    }
                    if (message.activation != null && message.hasOwnProperty("activation")) {
                      if (!$util.isInteger(message.activation) && !(message.activation && $util.isInteger(message.activation.low) && $util.isInteger(message.activation.high)))
                        return "activation: integer|Long expected";
                    }
                    if (message.validThru != null && message.hasOwnProperty("validThru")) {
                      if (!$util.isInteger(message.validThru) && !(message.validThru && $util.isInteger(message.validThru.low) && $util.isInteger(message.validThru.high)))
                        return "validThru: integer|Long expected";
                    }
                    if (message.count != null && message.hasOwnProperty("count")) {
                      if (!$util.isInteger(message.count))
                        return "count: integer expected";
                    }
                    if (message.countDevice != null && message.hasOwnProperty("countDevice")) {
                      if (!$util.isInteger(message.countDevice))
                        return "countDevice: integer expected";
                    }
                    if (message.otherLicense != null && message.hasOwnProperty("otherLicense")) {
                      if (!$util.isString(message.otherLicense))
                        return "otherLicense: string expected";
                    }
                    if (message.stack != null && message.hasOwnProperty("stack"))
                      switch (message.stack) {
                        default:
                          return "stack: enum value expected";
                        case 0:
                        case 1:
                          break;
                      }
                    if (message.genLicense != null && message.hasOwnProperty("genLicense")) {
                      var error = $root.com.avast.analytics.v4.proto.GenLicense.verify(message.genLicense);
                      if (error)
                        return "genLicense." + error;
                    }
                    return null;
                  };
                  License.fromObject = function fromObject(object) {
                    if (object instanceof $root.com.avast.analytics.v4.proto.License)
                      return object;
                    var message = new $root.com.avast.analytics.v4.proto.License();
                    if (object.walletKey != null)
                      message.walletKey = String(object.walletKey);
                    if (object.containerId != null)
                      message.containerId = String(object.containerId);
                    switch (object.edition) {
                      default:
                        if (typeof object.edition === "number") {
                          message.edition = object.edition;
                          break;
                        }
                        break;
                      case "AV_FREE":
                      case 1:
                        message.edition = 1;
                        break;
                      case "AV_PRO":
                      case 2:
                        message.edition = 2;
                        break;
                      case "AV_AIS":
                      case 3:
                        message.edition = 3;
                        break;
                      case "AV_APR":
                      case 4:
                        message.edition = 4;
                        break;
                      case "AV_BUSINESS":
                      case 5:
                        message.edition = 5;
                        break;
                      case "AV_VPN":
                      case 6:
                        message.edition = 6;
                        break;
                      case "GF_SRV":
                      case 7:
                        message.edition = 7;
                        break;
                      case "AV_PSW":
                      case 8:
                        message.edition = 8;
                        break;
                      case "AV_PAP":
                      case 9:
                        message.edition = 9;
                        break;
                      case "AV_PSM":
                      case 10:
                        message.edition = 10;
                        break;
                      case "AV_ASH":
                      case 12:
                        message.edition = 12;
                        break;
                      case "AV_SOHO":
                      case 13:
                        message.edition = 13;
                        break;
                      case "AV_AVG_PRO":
                      case 14:
                        message.edition = 14;
                        break;
                      case "AV_AVG_FREE":
                      case 15:
                        message.edition = 15;
                        break;
                      case "AV_AVG_BUSINESS":
                      case 16:
                        message.edition = 16;
                        break;
                      case "PCT_AVG_PRO":
                      case 17:
                        message.edition = 17;
                        break;
                      case "AVG_VPN":
                      case 18:
                        message.edition = 18;
                        break;
                      case "HMA_VPN_CONSUMER":
                      case 19:
                        message.edition = 19;
                        break;
                      case "HMA_VPN_TRIAL":
                      case 20:
                        message.edition = 20;
                        break;
                      case "HMA_VPN_BUSINESS":
                      case 21:
                        message.edition = 21;
                        break;
                      case "GF_V2":
                      case 22:
                        message.edition = 22;
                        break;
                      case "BS_AVAST":
                      case 23:
                        message.edition = 23;
                        break;
                      case "BS_AVG":
                      case 24:
                        message.edition = 24;
                        break;
                      case "DU_AVAST":
                      case 25:
                        message.edition = 25;
                        break;
                      case "DU_AVG":
                      case 26:
                        message.edition = 26;
                        break;
                      case "AT_AVA":
                      case 27:
                        message.edition = 27;
                        break;
                      case "AT_AVG":
                      case 28:
                        message.edition = 28;
                        break;
                      case "AT_PIRIFORM":
                      case 29:
                        message.edition = 29;
                        break;
                      case "ASBSDK_ANDROID":
                      case 30:
                        message.edition = 30;
                        break;
                      case "ASBSDK_IOS":
                      case 31:
                        message.edition = 31;
                        break;
                      case "GF_SRV_MAC":
                      case 32:
                        message.edition = 32;
                        break;
                      case "AVG_TUNA_MAC":
                      case 33:
                        message.edition = 33;
                        break;
                      case "CC_PRO_MAC":
                      case 34:
                        message.edition = 34;
                        break;
                      case "BREACH_MAC":
                      case 35:
                        message.edition = 35;
                        break;
                      case "AVG_BREACH_MAC":
                      case 36:
                        message.edition = 36;
                        break;
                    }
                    switch (object.type) {
                      default:
                        if (typeof object.type === "number") {
                          message.type = object.type;
                          break;
                        }
                        break;
                      case "NO_LICENSE":
                      case 1:
                        message.type = 1;
                        break;
                      case "FREE":
                      case 2:
                        message.type = 2;
                        break;
                      case "TRIAL":
                      case 3:
                        message.type = 3;
                        break;
                      case "PAID":
                      case 4:
                        message.type = 4;
                        break;
                      case "OEM":
                      case 5:
                        message.type = 5;
                        break;
                      case "PRE_AUTH_TRIAL":
                      case 6:
                        message.type = 6;
                        break;
                      case "BETA":
                      case 7:
                        message.type = 7;
                        break;
                      case "FREEMIUM":
                      case 8:
                        message.type = 8;
                        break;
                      case "TRIAL_HARDCODED":
                      case 9:
                        message.type = 9;
                        break;
                    }
                    if (object.subscriptionMode != null)
                      message.subscriptionMode = Boolean(object.subscriptionMode);
                    if (object.schemaId != null)
                      message.schemaId = String(object.schemaId);
                    if (object.issued != null) {
                      if ($util.Long)
                        (message.issued = $util.Long.fromValue(object.issued)).unsigned = false;
                      else if (typeof object.issued === "string")
                        message.issued = parseInt(object.issued, 10);
                      else if (typeof object.issued === "number")
                        message.issued = object.issued;
                      else if (typeof object.issued === "object")
                        message.issued = new $util.LongBits(object.issued.low >>> 0, object.issued.high >>> 0).toNumber();
                    }
                    if (object.activation != null) {
                      if ($util.Long)
                        (message.activation = $util.Long.fromValue(object.activation)).unsigned = false;
                      else if (typeof object.activation === "string")
                        message.activation = parseInt(object.activation, 10);
                      else if (typeof object.activation === "number")
                        message.activation = object.activation;
                      else if (typeof object.activation === "object")
                        message.activation = new $util.LongBits(object.activation.low >>> 0, object.activation.high >>> 0).toNumber();
                    }
                    if (object.validThru != null) {
                      if ($util.Long)
                        (message.validThru = $util.Long.fromValue(object.validThru)).unsigned = false;
                      else if (typeof object.validThru === "string")
                        message.validThru = parseInt(object.validThru, 10);
                      else if (typeof object.validThru === "number")
                        message.validThru = object.validThru;
                      else if (typeof object.validThru === "object")
                        message.validThru = new $util.LongBits(object.validThru.low >>> 0, object.validThru.high >>> 0).toNumber();
                    }
                    if (object.count != null)
                      message.count = object.count | 0;
                    if (object.countDevice != null)
                      message.countDevice = object.countDevice | 0;
                    if (object.otherLicense != null)
                      message.otherLicense = String(object.otherLicense);
                    switch (object.stack) {
                      default:
                        if (typeof object.stack === "number") {
                          message.stack = object.stack;
                          break;
                        }
                        break;
                      case "STACK_AVAST":
                      case 0:
                        message.stack = 0;
                        break;
                      case "STACK_GEN":
                      case 1:
                        message.stack = 1;
                        break;
                    }
                    if (object.genLicense != null) {
                      if (typeof object.genLicense !== "object")
                        throw TypeError(".com.avast.analytics.v4.proto.License.genLicense: object expected");
                      message.genLicense = $root.com.avast.analytics.v4.proto.GenLicense.fromObject(object.genLicense);
                    }
                    return message;
                  };
                  License.toObject = function toObject(message, options) {
                    if (!options)
                      options = {};
                    var object = {};
                    if (options.defaults) {
                      object.walletKey = "";
                      object.containerId = "";
                      object.edition = options.enums === String ? "AV_FREE" : 1;
                      object.type = options.enums === String ? "NO_LICENSE" : 1;
                      object.subscriptionMode = false;
                      object.schemaId = "";
                      if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.issued = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                      } else
                        object.issued = options.longs === String ? "0" : 0;
                      if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.activation = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                      } else
                        object.activation = options.longs === String ? "0" : 0;
                      if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.validThru = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                      } else
                        object.validThru = options.longs === String ? "0" : 0;
                      object.count = 0;
                      object.countDevice = 0;
                      object.otherLicense = "";
                      object.stack = options.enums === String ? "STACK_AVAST" : 0;
                      object.genLicense = null;
                    }
                    if (message.walletKey != null && message.hasOwnProperty("walletKey"))
                      object.walletKey = message.walletKey;
                    if (message.containerId != null && message.hasOwnProperty("containerId"))
                      object.containerId = message.containerId;
                    if (message.edition != null && message.hasOwnProperty("edition"))
                      object.edition = options.enums === String ? $root.com.avast.analytics.v4.proto.LicenseEdition[message.edition] === void 0 ? message.edition : $root.com.avast.analytics.v4.proto.LicenseEdition[message.edition] : message.edition;
                    if (message.type != null && message.hasOwnProperty("type"))
                      object.type = options.enums === String ? $root.com.avast.analytics.v4.proto.ModeType[message.type] === void 0 ? message.type : $root.com.avast.analytics.v4.proto.ModeType[message.type] : message.type;
                    if (message.subscriptionMode != null && message.hasOwnProperty("subscriptionMode"))
                      object.subscriptionMode = message.subscriptionMode;
                    if (message.schemaId != null && message.hasOwnProperty("schemaId"))
                      object.schemaId = message.schemaId;
                    if (message.issued != null && message.hasOwnProperty("issued"))
                      if (typeof message.issued === "number")
                        object.issued = options.longs === String ? String(message.issued) : message.issued;
                      else
                        object.issued = options.longs === String ? $util.Long.prototype.toString.call(message.issued) : options.longs === Number ? new $util.LongBits(message.issued.low >>> 0, message.issued.high >>> 0).toNumber() : message.issued;
                    if (message.activation != null && message.hasOwnProperty("activation"))
                      if (typeof message.activation === "number")
                        object.activation = options.longs === String ? String(message.activation) : message.activation;
                      else
                        object.activation = options.longs === String ? $util.Long.prototype.toString.call(message.activation) : options.longs === Number ? new $util.LongBits(message.activation.low >>> 0, message.activation.high >>> 0).toNumber() : message.activation;
                    if (message.validThru != null && message.hasOwnProperty("validThru"))
                      if (typeof message.validThru === "number")
                        object.validThru = options.longs === String ? String(message.validThru) : message.validThru;
                      else
                        object.validThru = options.longs === String ? $util.Long.prototype.toString.call(message.validThru) : options.longs === Number ? new $util.LongBits(message.validThru.low >>> 0, message.validThru.high >>> 0).toNumber() : message.validThru;
                    if (message.count != null && message.hasOwnProperty("count"))
                      object.count = message.count;
                    if (message.countDevice != null && message.hasOwnProperty("countDevice"))
                      object.countDevice = message.countDevice;
                    if (message.otherLicense != null && message.hasOwnProperty("otherLicense"))
                      object.otherLicense = message.otherLicense;
                    if (message.stack != null && message.hasOwnProperty("stack"))
                      object.stack = options.enums === String ? $root.com.avast.analytics.v4.proto.PlatformStack[message.stack] === void 0 ? message.stack : $root.com.avast.analytics.v4.proto.PlatformStack[message.stack] : message.stack;
                    if (message.genLicense != null && message.hasOwnProperty("genLicense"))
                      object.genLicense = $root.com.avast.analytics.v4.proto.GenLicense.toObject(message.genLicense, options);
                    return object;
                  };
                  License.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                  };
                  License.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === void 0) {
                      typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/com.avast.analytics.v4.proto.License";
                  };
                  return License;
                }();
                proto.PlatformStack = function() {
                  var valuesById = {}, values = Object.create(valuesById);
                  values[valuesById[0] = "STACK_AVAST"] = 0;
                  values[valuesById[1] = "STACK_GEN"] = 1;
                  return values;
                }();
                proto.LicenseEdition = function() {
                  var valuesById = {}, values = Object.create(valuesById);
                  values[valuesById[1] = "AV_FREE"] = 1;
                  values[valuesById[2] = "AV_PRO"] = 2;
                  values[valuesById[3] = "AV_AIS"] = 3;
                  values[valuesById[4] = "AV_APR"] = 4;
                  values[valuesById[5] = "AV_BUSINESS"] = 5;
                  values[valuesById[6] = "AV_VPN"] = 6;
                  values[valuesById[7] = "GF_SRV"] = 7;
                  values[valuesById[8] = "AV_PSW"] = 8;
                  values[valuesById[9] = "AV_PAP"] = 9;
                  values[valuesById[10] = "AV_PSM"] = 10;
                  values[valuesById[12] = "AV_ASH"] = 12;
                  values[valuesById[13] = "AV_SOHO"] = 13;
                  values[valuesById[14] = "AV_AVG_PRO"] = 14;
                  values[valuesById[15] = "AV_AVG_FREE"] = 15;
                  values[valuesById[16] = "AV_AVG_BUSINESS"] = 16;
                  values[valuesById[17] = "PCT_AVG_PRO"] = 17;
                  values[valuesById[18] = "AVG_VPN"] = 18;
                  values[valuesById[19] = "HMA_VPN_CONSUMER"] = 19;
                  values[valuesById[20] = "HMA_VPN_TRIAL"] = 20;
                  values[valuesById[21] = "HMA_VPN_BUSINESS"] = 21;
                  values[valuesById[22] = "GF_V2"] = 22;
                  values[valuesById[23] = "BS_AVAST"] = 23;
                  values[valuesById[24] = "BS_AVG"] = 24;
                  values[valuesById[25] = "DU_AVAST"] = 25;
                  values[valuesById[26] = "DU_AVG"] = 26;
                  values[valuesById[27] = "AT_AVA"] = 27;
                  values[valuesById[28] = "AT_AVG"] = 28;
                  values[valuesById[29] = "AT_PIRIFORM"] = 29;
                  values[valuesById[30] = "ASBSDK_ANDROID"] = 30;
                  values[valuesById[31] = "ASBSDK_IOS"] = 31;
                  values[valuesById[32] = "GF_SRV_MAC"] = 32;
                  values[valuesById[33] = "AVG_TUNA_MAC"] = 33;
                  values[valuesById[34] = "CC_PRO_MAC"] = 34;
                  values[valuesById[35] = "BREACH_MAC"] = 35;
                  values[valuesById[36] = "AVG_BREACH_MAC"] = 36;
                  return values;
                }();
                proto.ModeType = function() {
                  var valuesById = {}, values = Object.create(valuesById);
                  values[valuesById[1] = "NO_LICENSE"] = 1;
                  values[valuesById[2] = "FREE"] = 2;
                  values[valuesById[3] = "TRIAL"] = 3;
                  values[valuesById[4] = "PAID"] = 4;
                  values[valuesById[5] = "OEM"] = 5;
                  values[valuesById[6] = "PRE_AUTH_TRIAL"] = 6;
                  values[valuesById[7] = "BETA"] = 7;
                  values[valuesById[8] = "FREEMIUM"] = 8;
                  values[valuesById[9] = "TRIAL_HARDCODED"] = 9;
                  return values;
                }();
                proto.StateType = function() {
                  var valuesById = {}, values = Object.create(valuesById);
                  values[valuesById[1] = "ACTIVE"] = 1;
                  values[valuesById[2] = "EXPIRED"] = 2;
                  return values;
                }();
                proto.GenLicense = function() {
                  function GenLicense(properties) {
                    if (properties) {
                      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                          this[keys[i]] = properties[keys[i]];
                    }
                  }
                  GenLicense.prototype.psn = "";
                  GenLicense.prototype.productId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                  GenLicense.prototype.olpLicenseType = "";
                  GenLicense.prototype.isTrial = false;
                  GenLicense.prototype.skup = "";
                  GenLicense.prototype.autobillingAutoRenew = false;
                  GenLicense.prototype.startTime = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                  GenLicense.prototype.endTime = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                  GenLicense.prototype.metersSeatLimit = 0;
                  GenLicense.prototype.metersSeatUsed = 0;
                  GenLicense.prototype.endTimeWithGrace = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                  GenLicense.prototype.enabledState = "";
                  GenLicense.prototype.replacedPsn = "";
                  GenLicense.prototype.nortonAccountId = "";
                  GenLicense.prototype.partnerId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                  GenLicense.prototype.licenseType = 1;
                  GenLicense.prototype.state = 1;
                  GenLicense.prototype.accountId = "";
                  GenLicense.create = function create(properties) {
                    return new GenLicense(properties);
                  };
                  GenLicense.encode = function encode(message, writer) {
                    if (!writer)
                      writer = $Writer.create();
                    if (message.psn != null && Object.hasOwnProperty.call(message, "psn"))
                      writer.uint32(10).string(message.psn);
                    if (message.productId != null && Object.hasOwnProperty.call(message, "productId"))
                      writer.uint32(16).int64(message.productId);
                    if (message.olpLicenseType != null && Object.hasOwnProperty.call(message, "olpLicenseType"))
                      writer.uint32(26).string(message.olpLicenseType);
                    if (message.isTrial != null && Object.hasOwnProperty.call(message, "isTrial"))
                      writer.uint32(32).bool(message.isTrial);
                    if (message.skup != null && Object.hasOwnProperty.call(message, "skup"))
                      writer.uint32(42).string(message.skup);
                    if (message.autobillingAutoRenew != null && Object.hasOwnProperty.call(message, "autobillingAutoRenew"))
                      writer.uint32(48).bool(message.autobillingAutoRenew);
                    if (message.startTime != null && Object.hasOwnProperty.call(message, "startTime"))
                      writer.uint32(56).int64(message.startTime);
                    if (message.endTime != null && Object.hasOwnProperty.call(message, "endTime"))
                      writer.uint32(64).int64(message.endTime);
                    if (message.metersSeatLimit != null && Object.hasOwnProperty.call(message, "metersSeatLimit"))
                      writer.uint32(72).int32(message.metersSeatLimit);
                    if (message.metersSeatUsed != null && Object.hasOwnProperty.call(message, "metersSeatUsed"))
                      writer.uint32(80).int32(message.metersSeatUsed);
                    if (message.endTimeWithGrace != null && Object.hasOwnProperty.call(message, "endTimeWithGrace"))
                      writer.uint32(88).int64(message.endTimeWithGrace);
                    if (message.enabledState != null && Object.hasOwnProperty.call(message, "enabledState"))
                      writer.uint32(98).string(message.enabledState);
                    if (message.replacedPsn != null && Object.hasOwnProperty.call(message, "replacedPsn"))
                      writer.uint32(106).string(message.replacedPsn);
                    if (message.nortonAccountId != null && Object.hasOwnProperty.call(message, "nortonAccountId"))
                      writer.uint32(114).string(message.nortonAccountId);
                    if (message.partnerId != null && Object.hasOwnProperty.call(message, "partnerId"))
                      writer.uint32(120).int64(message.partnerId);
                    if (message.licenseType != null && Object.hasOwnProperty.call(message, "licenseType"))
                      writer.uint32(128).int32(message.licenseType);
                    if (message.state != null && Object.hasOwnProperty.call(message, "state"))
                      writer.uint32(136).int32(message.state);
                    if (message.accountId != null && Object.hasOwnProperty.call(message, "accountId"))
                      writer.uint32(146).string(message.accountId);
                    return writer;
                  };
                  GenLicense.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                  };
                  GenLicense.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                      reader = $Reader.create(reader);
                    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.com.avast.analytics.v4.proto.GenLicense();
                    while (reader.pos < end) {
                      var tag = reader.uint32();
                      switch (tag >>> 3) {
                        case 1: {
                          message.psn = reader.string();
                          break;
                        }
                        case 2: {
                          message.productId = reader.int64();
                          break;
                        }
                        case 3: {
                          message.olpLicenseType = reader.string();
                          break;
                        }
                        case 4: {
                          message.isTrial = reader.bool();
                          break;
                        }
                        case 5: {
                          message.skup = reader.string();
                          break;
                        }
                        case 6: {
                          message.autobillingAutoRenew = reader.bool();
                          break;
                        }
                        case 7: {
                          message.startTime = reader.int64();
                          break;
                        }
                        case 8: {
                          message.endTime = reader.int64();
                          break;
                        }
                        case 9: {
                          message.metersSeatLimit = reader.int32();
                          break;
                        }
                        case 10: {
                          message.metersSeatUsed = reader.int32();
                          break;
                        }
                        case 11: {
                          message.endTimeWithGrace = reader.int64();
                          break;
                        }
                        case 12: {
                          message.enabledState = reader.string();
                          break;
                        }
                        case 13: {
                          message.replacedPsn = reader.string();
                          break;
                        }
                        case 14: {
                          message.nortonAccountId = reader.string();
                          break;
                        }
                        case 15: {
                          message.partnerId = reader.int64();
                          break;
                        }
                        case 16: {
                          message.licenseType = reader.int32();
                          break;
                        }
                        case 17: {
                          message.state = reader.int32();
                          break;
                        }
                        case 18: {
                          message.accountId = reader.string();
                          break;
                        }
                        default:
                          reader.skipType(tag & 7);
                          break;
                      }
                    }
                    return message;
                  };
                  GenLicense.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                      reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                  };
                  GenLicense.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                      return "object expected";
                    if (message.psn != null && message.hasOwnProperty("psn")) {
                      if (!$util.isString(message.psn))
                        return "psn: string expected";
                    }
                    if (message.productId != null && message.hasOwnProperty("productId")) {
                      if (!$util.isInteger(message.productId) && !(message.productId && $util.isInteger(message.productId.low) && $util.isInteger(message.productId.high)))
                        return "productId: integer|Long expected";
                    }
                    if (message.olpLicenseType != null && message.hasOwnProperty("olpLicenseType")) {
                      if (!$util.isString(message.olpLicenseType))
                        return "olpLicenseType: string expected";
                    }
                    if (message.isTrial != null && message.hasOwnProperty("isTrial")) {
                      if (typeof message.isTrial !== "boolean")
                        return "isTrial: boolean expected";
                    }
                    if (message.skup != null && message.hasOwnProperty("skup")) {
                      if (!$util.isString(message.skup))
                        return "skup: string expected";
                    }
                    if (message.autobillingAutoRenew != null && message.hasOwnProperty("autobillingAutoRenew")) {
                      if (typeof message.autobillingAutoRenew !== "boolean")
                        return "autobillingAutoRenew: boolean expected";
                    }
                    if (message.startTime != null && message.hasOwnProperty("startTime")) {
                      if (!$util.isInteger(message.startTime) && !(message.startTime && $util.isInteger(message.startTime.low) && $util.isInteger(message.startTime.high)))
                        return "startTime: integer|Long expected";
                    }
                    if (message.endTime != null && message.hasOwnProperty("endTime")) {
                      if (!$util.isInteger(message.endTime) && !(message.endTime && $util.isInteger(message.endTime.low) && $util.isInteger(message.endTime.high)))
                        return "endTime: integer|Long expected";
                    }
                    if (message.metersSeatLimit != null && message.hasOwnProperty("metersSeatLimit")) {
                      if (!$util.isInteger(message.metersSeatLimit))
                        return "metersSeatLimit: integer expected";
                    }
                    if (message.metersSeatUsed != null && message.hasOwnProperty("metersSeatUsed")) {
                      if (!$util.isInteger(message.metersSeatUsed))
                        return "metersSeatUsed: integer expected";
                    }
                    if (message.endTimeWithGrace != null && message.hasOwnProperty("endTimeWithGrace")) {
                      if (!$util.isInteger(message.endTimeWithGrace) && !(message.endTimeWithGrace && $util.isInteger(message.endTimeWithGrace.low) && $util.isInteger(message.endTimeWithGrace.high)))
                        return "endTimeWithGrace: integer|Long expected";
                    }
                    if (message.enabledState != null && message.hasOwnProperty("enabledState")) {
                      if (!$util.isString(message.enabledState))
                        return "enabledState: string expected";
                    }
                    if (message.replacedPsn != null && message.hasOwnProperty("replacedPsn")) {
                      if (!$util.isString(message.replacedPsn))
                        return "replacedPsn: string expected";
                    }
                    if (message.nortonAccountId != null && message.hasOwnProperty("nortonAccountId")) {
                      if (!$util.isString(message.nortonAccountId))
                        return "nortonAccountId: string expected";
                    }
                    if (message.partnerId != null && message.hasOwnProperty("partnerId")) {
                      if (!$util.isInteger(message.partnerId) && !(message.partnerId && $util.isInteger(message.partnerId.low) && $util.isInteger(message.partnerId.high)))
                        return "partnerId: integer|Long expected";
                    }
                    if (message.licenseType != null && message.hasOwnProperty("licenseType"))
                      switch (message.licenseType) {
                        default:
                          return "licenseType: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                          break;
                      }
                    if (message.state != null && message.hasOwnProperty("state"))
                      switch (message.state) {
                        default:
                          return "state: enum value expected";
                        case 1:
                        case 2:
                          break;
                      }
                    if (message.accountId != null && message.hasOwnProperty("accountId")) {
                      if (!$util.isString(message.accountId))
                        return "accountId: string expected";
                    }
                    return null;
                  };
                  GenLicense.fromObject = function fromObject(object) {
                    if (object instanceof $root.com.avast.analytics.v4.proto.GenLicense)
                      return object;
                    var message = new $root.com.avast.analytics.v4.proto.GenLicense();
                    if (object.psn != null)
                      message.psn = String(object.psn);
                    if (object.productId != null) {
                      if ($util.Long)
                        (message.productId = $util.Long.fromValue(object.productId)).unsigned = false;
                      else if (typeof object.productId === "string")
                        message.productId = parseInt(object.productId, 10);
                      else if (typeof object.productId === "number")
                        message.productId = object.productId;
                      else if (typeof object.productId === "object")
                        message.productId = new $util.LongBits(object.productId.low >>> 0, object.productId.high >>> 0).toNumber();
                    }
                    if (object.olpLicenseType != null)
                      message.olpLicenseType = String(object.olpLicenseType);
                    if (object.isTrial != null)
                      message.isTrial = Boolean(object.isTrial);
                    if (object.skup != null)
                      message.skup = String(object.skup);
                    if (object.autobillingAutoRenew != null)
                      message.autobillingAutoRenew = Boolean(object.autobillingAutoRenew);
                    if (object.startTime != null) {
                      if ($util.Long)
                        (message.startTime = $util.Long.fromValue(object.startTime)).unsigned = false;
                      else if (typeof object.startTime === "string")
                        message.startTime = parseInt(object.startTime, 10);
                      else if (typeof object.startTime === "number")
                        message.startTime = object.startTime;
                      else if (typeof object.startTime === "object")
                        message.startTime = new $util.LongBits(object.startTime.low >>> 0, object.startTime.high >>> 0).toNumber();
                    }
                    if (object.endTime != null) {
                      if ($util.Long)
                        (message.endTime = $util.Long.fromValue(object.endTime)).unsigned = false;
                      else if (typeof object.endTime === "string")
                        message.endTime = parseInt(object.endTime, 10);
                      else if (typeof object.endTime === "number")
                        message.endTime = object.endTime;
                      else if (typeof object.endTime === "object")
                        message.endTime = new $util.LongBits(object.endTime.low >>> 0, object.endTime.high >>> 0).toNumber();
                    }
                    if (object.metersSeatLimit != null)
                      message.metersSeatLimit = object.metersSeatLimit | 0;
                    if (object.metersSeatUsed != null)
                      message.metersSeatUsed = object.metersSeatUsed | 0;
                    if (object.endTimeWithGrace != null) {
                      if ($util.Long)
                        (message.endTimeWithGrace = $util.Long.fromValue(object.endTimeWithGrace)).unsigned = false;
                      else if (typeof object.endTimeWithGrace === "string")
                        message.endTimeWithGrace = parseInt(object.endTimeWithGrace, 10);
                      else if (typeof object.endTimeWithGrace === "number")
                        message.endTimeWithGrace = object.endTimeWithGrace;
                      else if (typeof object.endTimeWithGrace === "object")
                        message.endTimeWithGrace = new $util.LongBits(object.endTimeWithGrace.low >>> 0, object.endTimeWithGrace.high >>> 0).toNumber();
                    }
                    if (object.enabledState != null)
                      message.enabledState = String(object.enabledState);
                    if (object.replacedPsn != null)
                      message.replacedPsn = String(object.replacedPsn);
                    if (object.nortonAccountId != null)
                      message.nortonAccountId = String(object.nortonAccountId);
                    if (object.partnerId != null) {
                      if ($util.Long)
                        (message.partnerId = $util.Long.fromValue(object.partnerId)).unsigned = false;
                      else if (typeof object.partnerId === "string")
                        message.partnerId = parseInt(object.partnerId, 10);
                      else if (typeof object.partnerId === "number")
                        message.partnerId = object.partnerId;
                      else if (typeof object.partnerId === "object")
                        message.partnerId = new $util.LongBits(object.partnerId.low >>> 0, object.partnerId.high >>> 0).toNumber();
                    }
                    switch (object.licenseType) {
                      default:
                        if (typeof object.licenseType === "number") {
                          message.licenseType = object.licenseType;
                          break;
                        }
                        break;
                      case "NO_LICENSE":
                      case 1:
                        message.licenseType = 1;
                        break;
                      case "FREE":
                      case 2:
                        message.licenseType = 2;
                        break;
                      case "TRIAL":
                      case 3:
                        message.licenseType = 3;
                        break;
                      case "PAID":
                      case 4:
                        message.licenseType = 4;
                        break;
                      case "OEM":
                      case 5:
                        message.licenseType = 5;
                        break;
                      case "PRE_AUTH_TRIAL":
                      case 6:
                        message.licenseType = 6;
                        break;
                      case "BETA":
                      case 7:
                        message.licenseType = 7;
                        break;
                      case "FREEMIUM":
                      case 8:
                        message.licenseType = 8;
                        break;
                      case "TRIAL_HARDCODED":
                      case 9:
                        message.licenseType = 9;
                        break;
                    }
                    switch (object.state) {
                      default:
                        if (typeof object.state === "number") {
                          message.state = object.state;
                          break;
                        }
                        break;
                      case "ACTIVE":
                      case 1:
                        message.state = 1;
                        break;
                      case "EXPIRED":
                      case 2:
                        message.state = 2;
                        break;
                    }
                    if (object.accountId != null)
                      message.accountId = String(object.accountId);
                    return message;
                  };
                  GenLicense.toObject = function toObject(message, options) {
                    if (!options)
                      options = {};
                    var object = {};
                    if (options.defaults) {
                      object.psn = "";
                      if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.productId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                      } else
                        object.productId = options.longs === String ? "0" : 0;
                      object.olpLicenseType = "";
                      object.isTrial = false;
                      object.skup = "";
                      object.autobillingAutoRenew = false;
                      if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.startTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                      } else
                        object.startTime = options.longs === String ? "0" : 0;
                      if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.endTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                      } else
                        object.endTime = options.longs === String ? "0" : 0;
                      object.metersSeatLimit = 0;
                      object.metersSeatUsed = 0;
                      if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.endTimeWithGrace = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                      } else
                        object.endTimeWithGrace = options.longs === String ? "0" : 0;
                      object.enabledState = "";
                      object.replacedPsn = "";
                      object.nortonAccountId = "";
                      if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.partnerId = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                      } else
                        object.partnerId = options.longs === String ? "0" : 0;
                      object.licenseType = options.enums === String ? "NO_LICENSE" : 1;
                      object.state = options.enums === String ? "ACTIVE" : 1;
                      object.accountId = "";
                    }
                    if (message.psn != null && message.hasOwnProperty("psn"))
                      object.psn = message.psn;
                    if (message.productId != null && message.hasOwnProperty("productId"))
                      if (typeof message.productId === "number")
                        object.productId = options.longs === String ? String(message.productId) : message.productId;
                      else
                        object.productId = options.longs === String ? $util.Long.prototype.toString.call(message.productId) : options.longs === Number ? new $util.LongBits(message.productId.low >>> 0, message.productId.high >>> 0).toNumber() : message.productId;
                    if (message.olpLicenseType != null && message.hasOwnProperty("olpLicenseType"))
                      object.olpLicenseType = message.olpLicenseType;
                    if (message.isTrial != null && message.hasOwnProperty("isTrial"))
                      object.isTrial = message.isTrial;
                    if (message.skup != null && message.hasOwnProperty("skup"))
                      object.skup = message.skup;
                    if (message.autobillingAutoRenew != null && message.hasOwnProperty("autobillingAutoRenew"))
                      object.autobillingAutoRenew = message.autobillingAutoRenew;
                    if (message.startTime != null && message.hasOwnProperty("startTime"))
                      if (typeof message.startTime === "number")
                        object.startTime = options.longs === String ? String(message.startTime) : message.startTime;
                      else
                        object.startTime = options.longs === String ? $util.Long.prototype.toString.call(message.startTime) : options.longs === Number ? new $util.LongBits(message.startTime.low >>> 0, message.startTime.high >>> 0).toNumber() : message.startTime;
                    if (message.endTime != null && message.hasOwnProperty("endTime"))
                      if (typeof message.endTime === "number")
                        object.endTime = options.longs === String ? String(message.endTime) : message.endTime;
                      else
                        object.endTime = options.longs === String ? $util.Long.prototype.toString.call(message.endTime) : options.longs === Number ? new $util.LongBits(message.endTime.low >>> 0, message.endTime.high >>> 0).toNumber() : message.endTime;
                    if (message.metersSeatLimit != null && message.hasOwnProperty("metersSeatLimit"))
                      object.metersSeatLimit = message.metersSeatLimit;
                    if (message.metersSeatUsed != null && message.hasOwnProperty("metersSeatUsed"))
                      object.metersSeatUsed = message.metersSeatUsed;
                    if (message.endTimeWithGrace != null && message.hasOwnProperty("endTimeWithGrace"))
                      if (typeof message.endTimeWithGrace === "number")
                        object.endTimeWithGrace = options.longs === String ? String(message.endTimeWithGrace) : message.endTimeWithGrace;
                      else
                        object.endTimeWithGrace = options.longs === String ? $util.Long.prototype.toString.call(message.endTimeWithGrace) : options.longs === Number ? new $util.LongBits(message.endTimeWithGrace.low >>> 0, message.endTimeWithGrace.high >>> 0).toNumber() : message.endTimeWithGrace;
                    if (message.enabledState != null && message.hasOwnProperty("enabledState"))
                      object.enabledState = message.enabledState;
                    if (message.replacedPsn != null && message.hasOwnProperty("replacedPsn"))
                      object.replacedPsn = message.replacedPsn;
                    if (message.nortonAccountId != null && message.hasOwnProperty("nortonAccountId"))
                      object.nortonAccountId = message.nortonAccountId;
                    if (message.partnerId != null && message.hasOwnProperty("partnerId"))
                      if (typeof message.partnerId === "number")
                        object.partnerId = options.longs === String ? String(message.partnerId) : message.partnerId;
                      else
                        object.partnerId = options.longs === String ? $util.Long.prototype.toString.call(message.partnerId) : options.longs === Number ? new $util.LongBits(message.partnerId.low >>> 0, message.partnerId.high >>> 0).toNumber() : message.partnerId;
                    if (message.licenseType != null && message.hasOwnProperty("licenseType"))
                      object.licenseType = options.enums === String ? $root.com.avast.analytics.v4.proto.ModeType[message.licenseType] === void 0 ? message.licenseType : $root.com.avast.analytics.v4.proto.ModeType[message.licenseType] : message.licenseType;
                    if (message.state != null && message.hasOwnProperty("state"))
                      object.state = options.enums === String ? $root.com.avast.analytics.v4.proto.StateType[message.state] === void 0 ? message.state : $root.com.avast.analytics.v4.proto.StateType[message.state] : message.state;
                    if (message.accountId != null && message.hasOwnProperty("accountId"))
                      object.accountId = message.accountId;
                    return object;
                  };
                  GenLicense.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                  };
                  GenLicense.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === void 0) {
                      typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/com.avast.analytics.v4.proto.GenLicense";
                  };
                  return GenLicense;
                }();
                proto.Skyring = function() {
                  function Skyring(properties) {
                    if (properties) {
                      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                          this[keys[i]] = properties[keys[i]];
                    }
                  }
                  Skyring.prototype.groupId = "";
                  Skyring.prototype.userId = "";
                  Skyring.prototype.folderId = "";
                  Skyring.prototype.logicalDeviceId = "";
                  Skyring.prototype.appMode = 1;
                  Skyring.prototype.smarthomeGatewayType = 1;
                  Skyring.create = function create(properties) {
                    return new Skyring(properties);
                  };
                  Skyring.encode = function encode(message, writer) {
                    if (!writer)
                      writer = $Writer.create();
                    if (message.groupId != null && Object.hasOwnProperty.call(message, "groupId"))
                      writer.uint32(10).string(message.groupId);
                    if (message.userId != null && Object.hasOwnProperty.call(message, "userId"))
                      writer.uint32(18).string(message.userId);
                    if (message.folderId != null && Object.hasOwnProperty.call(message, "folderId"))
                      writer.uint32(26).string(message.folderId);
                    if (message.appMode != null && Object.hasOwnProperty.call(message, "appMode"))
                      writer.uint32(32).int32(message.appMode);
                    if (message.smarthomeGatewayType != null && Object.hasOwnProperty.call(message, "smarthomeGatewayType"))
                      writer.uint32(40).int32(message.smarthomeGatewayType);
                    if (message.logicalDeviceId != null && Object.hasOwnProperty.call(message, "logicalDeviceId"))
                      writer.uint32(50).string(message.logicalDeviceId);
                    return writer;
                  };
                  Skyring.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                  };
                  Skyring.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                      reader = $Reader.create(reader);
                    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.com.avast.analytics.v4.proto.Skyring();
                    while (reader.pos < end) {
                      var tag = reader.uint32();
                      switch (tag >>> 3) {
                        case 1: {
                          message.groupId = reader.string();
                          break;
                        }
                        case 2: {
                          message.userId = reader.string();
                          break;
                        }
                        case 3: {
                          message.folderId = reader.string();
                          break;
                        }
                        case 6: {
                          message.logicalDeviceId = reader.string();
                          break;
                        }
                        case 4: {
                          message.appMode = reader.int32();
                          break;
                        }
                        case 5: {
                          message.smarthomeGatewayType = reader.int32();
                          break;
                        }
                        default:
                          reader.skipType(tag & 7);
                          break;
                      }
                    }
                    return message;
                  };
                  Skyring.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                      reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                  };
                  Skyring.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                      return "object expected";
                    if (message.groupId != null && message.hasOwnProperty("groupId")) {
                      if (!$util.isString(message.groupId))
                        return "groupId: string expected";
                    }
                    if (message.userId != null && message.hasOwnProperty("userId")) {
                      if (!$util.isString(message.userId))
                        return "userId: string expected";
                    }
                    if (message.folderId != null && message.hasOwnProperty("folderId")) {
                      if (!$util.isString(message.folderId))
                        return "folderId: string expected";
                    }
                    if (message.logicalDeviceId != null && message.hasOwnProperty("logicalDeviceId")) {
                      if (!$util.isString(message.logicalDeviceId))
                        return "logicalDeviceId: string expected";
                    }
                    if (message.appMode != null && message.hasOwnProperty("appMode"))
                      switch (message.appMode) {
                        default:
                          return "appMode: enum value expected";
                        case 1:
                        case 2:
                          break;
                      }
                    if (message.smarthomeGatewayType != null && message.hasOwnProperty("smarthomeGatewayType"))
                      switch (message.smarthomeGatewayType) {
                        default:
                          return "smarthomeGatewayType: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                          break;
                      }
                    return null;
                  };
                  Skyring.fromObject = function fromObject(object) {
                    if (object instanceof $root.com.avast.analytics.v4.proto.Skyring)
                      return object;
                    var message = new $root.com.avast.analytics.v4.proto.Skyring();
                    if (object.groupId != null)
                      message.groupId = String(object.groupId);
                    if (object.userId != null)
                      message.userId = String(object.userId);
                    if (object.folderId != null)
                      message.folderId = String(object.folderId);
                    if (object.logicalDeviceId != null)
                      message.logicalDeviceId = String(object.logicalDeviceId);
                    switch (object.appMode) {
                      default:
                        if (typeof object.appMode === "number") {
                          message.appMode = object.appMode;
                          break;
                        }
                        break;
                      case "ADMIN":
                      case 1:
                        message.appMode = 1;
                        break;
                      case "CHILD":
                      case 2:
                        message.appMode = 2;
                        break;
                    }
                    switch (object.smarthomeGatewayType) {
                      default:
                        if (typeof object.smarthomeGatewayType === "number") {
                          message.smarthomeGatewayType = object.smarthomeGatewayType;
                          break;
                        }
                        break;
                      case "UNKNOWN":
                      case 1:
                        message.smarthomeGatewayType = 1;
                        break;
                      case "PC":
                      case 2:
                        message.smarthomeGatewayType = 2;
                        break;
                      case "MOBILE_PHONE":
                      case 3:
                        message.smarthomeGatewayType = 3;
                        break;
                      case "BOX":
                      case 4:
                        message.smarthomeGatewayType = 4;
                        break;
                      case "ROUTER":
                      case 5:
                        message.smarthomeGatewayType = 5;
                        break;
                    }
                    return message;
                  };
                  Skyring.toObject = function toObject(message, options) {
                    if (!options)
                      options = {};
                    var object = {};
                    if (options.defaults) {
                      object.groupId = "";
                      object.userId = "";
                      object.folderId = "";
                      object.appMode = options.enums === String ? "ADMIN" : 1;
                      object.smarthomeGatewayType = options.enums === String ? "UNKNOWN" : 1;
                      object.logicalDeviceId = "";
                    }
                    if (message.groupId != null && message.hasOwnProperty("groupId"))
                      object.groupId = message.groupId;
                    if (message.userId != null && message.hasOwnProperty("userId"))
                      object.userId = message.userId;
                    if (message.folderId != null && message.hasOwnProperty("folderId"))
                      object.folderId = message.folderId;
                    if (message.appMode != null && message.hasOwnProperty("appMode"))
                      object.appMode = options.enums === String ? $root.com.avast.analytics.v4.proto.Skyring.AppMode[message.appMode] === void 0 ? message.appMode : $root.com.avast.analytics.v4.proto.Skyring.AppMode[message.appMode] : message.appMode;
                    if (message.smarthomeGatewayType != null && message.hasOwnProperty("smarthomeGatewayType"))
                      object.smarthomeGatewayType = options.enums === String ? $root.com.avast.analytics.v4.proto.Skyring.SmarthomeGatewayType[message.smarthomeGatewayType] === void 0 ? message.smarthomeGatewayType : $root.com.avast.analytics.v4.proto.Skyring.SmarthomeGatewayType[message.smarthomeGatewayType] : message.smarthomeGatewayType;
                    if (message.logicalDeviceId != null && message.hasOwnProperty("logicalDeviceId"))
                      object.logicalDeviceId = message.logicalDeviceId;
                    return object;
                  };
                  Skyring.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                  };
                  Skyring.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === void 0) {
                      typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/com.avast.analytics.v4.proto.Skyring";
                  };
                  Skyring.AppMode = function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "ADMIN"] = 1;
                    values[valuesById[2] = "CHILD"] = 2;
                    return values;
                  }();
                  Skyring.SmarthomeGatewayType = function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "UNKNOWN"] = 1;
                    values[valuesById[2] = "PC"] = 2;
                    values[valuesById[3] = "MOBILE_PHONE"] = 3;
                    values[valuesById[4] = "BOX"] = 4;
                    values[valuesById[5] = "ROUTER"] = 5;
                    return values;
                  }();
                  return Skyring;
                }();
                proto.Geo = function() {
                  function Geo(properties) {
                    if (properties) {
                      for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                        if (properties[keys[i]] != null)
                          this[keys[i]] = properties[keys[i]];
                    }
                  }
                  Geo.prototype.ip = $util.newBuffer([]);
                  Geo.prototype.country = "";
                  Geo.prototype.region = "";
                  Geo.prototype.city = "";
                  Geo.prototype.latitude = 0;
                  Geo.prototype.longitude = 0;
                  Geo.prototype.isp = "";
                  Geo.prototype.asn = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
                  Geo.create = function create(properties) {
                    return new Geo(properties);
                  };
                  Geo.encode = function encode(message, writer) {
                    if (!writer)
                      writer = $Writer.create();
                    if (message.ip != null && Object.hasOwnProperty.call(message, "ip"))
                      writer.uint32(10).bytes(message.ip);
                    if (message.country != null && Object.hasOwnProperty.call(message, "country"))
                      writer.uint32(18).string(message.country);
                    if (message.region != null && Object.hasOwnProperty.call(message, "region"))
                      writer.uint32(26).string(message.region);
                    if (message.city != null && Object.hasOwnProperty.call(message, "city"))
                      writer.uint32(34).string(message.city);
                    if (message.latitude != null && Object.hasOwnProperty.call(message, "latitude"))
                      writer.uint32(41).double(message.latitude);
                    if (message.longitude != null && Object.hasOwnProperty.call(message, "longitude"))
                      writer.uint32(49).double(message.longitude);
                    if (message.isp != null && Object.hasOwnProperty.call(message, "isp"))
                      writer.uint32(58).string(message.isp);
                    if (message.asn != null && Object.hasOwnProperty.call(message, "asn"))
                      writer.uint32(64).int64(message.asn);
                    return writer;
                  };
                  Geo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                  };
                  Geo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                      reader = $Reader.create(reader);
                    var end = length === void 0 ? reader.len : reader.pos + length, message = new $root.com.avast.analytics.v4.proto.Geo();
                    while (reader.pos < end) {
                      var tag = reader.uint32();
                      switch (tag >>> 3) {
                        case 1: {
                          message.ip = reader.bytes();
                          break;
                        }
                        case 2: {
                          message.country = reader.string();
                          break;
                        }
                        case 3: {
                          message.region = reader.string();
                          break;
                        }
                        case 4: {
                          message.city = reader.string();
                          break;
                        }
                        case 5: {
                          message.latitude = reader.double();
                          break;
                        }
                        case 6: {
                          message.longitude = reader.double();
                          break;
                        }
                        case 7: {
                          message.isp = reader.string();
                          break;
                        }
                        case 8: {
                          message.asn = reader.int64();
                          break;
                        }
                        default:
                          reader.skipType(tag & 7);
                          break;
                      }
                    }
                    return message;
                  };
                  Geo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                      reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                  };
                  Geo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                      return "object expected";
                    if (message.ip != null && message.hasOwnProperty("ip")) {
                      if (!(message.ip && typeof message.ip.length === "number" || $util.isString(message.ip)))
                        return "ip: buffer expected";
                    }
                    if (message.country != null && message.hasOwnProperty("country")) {
                      if (!$util.isString(message.country))
                        return "country: string expected";
                    }
                    if (message.region != null && message.hasOwnProperty("region")) {
                      if (!$util.isString(message.region))
                        return "region: string expected";
                    }
                    if (message.city != null && message.hasOwnProperty("city")) {
                      if (!$util.isString(message.city))
                        return "city: string expected";
                    }
                    if (message.latitude != null && message.hasOwnProperty("latitude")) {
                      if (typeof message.latitude !== "number")
                        return "latitude: number expected";
                    }
                    if (message.longitude != null && message.hasOwnProperty("longitude")) {
                      if (typeof message.longitude !== "number")
                        return "longitude: number expected";
                    }
                    if (message.isp != null && message.hasOwnProperty("isp")) {
                      if (!$util.isString(message.isp))
                        return "isp: string expected";
                    }
                    if (message.asn != null && message.hasOwnProperty("asn")) {
                      if (!$util.isInteger(message.asn) && !(message.asn && $util.isInteger(message.asn.low) && $util.isInteger(message.asn.high)))
                        return "asn: integer|Long expected";
                    }
                    return null;
                  };
                  Geo.fromObject = function fromObject(object) {
                    if (object instanceof $root.com.avast.analytics.v4.proto.Geo)
                      return object;
                    var message = new $root.com.avast.analytics.v4.proto.Geo();
                    if (object.ip != null) {
                      if (typeof object.ip === "string")
                        $util.base64.decode(object.ip, message.ip = $util.newBuffer($util.base64.length(object.ip)), 0);
                      else if (object.ip.length >= 0)
                        message.ip = object.ip;
                    }
                    if (object.country != null)
                      message.country = String(object.country);
                    if (object.region != null)
                      message.region = String(object.region);
                    if (object.city != null)
                      message.city = String(object.city);
                    if (object.latitude != null)
                      message.latitude = Number(object.latitude);
                    if (object.longitude != null)
                      message.longitude = Number(object.longitude);
                    if (object.isp != null)
                      message.isp = String(object.isp);
                    if (object.asn != null) {
                      if ($util.Long)
                        (message.asn = $util.Long.fromValue(object.asn)).unsigned = false;
                      else if (typeof object.asn === "string")
                        message.asn = parseInt(object.asn, 10);
                      else if (typeof object.asn === "number")
                        message.asn = object.asn;
                      else if (typeof object.asn === "object")
                        message.asn = new $util.LongBits(object.asn.low >>> 0, object.asn.high >>> 0).toNumber();
                    }
                    return message;
                  };
                  Geo.toObject = function toObject(message, options) {
                    if (!options)
                      options = {};
                    var object = {};
                    if (options.defaults) {
                      if (options.bytes === String)
                        object.ip = "";
                      else {
                        object.ip = [];
                        if (options.bytes !== Array)
                          object.ip = $util.newBuffer(object.ip);
                      }
                      object.country = "";
                      object.region = "";
                      object.city = "";
                      object.latitude = 0;
                      object.longitude = 0;
                      object.isp = "";
                      if ($util.Long) {
                        var long = new $util.Long(0, 0, false);
                        object.asn = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                      } else
                        object.asn = options.longs === String ? "0" : 0;
                    }
                    if (message.ip != null && message.hasOwnProperty("ip"))
                      object.ip = options.bytes === String ? $util.base64.encode(message.ip, 0, message.ip.length) : options.bytes === Array ? Array.prototype.slice.call(message.ip) : message.ip;
                    if (message.country != null && message.hasOwnProperty("country"))
                      object.country = message.country;
                    if (message.region != null && message.hasOwnProperty("region"))
                      object.region = message.region;
                    if (message.city != null && message.hasOwnProperty("city"))
                      object.city = message.city;
                    if (message.latitude != null && message.hasOwnProperty("latitude"))
                      object.latitude = options.json && !isFinite(message.latitude) ? String(message.latitude) : message.latitude;
                    if (message.longitude != null && message.hasOwnProperty("longitude"))
                      object.longitude = options.json && !isFinite(message.longitude) ? String(message.longitude) : message.longitude;
                    if (message.isp != null && message.hasOwnProperty("isp"))
                      object.isp = message.isp;
                    if (message.asn != null && message.hasOwnProperty("asn"))
                      if (typeof message.asn === "number")
                        object.asn = options.longs === String ? String(message.asn) : message.asn;
                      else
                        object.asn = options.longs === String ? $util.Long.prototype.toString.call(message.asn) : options.longs === Number ? new $util.LongBits(message.asn.low >>> 0, message.asn.high >>> 0).toNumber() : message.asn;
                    return object;
                  };
                  Geo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                  };
                  Geo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === void 0) {
                      typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/com.avast.analytics.v4.proto.Geo";
                  };
                  return Geo;
                }();
                return proto;
              }();
              return v4;
            }();
            return analytics;
          }();
          return avast;
        }();
        return com;
      }();
      module2.exports = $root;
    }
  });

  // node_modules/extend/index.js
  var require_extend = __commonJS({
    "node_modules/extend/index.js"(exports2, module2) {
      "use strict";
      var hasOwn = Object.prototype.hasOwnProperty;
      var toStr = Object.prototype.toString;
      var isArray = function isArray2(arr) {
        if (typeof Array.isArray === "function") {
          return Array.isArray(arr);
        }
        return toStr.call(arr) === "[object Array]";
      };
      var isPlainObject = function isPlainObject2(obj) {
        if (!obj || toStr.call(obj) !== "[object Object]") {
          return false;
        }
        var hasOwnConstructor = hasOwn.call(obj, "constructor");
        var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, "isPrototypeOf");
        if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
          return false;
        }
        var key;
        for (key in obj) {
        }
        return typeof key === "undefined" || hasOwn.call(obj, key);
      };
      module2.exports = function extend() {
        var options, name, src, copy, copyIsArray, clone, target = arguments[0], i = 1, length = arguments.length, deep = false;
        if (typeof target === "boolean") {
          deep = target;
          target = arguments[1] || {};
          i = 2;
        } else if (typeof target !== "object" && typeof target !== "function" || target == null) {
          target = {};
        }
        for (; i < length; ++i) {
          options = arguments[i];
          if (options != null) {
            for (name in options) {
              src = target[name];
              copy = options[name];
              if (target !== copy) {
                if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
                  if (copyIsArray) {
                    copyIsArray = false;
                    clone = src && isArray(src) ? src : [];
                  } else {
                    clone = src && isPlainObject(src) ? src : {};
                  }
                  target[name] = extend(deep, clone, copy);
                } else if (typeof copy !== "undefined") {
                  target[name] = copy;
                }
              }
            }
          }
        }
        return target;
      };
    }
  });

  // node_modules/moment/moment.js
  var require_moment = __commonJS({
    "node_modules/moment/moment.js"(exports2, module2) {
      (function(global2, factory) {
        typeof exports2 === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global2.moment = factory();
      })(exports2, function() {
        "use strict";
        var hookCallback;
        function utils_hooks__hooks() {
          return hookCallback.apply(null, arguments);
        }
        function setHookCallback(callback) {
          hookCallback = callback;
        }
        function isArray(input) {
          return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
        }
        function isDate(input) {
          return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
        }
        function map(arr, fn) {
          var res = [], i;
          for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
          }
          return res;
        }
        function hasOwnProp(a, b) {
          return Object.prototype.hasOwnProperty.call(a, b);
        }
        function extend(a, b) {
          for (var i in b) {
            if (hasOwnProp(b, i)) {
              a[i] = b[i];
            }
          }
          if (hasOwnProp(b, "toString")) {
            a.toString = b.toString;
          }
          if (hasOwnProp(b, "valueOf")) {
            a.valueOf = b.valueOf;
          }
          return a;
        }
        function create_utc__createUTC(input, format2, locale2, strict) {
          return createLocalOrUTC(input, format2, locale2, strict, true).utc();
        }
        function defaultParsingFlags() {
          return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false
          };
        }
        function getParsingFlags(m) {
          if (m._pf == null) {
            m._pf = defaultParsingFlags();
          }
          return m._pf;
        }
        function valid__isValid(m) {
          if (m._isValid == null) {
            var flags = getParsingFlags(m);
            m._isValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated;
            if (m._strict) {
              m._isValid = m._isValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
            }
          }
          return m._isValid;
        }
        function valid__createInvalid(flags) {
          var m = create_utc__createUTC(NaN);
          if (flags != null) {
            extend(getParsingFlags(m), flags);
          } else {
            getParsingFlags(m).userInvalidated = true;
          }
          return m;
        }
        function isUndefined(input) {
          return input === void 0;
        }
        var momentProperties = utils_hooks__hooks.momentProperties = [];
        function copyConfig(to2, from2) {
          var i, prop, val;
          if (!isUndefined(from2._isAMomentObject)) {
            to2._isAMomentObject = from2._isAMomentObject;
          }
          if (!isUndefined(from2._i)) {
            to2._i = from2._i;
          }
          if (!isUndefined(from2._f)) {
            to2._f = from2._f;
          }
          if (!isUndefined(from2._l)) {
            to2._l = from2._l;
          }
          if (!isUndefined(from2._strict)) {
            to2._strict = from2._strict;
          }
          if (!isUndefined(from2._tzm)) {
            to2._tzm = from2._tzm;
          }
          if (!isUndefined(from2._isUTC)) {
            to2._isUTC = from2._isUTC;
          }
          if (!isUndefined(from2._offset)) {
            to2._offset = from2._offset;
          }
          if (!isUndefined(from2._pf)) {
            to2._pf = getParsingFlags(from2);
          }
          if (!isUndefined(from2._locale)) {
            to2._locale = from2._locale;
          }
          if (momentProperties.length > 0) {
            for (i in momentProperties) {
              prop = momentProperties[i];
              val = from2[prop];
              if (!isUndefined(val)) {
                to2[prop] = val;
              }
            }
          }
          return to2;
        }
        var updateInProgress = false;
        function Moment(config) {
          copyConfig(this, config);
          this._d = new Date(config._d != null ? config._d.getTime() : NaN);
          if (updateInProgress === false) {
            updateInProgress = true;
            utils_hooks__hooks.updateOffset(this);
            updateInProgress = false;
          }
        }
        function isMoment(obj) {
          return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
        }
        function absFloor(number) {
          if (number < 0) {
            return Math.ceil(number);
          } else {
            return Math.floor(number);
          }
        }
        function toInt(argumentForCoercion) {
          var coercedNumber = +argumentForCoercion, value = 0;
          if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
          }
          return value;
        }
        function compareArrays(array1, array2, dontConvert) {
          var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
          for (i = 0; i < len; i++) {
            if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
              diffs++;
            }
          }
          return diffs + lengthDiff;
        }
        function warn(msg) {
          if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
            console.warn("Deprecation warning: " + msg);
          }
        }
        function deprecate(msg, fn) {
          var firstTime = true;
          return extend(function() {
            if (firstTime) {
              warn(msg + "\nArguments: " + Array.prototype.slice.call(arguments).join(", ") + "\n" + new Error().stack);
              firstTime = false;
            }
            return fn.apply(this, arguments);
          }, fn);
        }
        var deprecations = {};
        function deprecateSimple(name, msg) {
          if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
          }
        }
        utils_hooks__hooks.suppressDeprecationWarnings = false;
        function isFunction(input) {
          return input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
        }
        function isObject(input) {
          return Object.prototype.toString.call(input) === "[object Object]";
        }
        function locale_set__set(config) {
          var prop, i;
          for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
              this[i] = prop;
            } else {
              this["_" + i] = prop;
            }
          }
          this._config = config;
          this._ordinalParseLenient = new RegExp(this._ordinalParse.source + "|" + /\d{1,2}/.source);
        }
        function mergeConfigs(parentConfig, childConfig) {
          var res = extend({}, parentConfig), prop;
          for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
              if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                res[prop] = {};
                extend(res[prop], parentConfig[prop]);
                extend(res[prop], childConfig[prop]);
              } else if (childConfig[prop] != null) {
                res[prop] = childConfig[prop];
              } else {
                delete res[prop];
              }
            }
          }
          return res;
        }
        function Locale2(config) {
          if (config != null) {
            this.set(config);
          }
        }
        var locales = {};
        var globalLocale;
        function normalizeLocale(key) {
          return key ? key.toLowerCase().replace("_", "-") : key;
        }
        function chooseLocale(names) {
          var i = 0, j, next, locale2, split;
          while (i < names.length) {
            split = normalizeLocale(names[i]).split("-");
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split("-") : null;
            while (j > 0) {
              locale2 = loadLocale(split.slice(0, j).join("-"));
              if (locale2) {
                return locale2;
              }
              if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                break;
              }
              j--;
            }
            i++;
          }
          return null;
        }
        function loadLocale(name) {
          var oldLocale = null;
          if (!locales[name] && typeof module2 !== "undefined" && module2 && module2.exports) {
            try {
              oldLocale = globalLocale._abbr;
              __require("./locale/" + name);
              locale_locales__getSetGlobalLocale(oldLocale);
            } catch (e) {
            }
          }
          return locales[name];
        }
        function locale_locales__getSetGlobalLocale(key, values) {
          var data;
          if (key) {
            if (isUndefined(values)) {
              data = locale_locales__getLocale(key);
            } else {
              data = defineLocale(key, values);
            }
            if (data) {
              globalLocale = data;
            }
          }
          return globalLocale._abbr;
        }
        function defineLocale(name, config) {
          if (config !== null) {
            config.abbr = name;
            if (locales[name] != null) {
              deprecateSimple(
                "defineLocaleOverride",
                "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale"
              );
              config = mergeConfigs(locales[name]._config, config);
            } else if (config.parentLocale != null) {
              if (locales[config.parentLocale] != null) {
                config = mergeConfigs(locales[config.parentLocale]._config, config);
              } else {
                deprecateSimple(
                  "parentLocaleUndefined",
                  "specified parentLocale is not defined yet"
                );
              }
            }
            locales[name] = new Locale2(config);
            locale_locales__getSetGlobalLocale(name);
            return locales[name];
          } else {
            delete locales[name];
            return null;
          }
        }
        function updateLocale(name, config) {
          if (config != null) {
            var locale2;
            if (locales[name] != null) {
              config = mergeConfigs(locales[name]._config, config);
            }
            locale2 = new Locale2(config);
            locale2.parentLocale = locales[name];
            locales[name] = locale2;
            locale_locales__getSetGlobalLocale(name);
          } else {
            if (locales[name] != null) {
              if (locales[name].parentLocale != null) {
                locales[name] = locales[name].parentLocale;
              } else if (locales[name] != null) {
                delete locales[name];
              }
            }
          }
          return locales[name];
        }
        function locale_locales__getLocale(key) {
          var locale2;
          if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
          }
          if (!key) {
            return globalLocale;
          }
          if (!isArray(key)) {
            locale2 = loadLocale(key);
            if (locale2) {
              return locale2;
            }
            key = [key];
          }
          return chooseLocale(key);
        }
        function locale_locales__listLocales() {
          return Object.keys(locales);
        }
        var aliases = {};
        function addUnitAlias(unit, shorthand) {
          var lowerCase = unit.toLowerCase();
          aliases[lowerCase] = aliases[lowerCase + "s"] = aliases[shorthand] = unit;
        }
        function normalizeUnits(units) {
          return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
        }
        function normalizeObjectUnits(inputObject) {
          var normalizedInput = {}, normalizedProp, prop;
          for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
              normalizedProp = normalizeUnits(prop);
              if (normalizedProp) {
                normalizedInput[normalizedProp] = inputObject[prop];
              }
            }
          }
          return normalizedInput;
        }
        function makeGetSet(unit, keepTime) {
          return function(value) {
            if (value != null) {
              get_set__set(this, unit, value);
              utils_hooks__hooks.updateOffset(this, keepTime);
              return this;
            } else {
              return get_set__get(this, unit);
            }
          };
        }
        function get_set__get(mom, unit) {
          return mom.isValid() ? mom._d["get" + (mom._isUTC ? "UTC" : "") + unit]() : NaN;
        }
        function get_set__set(mom, unit, value) {
          if (mom.isValid()) {
            mom._d["set" + (mom._isUTC ? "UTC" : "") + unit](value);
          }
        }
        function getSet(units, value) {
          var unit;
          if (typeof units === "object") {
            for (unit in units) {
              this.set(unit, units[unit]);
            }
          } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
              return this[units](value);
            }
          }
          return this;
        }
        function zeroFill(number, targetLength, forceSign) {
          var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign = number >= 0;
          return (sign ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
        }
        var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
        var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
        var formatFunctions = {};
        var formatTokenFunctions = {};
        function addFormatToken(token2, padded, ordinal2, callback) {
          var func = callback;
          if (typeof callback === "string") {
            func = function() {
              return this[callback]();
            };
          }
          if (token2) {
            formatTokenFunctions[token2] = func;
          }
          if (padded) {
            formatTokenFunctions[padded[0]] = function() {
              return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
          }
          if (ordinal2) {
            formatTokenFunctions[ordinal2] = function() {
              return this.localeData().ordinal(func.apply(this, arguments), token2);
            };
          }
        }
        function removeFormattingTokens(input) {
          if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, "");
          }
          return input.replace(/\\/g, "");
        }
        function makeFormatFunction(format2) {
          var array = format2.match(formattingTokens), i, length;
          for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
              array[i] = formatTokenFunctions[array[i]];
            } else {
              array[i] = removeFormattingTokens(array[i]);
            }
          }
          return function(mom) {
            var output = "";
            for (i = 0; i < length; i++) {
              output += array[i] instanceof Function ? array[i].call(mom, format2) : array[i];
            }
            return output;
          };
        }
        function formatMoment(m, format2) {
          if (!m.isValid()) {
            return m.localeData().invalidDate();
          }
          format2 = expandFormat(format2, m.localeData());
          formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
          return formatFunctions[format2](m);
        }
        function expandFormat(format2, locale2) {
          var i = 5;
          function replaceLongDateFormatTokens(input) {
            return locale2.longDateFormat(input) || input;
          }
          localFormattingTokens.lastIndex = 0;
          while (i >= 0 && localFormattingTokens.test(format2)) {
            format2 = format2.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
          }
          return format2;
        }
        var match1 = /\d/;
        var match2 = /\d\d/;
        var match3 = /\d{3}/;
        var match4 = /\d{4}/;
        var match6 = /[+-]?\d{6}/;
        var match1to2 = /\d\d?/;
        var match3to4 = /\d\d\d\d?/;
        var match5to6 = /\d\d\d\d\d\d?/;
        var match1to3 = /\d{1,3}/;
        var match1to4 = /\d{1,4}/;
        var match1to6 = /[+-]?\d{1,6}/;
        var matchUnsigned = /\d+/;
        var matchSigned = /[+-]?\d+/;
        var matchOffset = /Z|[+-]\d\d:?\d\d/gi;
        var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi;
        var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/;
        var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
        var regexes = {};
        function addRegexToken(token2, regex, strictRegex) {
          regexes[token2] = isFunction(regex) ? regex : function(isStrict, localeData2) {
            return isStrict && strictRegex ? strictRegex : regex;
          };
        }
        function getParseRegexForToken(token2, config) {
          if (!hasOwnProp(regexes, token2)) {
            return new RegExp(unescapeFormat(token2));
          }
          return regexes[token2](config._strict, config._locale);
        }
        function unescapeFormat(s) {
          return regexEscape(s.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function(matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
          }));
        }
        function regexEscape(s) {
          return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
        }
        var tokens = {};
        function addParseToken(token2, callback) {
          var i, func = callback;
          if (typeof token2 === "string") {
            token2 = [token2];
          }
          if (typeof callback === "number") {
            func = function(input, array) {
              array[callback] = toInt(input);
            };
          }
          for (i = 0; i < token2.length; i++) {
            tokens[token2[i]] = func;
          }
        }
        function addWeekParseToken(token2, callback) {
          addParseToken(token2, function(input, array, config, token3) {
            config._w = config._w || {};
            callback(input, config._w, config, token3);
          });
        }
        function addTimeToArrayFromToken(token2, input, config) {
          if (input != null && hasOwnProp(tokens, token2)) {
            tokens[token2](input, config._a, config, token2);
          }
        }
        var YEAR = 0;
        var MONTH = 1;
        var DATE = 2;
        var HOUR = 3;
        var MINUTE = 4;
        var SECOND = 5;
        var MILLISECOND = 6;
        var WEEK = 7;
        var WEEKDAY = 8;
        function daysInMonth(year, month) {
          return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
        }
        addFormatToken("M", ["MM", 2], "Mo", function() {
          return this.month() + 1;
        });
        addFormatToken("MMM", 0, 0, function(format2) {
          return this.localeData().monthsShort(this, format2);
        });
        addFormatToken("MMMM", 0, 0, function(format2) {
          return this.localeData().months(this, format2);
        });
        addUnitAlias("month", "M");
        addRegexToken("M", match1to2);
        addRegexToken("MM", match1to2, match2);
        addRegexToken("MMM", function(isStrict, locale2) {
          return locale2.monthsShortRegex(isStrict);
        });
        addRegexToken("MMMM", function(isStrict, locale2) {
          return locale2.monthsRegex(isStrict);
        });
        addParseToken(["M", "MM"], function(input, array) {
          array[MONTH] = toInt(input) - 1;
        });
        addParseToken(["MMM", "MMMM"], function(input, array, config, token2) {
          var month = config._locale.monthsParse(input, token2, config._strict);
          if (month != null) {
            array[MONTH] = month;
          } else {
            getParsingFlags(config).invalidMonth = input;
          }
        });
        var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/;
        var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split("_");
        function localeMonths(m, format2) {
          return isArray(this._months) ? this._months[m.month()] : this._months[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m.month()];
        }
        var defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");
        function localeMonthsShort(m, format2) {
          return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m.month()];
        }
        function localeMonthsParse(monthName, format2, strict) {
          var i, mom, regex;
          if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
          }
          for (i = 0; i < 12; i++) {
            mom = create_utc__createUTC([2e3, i]);
            if (strict && !this._longMonthsParse[i]) {
              this._longMonthsParse[i] = new RegExp("^" + this.months(mom, "").replace(".", "") + "$", "i");
              this._shortMonthsParse[i] = new RegExp("^" + this.monthsShort(mom, "").replace(".", "") + "$", "i");
            }
            if (!strict && !this._monthsParse[i]) {
              regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
              this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
            }
            if (strict && format2 === "MMMM" && this._longMonthsParse[i].test(monthName)) {
              return i;
            } else if (strict && format2 === "MMM" && this._shortMonthsParse[i].test(monthName)) {
              return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
              return i;
            }
          }
        }
        function setMonth(mom, value) {
          var dayOfMonth;
          if (!mom.isValid()) {
            return mom;
          }
          if (typeof value === "string") {
            if (/^\d+$/.test(value)) {
              value = toInt(value);
            } else {
              value = mom.localeData().monthsParse(value);
              if (typeof value !== "number") {
                return mom;
              }
            }
          }
          dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
          mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);
          return mom;
        }
        function getSetMonth(value) {
          if (value != null) {
            setMonth(this, value);
            utils_hooks__hooks.updateOffset(this, true);
            return this;
          } else {
            return get_set__get(this, "Month");
          }
        }
        function getDaysInMonth() {
          return daysInMonth(this.year(), this.month());
        }
        var defaultMonthsShortRegex = matchWord;
        function monthsShortRegex(isStrict) {
          if (this._monthsParseExact) {
            if (!hasOwnProp(this, "_monthsRegex")) {
              computeMonthsParse.call(this);
            }
            if (isStrict) {
              return this._monthsShortStrictRegex;
            } else {
              return this._monthsShortRegex;
            }
          } else {
            return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
          }
        }
        var defaultMonthsRegex = matchWord;
        function monthsRegex(isStrict) {
          if (this._monthsParseExact) {
            if (!hasOwnProp(this, "_monthsRegex")) {
              computeMonthsParse.call(this);
            }
            if (isStrict) {
              return this._monthsStrictRegex;
            } else {
              return this._monthsRegex;
            }
          } else {
            return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
          }
        }
        function computeMonthsParse() {
          function cmpLenRev(a, b) {
            return b.length - a.length;
          }
          var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
          for (i = 0; i < 12; i++) {
            mom = create_utc__createUTC([2e3, i]);
            shortPieces.push(this.monthsShort(mom, ""));
            longPieces.push(this.months(mom, ""));
            mixedPieces.push(this.months(mom, ""));
            mixedPieces.push(this.monthsShort(mom, ""));
          }
          shortPieces.sort(cmpLenRev);
          longPieces.sort(cmpLenRev);
          mixedPieces.sort(cmpLenRev);
          for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
          }
          this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
          this._monthsShortRegex = this._monthsRegex;
          this._monthsStrictRegex = new RegExp("^(" + longPieces.join("|") + ")$", "i");
          this._monthsShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")$", "i");
        }
        function checkOverflow(m) {
          var overflow;
          var a = m._a;
          if (a && getParsingFlags(m).overflow === -2) {
            overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
              overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
              overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
              overflow = WEEKDAY;
            }
            getParsingFlags(m).overflow = overflow;
          }
          return m;
        }
        var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
        var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
        var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
        var isoDates = [
          ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
          ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
          ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
          ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
          ["YYYY-DDD", /\d{4}-\d{3}/],
          ["YYYY-MM", /\d{4}-\d\d/, false],
          ["YYYYYYMMDD", /[+-]\d{10}/],
          ["YYYYMMDD", /\d{8}/],
          ["GGGG[W]WWE", /\d{4}W\d{3}/],
          ["GGGG[W]WW", /\d{4}W\d{2}/, false],
          ["YYYYDDD", /\d{7}/]
        ];
        var isoTimes = [
          ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
          ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
          ["HH:mm:ss", /\d\d:\d\d:\d\d/],
          ["HH:mm", /\d\d:\d\d/],
          ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
          ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
          ["HHmmss", /\d\d\d\d\d\d/],
          ["HHmm", /\d\d\d\d/],
          ["HH", /\d\d/]
        ];
        var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
        function configFromISO(config) {
          var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat;
          if (match) {
            getParsingFlags(config).iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
              if (isoDates[i][1].exec(match[1])) {
                dateFormat = isoDates[i][0];
                allowTime = isoDates[i][2] !== false;
                break;
              }
            }
            if (dateFormat == null) {
              config._isValid = false;
              return;
            }
            if (match[3]) {
              for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(match[3])) {
                  timeFormat = (match[2] || " ") + isoTimes[i][0];
                  break;
                }
              }
              if (timeFormat == null) {
                config._isValid = false;
                return;
              }
            }
            if (!allowTime && timeFormat != null) {
              config._isValid = false;
              return;
            }
            if (match[4]) {
              if (tzRegex.exec(match[4])) {
                tzFormat = "Z";
              } else {
                config._isValid = false;
                return;
              }
            }
            config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
            configFromStringAndFormat(config);
          } else {
            config._isValid = false;
          }
        }
        function configFromString(config) {
          var matched = aspNetJsonRegex.exec(config._i);
          if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
          }
          configFromISO(config);
          if (config._isValid === false) {
            delete config._isValid;
            utils_hooks__hooks.createFromInputFallback(config);
          }
        }
        utils_hooks__hooks.createFromInputFallback = deprecate(
          "moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.",
          function(config) {
            config._d = new Date(config._i + (config._useUTC ? " UTC" : ""));
          }
        );
        function createDate(y, m, d, h, M, s, ms) {
          var date = new Date(y, m, d, h, M, s, ms);
          if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
            date.setFullYear(y);
          }
          return date;
        }
        function createUTCDate(y) {
          var date = new Date(Date.UTC.apply(null, arguments));
          if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
          }
          return date;
        }
        addFormatToken("Y", 0, 0, function() {
          var y = this.year();
          return y <= 9999 ? "" + y : "+" + y;
        });
        addFormatToken(0, ["YY", 2], 0, function() {
          return this.year() % 100;
        });
        addFormatToken(0, ["YYYY", 4], 0, "year");
        addFormatToken(0, ["YYYYY", 5], 0, "year");
        addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
        addUnitAlias("year", "y");
        addRegexToken("Y", matchSigned);
        addRegexToken("YY", match1to2, match2);
        addRegexToken("YYYY", match1to4, match4);
        addRegexToken("YYYYY", match1to6, match6);
        addRegexToken("YYYYYY", match1to6, match6);
        addParseToken(["YYYYY", "YYYYYY"], YEAR);
        addParseToken("YYYY", function(input, array) {
          array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
        });
        addParseToken("YY", function(input, array) {
          array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
        });
        addParseToken("Y", function(input, array) {
          array[YEAR] = parseInt(input, 10);
        });
        function daysInYear(year) {
          return isLeapYear(year) ? 366 : 365;
        }
        function isLeapYear(year) {
          return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
        }
        utils_hooks__hooks.parseTwoDigitYear = function(input) {
          return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
        };
        var getSetYear = makeGetSet("FullYear", false);
        function getIsLeapYear() {
          return isLeapYear(this.year());
        }
        function firstWeekOffset(year, dow, doy) {
          var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
          return -fwdlw + fwd - 1;
        }
        function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
          var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
          if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
          } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
          } else {
            resYear = year;
            resDayOfYear = dayOfYear;
          }
          return {
            year: resYear,
            dayOfYear: resDayOfYear
          };
        }
        function weekOfYear(mom, dow, doy) {
          var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
          if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
          } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
          } else {
            resYear = mom.year();
            resWeek = week;
          }
          return {
            week: resWeek,
            year: resYear
          };
        }
        function weeksInYear(year, dow, doy) {
          var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
          return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
        }
        function defaults(a, b, c) {
          if (a != null) {
            return a;
          }
          if (b != null) {
            return b;
          }
          return c;
        }
        function currentDateArray(config) {
          var nowValue = new Date(utils_hooks__hooks.now());
          if (config._useUTC) {
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
          }
          return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
        }
        function configFromArray(config) {
          var i, date, input = [], currentDate, yearToUse;
          if (config._d) {
            return;
          }
          currentDate = currentDateArray(config);
          if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
          }
          if (config._dayOfYear) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
            if (config._dayOfYear > daysInYear(yearToUse)) {
              getParsingFlags(config)._overflowDayOfYear = true;
            }
            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
          }
          for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
          }
          for (; i < 7; i++) {
            config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
          }
          if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
          }
          config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
          if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
          }
          if (config._nextDay) {
            config._a[HOUR] = 24;
          }
        }
        function dayOfYearFromWeekInfo(config) {
          var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
          w = config._w;
          if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
              weekdayOverflow = true;
            }
          } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;
            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
            week = defaults(w.w, 1);
            if (w.d != null) {
              weekday = w.d;
              if (weekday < 0 || weekday > 6) {
                weekdayOverflow = true;
              }
            } else if (w.e != null) {
              weekday = w.e + dow;
              if (w.e < 0 || w.e > 6) {
                weekdayOverflow = true;
              }
            } else {
              weekday = dow;
            }
          }
          if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
          } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
          } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
          }
        }
        utils_hooks__hooks.ISO_8601 = function() {
        };
        function configFromStringAndFormat(config) {
          if (config._f === utils_hooks__hooks.ISO_8601) {
            configFromISO(config);
            return;
          }
          config._a = [];
          getParsingFlags(config).empty = true;
          var string = "" + config._i, i, parsedInput, tokens2, token2, skipped, stringLength = string.length, totalParsedInputLength = 0;
          tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
          for (i = 0; i < tokens2.length; i++) {
            token2 = tokens2[i];
            parsedInput = (string.match(getParseRegexForToken(token2, config)) || [])[0];
            if (parsedInput) {
              skipped = string.substr(0, string.indexOf(parsedInput));
              if (skipped.length > 0) {
                getParsingFlags(config).unusedInput.push(skipped);
              }
              string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
              totalParsedInputLength += parsedInput.length;
            }
            if (formatTokenFunctions[token2]) {
              if (parsedInput) {
                getParsingFlags(config).empty = false;
              } else {
                getParsingFlags(config).unusedTokens.push(token2);
              }
              addTimeToArrayFromToken(token2, parsedInput, config);
            } else if (config._strict && !parsedInput) {
              getParsingFlags(config).unusedTokens.push(token2);
            }
          }
          getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
          if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
          }
          if (getParsingFlags(config).bigHour === true && config._a[HOUR] <= 12 && config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = void 0;
          }
          config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
          configFromArray(config);
          checkOverflow(config);
        }
        function meridiemFixWrap(locale2, hour, meridiem2) {
          var isPm;
          if (meridiem2 == null) {
            return hour;
          }
          if (locale2.meridiemHour != null) {
            return locale2.meridiemHour(hour, meridiem2);
          } else if (locale2.isPM != null) {
            isPm = locale2.isPM(meridiem2);
            if (isPm && hour < 12) {
              hour += 12;
            }
            if (!isPm && hour === 12) {
              hour = 0;
            }
            return hour;
          } else {
            return hour;
          }
        }
        function configFromStringAndArray(config) {
          var tempConfig, bestMoment, scoreToBeat, i, currentScore;
          if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
          }
          for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
              tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);
            if (!valid__isValid(tempConfig)) {
              continue;
            }
            currentScore += getParsingFlags(tempConfig).charsLeftOver;
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
            getParsingFlags(tempConfig).score = currentScore;
            if (scoreToBeat == null || currentScore < scoreToBeat) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
            }
          }
          extend(config, bestMoment || tempConfig);
        }
        function configFromObject(config) {
          if (config._d) {
            return;
          }
          var i = normalizeObjectUnits(config._i);
          config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function(obj) {
            return obj && parseInt(obj, 10);
          });
          configFromArray(config);
        }
        function createFromConfig(config) {
          var res = new Moment(checkOverflow(prepareConfig(config)));
          if (res._nextDay) {
            res.add(1, "d");
            res._nextDay = void 0;
          }
          return res;
        }
        function prepareConfig(config) {
          var input = config._i, format2 = config._f;
          config._locale = config._locale || locale_locales__getLocale(config._l);
          if (input === null || format2 === void 0 && input === "") {
            return valid__createInvalid({ nullInput: true });
          }
          if (typeof input === "string") {
            config._i = input = config._locale.preparse(input);
          }
          if (isMoment(input)) {
            return new Moment(checkOverflow(input));
          } else if (isArray(format2)) {
            configFromStringAndArray(config);
          } else if (format2) {
            configFromStringAndFormat(config);
          } else if (isDate(input)) {
            config._d = input;
          } else {
            configFromInput(config);
          }
          if (!valid__isValid(config)) {
            config._d = null;
          }
          return config;
        }
        function configFromInput(config) {
          var input = config._i;
          if (input === void 0) {
            config._d = new Date(utils_hooks__hooks.now());
          } else if (isDate(input)) {
            config._d = new Date(+input);
          } else if (typeof input === "string") {
            configFromString(config);
          } else if (isArray(input)) {
            config._a = map(input.slice(0), function(obj) {
              return parseInt(obj, 10);
            });
            configFromArray(config);
          } else if (typeof input === "object") {
            configFromObject(config);
          } else if (typeof input === "number") {
            config._d = new Date(input);
          } else {
            utils_hooks__hooks.createFromInputFallback(config);
          }
        }
        function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
          var c = {};
          if (typeof locale2 === "boolean") {
            strict = locale2;
            locale2 = void 0;
          }
          c._isAMomentObject = true;
          c._useUTC = c._isUTC = isUTC;
          c._l = locale2;
          c._i = input;
          c._f = format2;
          c._strict = strict;
          return createFromConfig(c);
        }
        function local__createLocal(input, format2, locale2, strict) {
          return createLocalOrUTC(input, format2, locale2, strict, false);
        }
        var prototypeMin = deprecate(
          "moment().min is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",
          function() {
            var other = local__createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
              return other < this ? this : other;
            } else {
              return valid__createInvalid();
            }
          }
        );
        var prototypeMax = deprecate(
          "moment().max is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",
          function() {
            var other = local__createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
              return other > this ? this : other;
            } else {
              return valid__createInvalid();
            }
          }
        );
        function pickBy(fn, moments) {
          var res, i;
          if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
          }
          if (!moments.length) {
            return local__createLocal();
          }
          res = moments[0];
          for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
              res = moments[i];
            }
          }
          return res;
        }
        function min() {
          var args = [].slice.call(arguments, 0);
          return pickBy("isBefore", args);
        }
        function max() {
          var args = [].slice.call(arguments, 0);
          return pickBy("isAfter", args);
        }
        var now = function() {
          return Date.now ? Date.now() : +new Date();
        };
        function Duration(duration) {
          var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
          this._milliseconds = +milliseconds2 + seconds2 * 1e3 + minutes2 * 6e4 + hours2 * 36e5;
          this._days = +days2 + weeks2 * 7;
          this._months = +months2 + quarters * 3 + years2 * 12;
          this._data = {};
          this._locale = locale_locales__getLocale();
          this._bubble();
        }
        function isDuration(obj) {
          return obj instanceof Duration;
        }
        function offset(token2, separator) {
          addFormatToken(token2, 0, 0, function() {
            var offset2 = this.utcOffset();
            var sign = "+";
            if (offset2 < 0) {
              offset2 = -offset2;
              sign = "-";
            }
            return sign + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
          });
        }
        offset("Z", ":");
        offset("ZZ", "");
        addRegexToken("Z", matchShortOffset);
        addRegexToken("ZZ", matchShortOffset);
        addParseToken(["Z", "ZZ"], function(input, array, config) {
          config._useUTC = true;
          config._tzm = offsetFromString(matchShortOffset, input);
        });
        var chunkOffset = /([\+\-]|\d\d)/gi;
        function offsetFromString(matcher, string) {
          var matches = (string || "").match(matcher) || [];
          var chunk = matches[matches.length - 1] || [];
          var parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
          var minutes2 = +(parts[1] * 60) + toInt(parts[2]);
          return parts[0] === "+" ? minutes2 : -minutes2;
        }
        function cloneWithOffset(input, model) {
          var res, diff2;
          if (model._isUTC) {
            res = model.clone();
            diff2 = (isMoment(input) || isDate(input) ? +input : +local__createLocal(input)) - +res;
            res._d.setTime(+res._d + diff2);
            utils_hooks__hooks.updateOffset(res, false);
            return res;
          } else {
            return local__createLocal(input).local();
          }
        }
        function getDateOffset(m) {
          return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
        }
        utils_hooks__hooks.updateOffset = function() {
        };
        function getSetOffset(input, keepLocalTime) {
          var offset2 = this._offset || 0, localAdjust;
          if (!this.isValid()) {
            return input != null ? this : NaN;
          }
          if (input != null) {
            if (typeof input === "string") {
              input = offsetFromString(matchShortOffset, input);
            } else if (Math.abs(input) < 16) {
              input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
              localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
              this.add(localAdjust, "m");
            }
            if (offset2 !== input) {
              if (!keepLocalTime || this._changeInProgress) {
                add_subtract__addSubtract(this, create__createDuration(input - offset2, "m"), 1, false);
              } else if (!this._changeInProgress) {
                this._changeInProgress = true;
                utils_hooks__hooks.updateOffset(this, true);
                this._changeInProgress = null;
              }
            }
            return this;
          } else {
            return this._isUTC ? offset2 : getDateOffset(this);
          }
        }
        function getSetZone(input, keepLocalTime) {
          if (input != null) {
            if (typeof input !== "string") {
              input = -input;
            }
            this.utcOffset(input, keepLocalTime);
            return this;
          } else {
            return -this.utcOffset();
          }
        }
        function setOffsetToUTC(keepLocalTime) {
          return this.utcOffset(0, keepLocalTime);
        }
        function setOffsetToLocal(keepLocalTime) {
          if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;
            if (keepLocalTime) {
              this.subtract(getDateOffset(this), "m");
            }
          }
          return this;
        }
        function setOffsetToParsedOffset() {
          if (this._tzm) {
            this.utcOffset(this._tzm);
          } else if (typeof this._i === "string") {
            this.utcOffset(offsetFromString(matchOffset, this._i));
          }
          return this;
        }
        function hasAlignedHourOffset(input) {
          if (!this.isValid()) {
            return false;
          }
          input = input ? local__createLocal(input).utcOffset() : 0;
          return (this.utcOffset() - input) % 60 === 0;
        }
        function isDaylightSavingTime() {
          return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
        }
        function isDaylightSavingTimeShifted() {
          if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
          }
          var c = {};
          copyConfig(c, this);
          c = prepareConfig(c);
          if (c._a) {
            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
            this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
          } else {
            this._isDSTShifted = false;
          }
          return this._isDSTShifted;
        }
        function isLocal() {
          return this.isValid() ? !this._isUTC : false;
        }
        function isUtcOffset() {
          return this.isValid() ? this._isUTC : false;
        }
        function isUtc() {
          return this.isValid() ? this._isUTC && this._offset === 0 : false;
        }
        var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?\d*)?$/;
        var isoRegex = /^(-)?P(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)W)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?$/;
        function create__createDuration(input, key) {
          var duration = input, match = null, sign, ret, diffRes;
          if (isDuration(input)) {
            duration = {
              ms: input._milliseconds,
              d: input._days,
              M: input._months
            };
          } else if (typeof input === "number") {
            duration = {};
            if (key) {
              duration[key] = input;
            } else {
              duration.milliseconds = input;
            }
          } else if (!!(match = aspNetRegex.exec(input))) {
            sign = match[1] === "-" ? -1 : 1;
            duration = {
              y: 0,
              d: toInt(match[DATE]) * sign,
              h: toInt(match[HOUR]) * sign,
              m: toInt(match[MINUTE]) * sign,
              s: toInt(match[SECOND]) * sign,
              ms: toInt(match[MILLISECOND]) * sign
            };
          } else if (!!(match = isoRegex.exec(input))) {
            sign = match[1] === "-" ? -1 : 1;
            duration = {
              y: parseIso(match[2], sign),
              M: parseIso(match[3], sign),
              w: parseIso(match[4], sign),
              d: parseIso(match[5], sign),
              h: parseIso(match[6], sign),
              m: parseIso(match[7], sign),
              s: parseIso(match[8], sign)
            };
          } else if (duration == null) {
            duration = {};
          } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));
            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
          }
          ret = new Duration(duration);
          if (isDuration(input) && hasOwnProp(input, "_locale")) {
            ret._locale = input._locale;
          }
          return ret;
        }
        create__createDuration.fn = Duration.prototype;
        function parseIso(inp, sign) {
          var res = inp && parseFloat(inp.replace(",", "."));
          return (isNaN(res) ? 0 : res) * sign;
        }
        function positiveMomentsDifference(base, other) {
          var res = { milliseconds: 0, months: 0 };
          res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
          if (base.clone().add(res.months, "M").isAfter(other)) {
            --res.months;
          }
          res.milliseconds = +other - +base.clone().add(res.months, "M");
          return res;
        }
        function momentsDifference(base, other) {
          var res;
          if (!(base.isValid() && other.isValid())) {
            return { milliseconds: 0, months: 0 };
          }
          other = cloneWithOffset(other, base);
          if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
          } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
          }
          return res;
        }
        function absRound(number) {
          if (number < 0) {
            return Math.round(-1 * number) * -1;
          } else {
            return Math.round(number);
          }
        }
        function createAdder(direction, name) {
          return function(val, period) {
            var dur, tmp;
            if (period !== null && !isNaN(+period)) {
              deprecateSimple(name, "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period).");
              tmp = val;
              val = period;
              period = tmp;
            }
            val = typeof val === "string" ? +val : val;
            dur = create__createDuration(val, period);
            add_subtract__addSubtract(this, dur, direction);
            return this;
          };
        }
        function add_subtract__addSubtract(mom, duration, isAdding, updateOffset) {
          var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
          if (!mom.isValid()) {
            return;
          }
          updateOffset = updateOffset == null ? true : updateOffset;
          if (milliseconds2) {
            mom._d.setTime(+mom._d + milliseconds2 * isAdding);
          }
          if (days2) {
            get_set__set(mom, "Date", get_set__get(mom, "Date") + days2 * isAdding);
          }
          if (months2) {
            setMonth(mom, get_set__get(mom, "Month") + months2 * isAdding);
          }
          if (updateOffset) {
            utils_hooks__hooks.updateOffset(mom, days2 || months2);
          }
        }
        var add_subtract__add = createAdder(1, "add");
        var add_subtract__subtract = createAdder(-1, "subtract");
        function moment_calendar__calendar(time, formats) {
          var now2 = time || local__createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), diff2 = this.diff(sod, "days", true), format2 = diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
          var output = formats && (isFunction(formats[format2]) ? formats[format2]() : formats[format2]);
          return this.format(output || this.localeData().calendar(format2, this, local__createLocal(now2)));
        }
        function clone() {
          return new Moment(this);
        }
        function isAfter(input, units) {
          var localInput = isMoment(input) ? input : local__createLocal(input);
          if (!(this.isValid() && localInput.isValid())) {
            return false;
          }
          units = normalizeUnits(!isUndefined(units) ? units : "millisecond");
          if (units === "millisecond") {
            return +this > +localInput;
          } else {
            return +localInput < +this.clone().startOf(units);
          }
        }
        function isBefore(input, units) {
          var localInput = isMoment(input) ? input : local__createLocal(input);
          if (!(this.isValid() && localInput.isValid())) {
            return false;
          }
          units = normalizeUnits(!isUndefined(units) ? units : "millisecond");
          if (units === "millisecond") {
            return +this < +localInput;
          } else {
            return +this.clone().endOf(units) < +localInput;
          }
        }
        function isBetween(from2, to2, units) {
          return this.isAfter(from2, units) && this.isBefore(to2, units);
        }
        function isSame(input, units) {
          var localInput = isMoment(input) ? input : local__createLocal(input), inputMs;
          if (!(this.isValid() && localInput.isValid())) {
            return false;
          }
          units = normalizeUnits(units || "millisecond");
          if (units === "millisecond") {
            return +this === +localInput;
          } else {
            inputMs = +localInput;
            return +this.clone().startOf(units) <= inputMs && inputMs <= +this.clone().endOf(units);
          }
        }
        function isSameOrAfter(input, units) {
          return this.isSame(input, units) || this.isAfter(input, units);
        }
        function isSameOrBefore(input, units) {
          return this.isSame(input, units) || this.isBefore(input, units);
        }
        function diff(input, units, asFloat) {
          var that, zoneDelta, delta, output;
          if (!this.isValid()) {
            return NaN;
          }
          that = cloneWithOffset(input, this);
          if (!that.isValid()) {
            return NaN;
          }
          zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
          units = normalizeUnits(units);
          if (units === "year" || units === "month" || units === "quarter") {
            output = monthDiff(this, that);
            if (units === "quarter") {
              output = output / 3;
            } else if (units === "year") {
              output = output / 12;
            }
          } else {
            delta = this - that;
            output = units === "second" ? delta / 1e3 : units === "minute" ? delta / 6e4 : units === "hour" ? delta / 36e5 : units === "day" ? (delta - zoneDelta) / 864e5 : units === "week" ? (delta - zoneDelta) / 6048e5 : delta;
          }
          return asFloat ? output : absFloor(output);
        }
        function monthDiff(a, b) {
          var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
          if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
            adjust = (b - anchor) / (anchor - anchor2);
          } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
            adjust = (b - anchor) / (anchor2 - anchor);
          }
          return -(wholeMonthDiff + adjust);
        }
        utils_hooks__hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
        function toString() {
          return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
        }
        function moment_format__toISOString() {
          var m = this.clone().utc();
          if (0 < m.year() && m.year() <= 9999) {
            if (isFunction(Date.prototype.toISOString)) {
              return this.toDate().toISOString();
            } else {
              return formatMoment(m, "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]");
            }
          } else {
            return formatMoment(m, "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]");
          }
        }
        function format(inputString) {
          var output = formatMoment(this, inputString || utils_hooks__hooks.defaultFormat);
          return this.localeData().postformat(output);
        }
        function from(time, withoutSuffix) {
          if (this.isValid() && (isMoment(time) && time.isValid() || local__createLocal(time).isValid())) {
            return create__createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
          } else {
            return this.localeData().invalidDate();
          }
        }
        function fromNow(withoutSuffix) {
          return this.from(local__createLocal(), withoutSuffix);
        }
        function to(time, withoutSuffix) {
          if (this.isValid() && (isMoment(time) && time.isValid() || local__createLocal(time).isValid())) {
            return create__createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
          } else {
            return this.localeData().invalidDate();
          }
        }
        function toNow(withoutSuffix) {
          return this.to(local__createLocal(), withoutSuffix);
        }
        function locale(key) {
          var newLocaleData;
          if (key === void 0) {
            return this._locale._abbr;
          } else {
            newLocaleData = locale_locales__getLocale(key);
            if (newLocaleData != null) {
              this._locale = newLocaleData;
            }
            return this;
          }
        }
        var lang = deprecate(
          "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
          function(key) {
            if (key === void 0) {
              return this.localeData();
            } else {
              return this.locale(key);
            }
          }
        );
        function localeData() {
          return this._locale;
        }
        function startOf(units) {
          units = normalizeUnits(units);
          switch (units) {
            case "year":
              this.month(0);
            case "quarter":
            case "month":
              this.date(1);
            case "week":
            case "isoWeek":
            case "day":
              this.hours(0);
            case "hour":
              this.minutes(0);
            case "minute":
              this.seconds(0);
            case "second":
              this.milliseconds(0);
          }
          if (units === "week") {
            this.weekday(0);
          }
          if (units === "isoWeek") {
            this.isoWeekday(1);
          }
          if (units === "quarter") {
            this.month(Math.floor(this.month() / 3) * 3);
          }
          return this;
        }
        function endOf(units) {
          units = normalizeUnits(units);
          if (units === void 0 || units === "millisecond") {
            return this;
          }
          return this.startOf(units).add(1, units === "isoWeek" ? "week" : units).subtract(1, "ms");
        }
        function to_type__valueOf() {
          return +this._d - (this._offset || 0) * 6e4;
        }
        function unix() {
          return Math.floor(+this / 1e3);
        }
        function toDate() {
          return this._offset ? new Date(+this) : this._d;
        }
        function toArray() {
          var m = this;
          return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
        }
        function toObject() {
          var m = this;
          return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
          };
        }
        function toJSON() {
          return this.isValid() ? this.toISOString() : null;
        }
        function moment_valid__isValid() {
          return valid__isValid(this);
        }
        function parsingFlags() {
          return extend({}, getParsingFlags(this));
        }
        function invalidAt() {
          return getParsingFlags(this).overflow;
        }
        function creationData() {
          return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
          };
        }
        addFormatToken(0, ["gg", 2], 0, function() {
          return this.weekYear() % 100;
        });
        addFormatToken(0, ["GG", 2], 0, function() {
          return this.isoWeekYear() % 100;
        });
        function addWeekYearFormatToken(token2, getter) {
          addFormatToken(0, [token2, token2.length], 0, getter);
        }
        addWeekYearFormatToken("gggg", "weekYear");
        addWeekYearFormatToken("ggggg", "weekYear");
        addWeekYearFormatToken("GGGG", "isoWeekYear");
        addWeekYearFormatToken("GGGGG", "isoWeekYear");
        addUnitAlias("weekYear", "gg");
        addUnitAlias("isoWeekYear", "GG");
        addRegexToken("G", matchSigned);
        addRegexToken("g", matchSigned);
        addRegexToken("GG", match1to2, match2);
        addRegexToken("gg", match1to2, match2);
        addRegexToken("GGGG", match1to4, match4);
        addRegexToken("gggg", match1to4, match4);
        addRegexToken("GGGGG", match1to6, match6);
        addRegexToken("ggggg", match1to6, match6);
        addWeekParseToken(["gggg", "ggggg", "GGGG", "GGGGG"], function(input, week, config, token2) {
          week[token2.substr(0, 2)] = toInt(input);
        });
        addWeekParseToken(["gg", "GG"], function(input, week, config, token2) {
          week[token2] = utils_hooks__hooks.parseTwoDigitYear(input);
        });
        function getSetWeekYear(input) {
          return getSetWeekYearHelper.call(
            this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy
          );
        }
        function getSetISOWeekYear(input) {
          return getSetWeekYearHelper.call(
            this,
            input,
            this.isoWeek(),
            this.isoWeekday(),
            1,
            4
          );
        }
        function getISOWeeksInYear() {
          return weeksInYear(this.year(), 1, 4);
        }
        function getWeeksInYear() {
          var weekInfo = this.localeData()._week;
          return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
        }
        function getSetWeekYearHelper(input, week, weekday, dow, doy) {
          var weeksTarget;
          if (input == null) {
            return weekOfYear(this, dow, doy).year;
          } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
              week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
          }
        }
        function setWeekAll(weekYear, week, weekday, dow, doy) {
          var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
          this.year(date.getUTCFullYear());
          this.month(date.getUTCMonth());
          this.date(date.getUTCDate());
          return this;
        }
        addFormatToken("Q", 0, "Qo", "quarter");
        addUnitAlias("quarter", "Q");
        addRegexToken("Q", match1);
        addParseToken("Q", function(input, array) {
          array[MONTH] = (toInt(input) - 1) * 3;
        });
        function getSetQuarter(input) {
          return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
        }
        addFormatToken("w", ["ww", 2], "wo", "week");
        addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
        addUnitAlias("week", "w");
        addUnitAlias("isoWeek", "W");
        addRegexToken("w", match1to2);
        addRegexToken("ww", match1to2, match2);
        addRegexToken("W", match1to2);
        addRegexToken("WW", match1to2, match2);
        addWeekParseToken(["w", "ww", "W", "WW"], function(input, week, config, token2) {
          week[token2.substr(0, 1)] = toInt(input);
        });
        function localeWeek(mom) {
          return weekOfYear(mom, this._week.dow, this._week.doy).week;
        }
        var defaultLocaleWeek = {
          dow: 0,
          doy: 6
        };
        function localeFirstDayOfWeek() {
          return this._week.dow;
        }
        function localeFirstDayOfYear() {
          return this._week.doy;
        }
        function getSetWeek(input) {
          var week = this.localeData().week(this);
          return input == null ? week : this.add((input - week) * 7, "d");
        }
        function getSetISOWeek(input) {
          var week = weekOfYear(this, 1, 4).week;
          return input == null ? week : this.add((input - week) * 7, "d");
        }
        addFormatToken("D", ["DD", 2], "Do", "date");
        addUnitAlias("date", "D");
        addRegexToken("D", match1to2);
        addRegexToken("DD", match1to2, match2);
        addRegexToken("Do", function(isStrict, locale2) {
          return isStrict ? locale2._ordinalParse : locale2._ordinalParseLenient;
        });
        addParseToken(["D", "DD"], DATE);
        addParseToken("Do", function(input, array) {
          array[DATE] = toInt(input.match(match1to2)[0], 10);
        });
        var getSetDayOfMonth = makeGetSet("Date", true);
        addFormatToken("d", 0, "do", "day");
        addFormatToken("dd", 0, 0, function(format2) {
          return this.localeData().weekdaysMin(this, format2);
        });
        addFormatToken("ddd", 0, 0, function(format2) {
          return this.localeData().weekdaysShort(this, format2);
        });
        addFormatToken("dddd", 0, 0, function(format2) {
          return this.localeData().weekdays(this, format2);
        });
        addFormatToken("e", 0, 0, "weekday");
        addFormatToken("E", 0, 0, "isoWeekday");
        addUnitAlias("day", "d");
        addUnitAlias("weekday", "e");
        addUnitAlias("isoWeekday", "E");
        addRegexToken("d", match1to2);
        addRegexToken("e", match1to2);
        addRegexToken("E", match1to2);
        addRegexToken("dd", matchWord);
        addRegexToken("ddd", matchWord);
        addRegexToken("dddd", matchWord);
        addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config, token2) {
          var weekday = config._locale.weekdaysParse(input, token2, config._strict);
          if (weekday != null) {
            week.d = weekday;
          } else {
            getParsingFlags(config).invalidWeekday = input;
          }
        });
        addWeekParseToken(["d", "e", "E"], function(input, week, config, token2) {
          week[token2] = toInt(input);
        });
        function parseWeekday(input, locale2) {
          if (typeof input !== "string") {
            return input;
          }
          if (!isNaN(input)) {
            return parseInt(input, 10);
          }
          input = locale2.weekdaysParse(input);
          if (typeof input === "number") {
            return input;
          }
          return null;
        }
        var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_");
        function localeWeekdays(m, format2) {
          return isArray(this._weekdays) ? this._weekdays[m.day()] : this._weekdays[this._weekdays.isFormat.test(format2) ? "format" : "standalone"][m.day()];
        }
        var defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_");
        function localeWeekdaysShort(m) {
          return this._weekdaysShort[m.day()];
        }
        var defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_");
        function localeWeekdaysMin(m) {
          return this._weekdaysMin[m.day()];
        }
        function localeWeekdaysParse(weekdayName, format2, strict) {
          var i, mom, regex;
          if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
          }
          for (i = 0; i < 7; i++) {
            mom = local__createLocal([2e3, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
              this._fullWeekdaysParse[i] = new RegExp("^" + this.weekdays(mom, "").replace(".", ".?") + "$", "i");
              this._shortWeekdaysParse[i] = new RegExp("^" + this.weekdaysShort(mom, "").replace(".", ".?") + "$", "i");
              this._minWeekdaysParse[i] = new RegExp("^" + this.weekdaysMin(mom, "").replace(".", ".?") + "$", "i");
            }
            if (!this._weekdaysParse[i]) {
              regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
              this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
            }
            if (strict && format2 === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) {
              return i;
            } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) {
              return i;
            } else if (strict && format2 === "dd" && this._minWeekdaysParse[i].test(weekdayName)) {
              return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
              return i;
            }
          }
        }
        function getSetDayOfWeek(input) {
          if (!this.isValid()) {
            return input != null ? this : NaN;
          }
          var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
          if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, "d");
          } else {
            return day;
          }
        }
        function getSetLocaleDayOfWeek(input) {
          if (!this.isValid()) {
            return input != null ? this : NaN;
          }
          var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
          return input == null ? weekday : this.add(input - weekday, "d");
        }
        function getSetISODayOfWeek(input) {
          if (!this.isValid()) {
            return input != null ? this : NaN;
          }
          return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
        }
        addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
        addUnitAlias("dayOfYear", "DDD");
        addRegexToken("DDD", match1to3);
        addRegexToken("DDDD", match3);
        addParseToken(["DDD", "DDDD"], function(input, array, config) {
          config._dayOfYear = toInt(input);
        });
        function getSetDayOfYear(input) {
          var dayOfYear = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
          return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
        }
        function hFormat() {
          return this.hours() % 12 || 12;
        }
        addFormatToken("H", ["HH", 2], 0, "hour");
        addFormatToken("h", ["hh", 2], 0, hFormat);
        addFormatToken("hmm", 0, 0, function() {
          return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
        });
        addFormatToken("hmmss", 0, 0, function() {
          return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
        });
        addFormatToken("Hmm", 0, 0, function() {
          return "" + this.hours() + zeroFill(this.minutes(), 2);
        });
        addFormatToken("Hmmss", 0, 0, function() {
          return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
        });
        function meridiem(token2, lowercase) {
          addFormatToken(token2, 0, 0, function() {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
          });
        }
        meridiem("a", true);
        meridiem("A", false);
        addUnitAlias("hour", "h");
        function matchMeridiem(isStrict, locale2) {
          return locale2._meridiemParse;
        }
        addRegexToken("a", matchMeridiem);
        addRegexToken("A", matchMeridiem);
        addRegexToken("H", match1to2);
        addRegexToken("h", match1to2);
        addRegexToken("HH", match1to2, match2);
        addRegexToken("hh", match1to2, match2);
        addRegexToken("hmm", match3to4);
        addRegexToken("hmmss", match5to6);
        addRegexToken("Hmm", match3to4);
        addRegexToken("Hmmss", match5to6);
        addParseToken(["H", "HH"], HOUR);
        addParseToken(["a", "A"], function(input, array, config) {
          config._isPm = config._locale.isPM(input);
          config._meridiem = input;
        });
        addParseToken(["h", "hh"], function(input, array, config) {
          array[HOUR] = toInt(input);
          getParsingFlags(config).bigHour = true;
        });
        addParseToken("hmm", function(input, array, config) {
          var pos = input.length - 2;
          array[HOUR] = toInt(input.substr(0, pos));
          array[MINUTE] = toInt(input.substr(pos));
          getParsingFlags(config).bigHour = true;
        });
        addParseToken("hmmss", function(input, array, config) {
          var pos1 = input.length - 4;
          var pos2 = input.length - 2;
          array[HOUR] = toInt(input.substr(0, pos1));
          array[MINUTE] = toInt(input.substr(pos1, 2));
          array[SECOND] = toInt(input.substr(pos2));
          getParsingFlags(config).bigHour = true;
        });
        addParseToken("Hmm", function(input, array, config) {
          var pos = input.length - 2;
          array[HOUR] = toInt(input.substr(0, pos));
          array[MINUTE] = toInt(input.substr(pos));
        });
        addParseToken("Hmmss", function(input, array, config) {
          var pos1 = input.length - 4;
          var pos2 = input.length - 2;
          array[HOUR] = toInt(input.substr(0, pos1));
          array[MINUTE] = toInt(input.substr(pos1, 2));
          array[SECOND] = toInt(input.substr(pos2));
        });
        function localeIsPM(input) {
          return (input + "").toLowerCase().charAt(0) === "p";
        }
        var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
        function localeMeridiem(hours2, minutes2, isLower) {
          if (hours2 > 11) {
            return isLower ? "pm" : "PM";
          } else {
            return isLower ? "am" : "AM";
          }
        }
        var getSetHour = makeGetSet("Hours", true);
        addFormatToken("m", ["mm", 2], 0, "minute");
        addUnitAlias("minute", "m");
        addRegexToken("m", match1to2);
        addRegexToken("mm", match1to2, match2);
        addParseToken(["m", "mm"], MINUTE);
        var getSetMinute = makeGetSet("Minutes", false);
        addFormatToken("s", ["ss", 2], 0, "second");
        addUnitAlias("second", "s");
        addRegexToken("s", match1to2);
        addRegexToken("ss", match1to2, match2);
        addParseToken(["s", "ss"], SECOND);
        var getSetSecond = makeGetSet("Seconds", false);
        addFormatToken("S", 0, 0, function() {
          return ~~(this.millisecond() / 100);
        });
        addFormatToken(0, ["SS", 2], 0, function() {
          return ~~(this.millisecond() / 10);
        });
        addFormatToken(0, ["SSS", 3], 0, "millisecond");
        addFormatToken(0, ["SSSS", 4], 0, function() {
          return this.millisecond() * 10;
        });
        addFormatToken(0, ["SSSSS", 5], 0, function() {
          return this.millisecond() * 100;
        });
        addFormatToken(0, ["SSSSSS", 6], 0, function() {
          return this.millisecond() * 1e3;
        });
        addFormatToken(0, ["SSSSSSS", 7], 0, function() {
          return this.millisecond() * 1e4;
        });
        addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
          return this.millisecond() * 1e5;
        });
        addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
          return this.millisecond() * 1e6;
        });
        addUnitAlias("millisecond", "ms");
        addRegexToken("S", match1to3, match1);
        addRegexToken("SS", match1to3, match2);
        addRegexToken("SSS", match1to3, match3);
        var token;
        for (token = "SSSS"; token.length <= 9; token += "S") {
          addRegexToken(token, matchUnsigned);
        }
        function parseMs(input, array) {
          array[MILLISECOND] = toInt(("0." + input) * 1e3);
        }
        for (token = "S"; token.length <= 9; token += "S") {
          addParseToken(token, parseMs);
        }
        var getSetMillisecond = makeGetSet("Milliseconds", false);
        addFormatToken("z", 0, 0, "zoneAbbr");
        addFormatToken("zz", 0, 0, "zoneName");
        function getZoneAbbr() {
          return this._isUTC ? "UTC" : "";
        }
        function getZoneName() {
          return this._isUTC ? "Coordinated Universal Time" : "";
        }
        var momentPrototype__proto = Moment.prototype;
        momentPrototype__proto.add = add_subtract__add;
        momentPrototype__proto.calendar = moment_calendar__calendar;
        momentPrototype__proto.clone = clone;
        momentPrototype__proto.diff = diff;
        momentPrototype__proto.endOf = endOf;
        momentPrototype__proto.format = format;
        momentPrototype__proto.from = from;
        momentPrototype__proto.fromNow = fromNow;
        momentPrototype__proto.to = to;
        momentPrototype__proto.toNow = toNow;
        momentPrototype__proto.get = getSet;
        momentPrototype__proto.invalidAt = invalidAt;
        momentPrototype__proto.isAfter = isAfter;
        momentPrototype__proto.isBefore = isBefore;
        momentPrototype__proto.isBetween = isBetween;
        momentPrototype__proto.isSame = isSame;
        momentPrototype__proto.isSameOrAfter = isSameOrAfter;
        momentPrototype__proto.isSameOrBefore = isSameOrBefore;
        momentPrototype__proto.isValid = moment_valid__isValid;
        momentPrototype__proto.lang = lang;
        momentPrototype__proto.locale = locale;
        momentPrototype__proto.localeData = localeData;
        momentPrototype__proto.max = prototypeMax;
        momentPrototype__proto.min = prototypeMin;
        momentPrototype__proto.parsingFlags = parsingFlags;
        momentPrototype__proto.set = getSet;
        momentPrototype__proto.startOf = startOf;
        momentPrototype__proto.subtract = add_subtract__subtract;
        momentPrototype__proto.toArray = toArray;
        momentPrototype__proto.toObject = toObject;
        momentPrototype__proto.toDate = toDate;
        momentPrototype__proto.toISOString = moment_format__toISOString;
        momentPrototype__proto.toJSON = toJSON;
        momentPrototype__proto.toString = toString;
        momentPrototype__proto.unix = unix;
        momentPrototype__proto.valueOf = to_type__valueOf;
        momentPrototype__proto.creationData = creationData;
        momentPrototype__proto.year = getSetYear;
        momentPrototype__proto.isLeapYear = getIsLeapYear;
        momentPrototype__proto.weekYear = getSetWeekYear;
        momentPrototype__proto.isoWeekYear = getSetISOWeekYear;
        momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;
        momentPrototype__proto.month = getSetMonth;
        momentPrototype__proto.daysInMonth = getDaysInMonth;
        momentPrototype__proto.week = momentPrototype__proto.weeks = getSetWeek;
        momentPrototype__proto.isoWeek = momentPrototype__proto.isoWeeks = getSetISOWeek;
        momentPrototype__proto.weeksInYear = getWeeksInYear;
        momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;
        momentPrototype__proto.date = getSetDayOfMonth;
        momentPrototype__proto.day = momentPrototype__proto.days = getSetDayOfWeek;
        momentPrototype__proto.weekday = getSetLocaleDayOfWeek;
        momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
        momentPrototype__proto.dayOfYear = getSetDayOfYear;
        momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;
        momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;
        momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;
        momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;
        momentPrototype__proto.utcOffset = getSetOffset;
        momentPrototype__proto.utc = setOffsetToUTC;
        momentPrototype__proto.local = setOffsetToLocal;
        momentPrototype__proto.parseZone = setOffsetToParsedOffset;
        momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
        momentPrototype__proto.isDST = isDaylightSavingTime;
        momentPrototype__proto.isDSTShifted = isDaylightSavingTimeShifted;
        momentPrototype__proto.isLocal = isLocal;
        momentPrototype__proto.isUtcOffset = isUtcOffset;
        momentPrototype__proto.isUtc = isUtc;
        momentPrototype__proto.isUTC = isUtc;
        momentPrototype__proto.zoneAbbr = getZoneAbbr;
        momentPrototype__proto.zoneName = getZoneName;
        momentPrototype__proto.dates = deprecate("dates accessor is deprecated. Use date instead.", getSetDayOfMonth);
        momentPrototype__proto.months = deprecate("months accessor is deprecated. Use month instead", getSetMonth);
        momentPrototype__proto.years = deprecate("years accessor is deprecated. Use year instead", getSetYear);
        momentPrototype__proto.zone = deprecate("moment().zone is deprecated, use moment().utcOffset instead. https://github.com/moment/moment/issues/1779", getSetZone);
        var momentPrototype = momentPrototype__proto;
        function moment__createUnix(input) {
          return local__createLocal(input * 1e3);
        }
        function moment__createInZone() {
          return local__createLocal.apply(null, arguments).parseZone();
        }
        var defaultCalendar = {
          sameDay: "[Today at] LT",
          nextDay: "[Tomorrow at] LT",
          nextWeek: "dddd [at] LT",
          lastDay: "[Yesterday at] LT",
          lastWeek: "[Last] dddd [at] LT",
          sameElse: "L"
        };
        function locale_calendar__calendar(key, mom, now2) {
          var output = this._calendar[key];
          return isFunction(output) ? output.call(mom, now2) : output;
        }
        var defaultLongDateFormat = {
          LTS: "h:mm:ss A",
          LT: "h:mm A",
          L: "MM/DD/YYYY",
          LL: "MMMM D, YYYY",
          LLL: "MMMM D, YYYY h:mm A",
          LLLL: "dddd, MMMM D, YYYY h:mm A"
        };
        function longDateFormat(key) {
          var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
          if (format2 || !formatUpper) {
            return format2;
          }
          this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function(val) {
            return val.slice(1);
          });
          return this._longDateFormat[key];
        }
        var defaultInvalidDate = "Invalid date";
        function invalidDate() {
          return this._invalidDate;
        }
        var defaultOrdinal = "%d";
        var defaultOrdinalParse = /\d{1,2}/;
        function ordinal(number) {
          return this._ordinal.replace("%d", number);
        }
        function preParsePostFormat(string) {
          return string;
        }
        var defaultRelativeTime = {
          future: "in %s",
          past: "%s ago",
          s: "a few seconds",
          m: "a minute",
          mm: "%d minutes",
          h: "an hour",
          hh: "%d hours",
          d: "a day",
          dd: "%d days",
          M: "a month",
          MM: "%d months",
          y: "a year",
          yy: "%d years"
        };
        function relative__relativeTime(number, withoutSuffix, string, isFuture) {
          var output = this._relativeTime[string];
          return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
        }
        function pastFuture(diff2, output) {
          var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
          return isFunction(format2) ? format2(output) : format2.replace(/%s/i, output);
        }
        var prototype__proto = Locale2.prototype;
        prototype__proto._calendar = defaultCalendar;
        prototype__proto.calendar = locale_calendar__calendar;
        prototype__proto._longDateFormat = defaultLongDateFormat;
        prototype__proto.longDateFormat = longDateFormat;
        prototype__proto._invalidDate = defaultInvalidDate;
        prototype__proto.invalidDate = invalidDate;
        prototype__proto._ordinal = defaultOrdinal;
        prototype__proto.ordinal = ordinal;
        prototype__proto._ordinalParse = defaultOrdinalParse;
        prototype__proto.preparse = preParsePostFormat;
        prototype__proto.postformat = preParsePostFormat;
        prototype__proto._relativeTime = defaultRelativeTime;
        prototype__proto.relativeTime = relative__relativeTime;
        prototype__proto.pastFuture = pastFuture;
        prototype__proto.set = locale_set__set;
        prototype__proto.months = localeMonths;
        prototype__proto._months = defaultLocaleMonths;
        prototype__proto.monthsShort = localeMonthsShort;
        prototype__proto._monthsShort = defaultLocaleMonthsShort;
        prototype__proto.monthsParse = localeMonthsParse;
        prototype__proto._monthsRegex = defaultMonthsRegex;
        prototype__proto.monthsRegex = monthsRegex;
        prototype__proto._monthsShortRegex = defaultMonthsShortRegex;
        prototype__proto.monthsShortRegex = monthsShortRegex;
        prototype__proto.week = localeWeek;
        prototype__proto._week = defaultLocaleWeek;
        prototype__proto.firstDayOfYear = localeFirstDayOfYear;
        prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;
        prototype__proto.weekdays = localeWeekdays;
        prototype__proto._weekdays = defaultLocaleWeekdays;
        prototype__proto.weekdaysMin = localeWeekdaysMin;
        prototype__proto._weekdaysMin = defaultLocaleWeekdaysMin;
        prototype__proto.weekdaysShort = localeWeekdaysShort;
        prototype__proto._weekdaysShort = defaultLocaleWeekdaysShort;
        prototype__proto.weekdaysParse = localeWeekdaysParse;
        prototype__proto.isPM = localeIsPM;
        prototype__proto._meridiemParse = defaultLocaleMeridiemParse;
        prototype__proto.meridiem = localeMeridiem;
        function lists__get(format2, index, field, setter) {
          var locale2 = locale_locales__getLocale();
          var utc = create_utc__createUTC().set(setter, index);
          return locale2[field](utc, format2);
        }
        function list(format2, index, field, count, setter) {
          if (typeof format2 === "number") {
            index = format2;
            format2 = void 0;
          }
          format2 = format2 || "";
          if (index != null) {
            return lists__get(format2, index, field, setter);
          }
          var i;
          var out = [];
          for (i = 0; i < count; i++) {
            out[i] = lists__get(format2, i, field, setter);
          }
          return out;
        }
        function lists__listMonths(format2, index) {
          return list(format2, index, "months", 12, "month");
        }
        function lists__listMonthsShort(format2, index) {
          return list(format2, index, "monthsShort", 12, "month");
        }
        function lists__listWeekdays(format2, index) {
          return list(format2, index, "weekdays", 7, "day");
        }
        function lists__listWeekdaysShort(format2, index) {
          return list(format2, index, "weekdaysShort", 7, "day");
        }
        function lists__listWeekdaysMin(format2, index) {
          return list(format2, index, "weekdaysMin", 7, "day");
        }
        locale_locales__getSetGlobalLocale("en", {
          ordinalParse: /\d{1,2}(th|st|nd|rd)/,
          ordinal: function(number) {
            var b = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
            return number + output;
          }
        });
        utils_hooks__hooks.lang = deprecate("moment.lang is deprecated. Use moment.locale instead.", locale_locales__getSetGlobalLocale);
        utils_hooks__hooks.langData = deprecate("moment.langData is deprecated. Use moment.localeData instead.", locale_locales__getLocale);
        var mathAbs = Math.abs;
        function duration_abs__abs() {
          var data = this._data;
          this._milliseconds = mathAbs(this._milliseconds);
          this._days = mathAbs(this._days);
          this._months = mathAbs(this._months);
          data.milliseconds = mathAbs(data.milliseconds);
          data.seconds = mathAbs(data.seconds);
          data.minutes = mathAbs(data.minutes);
          data.hours = mathAbs(data.hours);
          data.months = mathAbs(data.months);
          data.years = mathAbs(data.years);
          return this;
        }
        function duration_add_subtract__addSubtract(duration, input, value, direction) {
          var other = create__createDuration(input, value);
          duration._milliseconds += direction * other._milliseconds;
          duration._days += direction * other._days;
          duration._months += direction * other._months;
          return duration._bubble();
        }
        function duration_add_subtract__add(input, value) {
          return duration_add_subtract__addSubtract(this, input, value, 1);
        }
        function duration_add_subtract__subtract(input, value) {
          return duration_add_subtract__addSubtract(this, input, value, -1);
        }
        function absCeil(number) {
          if (number < 0) {
            return Math.floor(number);
          } else {
            return Math.ceil(number);
          }
        }
        function bubble() {
          var milliseconds2 = this._milliseconds;
          var days2 = this._days;
          var months2 = this._months;
          var data = this._data;
          var seconds2, minutes2, hours2, years2, monthsFromDays;
          if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
            milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
            days2 = 0;
            months2 = 0;
          }
          data.milliseconds = milliseconds2 % 1e3;
          seconds2 = absFloor(milliseconds2 / 1e3);
          data.seconds = seconds2 % 60;
          minutes2 = absFloor(seconds2 / 60);
          data.minutes = minutes2 % 60;
          hours2 = absFloor(minutes2 / 60);
          data.hours = hours2 % 24;
          days2 += absFloor(hours2 / 24);
          monthsFromDays = absFloor(daysToMonths(days2));
          months2 += monthsFromDays;
          days2 -= absCeil(monthsToDays(monthsFromDays));
          years2 = absFloor(months2 / 12);
          months2 %= 12;
          data.days = days2;
          data.months = months2;
          data.years = years2;
          return this;
        }
        function daysToMonths(days2) {
          return days2 * 4800 / 146097;
        }
        function monthsToDays(months2) {
          return months2 * 146097 / 4800;
        }
        function as(units) {
          var days2;
          var months2;
          var milliseconds2 = this._milliseconds;
          units = normalizeUnits(units);
          if (units === "month" || units === "year") {
            days2 = this._days + milliseconds2 / 864e5;
            months2 = this._months + daysToMonths(days2);
            return units === "month" ? months2 : months2 / 12;
          } else {
            days2 = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
              case "week":
                return days2 / 7 + milliseconds2 / 6048e5;
              case "day":
                return days2 + milliseconds2 / 864e5;
              case "hour":
                return days2 * 24 + milliseconds2 / 36e5;
              case "minute":
                return days2 * 1440 + milliseconds2 / 6e4;
              case "second":
                return days2 * 86400 + milliseconds2 / 1e3;
              case "millisecond":
                return Math.floor(days2 * 864e5) + milliseconds2;
              default:
                throw new Error("Unknown unit " + units);
            }
          }
        }
        function duration_as__valueOf() {
          return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
        }
        function makeAs(alias) {
          return function() {
            return this.as(alias);
          };
        }
        var asMilliseconds = makeAs("ms");
        var asSeconds = makeAs("s");
        var asMinutes = makeAs("m");
        var asHours = makeAs("h");
        var asDays = makeAs("d");
        var asWeeks = makeAs("w");
        var asMonths = makeAs("M");
        var asYears = makeAs("y");
        function duration_get__get(units) {
          units = normalizeUnits(units);
          return this[units + "s"]();
        }
        function makeGetter(name) {
          return function() {
            return this._data[name];
          };
        }
        var milliseconds = makeGetter("milliseconds");
        var seconds = makeGetter("seconds");
        var minutes = makeGetter("minutes");
        var hours = makeGetter("hours");
        var days = makeGetter("days");
        var months = makeGetter("months");
        var years = makeGetter("years");
        function weeks() {
          return absFloor(this.days() / 7);
        }
        var round = Math.round;
        var thresholds = {
          s: 45,
          m: 45,
          h: 22,
          d: 26,
          M: 11
        };
        function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
          return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
        }
        function duration_humanize__relativeTime(posNegDuration, withoutSuffix, locale2) {
          var duration = create__createDuration(posNegDuration).abs();
          var seconds2 = round(duration.as("s"));
          var minutes2 = round(duration.as("m"));
          var hours2 = round(duration.as("h"));
          var days2 = round(duration.as("d"));
          var months2 = round(duration.as("M"));
          var years2 = round(duration.as("y"));
          var a = seconds2 < thresholds.s && ["s", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds.d && ["dd", days2] || months2 <= 1 && ["M"] || months2 < thresholds.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
          a[2] = withoutSuffix;
          a[3] = +posNegDuration > 0;
          a[4] = locale2;
          return substituteTimeAgo.apply(null, a);
        }
        function duration_humanize__getSetRelativeTimeThreshold(threshold, limit) {
          if (thresholds[threshold] === void 0) {
            return false;
          }
          if (limit === void 0) {
            return thresholds[threshold];
          }
          thresholds[threshold] = limit;
          return true;
        }
        function humanize(withSuffix) {
          var locale2 = this.localeData();
          var output = duration_humanize__relativeTime(this, !withSuffix, locale2);
          if (withSuffix) {
            output = locale2.pastFuture(+this, output);
          }
          return locale2.postformat(output);
        }
        var iso_string__abs = Math.abs;
        function iso_string__toISOString() {
          var seconds2 = iso_string__abs(this._milliseconds) / 1e3;
          var days2 = iso_string__abs(this._days);
          var months2 = iso_string__abs(this._months);
          var minutes2, hours2, years2;
          minutes2 = absFloor(seconds2 / 60);
          hours2 = absFloor(minutes2 / 60);
          seconds2 %= 60;
          minutes2 %= 60;
          years2 = absFloor(months2 / 12);
          months2 %= 12;
          var Y = years2;
          var M = months2;
          var D = days2;
          var h = hours2;
          var m = minutes2;
          var s = seconds2;
          var total = this.asSeconds();
          if (!total) {
            return "P0D";
          }
          return (total < 0 ? "-" : "") + "P" + (Y ? Y + "Y" : "") + (M ? M + "M" : "") + (D ? D + "D" : "") + (h || m || s ? "T" : "") + (h ? h + "H" : "") + (m ? m + "M" : "") + (s ? s + "S" : "");
        }
        var duration_prototype__proto = Duration.prototype;
        duration_prototype__proto.abs = duration_abs__abs;
        duration_prototype__proto.add = duration_add_subtract__add;
        duration_prototype__proto.subtract = duration_add_subtract__subtract;
        duration_prototype__proto.as = as;
        duration_prototype__proto.asMilliseconds = asMilliseconds;
        duration_prototype__proto.asSeconds = asSeconds;
        duration_prototype__proto.asMinutes = asMinutes;
        duration_prototype__proto.asHours = asHours;
        duration_prototype__proto.asDays = asDays;
        duration_prototype__proto.asWeeks = asWeeks;
        duration_prototype__proto.asMonths = asMonths;
        duration_prototype__proto.asYears = asYears;
        duration_prototype__proto.valueOf = duration_as__valueOf;
        duration_prototype__proto._bubble = bubble;
        duration_prototype__proto.get = duration_get__get;
        duration_prototype__proto.milliseconds = milliseconds;
        duration_prototype__proto.seconds = seconds;
        duration_prototype__proto.minutes = minutes;
        duration_prototype__proto.hours = hours;
        duration_prototype__proto.days = days;
        duration_prototype__proto.weeks = weeks;
        duration_prototype__proto.months = months;
        duration_prototype__proto.years = years;
        duration_prototype__proto.humanize = humanize;
        duration_prototype__proto.toISOString = iso_string__toISOString;
        duration_prototype__proto.toString = iso_string__toISOString;
        duration_prototype__proto.toJSON = iso_string__toISOString;
        duration_prototype__proto.locale = locale;
        duration_prototype__proto.localeData = localeData;
        duration_prototype__proto.toIsoString = deprecate("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", iso_string__toISOString);
        duration_prototype__proto.lang = lang;
        addFormatToken("X", 0, 0, "unix");
        addFormatToken("x", 0, 0, "valueOf");
        addRegexToken("x", matchSigned);
        addRegexToken("X", matchTimestamp);
        addParseToken("X", function(input, array, config) {
          config._d = new Date(parseFloat(input, 10) * 1e3);
        });
        addParseToken("x", function(input, array, config) {
          config._d = new Date(toInt(input));
        });
        utils_hooks__hooks.version = "2.12.0";
        setHookCallback(local__createLocal);
        utils_hooks__hooks.fn = momentPrototype;
        utils_hooks__hooks.min = min;
        utils_hooks__hooks.max = max;
        utils_hooks__hooks.now = now;
        utils_hooks__hooks.utc = create_utc__createUTC;
        utils_hooks__hooks.unix = moment__createUnix;
        utils_hooks__hooks.months = lists__listMonths;
        utils_hooks__hooks.isDate = isDate;
        utils_hooks__hooks.locale = locale_locales__getSetGlobalLocale;
        utils_hooks__hooks.invalid = valid__createInvalid;
        utils_hooks__hooks.duration = create__createDuration;
        utils_hooks__hooks.isMoment = isMoment;
        utils_hooks__hooks.weekdays = lists__listWeekdays;
        utils_hooks__hooks.parseZone = moment__createInZone;
        utils_hooks__hooks.localeData = locale_locales__getLocale;
        utils_hooks__hooks.isDuration = isDuration;
        utils_hooks__hooks.monthsShort = lists__listMonthsShort;
        utils_hooks__hooks.weekdaysMin = lists__listWeekdaysMin;
        utils_hooks__hooks.defineLocale = defineLocale;
        utils_hooks__hooks.updateLocale = updateLocale;
        utils_hooks__hooks.locales = locale_locales__listLocales;
        utils_hooks__hooks.weekdaysShort = lists__listWeekdaysShort;
        utils_hooks__hooks.normalizeUnits = normalizeUnits;
        utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;
        utils_hooks__hooks.prototype = momentPrototype;
        var _moment = utils_hooks__hooks;
        return _moment;
      });
    }
  });

  // node_modules/jed/jed.js
  var require_jed = __commonJS({
    "node_modules/jed/jed.js"(exports2, module2) {
      (function(root, undef) {
        var ArrayProto = Array.prototype, ObjProto = Object.prototype, slice = ArrayProto.slice, hasOwnProp = ObjProto.hasOwnProperty, nativeForEach = ArrayProto.forEach, breaker = {};
        var _ = {
          forEach: function(obj, iterator, context) {
            var i, l, key;
            if (obj === null) {
              return;
            }
            if (nativeForEach && obj.forEach === nativeForEach) {
              obj.forEach(iterator, context);
            } else if (obj.length === +obj.length) {
              for (i = 0, l = obj.length; i < l; i++) {
                if (i in obj && iterator.call(context, obj[i], i, obj) === breaker) {
                  return;
                }
              }
            } else {
              for (key in obj) {
                if (hasOwnProp.call(obj, key)) {
                  if (iterator.call(context, obj[key], key, obj) === breaker) {
                    return;
                  }
                }
              }
            }
          },
          extend: function(obj) {
            this.forEach(slice.call(arguments, 1), function(source) {
              for (var prop in source) {
                obj[prop] = source[prop];
              }
            });
            return obj;
          }
        };
        var Jed = function(options) {
          this.defaults = {
            "locale_data": {
              "messages": {
                "": {
                  "domain": "messages",
                  "lang": "en",
                  "plural_forms": "nplurals=2; plural=(n != 1);"
                }
              }
            },
            "domain": "messages",
            "debug": false
          };
          this.options = _.extend({}, this.defaults, options);
          this.textdomain(this.options.domain);
          if (options.domain && !this.options.locale_data[this.options.domain]) {
            throw new Error("Text domain set to non-existent domain: `" + options.domain + "`");
          }
        };
        Jed.context_delimiter = String.fromCharCode(4);
        function getPluralFormFunc(plural_form_string) {
          return Jed.PF.compile(plural_form_string || "nplurals=2; plural=(n != 1);");
        }
        function Chain(key, i18n) {
          this._key = key;
          this._i18n = i18n;
        }
        _.extend(Chain.prototype, {
          onDomain: function(domain) {
            this._domain = domain;
            return this;
          },
          withContext: function(context) {
            this._context = context;
            return this;
          },
          ifPlural: function(num, pkey) {
            this._val = num;
            this._pkey = pkey;
            return this;
          },
          fetch: function(sArr) {
            if ({}.toString.call(sArr) != "[object Array]") {
              sArr = [].slice.call(arguments, 0);
            }
            return (sArr && sArr.length ? Jed.sprintf : function(x) {
              return x;
            })(
              this._i18n.dcnpgettext(this._domain, this._context, this._key, this._pkey, this._val),
              sArr
            );
          }
        });
        _.extend(Jed.prototype, {
          translate: function(key) {
            return new Chain(key, this);
          },
          textdomain: function(domain) {
            if (!domain) {
              return this._textdomain;
            }
            this._textdomain = domain;
          },
          gettext: function(key) {
            return this.dcnpgettext.call(this, undef, undef, key);
          },
          dgettext: function(domain, key) {
            return this.dcnpgettext.call(this, domain, undef, key);
          },
          dcgettext: function(domain, key) {
            return this.dcnpgettext.call(this, domain, undef, key);
          },
          ngettext: function(skey, pkey, val) {
            return this.dcnpgettext.call(this, undef, undef, skey, pkey, val);
          },
          dngettext: function(domain, skey, pkey, val) {
            return this.dcnpgettext.call(this, domain, undef, skey, pkey, val);
          },
          dcngettext: function(domain, skey, pkey, val) {
            return this.dcnpgettext.call(this, domain, undef, skey, pkey, val);
          },
          pgettext: function(context, key) {
            return this.dcnpgettext.call(this, undef, context, key);
          },
          dpgettext: function(domain, context, key) {
            return this.dcnpgettext.call(this, domain, context, key);
          },
          dcpgettext: function(domain, context, key) {
            return this.dcnpgettext.call(this, domain, context, key);
          },
          npgettext: function(context, skey, pkey, val) {
            return this.dcnpgettext.call(this, undef, context, skey, pkey, val);
          },
          dnpgettext: function(domain, context, skey, pkey, val) {
            return this.dcnpgettext.call(this, domain, context, skey, pkey, val);
          },
          dcnpgettext: function(domain, context, singular_key, plural_key, val) {
            plural_key = plural_key || singular_key;
            domain = domain || this._textdomain;
            var fallback;
            if (!this.options) {
              fallback = new Jed();
              return fallback.dcnpgettext.call(fallback, void 0, void 0, singular_key, plural_key, val);
            }
            if (!this.options.locale_data) {
              throw new Error("No locale data provided.");
            }
            if (!this.options.locale_data[domain]) {
              throw new Error("Domain `" + domain + "` was not found.");
            }
            if (!this.options.locale_data[domain][""]) {
              throw new Error("No locale meta information provided.");
            }
            if (!singular_key) {
              throw new Error("No translation key found.");
            }
            var key = context ? context + Jed.context_delimiter + singular_key : singular_key, locale_data = this.options.locale_data, dict = locale_data[domain], defaultConf = (locale_data.messages || this.defaults.locale_data.messages)[""], pluralForms = dict[""].plural_forms || dict[""]["Plural-Forms"] || dict[""]["plural-forms"] || defaultConf.plural_forms || defaultConf["Plural-Forms"] || defaultConf["plural-forms"], val_list, res;
            var val_idx;
            if (val === void 0) {
              val_idx = 0;
            } else {
              if (typeof val != "number") {
                val = parseInt(val, 10);
                if (isNaN(val)) {
                  throw new Error("The number that was passed in is not a number.");
                }
              }
              val_idx = getPluralFormFunc(pluralForms)(val);
            }
            if (!dict) {
              throw new Error("No domain named `" + domain + "` could be found.");
            }
            val_list = dict[key];
            if (!val_list || val_idx > val_list.length) {
              if (this.options.missing_key_callback) {
                this.options.missing_key_callback(key, domain);
              }
              res = [singular_key, plural_key];
              if (this.options.debug === true) {
                console.log(res[getPluralFormFunc(pluralForms)(val)]);
              }
              return res[getPluralFormFunc()(val)];
            }
            res = val_list[val_idx];
            if (!res) {
              res = [singular_key, plural_key];
              return res[getPluralFormFunc()(val)];
            }
            return res;
          }
        });
        var sprintf = function() {
          function get_type(variable) {
            return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();
          }
          function str_repeat(input, multiplier) {
            for (var output = []; multiplier > 0; output[--multiplier] = input) {
            }
            return output.join("");
          }
          var str_format = function() {
            if (!str_format.cache.hasOwnProperty(arguments[0])) {
              str_format.cache[arguments[0]] = str_format.parse(arguments[0]);
            }
            return str_format.format.call(null, str_format.cache[arguments[0]], arguments);
          };
          str_format.format = function(parse_tree, argv) {
            var cursor = 1, tree_length = parse_tree.length, node_type = "", arg, output = [], i, k, match, pad, pad_character, pad_length;
            for (i = 0; i < tree_length; i++) {
              node_type = get_type(parse_tree[i]);
              if (node_type === "string") {
                output.push(parse_tree[i]);
              } else if (node_type === "array") {
                match = parse_tree[i];
                if (match[2]) {
                  arg = argv[cursor];
                  for (k = 0; k < match[2].length; k++) {
                    if (!arg.hasOwnProperty(match[2][k])) {
                      throw sprintf('[sprintf] property "%s" does not exist', match[2][k]);
                    }
                    arg = arg[match[2][k]];
                  }
                } else if (match[1]) {
                  arg = argv[match[1]];
                } else {
                  arg = argv[cursor++];
                }
                if (/[^s]/.test(match[8]) && get_type(arg) != "number") {
                  throw sprintf("[sprintf] expecting number but found %s", get_type(arg));
                }
                if (typeof arg == "undefined" || arg === null) {
                  arg = "";
                }
                switch (match[8]) {
                  case "b":
                    arg = arg.toString(2);
                    break;
                  case "c":
                    arg = String.fromCharCode(arg);
                    break;
                  case "d":
                    arg = parseInt(arg, 10);
                    break;
                  case "e":
                    arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential();
                    break;
                  case "f":
                    arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg);
                    break;
                  case "o":
                    arg = arg.toString(8);
                    break;
                  case "s":
                    arg = (arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg;
                    break;
                  case "u":
                    arg = Math.abs(arg);
                    break;
                  case "x":
                    arg = arg.toString(16);
                    break;
                  case "X":
                    arg = arg.toString(16).toUpperCase();
                    break;
                }
                arg = /[def]/.test(match[8]) && match[3] && arg >= 0 ? "+" + arg : arg;
                pad_character = match[4] ? match[4] == "0" ? "0" : match[4].charAt(1) : " ";
                pad_length = match[6] - String(arg).length;
                pad = match[6] ? str_repeat(pad_character, pad_length) : "";
                output.push(match[5] ? arg + pad : pad + arg);
              }
            }
            return output.join("");
          };
          str_format.cache = {};
          str_format.parse = function(fmt) {
            var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;
            while (_fmt) {
              if ((match = /^[^\x25]+/.exec(_fmt)) !== null) {
                parse_tree.push(match[0]);
              } else if ((match = /^\x25{2}/.exec(_fmt)) !== null) {
                parse_tree.push("%");
              } else if ((match = /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {
                if (match[2]) {
                  arg_names |= 1;
                  var field_list = [], replacement_field = match[2], field_match = [];
                  if ((field_match = /^([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
                    field_list.push(field_match[1]);
                    while ((replacement_field = replacement_field.substring(field_match[0].length)) !== "") {
                      if ((field_match = /^\.([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
                        field_list.push(field_match[1]);
                      } else if ((field_match = /^\[(\d+)\]/.exec(replacement_field)) !== null) {
                        field_list.push(field_match[1]);
                      } else {
                        throw "[sprintf] huh?";
                      }
                    }
                  } else {
                    throw "[sprintf] huh?";
                  }
                  match[2] = field_list;
                } else {
                  arg_names |= 2;
                }
                if (arg_names === 3) {
                  throw "[sprintf] mixing positional and named placeholders is not (yet) supported";
                }
                parse_tree.push(match);
              } else {
                throw "[sprintf] huh?";
              }
              _fmt = _fmt.substring(match[0].length);
            }
            return parse_tree;
          };
          return str_format;
        }();
        var vsprintf = function(fmt, argv) {
          argv.unshift(fmt);
          return sprintf.apply(null, argv);
        };
        Jed.parse_plural = function(plural_forms, n) {
          plural_forms = plural_forms.replace(/n/g, n);
          return Jed.parse_expression(plural_forms);
        };
        Jed.sprintf = function(fmt, args) {
          if ({}.toString.call(args) == "[object Array]") {
            return vsprintf(fmt, [].slice.call(args));
          }
          return sprintf.apply(this, [].slice.call(arguments));
        };
        Jed.prototype.sprintf = function() {
          return Jed.sprintf.apply(this, arguments);
        };
        Jed.PF = {};
        Jed.PF.parse = function(p) {
          var plural_str = Jed.PF.extractPluralExpr(p);
          return Jed.PF.parser.parse.call(Jed.PF.parser, plural_str);
        };
        Jed.PF.compile = function(p) {
          function imply(val) {
            return val === true ? 1 : val ? val : 0;
          }
          var ast = Jed.PF.parse(p);
          return function(n) {
            return imply(Jed.PF.interpreter(ast)(n));
          };
        };
        Jed.PF.interpreter = function(ast) {
          return function(n) {
            var res;
            switch (ast.type) {
              case "GROUP":
                return Jed.PF.interpreter(ast.expr)(n);
              case "TERNARY":
                if (Jed.PF.interpreter(ast.expr)(n)) {
                  return Jed.PF.interpreter(ast.truthy)(n);
                }
                return Jed.PF.interpreter(ast.falsey)(n);
              case "OR":
                return Jed.PF.interpreter(ast.left)(n) || Jed.PF.interpreter(ast.right)(n);
              case "AND":
                return Jed.PF.interpreter(ast.left)(n) && Jed.PF.interpreter(ast.right)(n);
              case "LT":
                return Jed.PF.interpreter(ast.left)(n) < Jed.PF.interpreter(ast.right)(n);
              case "GT":
                return Jed.PF.interpreter(ast.left)(n) > Jed.PF.interpreter(ast.right)(n);
              case "LTE":
                return Jed.PF.interpreter(ast.left)(n) <= Jed.PF.interpreter(ast.right)(n);
              case "GTE":
                return Jed.PF.interpreter(ast.left)(n) >= Jed.PF.interpreter(ast.right)(n);
              case "EQ":
                return Jed.PF.interpreter(ast.left)(n) == Jed.PF.interpreter(ast.right)(n);
              case "NEQ":
                return Jed.PF.interpreter(ast.left)(n) != Jed.PF.interpreter(ast.right)(n);
              case "MOD":
                return Jed.PF.interpreter(ast.left)(n) % Jed.PF.interpreter(ast.right)(n);
              case "VAR":
                return n;
              case "NUM":
                return ast.val;
              default:
                throw new Error("Invalid Token found.");
            }
          };
        };
        Jed.PF.extractPluralExpr = function(p) {
          p = p.replace(/^\s\s*/, "").replace(/\s\s*$/, "");
          if (!/;\s*$/.test(p)) {
            p = p.concat(";");
          }
          var nplurals_re = /nplurals\=(\d+);/, plural_re = /plural\=(.*);/, nplurals_matches = p.match(nplurals_re), res = {}, plural_matches;
          if (nplurals_matches.length > 1) {
            res.nplurals = nplurals_matches[1];
          } else {
            throw new Error("nplurals not found in plural_forms string: " + p);
          }
          p = p.replace(nplurals_re, "");
          plural_matches = p.match(plural_re);
          if (!(plural_matches && plural_matches.length > 1)) {
            throw new Error("`plural` expression not found: " + p);
          }
          return plural_matches[1];
        };
        Jed.PF.parser = function() {
          var parser = {
            trace: function trace() {
            },
            yy: {},
            symbols_: { "error": 2, "expressions": 3, "e": 4, "EOF": 5, "?": 6, ":": 7, "||": 8, "&&": 9, "<": 10, "<=": 11, ">": 12, ">=": 13, "!=": 14, "==": 15, "%": 16, "(": 17, ")": 18, "n": 19, "NUMBER": 20, "$accept": 0, "$end": 1 },
            terminals_: { 2: "error", 5: "EOF", 6: "?", 7: ":", 8: "||", 9: "&&", 10: "<", 11: "<=", 12: ">", 13: ">=", 14: "!=", 15: "==", 16: "%", 17: "(", 18: ")", 19: "n", 20: "NUMBER" },
            productions_: [0, [3, 2], [4, 5], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 1], [4, 1]],
            performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$) {
              var $0 = $$.length - 1;
              switch (yystate) {
                case 1:
                  return { type: "GROUP", expr: $$[$0 - 1] };
                  break;
                case 2:
                  this.$ = { type: "TERNARY", expr: $$[$0 - 4], truthy: $$[$0 - 2], falsey: $$[$0] };
                  break;
                case 3:
                  this.$ = { type: "OR", left: $$[$0 - 2], right: $$[$0] };
                  break;
                case 4:
                  this.$ = { type: "AND", left: $$[$0 - 2], right: $$[$0] };
                  break;
                case 5:
                  this.$ = { type: "LT", left: $$[$0 - 2], right: $$[$0] };
                  break;
                case 6:
                  this.$ = { type: "LTE", left: $$[$0 - 2], right: $$[$0] };
                  break;
                case 7:
                  this.$ = { type: "GT", left: $$[$0 - 2], right: $$[$0] };
                  break;
                case 8:
                  this.$ = { type: "GTE", left: $$[$0 - 2], right: $$[$0] };
                  break;
                case 9:
                  this.$ = { type: "NEQ", left: $$[$0 - 2], right: $$[$0] };
                  break;
                case 10:
                  this.$ = { type: "EQ", left: $$[$0 - 2], right: $$[$0] };
                  break;
                case 11:
                  this.$ = { type: "MOD", left: $$[$0 - 2], right: $$[$0] };
                  break;
                case 12:
                  this.$ = { type: "GROUP", expr: $$[$0 - 1] };
                  break;
                case 13:
                  this.$ = { type: "VAR" };
                  break;
                case 14:
                  this.$ = { type: "NUM", val: Number(yytext) };
                  break;
              }
            },
            table: [{ 3: 1, 4: 2, 17: [1, 3], 19: [1, 4], 20: [1, 5] }, { 1: [3] }, { 5: [1, 6], 6: [1, 7], 8: [1, 8], 9: [1, 9], 10: [1, 10], 11: [1, 11], 12: [1, 12], 13: [1, 13], 14: [1, 14], 15: [1, 15], 16: [1, 16] }, { 4: 17, 17: [1, 3], 19: [1, 4], 20: [1, 5] }, { 5: [2, 13], 6: [2, 13], 7: [2, 13], 8: [2, 13], 9: [2, 13], 10: [2, 13], 11: [2, 13], 12: [2, 13], 13: [2, 13], 14: [2, 13], 15: [2, 13], 16: [2, 13], 18: [2, 13] }, { 5: [2, 14], 6: [2, 14], 7: [2, 14], 8: [2, 14], 9: [2, 14], 10: [2, 14], 11: [2, 14], 12: [2, 14], 13: [2, 14], 14: [2, 14], 15: [2, 14], 16: [2, 14], 18: [2, 14] }, { 1: [2, 1] }, { 4: 18, 17: [1, 3], 19: [1, 4], 20: [1, 5] }, { 4: 19, 17: [1, 3], 19: [1, 4], 20: [1, 5] }, { 4: 20, 17: [1, 3], 19: [1, 4], 20: [1, 5] }, { 4: 21, 17: [1, 3], 19: [1, 4], 20: [1, 5] }, { 4: 22, 17: [1, 3], 19: [1, 4], 20: [1, 5] }, { 4: 23, 17: [1, 3], 19: [1, 4], 20: [1, 5] }, { 4: 24, 17: [1, 3], 19: [1, 4], 20: [1, 5] }, { 4: 25, 17: [1, 3], 19: [1, 4], 20: [1, 5] }, { 4: 26, 17: [1, 3], 19: [1, 4], 20: [1, 5] }, { 4: 27, 17: [1, 3], 19: [1, 4], 20: [1, 5] }, { 6: [1, 7], 8: [1, 8], 9: [1, 9], 10: [1, 10], 11: [1, 11], 12: [1, 12], 13: [1, 13], 14: [1, 14], 15: [1, 15], 16: [1, 16], 18: [1, 28] }, { 6: [1, 7], 7: [1, 29], 8: [1, 8], 9: [1, 9], 10: [1, 10], 11: [1, 11], 12: [1, 12], 13: [1, 13], 14: [1, 14], 15: [1, 15], 16: [1, 16] }, { 5: [2, 3], 6: [2, 3], 7: [2, 3], 8: [2, 3], 9: [1, 9], 10: [1, 10], 11: [1, 11], 12: [1, 12], 13: [1, 13], 14: [1, 14], 15: [1, 15], 16: [1, 16], 18: [2, 3] }, { 5: [2, 4], 6: [2, 4], 7: [2, 4], 8: [2, 4], 9: [2, 4], 10: [1, 10], 11: [1, 11], 12: [1, 12], 13: [1, 13], 14: [1, 14], 15: [1, 15], 16: [1, 16], 18: [2, 4] }, { 5: [2, 5], 6: [2, 5], 7: [2, 5], 8: [2, 5], 9: [2, 5], 10: [2, 5], 11: [2, 5], 12: [2, 5], 13: [2, 5], 14: [2, 5], 15: [2, 5], 16: [1, 16], 18: [2, 5] }, { 5: [2, 6], 6: [2, 6], 7: [2, 6], 8: [2, 6], 9: [2, 6], 10: [2, 6], 11: [2, 6], 12: [2, 6], 13: [2, 6], 14: [2, 6], 15: [2, 6], 16: [1, 16], 18: [2, 6] }, { 5: [2, 7], 6: [2, 7], 7: [2, 7], 8: [2, 7], 9: [2, 7], 10: [2, 7], 11: [2, 7], 12: [2, 7], 13: [2, 7], 14: [2, 7], 15: [2, 7], 16: [1, 16], 18: [2, 7] }, { 5: [2, 8], 6: [2, 8], 7: [2, 8], 8: [2, 8], 9: [2, 8], 10: [2, 8], 11: [2, 8], 12: [2, 8], 13: [2, 8], 14: [2, 8], 15: [2, 8], 16: [1, 16], 18: [2, 8] }, { 5: [2, 9], 6: [2, 9], 7: [2, 9], 8: [2, 9], 9: [2, 9], 10: [2, 9], 11: [2, 9], 12: [2, 9], 13: [2, 9], 14: [2, 9], 15: [2, 9], 16: [1, 16], 18: [2, 9] }, { 5: [2, 10], 6: [2, 10], 7: [2, 10], 8: [2, 10], 9: [2, 10], 10: [2, 10], 11: [2, 10], 12: [2, 10], 13: [2, 10], 14: [2, 10], 15: [2, 10], 16: [1, 16], 18: [2, 10] }, { 5: [2, 11], 6: [2, 11], 7: [2, 11], 8: [2, 11], 9: [2, 11], 10: [2, 11], 11: [2, 11], 12: [2, 11], 13: [2, 11], 14: [2, 11], 15: [2, 11], 16: [2, 11], 18: [2, 11] }, { 5: [2, 12], 6: [2, 12], 7: [2, 12], 8: [2, 12], 9: [2, 12], 10: [2, 12], 11: [2, 12], 12: [2, 12], 13: [2, 12], 14: [2, 12], 15: [2, 12], 16: [2, 12], 18: [2, 12] }, { 4: 30, 17: [1, 3], 19: [1, 4], 20: [1, 5] }, { 5: [2, 2], 6: [1, 7], 7: [2, 2], 8: [1, 8], 9: [1, 9], 10: [1, 10], 11: [1, 11], 12: [1, 12], 13: [1, 13], 14: [1, 14], 15: [1, 15], 16: [1, 16], 18: [2, 2] }],
            defaultActions: { 6: [2, 1] },
            parseError: function parseError(str, hash) {
              throw new Error(str);
            },
            parse: function parse(input) {
              var self2 = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
              this.lexer.setInput(input);
              this.lexer.yy = this.yy;
              this.yy.lexer = this.lexer;
              if (typeof this.lexer.yylloc == "undefined")
                this.lexer.yylloc = {};
              var yyloc = this.lexer.yylloc;
              lstack.push(yyloc);
              if (typeof this.yy.parseError === "function")
                this.parseError = this.yy.parseError;
              function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
              }
              function lex() {
                var token;
                token = self2.lexer.lex() || 1;
                if (typeof token !== "number") {
                  token = self2.symbols_[token] || token;
                }
                return token;
              }
              var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
              while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                  action = this.defaultActions[state];
                } else {
                  if (symbol == null)
                    symbol = lex();
                  action = table[state] && table[state][symbol];
                }
                _handle_error:
                  if (typeof action === "undefined" || !action.length || !action[0]) {
                    if (!recovering) {
                      expected = [];
                      for (p in table[state])
                        if (this.terminals_[p] && p > 2) {
                          expected.push("'" + this.terminals_[p] + "'");
                        }
                      var errStr = "";
                      if (this.lexer.showPosition) {
                        errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + this.terminals_[symbol] + "'";
                      } else {
                        errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1 ? "end of input" : "'" + (this.terminals_[symbol] || symbol) + "'");
                      }
                      this.parseError(
                        errStr,
                        { text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected }
                      );
                    }
                    if (recovering == 3) {
                      if (symbol == EOF) {
                        throw new Error(errStr || "Parsing halted.");
                      }
                      yyleng = this.lexer.yyleng;
                      yytext = this.lexer.yytext;
                      yylineno = this.lexer.yylineno;
                      yyloc = this.lexer.yylloc;
                      symbol = lex();
                    }
                    while (1) {
                      if (TERROR.toString() in table[state]) {
                        break;
                      }
                      if (state == 0) {
                        throw new Error(errStr || "Parsing halted.");
                      }
                      popStack(1);
                      state = stack[stack.length - 1];
                    }
                    preErrorSymbol = symbol;
                    symbol = TERROR;
                    state = stack[stack.length - 1];
                    action = table[state] && table[state][TERROR];
                    recovering = 3;
                  }
                if (action[0] instanceof Array && action.length > 1) {
                  throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
                }
                switch (action[0]) {
                  case 1:
                    stack.push(symbol);
                    vstack.push(this.lexer.yytext);
                    lstack.push(this.lexer.yylloc);
                    stack.push(action[1]);
                    symbol = null;
                    if (!preErrorSymbol) {
                      yyleng = this.lexer.yyleng;
                      yytext = this.lexer.yytext;
                      yylineno = this.lexer.yylineno;
                      yyloc = this.lexer.yylloc;
                      if (recovering > 0)
                        recovering--;
                    } else {
                      symbol = preErrorSymbol;
                      preErrorSymbol = null;
                    }
                    break;
                  case 2:
                    len = this.productions_[action[1]][1];
                    yyval.$ = vstack[vstack.length - len];
                    yyval._$ = {
                      first_line: lstack[lstack.length - (len || 1)].first_line,
                      last_line: lstack[lstack.length - 1].last_line,
                      first_column: lstack[lstack.length - (len || 1)].first_column,
                      last_column: lstack[lstack.length - 1].last_column
                    };
                    r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
                    if (typeof r !== "undefined") {
                      return r;
                    }
                    if (len) {
                      stack = stack.slice(0, -1 * len * 2);
                      vstack = vstack.slice(0, -1 * len);
                      lstack = lstack.slice(0, -1 * len);
                    }
                    stack.push(this.productions_[action[1]][0]);
                    vstack.push(yyval.$);
                    lstack.push(yyval._$);
                    newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                    stack.push(newState);
                    break;
                  case 3:
                    return true;
                }
              }
              return true;
            }
          };
          var lexer = function() {
            var lexer2 = {
              EOF: 1,
              parseError: function parseError(str, hash) {
                if (this.yy.parseError) {
                  this.yy.parseError(str, hash);
                } else {
                  throw new Error(str);
                }
              },
              setInput: function(input) {
                this._input = input;
                this._more = this._less = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = "";
                this.conditionStack = ["INITIAL"];
                this.yylloc = { first_line: 1, first_column: 0, last_line: 1, last_column: 0 };
                return this;
              },
              input: function() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/\n/);
                if (lines)
                  this.yylineno++;
                this._input = this._input.slice(1);
                return ch;
              },
              unput: function(ch) {
                this._input = ch + this._input;
                return this;
              },
              more: function() {
                this._more = true;
                return this;
              },
              pastInput: function() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? "..." : "") + past.substr(-20).replace(/\n/g, "");
              },
              upcomingInput: function() {
                var next = this.match;
                if (next.length < 20) {
                  next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? "..." : "")).replace(/\n/g, "");
              },
              showPosition: function() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
              },
              next: function() {
                if (this.done) {
                  return this.EOF;
                }
                if (!this._input)
                  this.done = true;
                var token, match, col, lines;
                if (!this._more) {
                  this.yytext = "";
                  this.match = "";
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                  match = this._input.match(this.rules[rules[i]]);
                  if (match) {
                    lines = match[0].match(/\n.*/g);
                    if (lines)
                      this.yylineno += lines.length;
                    this.yylloc = {
                      first_line: this.yylloc.last_line,
                      last_line: this.yylineno + 1,
                      first_column: this.yylloc.last_column,
                      last_column: lines ? lines[lines.length - 1].length - 1 : this.yylloc.last_column + match[0].length
                    };
                    this.yytext += match[0];
                    this.match += match[0];
                    this.matches = match;
                    this.yyleng = this.yytext.length;
                    this._more = false;
                    this._input = this._input.slice(match[0].length);
                    this.matched += match[0];
                    token = this.performAction.call(this, this.yy, this, rules[i], this.conditionStack[this.conditionStack.length - 1]);
                    if (token)
                      return token;
                    else
                      return;
                  }
                }
                if (this._input === "") {
                  return this.EOF;
                } else {
                  this.parseError(
                    "Lexical error on line " + (this.yylineno + 1) + ". Unrecognized text.\n" + this.showPosition(),
                    { text: "", token: null, line: this.yylineno }
                  );
                }
              },
              lex: function lex() {
                var r = this.next();
                if (typeof r !== "undefined") {
                  return r;
                } else {
                  return this.lex();
                }
              },
              begin: function begin(condition) {
                this.conditionStack.push(condition);
              },
              popState: function popState() {
                return this.conditionStack.pop();
              },
              _currentRules: function _currentRules() {
                return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
              },
              topState: function() {
                return this.conditionStack[this.conditionStack.length - 2];
              },
              pushState: function begin(condition) {
                this.begin(condition);
              }
            };
            lexer2.performAction = function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
              var YYSTATE = YY_START;
              switch ($avoiding_name_collisions) {
                case 0:
                  break;
                case 1:
                  return 20;
                  break;
                case 2:
                  return 19;
                  break;
                case 3:
                  return 8;
                  break;
                case 4:
                  return 9;
                  break;
                case 5:
                  return 6;
                  break;
                case 6:
                  return 7;
                  break;
                case 7:
                  return 11;
                  break;
                case 8:
                  return 13;
                  break;
                case 9:
                  return 10;
                  break;
                case 10:
                  return 12;
                  break;
                case 11:
                  return 14;
                  break;
                case 12:
                  return 15;
                  break;
                case 13:
                  return 16;
                  break;
                case 14:
                  return 17;
                  break;
                case 15:
                  return 18;
                  break;
                case 16:
                  return 5;
                  break;
                case 17:
                  return "INVALID";
                  break;
              }
            };
            lexer2.rules = [/^\s+/, /^[0-9]+(\.[0-9]+)?\b/, /^n\b/, /^\|\|/, /^&&/, /^\?/, /^:/, /^<=/, /^>=/, /^</, /^>/, /^!=/, /^==/, /^%/, /^\(/, /^\)/, /^$/, /^./];
            lexer2.conditions = { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], "inclusive": true } };
            return lexer2;
          }();
          parser.lexer = lexer;
          return parser;
        }();
        if (typeof exports2 !== "undefined") {
          if (typeof module2 !== "undefined" && module2.exports) {
            exports2 = module2.exports = Jed;
          }
          exports2.Jed = Jed;
        } else {
          if (typeof define === "function" && define.amd) {
            define(function() {
              return Jed;
            });
          }
          root["Jed"] = Jed;
        }
      })(exports2);
    }
  });

  // node_modules/i18next/dist/commonjs/logger.js
  var require_logger = __commonJS({
    "node_modules/i18next/dist/commonjs/logger.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      function _classCallCheck(instance2, Constructor) {
        if (!(instance2 instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _toConsumableArray(arr) {
        if (Array.isArray(arr)) {
          for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
            arr2[i] = arr[i];
          }
          return arr2;
        } else {
          return Array.from(arr);
        }
      }
      var consoleLogger = {
        type: "logger",
        log: function log(args) {
          this.output("log", args);
        },
        warn: function warn(args) {
          this.output("warn", args);
        },
        error: function error(args) {
          this.output("error", args);
        },
        output: function output(type, args) {
          var _console;
          if (console && console[type])
            (_console = console)[type].apply(_console, _toConsumableArray(args));
        }
      };
      var Logger = function() {
        function Logger2(concreteLogger) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          _classCallCheck(this, Logger2);
          this.init(concreteLogger, options);
        }
        Logger2.prototype.init = function init(concreteLogger) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          this.prefix = options.prefix || "i18next:";
          this.logger = concreteLogger || consoleLogger;
          this.options = options;
          this.debug = options.debug;
        };
        Logger2.prototype.setDebug = function setDebug(bool) {
          this.debug = bool;
        };
        Logger2.prototype.log = function log() {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return this.forward(args, "log", "", true);
        };
        Logger2.prototype.warn = function warn() {
          for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return this.forward(args, "warn", "", true);
        };
        Logger2.prototype.error = function error() {
          for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }
          return this.forward(args, "error", "");
        };
        Logger2.prototype.deprecate = function deprecate() {
          for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }
          return this.forward(args, "warn", "WARNING DEPRECATED: ", true);
        };
        Logger2.prototype.forward = function forward(args, lvl, prefix, debugOnly) {
          if (debugOnly && !this.debug)
            return null;
          if (typeof args[0] === "string")
            args[0] = "" + prefix + this.prefix + " " + args[0];
          return this.logger[lvl](args);
        };
        Logger2.prototype.create = function create(moduleName2) {
          return new Logger2(this.logger, _extends({ prefix: this.prefix + ":" + moduleName2 + ":" }, this.options));
        };
        return Logger2;
      }();
      exports2.default = new Logger();
    }
  });

  // node_modules/i18next/dist/commonjs/EventEmitter.js
  var require_EventEmitter = __commonJS({
    "node_modules/i18next/dist/commonjs/EventEmitter.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      function _classCallCheck(instance2, Constructor) {
        if (!(instance2 instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var EventEmitter2 = function() {
        function EventEmitter3() {
          _classCallCheck(this, EventEmitter3);
          this.observers = {};
        }
        EventEmitter3.prototype.on = function on(events, listener) {
          var _this = this;
          events.split(" ").forEach(function(event) {
            _this.observers[event] = _this.observers[event] || [];
            _this.observers[event].push(listener);
          });
        };
        EventEmitter3.prototype.off = function off(event, listener) {
          var _this2 = this;
          if (!this.observers[event]) {
            return;
          }
          this.observers[event].forEach(function() {
            if (!listener) {
              delete _this2.observers[event];
            } else {
              var index = _this2.observers[event].indexOf(listener);
              if (index > -1) {
                _this2.observers[event].splice(index, 1);
              }
            }
          });
        };
        EventEmitter3.prototype.emit = function emit(event) {
          for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }
          if (this.observers[event]) {
            var cloned = [].concat(this.observers[event]);
            cloned.forEach(function(observer) {
              observer.apply(void 0, args);
            });
          }
          if (this.observers["*"]) {
            var _cloned = [].concat(this.observers["*"]);
            _cloned.forEach(function(observer) {
              var _ref;
              observer.apply(observer, (_ref = [event]).concat.apply(_ref, args));
            });
          }
        };
        return EventEmitter3;
      }();
      exports2.default = EventEmitter2;
    }
  });

  // node_modules/i18next/dist/commonjs/utils.js
  var require_utils = __commonJS({
    "node_modules/i18next/dist/commonjs/utils.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.makeString = makeString;
      exports2.copy = copy;
      exports2.setPath = setPath;
      exports2.pushPath = pushPath;
      exports2.getPath = getPath;
      exports2.deepExtend = deepExtend;
      exports2.regexEscape = regexEscape;
      exports2.escape = escape;
      function makeString(object) {
        if (object == null)
          return "";
        return "" + object;
      }
      function copy(a, s, t) {
        a.forEach(function(m) {
          if (s[m])
            t[m] = s[m];
        });
      }
      function getLastOfPath(object, path, Empty) {
        function cleanKey(key2) {
          return key2 && key2.indexOf("###") > -1 ? key2.replace(/###/g, ".") : key2;
        }
        function canNotTraverseDeeper() {
          return !object || typeof object === "string";
        }
        var stack = typeof path !== "string" ? [].concat(path) : path.split(".");
        while (stack.length > 1) {
          if (canNotTraverseDeeper())
            return {};
          var key = cleanKey(stack.shift());
          if (!object[key] && Empty)
            object[key] = new Empty();
          object = object[key];
        }
        if (canNotTraverseDeeper())
          return {};
        return {
          obj: object,
          k: cleanKey(stack.shift())
        };
      }
      function setPath(object, path, newValue) {
        var _getLastOfPath = getLastOfPath(object, path, Object), obj = _getLastOfPath.obj, k = _getLastOfPath.k;
        obj[k] = newValue;
      }
      function pushPath(object, path, newValue, concat) {
        var _getLastOfPath2 = getLastOfPath(object, path, Object), obj = _getLastOfPath2.obj, k = _getLastOfPath2.k;
        obj[k] = obj[k] || [];
        if (concat)
          obj[k] = obj[k].concat(newValue);
        if (!concat)
          obj[k].push(newValue);
      }
      function getPath(object, path) {
        var _getLastOfPath3 = getLastOfPath(object, path), obj = _getLastOfPath3.obj, k = _getLastOfPath3.k;
        if (!obj)
          return void 0;
        return obj[k];
      }
      function deepExtend(target, source, overwrite) {
        for (var prop in source) {
          if (prop in target) {
            if (typeof target[prop] === "string" || target[prop] instanceof String || typeof source[prop] === "string" || source[prop] instanceof String) {
              if (overwrite)
                target[prop] = source[prop];
            } else {
              deepExtend(target[prop], source[prop], overwrite);
            }
          } else {
            target[prop] = source[prop];
          }
        }
        return target;
      }
      function regexEscape(str) {
        return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
      }
      var _entityMap = {
        "&": "&amp;",
        "<": "&lt;",
        ">": "&gt;",
        '"': "&quot;",
        "'": "&#39;",
        "/": "&#x2F;"
      };
      function escape(data) {
        if (typeof data === "string") {
          return data.replace(/[&<>"'\/]/g, function(s) {
            return _entityMap[s];
          });
        }
        return data;
      }
    }
  });

  // node_modules/i18next/dist/commonjs/ResourceStore.js
  var require_ResourceStore = __commonJS({
    "node_modules/i18next/dist/commonjs/ResourceStore.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _EventEmitter2 = require_EventEmitter();
      var _EventEmitter3 = _interopRequireDefault(_EventEmitter2);
      var _utils = require_utils();
      var utils = _interopRequireWildcard(_utils);
      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj;
        } else {
          var newObj = {};
          if (obj != null) {
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key))
                newObj[key] = obj[key];
            }
          }
          newObj.default = obj;
          return newObj;
        }
      }
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = Object.getOwnPropertyDescriptor(defaults, key);
          if (value && value.configurable && obj[key] === void 0) {
            Object.defineProperty(obj, key, value);
          }
        }
        return obj;
      }
      function _classCallCheck(instance2, Constructor) {
        if (!(instance2 instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
      }
      var ResourceStore = function(_EventEmitter) {
        _inherits(ResourceStore2, _EventEmitter);
        function ResourceStore2() {
          var data = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : { ns: ["translation"], defaultNS: "translation" };
          _classCallCheck(this, ResourceStore2);
          var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));
          _this.data = data;
          _this.options = options;
          return _this;
        }
        ResourceStore2.prototype.addNamespaces = function addNamespaces(ns) {
          if (this.options.ns.indexOf(ns) < 0) {
            this.options.ns.push(ns);
          }
        };
        ResourceStore2.prototype.removeNamespaces = function removeNamespaces(ns) {
          var index = this.options.ns.indexOf(ns);
          if (index > -1) {
            this.options.ns.splice(index, 1);
          }
        };
        ResourceStore2.prototype.getResource = function getResource(lng, ns, key) {
          var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
          var keySeparator = options.keySeparator || this.options.keySeparator;
          if (keySeparator === void 0)
            keySeparator = ".";
          var path = [lng, ns];
          if (key && typeof key !== "string")
            path = path.concat(key);
          if (key && typeof key === "string")
            path = path.concat(keySeparator ? key.split(keySeparator) : key);
          if (lng.indexOf(".") > -1) {
            path = lng.split(".");
          }
          return utils.getPath(this.data, path);
        };
        ResourceStore2.prototype.addResource = function addResource(lng, ns, key, value) {
          var options = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : { silent: false };
          var keySeparator = this.options.keySeparator;
          if (keySeparator === void 0)
            keySeparator = ".";
          var path = [lng, ns];
          if (key)
            path = path.concat(keySeparator ? key.split(keySeparator) : key);
          if (lng.indexOf(".") > -1) {
            path = lng.split(".");
            value = ns;
            ns = path[1];
          }
          this.addNamespaces(ns);
          utils.setPath(this.data, path, value);
          if (!options.silent)
            this.emit("added", lng, ns, key, value);
        };
        ResourceStore2.prototype.addResources = function addResources(lng, ns, resources) {
          for (var m in resources) {
            if (typeof resources[m] === "string")
              this.addResource(lng, ns, m, resources[m], { silent: true });
          }
          this.emit("added", lng, ns, resources);
        };
        ResourceStore2.prototype.addResourceBundle = function addResourceBundle(lng, ns, resources, deep, overwrite) {
          var path = [lng, ns];
          if (lng.indexOf(".") > -1) {
            path = lng.split(".");
            deep = resources;
            resources = ns;
            ns = path[1];
          }
          this.addNamespaces(ns);
          var pack = utils.getPath(this.data, path) || {};
          if (deep) {
            utils.deepExtend(pack, resources, overwrite);
          } else {
            pack = _extends({}, pack, resources);
          }
          utils.setPath(this.data, path, pack);
          this.emit("added", lng, ns, resources);
        };
        ResourceStore2.prototype.removeResourceBundle = function removeResourceBundle(lng, ns) {
          if (this.hasResourceBundle(lng, ns)) {
            delete this.data[lng][ns];
          }
          this.removeNamespaces(ns);
          this.emit("removed", lng, ns);
        };
        ResourceStore2.prototype.hasResourceBundle = function hasResourceBundle(lng, ns) {
          return this.getResource(lng, ns) !== void 0;
        };
        ResourceStore2.prototype.getResourceBundle = function getResourceBundle(lng, ns) {
          if (!ns)
            ns = this.options.defaultNS;
          if (this.options.compatibilityAPI === "v1")
            return _extends({}, this.getResource(lng, ns));
          return this.getResource(lng, ns);
        };
        ResourceStore2.prototype.toJSON = function toJSON() {
          return this.data;
        };
        return ResourceStore2;
      }(_EventEmitter3.default);
      exports2.default = ResourceStore;
    }
  });

  // node_modules/i18next/dist/commonjs/postProcessor.js
  var require_postProcessor = __commonJS({
    "node_modules/i18next/dist/commonjs/postProcessor.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.default = {
        processors: {},
        addPostProcessor: function addPostProcessor(module3) {
          this.processors[module3.name] = module3;
        },
        handle: function handle(processors, value, key, options, translator) {
          var _this = this;
          processors.forEach(function(processor) {
            if (_this.processors[processor])
              value = _this.processors[processor].process(value, key, options, translator);
          });
          return value;
        }
      };
    }
  });

  // node_modules/i18next/dist/commonjs/compatibility/v1.js
  var require_v1 = __commonJS({
    "node_modules/i18next/dist/commonjs/compatibility/v1.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.convertAPIOptions = convertAPIOptions;
      exports2.convertJSONOptions = convertJSONOptions;
      exports2.convertTOptions = convertTOptions;
      exports2.appendBackwardsAPI = appendBackwardsAPI;
      var _logger = require_logger();
      var _logger2 = _interopRequireDefault(_logger);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function convertInterpolation(options) {
        options.interpolation = {
          unescapeSuffix: "HTML"
        };
        options.interpolation.prefix = options.interpolationPrefix || "__";
        options.interpolation.suffix = options.interpolationSuffix || "__";
        options.interpolation.escapeValue = options.escapeInterpolation || false;
        options.interpolation.nestingPrefix = options.reusePrefix || "$t(";
        options.interpolation.nestingSuffix = options.reuseSuffix || ")";
        return options;
      }
      function convertAPIOptions(options) {
        if (options.resStore)
          options.resources = options.resStore;
        if (options.ns && options.ns.defaultNs) {
          options.defaultNS = options.ns.defaultNs;
          options.ns = options.ns.namespaces;
        } else {
          options.defaultNS = options.ns || "translation";
        }
        if (options.fallbackToDefaultNS && options.defaultNS)
          options.fallbackNS = options.defaultNS;
        options.saveMissing = options.sendMissing;
        options.saveMissingTo = options.sendMissingTo || "current";
        options.returnNull = !options.fallbackOnNull;
        options.returnEmptyString = !options.fallbackOnEmpty;
        options.returnObjects = options.returnObjectTrees;
        options.joinArrays = "\n";
        options.returnedObjectHandler = options.objectTreeKeyHandler;
        options.parseMissingKeyHandler = options.parseMissingKey;
        options.appendNamespaceToMissingKey = true;
        options.nsSeparator = options.nsseparator || ":";
        options.keySeparator = options.keyseparator || ".";
        if (options.shortcutFunction === "sprintf") {
          options.overloadTranslationOptionHandler = function handle(args) {
            var values = [];
            for (var i = 1; i < args.length; i++) {
              values.push(args[i]);
            }
            return {
              postProcess: "sprintf",
              sprintf: values
            };
          };
        }
        options.whitelist = options.lngWhitelist;
        options.preload = options.preload;
        if (options.load === "current")
          options.load = "currentOnly";
        if (options.load === "unspecific")
          options.load = "languageOnly";
        options.backend = options.backend || {};
        options.backend.loadPath = options.resGetPath || "locales/__lng__/__ns__.json";
        options.backend.addPath = options.resPostPath || "locales/add/__lng__/__ns__";
        options.backend.allowMultiLoading = options.dynamicLoad;
        options.cache = options.cache || {};
        options.cache.prefix = "res_";
        options.cache.expirationTime = 7 * 24 * 60 * 60 * 1e3;
        options.cache.enabled = options.useLocalStorage;
        options = convertInterpolation(options);
        if (options.defaultVariables)
          options.interpolation.defaultVariables = options.defaultVariables;
        return options;
      }
      function convertJSONOptions(options) {
        options = convertInterpolation(options);
        options.joinArrays = "\n";
        return options;
      }
      function convertTOptions(options) {
        if (options.interpolationPrefix || options.interpolationSuffix || options.escapeInterpolation !== void 0) {
          options = convertInterpolation(options);
        }
        options.nsSeparator = options.nsseparator;
        options.keySeparator = options.keyseparator;
        options.returnObjects = options.returnObjectTrees;
        return options;
      }
      function appendBackwardsAPI(i18n) {
        i18n.lng = function() {
          _logger2.default.deprecate("i18next.lng() can be replaced by i18next.language for detected language or i18next.languages for languages ordered by translation lookup.");
          return i18n.services.languageUtils.toResolveHierarchy(i18n.language)[0];
        };
        i18n.preload = function(lngs, cb) {
          _logger2.default.deprecate("i18next.preload() can be replaced with i18next.loadLanguages()");
          i18n.loadLanguages(lngs, cb);
        };
        i18n.setLng = function(lng, options, callback) {
          _logger2.default.deprecate("i18next.setLng() can be replaced with i18next.changeLanguage() or i18next.getFixedT() to get a translation function with fixed language or namespace.");
          if (typeof options === "function") {
            callback = options;
            options = {};
          }
          if (!options)
            options = {};
          if (options.fixLng === true) {
            if (callback)
              return callback(null, i18n.getFixedT(lng));
          }
          return i18n.changeLanguage(lng, callback);
        };
        i18n.addPostProcessor = function(name, fc) {
          _logger2.default.deprecate("i18next.addPostProcessor() can be replaced by i18next.use({ type: 'postProcessor', name: 'name', process: fc })");
          i18n.use({
            type: "postProcessor",
            name,
            process: fc
          });
        };
      }
    }
  });

  // node_modules/i18next/dist/commonjs/Translator.js
  var require_Translator = __commonJS({
    "node_modules/i18next/dist/commonjs/Translator.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var _logger = require_logger();
      var _logger2 = _interopRequireDefault(_logger);
      var _EventEmitter2 = require_EventEmitter();
      var _EventEmitter3 = _interopRequireDefault(_EventEmitter2);
      var _postProcessor = require_postProcessor();
      var _postProcessor2 = _interopRequireDefault(_postProcessor);
      var _v = require_v1();
      var compat = _interopRequireWildcard(_v);
      var _utils = require_utils();
      var utils = _interopRequireWildcard(_utils);
      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj;
        } else {
          var newObj = {};
          if (obj != null) {
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key))
                newObj[key] = obj[key];
            }
          }
          newObj.default = obj;
          return newObj;
        }
      }
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = Object.getOwnPropertyDescriptor(defaults, key);
          if (value && value.configurable && obj[key] === void 0) {
            Object.defineProperty(obj, key, value);
          }
        }
        return obj;
      }
      function _classCallCheck(instance2, Constructor) {
        if (!(instance2 instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
      }
      var Translator = function(_EventEmitter) {
        _inherits(Translator2, _EventEmitter);
        function Translator2(services) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          _classCallCheck(this, Translator2);
          var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));
          utils.copy(["resourceStore", "languageUtils", "pluralResolver", "interpolator", "backendConnector"], services, _this);
          _this.options = options;
          _this.logger = _logger2.default.create("translator");
          return _this;
        }
        Translator2.prototype.changeLanguage = function changeLanguage(lng) {
          if (lng)
            this.language = lng;
        };
        Translator2.prototype.exists = function exists(key) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : { interpolation: {} };
          if (this.options.compatibilityAPI === "v1") {
            options = compat.convertTOptions(options);
          }
          return this.resolve(key, options) !== void 0;
        };
        Translator2.prototype.extractFromKey = function extractFromKey(key, options) {
          var nsSeparator = options.nsSeparator || this.options.nsSeparator;
          if (nsSeparator === void 0)
            nsSeparator = ":";
          var keySeparator = options.keySeparator || this.options.keySeparator || ".";
          var namespaces = options.ns || this.options.defaultNS;
          if (nsSeparator && key.indexOf(nsSeparator) > -1) {
            var parts = key.split(nsSeparator);
            if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1)
              namespaces = parts.shift();
            key = parts.join(keySeparator);
          }
          if (typeof namespaces === "string")
            namespaces = [namespaces];
          return {
            key,
            namespaces
          };
        };
        Translator2.prototype.translate = function translate(keys) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          if ((typeof options === "undefined" ? "undefined" : _typeof(options)) !== "object") {
            options = this.options.overloadTranslationOptionHandler(arguments);
          } else if (this.options.compatibilityAPI === "v1") {
            options = compat.convertTOptions(options);
          }
          if (keys === void 0 || keys === null || keys === "")
            return "";
          if (typeof keys === "number")
            keys = String(keys);
          if (typeof keys === "string")
            keys = [keys];
          var keySeparator = options.keySeparator || this.options.keySeparator || ".";
          var _extractFromKey = this.extractFromKey(keys[keys.length - 1], options), key = _extractFromKey.key, namespaces = _extractFromKey.namespaces;
          var namespace = namespaces[namespaces.length - 1];
          var lng = options.lng || this.language;
          var appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;
          if (lng && lng.toLowerCase() === "cimode") {
            if (appendNamespaceToCIMode) {
              var nsSeparator = options.nsSeparator || this.options.nsSeparator;
              return namespace + nsSeparator + key;
            }
            return key;
          }
          var res = this.resolve(keys, options);
          var resType = Object.prototype.toString.apply(res);
          var noObject = ["[object Number]", "[object Function]", "[object RegExp]"];
          var joinArrays = options.joinArrays !== void 0 ? options.joinArrays : this.options.joinArrays;
          if (res && typeof res !== "string" && noObject.indexOf(resType) < 0 && !(joinArrays && resType === "[object Array]")) {
            if (!options.returnObjects && !this.options.returnObjects) {
              this.logger.warn("accessing an object - but returnObjects options is not enabled!");
              return this.options.returnedObjectHandler ? this.options.returnedObjectHandler(key, res, options) : "key '" + key + " (" + this.language + ")' returned an object instead of string.";
            }
            if (options.keySeparator || this.options.keySeparator) {
              var copy = resType === "[object Array]" ? [] : {};
              for (var m in res) {
                if (Object.prototype.hasOwnProperty.call(res, m)) {
                  copy[m] = this.translate("" + key + keySeparator + m, _extends({}, options, { joinArrays: false, ns: namespaces }));
                }
              }
              res = copy;
            }
          } else if (joinArrays && resType === "[object Array]") {
            res = res.join(joinArrays);
            if (res)
              res = this.extendTranslation(res, key, options);
          } else {
            var usedDefault = false;
            var usedKey = false;
            if (!this.isValidLookup(res) && options.defaultValue !== void 0) {
              usedDefault = true;
              res = options.defaultValue;
            }
            if (!this.isValidLookup(res)) {
              usedKey = true;
              res = key;
            }
            if (usedKey || usedDefault) {
              this.logger.log("missingKey", lng, namespace, key, res);
              var lngs = [];
              var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);
              if (this.options.saveMissingTo === "fallback" && fallbackLngs && fallbackLngs[0]) {
                for (var i = 0; i < fallbackLngs.length; i++) {
                  lngs.push(fallbackLngs[i]);
                }
              } else if (this.options.saveMissingTo === "all") {
                lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
              } else {
                lngs.push(options.lng || this.language);
              }
              if (this.options.saveMissing) {
                if (this.options.missingKeyHandler) {
                  this.options.missingKeyHandler(lngs, namespace, key, res);
                } else if (this.backendConnector && this.backendConnector.saveMissing) {
                  this.backendConnector.saveMissing(lngs, namespace, key, res);
                }
              }
              this.emit("missingKey", lngs, namespace, key, res);
            }
            res = this.extendTranslation(res, key, options);
            if (usedKey && res === key && this.options.appendNamespaceToMissingKey)
              res = namespace + ":" + key;
            if (usedKey && this.options.parseMissingKeyHandler)
              res = this.options.parseMissingKeyHandler(res);
          }
          return res;
        };
        Translator2.prototype.extendTranslation = function extendTranslation(res, key, options) {
          var _this2 = this;
          if (options.interpolation)
            this.interpolator.init(_extends({}, options, { interpolation: _extends({}, this.options.interpolation, options.interpolation) }));
          var data = options.replace && typeof options.replace !== "string" ? options.replace : options;
          if (this.options.interpolation.defaultVariables)
            data = _extends({}, this.options.interpolation.defaultVariables, data);
          res = this.interpolator.interpolate(res, data, options.lng || this.language);
          if (options.nest !== false)
            res = this.interpolator.nest(res, function() {
              return _this2.translate.apply(_this2, arguments);
            }, options);
          if (options.interpolation)
            this.interpolator.reset();
          var postProcess = options.postProcess || this.options.postProcess;
          var postProcessorNames = typeof postProcess === "string" ? [postProcess] : postProcess;
          if (res !== void 0 && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
            res = _postProcessor2.default.handle(postProcessorNames, res, key, options, this);
          }
          return res;
        };
        Translator2.prototype.resolve = function resolve(keys) {
          var _this3 = this;
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          var found = void 0;
          if (typeof keys === "string")
            keys = [keys];
          keys.forEach(function(k) {
            if (_this3.isValidLookup(found))
              return;
            var extracted = _this3.extractFromKey(k, options);
            var key = extracted.key;
            var namespaces = extracted.namespaces;
            if (_this3.options.fallbackNS)
              namespaces = namespaces.concat(_this3.options.fallbackNS);
            var needsPluralHandling = options.count !== void 0 && typeof options.count !== "string";
            var needsContextHandling = options.context !== void 0 && typeof options.context === "string" && options.context !== "";
            var codes = options.lngs ? options.lngs : _this3.languageUtils.toResolveHierarchy(options.lng || _this3.language);
            namespaces.forEach(function(ns) {
              if (_this3.isValidLookup(found))
                return;
              codes.forEach(function(code) {
                if (_this3.isValidLookup(found))
                  return;
                var finalKey = key;
                var finalKeys = [finalKey];
                var pluralSuffix = void 0;
                if (needsPluralHandling)
                  pluralSuffix = _this3.pluralResolver.getSuffix(code, options.count);
                if (needsPluralHandling && needsContextHandling)
                  finalKeys.push(finalKey + pluralSuffix);
                if (needsContextHandling)
                  finalKeys.push(finalKey += "" + _this3.options.contextSeparator + options.context);
                if (needsPluralHandling)
                  finalKeys.push(finalKey += pluralSuffix);
                var possibleKey = void 0;
                while (possibleKey = finalKeys.pop()) {
                  if (!_this3.isValidLookup(found)) {
                    found = _this3.getResource(code, ns, possibleKey, options);
                  }
                }
              });
            });
          });
          return found;
        };
        Translator2.prototype.isValidLookup = function isValidLookup(res) {
          return res !== void 0 && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === "");
        };
        Translator2.prototype.getResource = function getResource(code, ns, key) {
          var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
          return this.resourceStore.getResource(code, ns, key, options);
        };
        return Translator2;
      }(_EventEmitter3.default);
      exports2.default = Translator;
    }
  });

  // node_modules/i18next/dist/commonjs/LanguageUtils.js
  var require_LanguageUtils = __commonJS({
    "node_modules/i18next/dist/commonjs/LanguageUtils.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _logger = require_logger();
      var _logger2 = _interopRequireDefault(_logger);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _classCallCheck(instance2, Constructor) {
        if (!(instance2 instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function capitalize(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
      }
      var LanguageUtil = function() {
        function LanguageUtil2(options) {
          _classCallCheck(this, LanguageUtil2);
          this.options = options;
          this.whitelist = this.options.whitelist || false;
          this.logger = _logger2.default.create("languageUtils");
        }
        LanguageUtil2.prototype.getScriptPartFromCode = function getScriptPartFromCode(code) {
          if (!code || code.indexOf("-") < 0)
            return null;
          var p = code.split("-");
          if (p.length === 2)
            return null;
          p.pop();
          return this.formatLanguageCode(p.join("-"));
        };
        LanguageUtil2.prototype.getLanguagePartFromCode = function getLanguagePartFromCode(code) {
          if (!code || code.indexOf("-") < 0)
            return code;
          var p = code.split("-");
          return this.formatLanguageCode(p[0]);
        };
        LanguageUtil2.prototype.formatLanguageCode = function formatLanguageCode(code) {
          if (typeof code === "string" && code.indexOf("-") > -1) {
            var specialCases = ["hans", "hant", "latn", "cyrl", "cans", "mong", "arab"];
            var p = code.split("-");
            if (this.options.lowerCaseLng) {
              p = p.map(function(part) {
                return part.toLowerCase();
              });
            } else if (p.length === 2) {
              p[0] = p[0].toLowerCase();
              p[1] = p[1].toUpperCase();
              if (specialCases.indexOf(p[1].toLowerCase()) > -1)
                p[1] = capitalize(p[1].toLowerCase());
            } else if (p.length === 3) {
              p[0] = p[0].toLowerCase();
              if (p[1].length === 2)
                p[1] = p[1].toUpperCase();
              if (p[0] !== "sgn" && p[2].length === 2)
                p[2] = p[2].toUpperCase();
              if (specialCases.indexOf(p[1].toLowerCase()) > -1)
                p[1] = capitalize(p[1].toLowerCase());
              if (specialCases.indexOf(p[2].toLowerCase()) > -1)
                p[2] = capitalize(p[2].toLowerCase());
            }
            return p.join("-");
          }
          return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
        };
        LanguageUtil2.prototype.isWhitelisted = function isWhitelisted(code) {
          if (this.options.load === "languageOnly" || this.options.nonExplicitWhitelist) {
            code = this.getLanguagePartFromCode(code);
          }
          return !this.whitelist || !this.whitelist.length || this.whitelist.indexOf(code) > -1;
        };
        LanguageUtil2.prototype.getFallbackCodes = function getFallbackCodes(fallbacks, code) {
          if (!fallbacks)
            return [];
          if (typeof fallbacks === "string")
            fallbacks = [fallbacks];
          if (Object.prototype.toString.apply(fallbacks) === "[object Array]")
            return fallbacks;
          if (!code)
            return fallbacks.default || [];
          var found = fallbacks[code];
          if (!found)
            found = fallbacks[this.getScriptPartFromCode(code)];
          if (!found)
            found = fallbacks[this.formatLanguageCode(code)];
          if (!found)
            found = fallbacks.default;
          return found || [];
        };
        LanguageUtil2.prototype.toResolveHierarchy = function toResolveHierarchy(code, fallbackCode) {
          var _this = this;
          var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
          var codes = [];
          var addCode = function addCode2(c) {
            if (!c)
              return;
            if (_this.isWhitelisted(c)) {
              codes.push(c);
            } else {
              _this.logger.warn("rejecting non-whitelisted language code: " + c);
            }
          };
          if (typeof code === "string" && code.indexOf("-") > -1) {
            if (this.options.load !== "languageOnly")
              addCode(this.formatLanguageCode(code));
            if (this.options.load !== "languageOnly" && this.options.load !== "currentOnly")
              addCode(this.getScriptPartFromCode(code));
            if (this.options.load !== "currentOnly")
              addCode(this.getLanguagePartFromCode(code));
          } else if (typeof code === "string") {
            addCode(this.formatLanguageCode(code));
          }
          fallbackCodes.forEach(function(fc) {
            if (codes.indexOf(fc) < 0)
              addCode(_this.formatLanguageCode(fc));
          });
          return codes;
        };
        return LanguageUtil2;
      }();
      exports2.default = LanguageUtil;
    }
  });

  // node_modules/i18next/dist/commonjs/PluralResolver.js
  var require_PluralResolver = __commonJS({
    "node_modules/i18next/dist/commonjs/PluralResolver.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _logger = require_logger();
      var _logger2 = _interopRequireDefault(_logger);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _classCallCheck(instance2, Constructor) {
        if (!(instance2 instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var sets = [{ lngs: ["ach", "ak", "am", "arn", "br", "fil", "gun", "ln", "mfe", "mg", "mi", "oc", "tg", "ti", "tr", "uz", "wa"], nr: [1, 2], fc: 1 }, { lngs: ["af", "an", "ast", "az", "bg", "bn", "ca", "da", "de", "dev", "el", "en", "eo", "es", "es_ar", "et", "eu", "fi", "fo", "fur", "fy", "gl", "gu", "ha", "he", "hi", "hu", "hy", "ia", "it", "kn", "ku", "lb", "mai", "ml", "mn", "mr", "nah", "nap", "nb", "ne", "nl", "nn", "no", "nso", "pa", "pap", "pms", "ps", "pt", "pt_br", "rm", "sco", "se", "si", "so", "son", "sq", "sv", "sw", "ta", "te", "tk", "ur", "yo"], nr: [1, 2], fc: 2 }, { lngs: ["ay", "bo", "cgg", "fa", "id", "ja", "jbo", "ka", "kk", "km", "ko", "ky", "lo", "ms", "sah", "su", "th", "tt", "ug", "vi", "wo", "zh"], nr: [1], fc: 3 }, { lngs: ["be", "bs", "dz", "hr", "ru", "sr", "uk"], nr: [1, 2, 5], fc: 4 }, { lngs: ["ar"], nr: [0, 1, 2, 3, 11, 100], fc: 5 }, { lngs: ["cs", "sk"], nr: [1, 2, 5], fc: 6 }, { lngs: ["csb", "pl"], nr: [1, 2, 5], fc: 7 }, { lngs: ["cy"], nr: [1, 2, 3, 8], fc: 8 }, { lngs: ["fr"], nr: [1, 2], fc: 9 }, { lngs: ["ga"], nr: [1, 2, 3, 7, 11], fc: 10 }, { lngs: ["gd"], nr: [1, 2, 3, 20], fc: 11 }, { lngs: ["is"], nr: [1, 2], fc: 12 }, { lngs: ["jv"], nr: [0, 1], fc: 13 }, { lngs: ["kw"], nr: [1, 2, 3, 4], fc: 14 }, { lngs: ["lt"], nr: [1, 2, 10], fc: 15 }, { lngs: ["lv"], nr: [1, 2, 0], fc: 16 }, { lngs: ["mk"], nr: [1, 2], fc: 17 }, { lngs: ["mnk"], nr: [0, 1, 2], fc: 18 }, { lngs: ["mt"], nr: [1, 2, 11, 20], fc: 19 }, { lngs: ["or"], nr: [2, 1], fc: 2 }, { lngs: ["ro"], nr: [1, 2, 20], fc: 20 }, { lngs: ["sl"], nr: [5, 1, 2, 3], fc: 21 }];
      var _rulesPluralsTypes = {
        1: function _(n) {
          return Number(n > 1);
        },
        2: function _(n) {
          return Number(n != 1);
        },
        3: function _(n) {
          return 0;
        },
        4: function _(n) {
          return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
        },
        5: function _(n) {
          return Number(n === 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
        },
        6: function _(n) {
          return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
        },
        7: function _(n) {
          return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
        },
        8: function _(n) {
          return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
        },
        9: function _(n) {
          return Number(n >= 2);
        },
        10: function _(n) {
          return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
        },
        11: function _(n) {
          return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
        },
        12: function _(n) {
          return Number(n % 10 != 1 || n % 100 == 11);
        },
        13: function _(n) {
          return Number(n !== 0);
        },
        14: function _(n) {
          return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
        },
        15: function _(n) {
          return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
        },
        16: function _(n) {
          return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
        },
        17: function _(n) {
          return Number(n == 1 || n % 10 == 1 ? 0 : 1);
        },
        18: function _(n) {
          return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
        },
        19: function _(n) {
          return Number(n == 1 ? 0 : n === 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
        },
        20: function _(n) {
          return Number(n == 1 ? 0 : n === 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
        },
        21: function _(n) {
          return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
        }
      };
      function createRules() {
        var rules = {};
        sets.forEach(function(set) {
          set.lngs.forEach(function(l) {
            rules[l] = {
              numbers: set.nr,
              plurals: _rulesPluralsTypes[set.fc]
            };
          });
        });
        return rules;
      }
      var PluralResolver = function() {
        function PluralResolver2(languageUtils) {
          var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
          _classCallCheck(this, PluralResolver2);
          this.languageUtils = languageUtils;
          this.options = options;
          this.logger = _logger2.default.create("pluralResolver");
          this.rules = createRules();
        }
        PluralResolver2.prototype.addRule = function addRule(lng, obj) {
          this.rules[lng] = obj;
        };
        PluralResolver2.prototype.getRule = function getRule(code) {
          return this.rules[this.languageUtils.getLanguagePartFromCode(code)];
        };
        PluralResolver2.prototype.needsPlural = function needsPlural(code) {
          var rule = this.getRule(code);
          return rule && rule.numbers.length > 1;
        };
        PluralResolver2.prototype.getSuffix = function getSuffix(code, count) {
          var _this = this;
          var rule = this.getRule(code);
          if (rule) {
            if (rule.numbers.length === 1)
              return "";
            var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
            var suffix = rule.numbers[idx];
            if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
              if (suffix === 2) {
                suffix = "plural";
              } else if (suffix === 1) {
                suffix = "";
              }
            }
            var returnSuffix = function returnSuffix2() {
              return _this.options.prepend && suffix.toString() ? _this.options.prepend + suffix.toString() : suffix.toString();
            };
            if (this.options.compatibilityJSON === "v1") {
              if (suffix === 1)
                return "";
              if (typeof suffix === "number")
                return "_plural_" + suffix.toString();
              return returnSuffix();
            } else if (this.options.compatibilityJSON === "v2" || rule.numbers.length === 2 && rule.numbers[0] === 1) {
              return returnSuffix();
            } else if (rule.numbers.length === 2 && rule.numbers[0] === 1) {
              return returnSuffix();
            }
            return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
          }
          this.logger.warn("no plural rule found for: " + code);
          return "";
        };
        return PluralResolver2;
      }();
      exports2.default = PluralResolver;
    }
  });

  // node_modules/i18next/dist/commonjs/Interpolator.js
  var require_Interpolator = __commonJS({
    "node_modules/i18next/dist/commonjs/Interpolator.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _utils = require_utils();
      var utils = _interopRequireWildcard(_utils);
      var _logger = require_logger();
      var _logger2 = _interopRequireDefault(_logger);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj;
        } else {
          var newObj = {};
          if (obj != null) {
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key))
                newObj[key] = obj[key];
            }
          }
          newObj.default = obj;
          return newObj;
        }
      }
      function _classCallCheck(instance2, Constructor) {
        if (!(instance2 instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var Interpolator = function() {
        function Interpolator2() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          _classCallCheck(this, Interpolator2);
          this.logger = _logger2.default.create("interpolator");
          this.init(options, true);
        }
        Interpolator2.prototype.init = function init() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var reset = arguments[1];
          if (reset) {
            this.options = options;
            this.format = options.interpolation && options.interpolation.format || function(value) {
              return value;
            };
            this.escape = options.interpolation && options.interpolation.escape || utils.escape;
          }
          if (!options.interpolation)
            options.interpolation = { escapeValue: true };
          var iOpts = options.interpolation;
          this.escapeValue = iOpts.escapeValue !== void 0 ? iOpts.escapeValue : true;
          this.prefix = iOpts.prefix ? utils.regexEscape(iOpts.prefix) : iOpts.prefixEscaped || "{{";
          this.suffix = iOpts.suffix ? utils.regexEscape(iOpts.suffix) : iOpts.suffixEscaped || "}}";
          this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ",";
          this.unescapePrefix = iOpts.unescapeSuffix ? "" : iOpts.unescapePrefix || "-";
          this.unescapeSuffix = this.unescapePrefix ? "" : iOpts.unescapeSuffix || "";
          this.nestingPrefix = iOpts.nestingPrefix ? utils.regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || utils.regexEscape("$t(");
          this.nestingSuffix = iOpts.nestingSuffix ? utils.regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || utils.regexEscape(")");
          this.resetRegExp();
        };
        Interpolator2.prototype.reset = function reset() {
          if (this.options)
            this.init(this.options);
        };
        Interpolator2.prototype.resetRegExp = function resetRegExp() {
          var regexpStr = this.prefix + "(.+?)" + this.suffix;
          this.regexp = new RegExp(regexpStr, "g");
          var regexpUnescapeStr = "" + this.prefix + this.unescapePrefix + "(.+?)" + this.unescapeSuffix + this.suffix;
          this.regexpUnescape = new RegExp(regexpUnescapeStr, "g");
          var nestingRegexpStr = this.nestingPrefix + "(.+?)" + this.nestingSuffix;
          this.nestingRegexp = new RegExp(nestingRegexpStr, "g");
        };
        Interpolator2.prototype.interpolate = function interpolate(str, data, lng) {
          var _this = this;
          var match = void 0;
          var value = void 0;
          function regexSafe(val) {
            return val.replace(/\$/g, "$$$$");
          }
          var handleFormat = function handleFormat2(key) {
            if (key.indexOf(_this.formatSeparator) < 0)
              return utils.getPath(data, key);
            var p = key.split(_this.formatSeparator);
            var k = p.shift().trim();
            var f = p.join(_this.formatSeparator).trim();
            return _this.format(utils.getPath(data, k), f, lng);
          };
          this.resetRegExp();
          while (match = this.regexpUnescape.exec(str)) {
            value = handleFormat(match[1].trim());
            str = str.replace(match[0], value);
            this.regexpUnescape.lastIndex = 0;
          }
          while (match = this.regexp.exec(str)) {
            value = handleFormat(match[1].trim());
            if (typeof value !== "string")
              value = utils.makeString(value);
            if (!value) {
              this.logger.warn("missed to pass in variable " + match[1] + " for interpolating " + str);
              value = "";
            }
            value = this.escapeValue ? regexSafe(this.escape(value)) : regexSafe(value);
            str = str.replace(match[0], value);
            this.regexp.lastIndex = 0;
          }
          return str;
        };
        Interpolator2.prototype.nest = function nest(str, fc) {
          var options = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
          var match = void 0;
          var value = void 0;
          var clonedOptions = _extends({}, options);
          clonedOptions.applyPostProcessor = false;
          function handleHasOptions(key) {
            if (key.indexOf(",") < 0)
              return key;
            var p = key.split(",");
            key = p.shift();
            var optionsString = p.join(",");
            optionsString = this.interpolate(optionsString, clonedOptions);
            optionsString = optionsString.replace(/'/g, '"');
            try {
              clonedOptions = JSON.parse(optionsString);
            } catch (e) {
              this.logger.error("failed parsing options string in nesting for key " + key, e);
            }
            return key;
          }
          while (match = this.nestingRegexp.exec(str)) {
            value = fc(handleHasOptions.call(this, match[1].trim()), clonedOptions);
            if (value && match[0] === str && typeof value !== "string")
              return value;
            if (typeof value !== "string")
              value = utils.makeString(value);
            if (!value) {
              this.logger.warn("missed to resolve " + match[1] + " for nesting " + str);
              value = "";
            }
            str = str.replace(match[0], value);
            this.regexp.lastIndex = 0;
          }
          return str;
        };
        return Interpolator2;
      }();
      exports2.default = Interpolator;
    }
  });

  // node_modules/i18next/dist/commonjs/BackendConnector.js
  var require_BackendConnector = __commonJS({
    "node_modules/i18next/dist/commonjs/BackendConnector.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _slicedToArray = function() {
        function sliceIterator(arr, i) {
          var _arr = [];
          var _n = true;
          var _d = false;
          var _e = void 0;
          try {
            for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
              _arr.push(_s.value);
              if (i && _arr.length === i)
                break;
            }
          } catch (err) {
            _d = true;
            _e = err;
          } finally {
            try {
              if (!_n && _i["return"])
                _i["return"]();
            } finally {
              if (_d)
                throw _e;
            }
          }
          return _arr;
        }
        return function(arr, i) {
          if (Array.isArray(arr)) {
            return arr;
          } else if (Symbol.iterator in Object(arr)) {
            return sliceIterator(arr, i);
          } else {
            throw new TypeError("Invalid attempt to destructure non-iterable instance");
          }
        };
      }();
      var _utils = require_utils();
      var utils = _interopRequireWildcard(_utils);
      var _logger = require_logger();
      var _logger2 = _interopRequireDefault(_logger);
      var _EventEmitter2 = require_EventEmitter();
      var _EventEmitter3 = _interopRequireDefault(_EventEmitter2);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj;
        } else {
          var newObj = {};
          if (obj != null) {
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key))
                newObj[key] = obj[key];
            }
          }
          newObj.default = obj;
          return newObj;
        }
      }
      function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = Object.getOwnPropertyDescriptor(defaults, key);
          if (value && value.configurable && obj[key] === void 0) {
            Object.defineProperty(obj, key, value);
          }
        }
        return obj;
      }
      function _classCallCheck(instance2, Constructor) {
        if (!(instance2 instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
      }
      function remove(arr, what) {
        var found = arr.indexOf(what);
        while (found !== -1) {
          arr.splice(found, 1);
          found = arr.indexOf(what);
        }
      }
      var Connector = function(_EventEmitter) {
        _inherits(Connector2, _EventEmitter);
        function Connector2(backend, store, services) {
          var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
          _classCallCheck(this, Connector2);
          var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));
          _this.backend = backend;
          _this.store = store;
          _this.services = services;
          _this.options = options;
          _this.logger = _logger2.default.create("backendConnector");
          _this.state = {};
          _this.queue = [];
          if (_this.backend && _this.backend.init) {
            _this.backend.init(services, options.backend, options);
          }
          return _this;
        }
        Connector2.prototype.queueLoad = function queueLoad(languages, namespaces, callback) {
          var _this2 = this;
          var toLoad = [];
          var pending = [];
          var toLoadLanguages = [];
          var toLoadNamespaces = [];
          languages.forEach(function(lng) {
            var hasAllNamespaces = true;
            namespaces.forEach(function(ns) {
              var name = lng + "|" + ns;
              if (_this2.store.hasResourceBundle(lng, ns)) {
                _this2.state[name] = 2;
              } else if (_this2.state[name] < 0) {
              } else if (_this2.state[name] === 1) {
                if (pending.indexOf(name) < 0)
                  pending.push(name);
              } else {
                _this2.state[name] = 1;
                hasAllNamespaces = false;
                if (pending.indexOf(name) < 0)
                  pending.push(name);
                if (toLoad.indexOf(name) < 0)
                  toLoad.push(name);
                if (toLoadNamespaces.indexOf(ns) < 0)
                  toLoadNamespaces.push(ns);
              }
            });
            if (!hasAllNamespaces)
              toLoadLanguages.push(lng);
          });
          if (toLoad.length || pending.length) {
            this.queue.push({
              pending,
              loaded: {},
              errors: [],
              callback
            });
          }
          return {
            toLoad,
            pending,
            toLoadLanguages,
            toLoadNamespaces
          };
        };
        Connector2.prototype.loaded = function loaded(name, err, data) {
          var _this3 = this;
          var _name$split = name.split("|"), _name$split2 = _slicedToArray(_name$split, 2), lng = _name$split2[0], ns = _name$split2[1];
          if (err)
            this.emit("failedLoading", lng, ns, err);
          if (data) {
            this.store.addResourceBundle(lng, ns, data);
          }
          this.state[name] = err ? -1 : 2;
          this.queue.forEach(function(q) {
            utils.pushPath(q.loaded, [lng], ns);
            remove(q.pending, name);
            if (err)
              q.errors.push(err);
            if (q.pending.length === 0 && !q.done) {
              _this3.emit("loaded", q.loaded);
              q.done = true;
              if (q.errors.length) {
                q.callback(q.errors);
              } else {
                q.callback();
              }
            }
          });
          this.queue = this.queue.filter(function(q) {
            return !q.done;
          });
        };
        Connector2.prototype.read = function read(lng, ns, fcName) {
          var tried = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
          var _this4 = this;
          var wait = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 250;
          var callback = arguments[5];
          if (!lng.length)
            return callback(null, {});
          return this.backend[fcName](lng, ns, function(err, data) {
            if (err && data && tried < 5) {
              setTimeout(function() {
                _this4.read.call(_this4, lng, ns, fcName, tried + 1, wait * 2, callback);
              }, wait);
              return;
            }
            callback(err, data);
          });
        };
        Connector2.prototype.load = function load(languages, namespaces, callback) {
          var _this5 = this;
          if (!this.backend) {
            this.logger.warn("No backend was added via i18next.use. Will not load resources.");
            return callback && callback();
          }
          var options = _extends({}, this.backend.options, this.options.backend);
          if (typeof languages === "string")
            languages = this.services.languageUtils.toResolveHierarchy(languages);
          if (typeof namespaces === "string")
            namespaces = [namespaces];
          var toLoad = this.queueLoad(languages, namespaces, callback);
          if (!toLoad.toLoad.length) {
            if (!toLoad.pending.length)
              callback();
            return null;
          }
          if (options.allowMultiLoading && this.backend.readMulti) {
            this.read(toLoad.toLoadLanguages, toLoad.toLoadNamespaces, "readMulti", null, null, function(err, data) {
              if (err)
                _this5.logger.warn("loading namespaces " + toLoad.toLoadNamespaces.join(", ") + " for languages " + toLoad.toLoadLanguages.join(", ") + " via multiloading failed", err);
              if (!err && data)
                _this5.logger.log("successfully loaded namespaces " + toLoad.toLoadNamespaces.join(", ") + " for languages " + toLoad.toLoadLanguages.join(", ") + " via multiloading", data);
              toLoad.toLoad.forEach(function(name) {
                var _name$split3 = name.split("|"), _name$split4 = _slicedToArray(_name$split3, 2), l = _name$split4[0], n = _name$split4[1];
                var bundle = utils.getPath(data, [l, n]);
                if (bundle) {
                  _this5.loaded(name, err, bundle);
                } else {
                  var error = "loading namespace " + n + " for language " + l + " via multiloading failed";
                  _this5.loaded(name, error);
                  _this5.logger.error(error);
                }
              });
            });
          } else {
            toLoad.toLoad.forEach(function(name) {
              _this5.loadOne(name);
            });
          }
        };
        Connector2.prototype.reload = function reload(languages, namespaces) {
          var _this6 = this;
          if (!this.backend) {
            this.logger.warn("No backend was added via i18next.use. Will not load resources.");
          }
          var options = _extends({}, this.backend.options, this.options.backend);
          if (typeof languages === "string")
            languages = this.services.languageUtils.toResolveHierarchy(languages);
          if (typeof namespaces === "string")
            namespaces = [namespaces];
          if (options.allowMultiLoading && this.backend.readMulti) {
            this.read(languages, namespaces, "readMulti", null, null, function(err, data) {
              if (err)
                _this6.logger.warn("reloading namespaces " + namespaces.join(", ") + " for languages " + languages.join(", ") + " via multiloading failed", err);
              if (!err && data)
                _this6.logger.log("successfully reloaded namespaces " + namespaces.join(", ") + " for languages " + languages.join(", ") + " via multiloading", data);
              languages.forEach(function(l) {
                namespaces.forEach(function(n) {
                  var bundle = utils.getPath(data, [l, n]);
                  if (bundle) {
                    _this6.loaded(l + "|" + n, err, bundle);
                  } else {
                    var error = "reloading namespace " + n + " for language " + l + " via multiloading failed";
                    _this6.loaded(l + "|" + n, error);
                    _this6.logger.error(error);
                  }
                });
              });
            });
          } else {
            languages.forEach(function(l) {
              namespaces.forEach(function(n) {
                _this6.loadOne(l + "|" + n, "re");
              });
            });
          }
        };
        Connector2.prototype.loadOne = function loadOne(name) {
          var _this7 = this;
          var prefix = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
          var _name$split5 = name.split("|"), _name$split6 = _slicedToArray(_name$split5, 2), lng = _name$split6[0], ns = _name$split6[1];
          this.read(lng, ns, "read", null, null, function(err, data) {
            if (err)
              _this7.logger.warn(prefix + "loading namespace " + ns + " for language " + lng + " failed", err);
            if (!err && data)
              _this7.logger.log(prefix + "loaded namespace " + ns + " for language " + lng, data);
            _this7.loaded(name, err, data);
          });
        };
        Connector2.prototype.saveMissing = function saveMissing(languages, namespace, key, fallbackValue) {
          if (this.backend && this.backend.create)
            this.backend.create(languages, namespace, key, fallbackValue);
          if (!languages || !languages[0])
            return;
          this.store.addResource(languages[0], namespace, key, fallbackValue);
        };
        return Connector2;
      }(_EventEmitter3.default);
      exports2.default = Connector;
    }
  });

  // node_modules/i18next/dist/commonjs/CacheConnector.js
  var require_CacheConnector = __commonJS({
    "node_modules/i18next/dist/commonjs/CacheConnector.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _logger = require_logger();
      var _logger2 = _interopRequireDefault(_logger);
      var _EventEmitter2 = require_EventEmitter();
      var _EventEmitter3 = _interopRequireDefault(_EventEmitter2);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = Object.getOwnPropertyDescriptor(defaults, key);
          if (value && value.configurable && obj[key] === void 0) {
            Object.defineProperty(obj, key, value);
          }
        }
        return obj;
      }
      function _classCallCheck(instance2, Constructor) {
        if (!(instance2 instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
      }
      var Connector = function(_EventEmitter) {
        _inherits(Connector2, _EventEmitter);
        function Connector2(cache, store, services) {
          var options = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : {};
          _classCallCheck(this, Connector2);
          var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));
          _this.cache = cache;
          _this.store = store;
          _this.services = services;
          _this.options = options;
          _this.logger = _logger2.default.create("cacheConnector");
          if (_this.cache && _this.cache.init)
            _this.cache.init(services, options.cache, options);
          return _this;
        }
        Connector2.prototype.load = function load(languages, namespaces, callback) {
          var _this2 = this;
          if (!this.cache)
            return callback && callback();
          var options = _extends({}, this.cache.options, this.options.cache);
          var loadLngs = typeof languages === "string" ? this.services.languageUtils.toResolveHierarchy(languages) : languages;
          if (options.enabled) {
            this.cache.load(loadLngs, function(err, data) {
              if (err)
                _this2.logger.error("loading languages " + loadLngs.join(", ") + " from cache failed", err);
              if (data) {
                for (var l in data) {
                  if (Object.prototype.hasOwnProperty.call(data, l)) {
                    for (var n in data[l]) {
                      if (Object.prototype.hasOwnProperty.call(data[l], n)) {
                        if (n !== "i18nStamp") {
                          var bundle = data[l][n];
                          if (bundle)
                            _this2.store.addResourceBundle(l, n, bundle);
                        }
                      }
                    }
                  }
                }
              }
              if (callback)
                callback();
            });
          } else if (callback) {
            callback();
          }
        };
        Connector2.prototype.save = function save() {
          if (this.cache && this.options.cache && this.options.cache.enabled)
            this.cache.save(this.store.data);
        };
        return Connector2;
      }(_EventEmitter3.default);
      exports2.default = Connector;
    }
  });

  // node_modules/i18next/dist/commonjs/defaults.js
  var require_defaults = __commonJS({
    "node_modules/i18next/dist/commonjs/defaults.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.transformOptions = transformOptions;
      function get() {
        return {
          debug: false,
          initImmediate: true,
          ns: ["translation"],
          defaultNS: ["translation"],
          fallbackLng: ["dev"],
          fallbackNS: false,
          whitelist: false,
          nonExplicitWhitelist: false,
          load: "all",
          preload: false,
          simplifyPluralSuffix: true,
          keySeparator: ".",
          nsSeparator: ":",
          pluralSeparator: "_",
          contextSeparator: "_",
          saveMissing: false,
          saveMissingTo: "fallback",
          missingKeyHandler: false,
          postProcess: false,
          returnNull: true,
          returnEmptyString: true,
          returnObjects: false,
          joinArrays: false,
          returnedObjectHandler: function returnedObjectHandler() {
          },
          parseMissingKeyHandler: false,
          appendNamespaceToMissingKey: false,
          appendNamespaceToCIMode: false,
          overloadTranslationOptionHandler: function handle(args) {
            return { defaultValue: args[1] };
          },
          interpolation: {
            escapeValue: true,
            format: function format(value, _format, lng) {
              return value;
            },
            prefix: "{{",
            suffix: "}}",
            formatSeparator: ",",
            unescapePrefix: "-",
            nestingPrefix: "$t(",
            nestingSuffix: ")",
            defaultVariables: void 0
          }
        };
      }
      exports2.get = get;
      function transformOptions(options) {
        if (typeof options.ns === "string")
          options.ns = [options.ns];
        if (typeof options.fallbackLng === "string")
          options.fallbackLng = [options.fallbackLng];
        if (typeof options.fallbackNS === "string")
          options.fallbackNS = [options.fallbackNS];
        if (options.whitelist && options.whitelist.indexOf("cimode") < 0)
          options.whitelist.push("cimode");
        return options;
      }
    }
  });

  // node_modules/i18next/dist/commonjs/i18next.js
  var require_i18next = __commonJS({
    "node_modules/i18next/dist/commonjs/i18next.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      var _logger = require_logger();
      var _logger2 = _interopRequireDefault(_logger);
      var _EventEmitter2 = require_EventEmitter();
      var _EventEmitter3 = _interopRequireDefault(_EventEmitter2);
      var _ResourceStore = require_ResourceStore();
      var _ResourceStore2 = _interopRequireDefault(_ResourceStore);
      var _Translator = require_Translator();
      var _Translator2 = _interopRequireDefault(_Translator);
      var _LanguageUtils = require_LanguageUtils();
      var _LanguageUtils2 = _interopRequireDefault(_LanguageUtils);
      var _PluralResolver = require_PluralResolver();
      var _PluralResolver2 = _interopRequireDefault(_PluralResolver);
      var _Interpolator = require_Interpolator();
      var _Interpolator2 = _interopRequireDefault(_Interpolator);
      var _BackendConnector = require_BackendConnector();
      var _BackendConnector2 = _interopRequireDefault(_BackendConnector);
      var _CacheConnector = require_CacheConnector();
      var _CacheConnector2 = _interopRequireDefault(_CacheConnector);
      var _defaults2 = require_defaults();
      var _postProcessor = require_postProcessor();
      var _postProcessor2 = _interopRequireDefault(_postProcessor);
      var _v = require_v1();
      var compat = _interopRequireWildcard(_v);
      function _interopRequireWildcard(obj) {
        if (obj && obj.__esModule) {
          return obj;
        } else {
          var newObj = {};
          if (obj != null) {
            for (var key in obj) {
              if (Object.prototype.hasOwnProperty.call(obj, key))
                newObj[key] = obj[key];
            }
          }
          newObj.default = obj;
          return newObj;
        }
      }
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _defaults(obj, defaults) {
        var keys = Object.getOwnPropertyNames(defaults);
        for (var i = 0; i < keys.length; i++) {
          var key = keys[i];
          var value = Object.getOwnPropertyDescriptor(defaults, key);
          if (value && value.configurable && obj[key] === void 0) {
            Object.defineProperty(obj, key, value);
          }
        }
        return obj;
      }
      function _classCallCheck(instance2, Constructor) {
        if (!(instance2 instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      function _possibleConstructorReturn(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : _defaults(subClass, superClass);
      }
      function noop() {
      }
      var I18n = function(_EventEmitter) {
        _inherits(I18n2, _EventEmitter);
        function I18n2() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var callback = arguments[1];
          _classCallCheck(this, I18n2);
          var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));
          _this.options = (0, _defaults2.transformOptions)(options);
          _this.services = {};
          _this.logger = _logger2.default;
          _this.modules = { external: [] };
          if (callback && !_this.isInitialized && !options.isClone) {
            var _ret;
            if (!_this.options.initImmediate)
              return _ret = _this.init(options, callback), _possibleConstructorReturn(_this, _ret);
            setTimeout(function() {
              _this.init(options, callback);
            }, 0);
          }
          return _this;
        }
        I18n2.prototype.init = function init(options, callback) {
          var _this2 = this;
          if (typeof options === "function") {
            callback = options;
            options = {};
          }
          if (!options)
            options = {};
          if (options.compatibilityAPI === "v1") {
            this.options = _extends({}, (0, _defaults2.get)(), (0, _defaults2.transformOptions)(compat.convertAPIOptions(options)), {});
          } else if (options.compatibilityJSON === "v1") {
            this.options = _extends({}, (0, _defaults2.get)(), (0, _defaults2.transformOptions)(compat.convertJSONOptions(options)), {});
          } else {
            this.options = _extends({}, (0, _defaults2.get)(), this.options, (0, _defaults2.transformOptions)(options));
          }
          this.format = this.options.interpolation.format;
          if (!callback)
            callback = noop;
          function createClassOnDemand(ClassOrObject) {
            if (!ClassOrObject)
              return null;
            if (typeof ClassOrObject === "function")
              return new ClassOrObject();
            return ClassOrObject;
          }
          if (!this.options.isClone) {
            if (this.modules.logger) {
              _logger2.default.init(createClassOnDemand(this.modules.logger), this.options);
            } else {
              _logger2.default.init(null, this.options);
            }
            var lu = new _LanguageUtils2.default(this.options);
            this.store = new _ResourceStore2.default(this.options.resources, this.options);
            var s = this.services;
            s.logger = _logger2.default;
            s.resourceStore = this.store;
            s.resourceStore.on("added removed", function(lng, ns) {
              s.cacheConnector.save();
            });
            s.languageUtils = lu;
            s.pluralResolver = new _PluralResolver2.default(lu, { prepend: this.options.pluralSeparator, compatibilityJSON: this.options.compatibilityJSON, simplifyPluralSuffix: this.options.simplifyPluralSuffix });
            s.interpolator = new _Interpolator2.default(this.options);
            s.backendConnector = new _BackendConnector2.default(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
            s.backendConnector.on("*", function(event) {
              for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              _this2.emit.apply(_this2, [event].concat(args));
            });
            s.backendConnector.on("loaded", function(loaded) {
              s.cacheConnector.save();
            });
            s.cacheConnector = new _CacheConnector2.default(createClassOnDemand(this.modules.cache), s.resourceStore, s, this.options);
            s.cacheConnector.on("*", function(event) {
              for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              _this2.emit.apply(_this2, [event].concat(args));
            });
            if (this.modules.languageDetector) {
              s.languageDetector = createClassOnDemand(this.modules.languageDetector);
              s.languageDetector.init(s, this.options.detection, this.options);
            }
            this.translator = new _Translator2.default(this.services, this.options);
            this.translator.on("*", function(event) {
              for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
                args[_key3 - 1] = arguments[_key3];
              }
              _this2.emit.apply(_this2, [event].concat(args));
            });
            this.modules.external.forEach(function(m) {
              if (m.init)
                m.init(_this2);
            });
          }
          var storeApi = ["getResource", "addResource", "addResources", "addResourceBundle", "removeResourceBundle", "hasResourceBundle", "getResourceBundle"];
          storeApi.forEach(function(fcName) {
            _this2[fcName] = function() {
              var _store;
              return (_store = _this2.store)[fcName].apply(_store, arguments);
            };
          });
          if (this.options.compatibilityAPI === "v1")
            compat.appendBackwardsAPI(this);
          var load = function load2() {
            _this2.changeLanguage(_this2.options.lng, function(err, t) {
              _this2.isInitialized = true;
              _this2.logger.log("initialized", _this2.options);
              _this2.emit("initialized", _this2.options);
              callback(err, t);
            });
          };
          if (this.options.resources || !this.options.initImmediate) {
            load();
          } else {
            setTimeout(load, 0);
          }
          return this;
        };
        I18n2.prototype.loadResources = function loadResources() {
          var _this3 = this;
          var callback = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : noop;
          if (!this.options.resources) {
            if (this.language && this.language.toLowerCase() === "cimode")
              return callback();
            var toLoad = [];
            var append = function append2(lng) {
              if (!lng)
                return;
              var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);
              lngs.forEach(function(l) {
                if (toLoad.indexOf(l) < 0)
                  toLoad.push(l);
              });
            };
            if (!this.language) {
              var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
              fallbacks.forEach(function(l) {
                return append(l);
              });
            } else {
              append(this.language);
            }
            if (this.options.preload) {
              this.options.preload.forEach(function(l) {
                return append(l);
              });
            }
            this.services.cacheConnector.load(toLoad, this.options.ns, function() {
              _this3.services.backendConnector.load(toLoad, _this3.options.ns, callback);
            });
          } else {
            callback(null);
          }
        };
        I18n2.prototype.reloadResources = function reloadResources(lngs, ns) {
          if (!lngs)
            lngs = this.languages;
          if (!ns)
            ns = this.options.ns;
          this.services.backendConnector.reload(lngs, ns);
        };
        I18n2.prototype.use = function use(module3) {
          if (module3.type === "backend") {
            this.modules.backend = module3;
          }
          if (module3.type === "cache") {
            this.modules.cache = module3;
          }
          if (module3.type === "logger" || module3.log && module3.warn && module3.error) {
            this.modules.logger = module3;
          }
          if (module3.type === "languageDetector") {
            this.modules.languageDetector = module3;
          }
          if (module3.type === "postProcessor") {
            _postProcessor2.default.addPostProcessor(module3);
          }
          if (module3.type === "3rdParty") {
            this.modules.external.push(module3);
          }
          return this;
        };
        I18n2.prototype.changeLanguage = function changeLanguage(lng, callback) {
          var _this4 = this;
          var done = function done2(err, l) {
            if (l) {
              _this4.emit("languageChanged", l);
              _this4.logger.log("languageChanged", l);
            }
            if (callback)
              callback(err, function() {
                return _this4.t.apply(_this4, arguments);
              });
          };
          var setLng = function setLng2(l) {
            if (l) {
              _this4.language = l;
              _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);
              _this4.translator.changeLanguage(l);
              if (_this4.services.languageDetector)
                _this4.services.languageDetector.cacheUserLanguage(l);
            }
            _this4.loadResources(function(err) {
              done(err, l);
            });
          };
          if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
            setLng(this.services.languageDetector.detect());
          } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
            this.services.languageDetector.detect(setLng);
          } else {
            setLng(lng);
          }
        };
        I18n2.prototype.getFixedT = function getFixedT(lng, ns) {
          var _this5 = this;
          var fixedT = function fixedT2(key) {
            var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
            var options = _extends({}, opts);
            options.lng = options.lng || fixedT2.lng;
            options.lngs = options.lngs || fixedT2.lngs;
            options.ns = options.ns || fixedT2.ns;
            return _this5.t(key, options);
          };
          if (typeof lng === "string") {
            fixedT.lng = lng;
          } else {
            fixedT.lngs = lng;
          }
          fixedT.ns = ns;
          return fixedT;
        };
        I18n2.prototype.t = function t() {
          var _translator;
          return this.translator && (_translator = this.translator).translate.apply(_translator, arguments);
        };
        I18n2.prototype.exists = function exists() {
          var _translator2;
          return this.translator && (_translator2 = this.translator).exists.apply(_translator2, arguments);
        };
        I18n2.prototype.setDefaultNamespace = function setDefaultNamespace(ns) {
          this.options.defaultNS = ns;
        };
        I18n2.prototype.loadNamespaces = function loadNamespaces(ns, callback) {
          var _this6 = this;
          if (!this.options.ns)
            return callback && callback();
          if (typeof ns === "string")
            ns = [ns];
          ns.forEach(function(n) {
            if (_this6.options.ns.indexOf(n) < 0)
              _this6.options.ns.push(n);
          });
          this.loadResources(callback);
        };
        I18n2.prototype.loadLanguages = function loadLanguages(lngs, callback) {
          if (typeof lngs === "string")
            lngs = [lngs];
          var preloaded = this.options.preload || [];
          var newLngs = lngs.filter(function(lng) {
            return preloaded.indexOf(lng) < 0;
          });
          if (!newLngs.length)
            return callback();
          this.options.preload = preloaded.concat(newLngs);
          this.loadResources(callback);
        };
        I18n2.prototype.dir = function dir(lng) {
          if (!lng)
            lng = this.languages && this.languages.length > 0 ? this.languages[0] : this.language;
          if (!lng)
            return "rtl";
          var rtlLngs = ["ar", "shu", "sqr", "ssh", "xaa", "yhd", "yud", "aao", "abh", "abv", "acm", "acq", "acw", "acx", "acy", "adf", "ads", "aeb", "aec", "afb", "ajp", "apc", "apd", "arb", "arq", "ars", "ary", "arz", "auz", "avl", "ayh", "ayl", "ayn", "ayp", "bbz", "pga", "he", "iw", "ps", "pbt", "pbu", "pst", "prp", "prd", "ur", "ydd", "yds", "yih", "ji", "yi", "hbo", "men", "xmn", "fa", "jpr", "peo", "pes", "prs", "dv", "sam"];
          return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) >= 0 ? "rtl" : "ltr";
        };
        I18n2.prototype.createInstance = function createInstance() {
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var callback = arguments[1];
          return new I18n2(options, callback);
        };
        I18n2.prototype.cloneInstance = function cloneInstance() {
          var _this7 = this;
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var callback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : noop;
          var mergedOptions = _extends({}, this.options, options, { isClone: true });
          var clone = new I18n2(mergedOptions, callback);
          var membersToCopy = ["store", "services", "language"];
          membersToCopy.forEach(function(m) {
            clone[m] = _this7[m];
          });
          clone.translator = new _Translator2.default(clone.services, clone.options);
          clone.translator.on("*", function(event) {
            for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
              args[_key4 - 1] = arguments[_key4];
            }
            clone.emit.apply(clone, [event].concat(args));
          });
          clone.init(mergedOptions, callback);
          return clone;
        };
        return I18n2;
      }(_EventEmitter3.default);
      exports2.default = new I18n();
    }
  });

  // node_modules/i18next/dist/commonjs/index.js
  var require_commonjs = __commonJS({
    "node_modules/i18next/dist/commonjs/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.use = exports2.t = exports2.setDefaultNamespace = exports2.on = exports2.off = exports2.loadResources = exports2.loadNamespaces = exports2.loadLanguages = exports2.init = exports2.getFixedT = exports2.exists = exports2.dir = exports2.createInstance = exports2.cloneInstance = exports2.changeLanguage = void 0;
      var _i18next = require_i18next();
      var _i18next2 = _interopRequireDefault(_i18next);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      exports2.default = _i18next2.default;
      var changeLanguage = exports2.changeLanguage = _i18next2.default.changeLanguage.bind(_i18next2.default);
      var cloneInstance = exports2.cloneInstance = _i18next2.default.cloneInstance.bind(_i18next2.default);
      var createInstance = exports2.createInstance = _i18next2.default.createInstance.bind(_i18next2.default);
      var dir = exports2.dir = _i18next2.default.dir.bind(_i18next2.default);
      var exists = exports2.exists = _i18next2.default.exists.bind(_i18next2.default);
      var getFixedT = exports2.getFixedT = _i18next2.default.getFixedT.bind(_i18next2.default);
      var init = exports2.init = _i18next2.default.init.bind(_i18next2.default);
      var loadLanguages = exports2.loadLanguages = _i18next2.default.loadLanguages.bind(_i18next2.default);
      var loadNamespaces = exports2.loadNamespaces = _i18next2.default.loadNamespaces.bind(_i18next2.default);
      var loadResources = exports2.loadResources = _i18next2.default.loadResources.bind(_i18next2.default);
      var off = exports2.off = _i18next2.default.off.bind(_i18next2.default);
      var on = exports2.on = _i18next2.default.on.bind(_i18next2.default);
      var setDefaultNamespace = exports2.setDefaultNamespace = _i18next2.default.setDefaultNamespace.bind(_i18next2.default);
      var t = exports2.t = _i18next2.default.t.bind(_i18next2.default);
      var use = exports2.use = _i18next2.default.use.bind(_i18next2.default);
    }
  });

  // node_modules/i18next/index.js
  var require_i18next2 = __commonJS({
    "node_modules/i18next/index.js"(exports2, module2) {
      module2.exports = require_commonjs().default;
    }
  });

  // node_modules/@babel/runtime/helpers/interopRequireDefault.js
  var require_interopRequireDefault = __commonJS({
    "node_modules/@babel/runtime/helpers/interopRequireDefault.js"(exports2, module2) {
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          "default": obj
        };
      }
      module2.exports = _interopRequireDefault, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/@babel/runtime/helpers/typeof.js
  var require_typeof = __commonJS({
    "node_modules/@babel/runtime/helpers/typeof.js"(exports2, module2) {
      function _typeof(obj) {
        "@babel/helpers - typeof";
        return module2.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
          return typeof obj2;
        } : function(obj2) {
          return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
        }, module2.exports.__esModule = true, module2.exports["default"] = module2.exports, _typeof(obj);
      }
      module2.exports = _typeof, module2.exports.__esModule = true, module2.exports["default"] = module2.exports;
    }
  });

  // node_modules/@avast/i18next-sprintf-postprocessor2/dist/commonjs/sprintf.js
  var require_sprintf = __commonJS({
    "node_modules/@avast/i18next-sprintf-postprocessor2/dist/commonjs/sprintf.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.sprintf = sprintf;
      exports2.vsprintf = vsprintf;
      var _typeof2 = _interopRequireDefault(require_typeof());
      var re = {
        not_string: /[^s]/,
        not_bool: /[^t]/,
        not_type: /[^T]/,
        not_primitive: /[^v]/,
        number: /[diefg]/,
        numeric_arg: /[bcdiefguxX]/,
        json: /[j]/,
        not_json: /[^j]/,
        text: /^[^\x25]+/,
        modulo: /^\x25{2}/,
        placeholder: /^\x25(?:([1-9]\d*)\$|\(([^)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-gijostTuvxX])/,
        key: /^([a-z_][a-z_\d]*)/i,
        key_access: /^\.([a-z_][a-z_\d]*)/i,
        index_access: /^\[(\d+)\]/,
        sign: /^[+-]/
      };
      function sprintf(key) {
        var cache = sprintf.cache;
        if (!(cache[key] && cache.hasOwnProperty(key))) {
          cache[key] = sprintf.parse(key);
        }
        return sprintf.format(sprintf.parse(key), arguments);
      }
      sprintf.format = function(parse_tree, argv) {
        var cursor = 1, tree_length = parse_tree.length, arg, output = "", i, k, ph, pad, pad_character, pad_length, is_positive, sign;
        for (i = 0; i < tree_length; i++) {
          if (typeof parse_tree[i] === "string") {
            output += parse_tree[i];
          } else if ((0, _typeof2["default"])(parse_tree[i]) === "object") {
            ph = parse_tree[i];
            if (ph.keys) {
              arg = argv[cursor];
              for (k = 0; k < ph.keys.length; k++) {
                if (arg == void 0) {
                  throw new Error(sprintf('[sprintf] Cannot access property "%s" of undefined value "%s"', ph.keys[k], ph.keys[k - 1]));
                }
                arg = arg[ph.keys[k]];
              }
            } else if (ph.param_no) {
              arg = argv[ph.param_no];
            } else {
              arg = argv[cursor++];
            }
            if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {
              arg = arg();
            }
            if (re.numeric_arg.test(ph.type) && typeof arg !== "number" && isNaN(arg)) {
              throw new TypeError(sprintf("[sprintf] expecting number but found %T", arg));
            }
            if (re.number.test(ph.type)) {
              is_positive = arg >= 0;
            }
            switch (ph.type) {
              case "b":
                arg = parseInt(arg, 10).toString(2);
                break;
              case "c":
                arg = String.fromCharCode(parseInt(arg, 10));
                break;
              case "d":
              case "i":
                arg = parseInt(arg, 10);
                break;
              case "j":
                arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0);
                break;
              case "e":
                arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential();
                break;
              case "f":
                arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg);
                break;
              case "g":
                arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg);
                break;
              case "o":
                arg = (parseInt(arg, 10) >>> 0).toString(8);
                break;
              case "s":
                arg = String(arg);
                arg = ph.precision ? arg.substring(0, ph.precision) : arg;
                break;
              case "t":
                arg = String(!!arg);
                arg = ph.precision ? arg.substring(0, ph.precision) : arg;
                break;
              case "T":
                arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase();
                arg = ph.precision ? arg.substring(0, ph.precision) : arg;
                break;
              case "u":
                arg = parseInt(arg, 10) >>> 0;
                break;
              case "v":
                arg = arg.valueOf();
                arg = ph.precision ? arg.substring(0, ph.precision) : arg;
                break;
              case "x":
                arg = (parseInt(arg, 10) >>> 0).toString(16);
                break;
              case "X":
                arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase();
                break;
            }
            if (re.json.test(ph.type)) {
              output += arg;
            } else {
              if (re.number.test(ph.type) && (!is_positive || ph.sign)) {
                sign = is_positive ? "+" : "-";
                arg = arg.toString().replace(re.sign, "");
              } else {
                sign = "";
              }
              pad_character = ph.pad_char ? ph.pad_char === "0" ? "0" : ph.pad_char.charAt(1) : " ";
              pad_length = ph.width - (sign + arg).length;
              pad = ph.width ? pad_length > 0 ? pad_character.repeat(pad_length) : "" : "";
              output += ph.align ? sign + arg + pad : pad_character === "0" ? sign + pad + arg : pad + sign + arg;
            }
          }
        }
        return output;
      };
      sprintf.cache = {};
      sprintf.parse = function(fmt) {
        if (sprintf.cache[fmt]) {
          return sprintf.cache[fmt];
        }
        var _fmt = fmt, match, parse_tree = [], arg_names = 0;
        while (_fmt) {
          if ((match = re.text.exec(_fmt)) !== null) {
            parse_tree.push(match[0]);
          } else if ((match = re.modulo.exec(_fmt)) !== null) {
            parse_tree.push("%");
          } else if ((match = re.placeholder.exec(_fmt)) !== null) {
            if (match[2]) {
              arg_names |= 1;
              var field_list = [], replacement_field = match[2], field_match = [];
              if ((field_match = re.key.exec(replacement_field)) !== null) {
                field_list.push(field_match[1]);
                while ((replacement_field = replacement_field.substring(field_match[0].length)) !== "") {
                  if ((field_match = re.key_access.exec(replacement_field)) !== null) {
                    field_list.push(field_match[1]);
                  } else if ((field_match = re.index_access.exec(replacement_field)) !== null) {
                    field_list.push(field_match[1]);
                  } else {
                    throw new SyntaxError("[sprintf] failed to parse named argument key");
                  }
                }
              } else {
                throw new SyntaxError("[sprintf] failed to parse named argument key");
              }
              match[2] = field_list;
            } else {
              arg_names |= 2;
            }
            if (arg_names === 3) {
              throw new Error("[sprintf] mixing positional and named placeholders is not (yet) supported");
            }
            parse_tree.push({
              placeholder: match[0],
              param_no: match[1],
              keys: match[2],
              sign: match[3],
              pad_char: match[4],
              align: match[5],
              width: match[6],
              precision: match[7],
              type: match[8]
            });
          } else {
            throw new SyntaxError("[sprintf] unexpected placeholder");
          }
          _fmt = _fmt.substring(match[0].length);
        }
        return sprintf.cache[fmt] = parse_tree;
      };
      function vsprintf(fmt, argv) {
        return sprintf.apply(null, [fmt].concat(argv || []));
      }
    }
  });

  // node_modules/@avast/i18next-sprintf-postprocessor2/dist/commonjs/index.js
  var require_commonjs2 = __commonJS({
    "node_modules/@avast/i18next-sprintf-postprocessor2/dist/commonjs/index.js"(exports2) {
      "use strict";
      var _interopRequireDefault = require_interopRequireDefault();
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2["default"] = void 0;
      var _typeof2 = _interopRequireDefault(require_typeof());
      var _sprintf = require_sprintf();
      var _default = {
        name: "sprintf",
        type: "postProcessor",
        process: function process2(value, key, options) {
          if (!options.sprintf)
            return value;
          if (Object.prototype.toString.apply(options.sprintf) === "[object Array]") {
            return (0, _sprintf.vsprintf)(value, options.sprintf);
          } else if ((0, _typeof2["default"])(options.sprintf) === "object") {
            return (0, _sprintf.sprintf)(value, options.sprintf);
          }
          return value;
        },
        overloadTranslationOptionHandler: function overloadTranslationOptionHandler(args) {
          var values = [];
          for (var i = 1; i < args.length; i++) {
            values.push(args[i]);
          }
          return {
            postProcess: "sprintf",
            sprintf: values
          };
        }
      };
      exports2["default"] = _default;
    }
  });

  // node_modules/@avast/i18next-sprintf-postprocessor2/index.js
  var require_i18next_sprintf_postprocessor2 = __commonJS({
    "node_modules/@avast/i18next-sprintf-postprocessor2/index.js"(exports2, module2) {
      module2.exports = require_commonjs2().default;
    }
  });

  // node_modules/window-or-global/lib/index.js
  var require_lib = __commonJS({
    "node_modules/window-or-global/lib/index.js"(exports2, module2) {
      "use strict";
      module2.exports = typeof self === "object" && self.self === self && self || typeof global === "object" && global.global === global && global || exports2;
    }
  });

  // node_modules/@avast/nitro-ui-lib-translate/libs/rtl.json
  var require_rtl = __commonJS({
    "node_modules/@avast/nitro-ui-lib-translate/libs/rtl.json"(exports2, module2) {
      module2.exports = [
        "ar",
        "arc",
        "dv",
        "fa",
        "ha",
        "he",
        "khw",
        "ks",
        "ku",
        "ps",
        "ur",
        "yi"
      ];
    }
  });

  // node_modules/@avast/nitro-ui-lib-translate/libs/index.js
  var require_libs = __commonJS({
    "node_modules/@avast/nitro-ui-lib-translate/libs/index.js"(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.ellipsis = exports2.escapeHtml = exports2.nlsc = exports2.nls = void 0;
      var _createClass = function() {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var _extend = require_extend();
      var _extend2 = _interopRequireDefault(_extend);
      var _moment = require_moment();
      var _moment2 = _interopRequireDefault(_moment);
      var _jed = require_jed();
      var _jed2 = _interopRequireDefault(_jed);
      var _i18next = require_i18next2();
      var _i18next2 = _interopRequireDefault(_i18next);
      var _i18nextSprintfPostprocessor = require_i18next_sprintf_postprocessor2();
      var _i18nextSprintfPostprocessor2 = _interopRequireDefault(_i18nextSprintfPostprocessor);
      var _windowOrGlobal = require_lib();
      var _windowOrGlobal2 = _interopRequireDefault(_windowOrGlobal);
      var _rtl = require_rtl();
      var _rtl2 = _interopRequireDefault(_rtl);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : { default: obj };
      }
      function _classCallCheck(instance2, Constructor) {
        if (!(instance2 instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var window2 = _windowOrGlobal2.default;
      var localStorage2 = _windowOrGlobal2.default.localStorage || {};
      var MSG_CONTEXT_DELIMITER = "";
      var LOG_PREFIX = "Localization: ";
      var allJedData = {};
      var lngResources = {};
      var allRawData = {};
      var msgMap = {};
      var lngCode = null;
      var countryCode = null;
      var jed = void 0;
      function _escapeHtml(unsafe) {
        return unsafe.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
      }
      function _ellipsis(txt, max) {
        if (typeof txt === "string" && typeof max === "number" && max > 3 && txt.length >= max) {
          return txt.substr(0, max - 3) + "...";
        }
        return txt;
      }
      function translate(msgId, count) {
        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
          args[_key - 2] = arguments[_key];
        }
        if (!msgMap[msgId] && !lngResources.resources) {
          console.log(LOG_PREFIX + "missing string, msgId: " + msgId);
          return '<span class="__nls__ __nls__MISSINGSTRING">\u2690&nbsp;' + msgId + "</span>";
        }
        if (lngResources.resources) {
          args = args.map(function(s) {
            return _escapeHtml(s + "");
          });
          var params = { postProcess: "sprintf", sprintf: args };
          var trns_lng = _i18next2.default.t(msgId, params);
          var trns_plural_lng = void 0;
          if (typeof count === "number") {
            params.count = count;
            trns_plural_lng = _i18next2.default.t(msgId, params);
          } else if (count !== null && (typeof count === "undefined" ? "undefined" : _typeof(count)) === "object" && count.length === void 0) {
            if (params.sprintf.length > 1) {
              params.sprintf.shift();
              Object.assign(params, count);
            } else {
              params = count;
            }
            trns_plural_lng = _i18next2.default.t(msgId, params);
          }
          return nl2br(trns_plural_lng || trns_lng);
        }
        var msgStr = msgMap[msgId];
        var trns = jed.translate(msgStr);
        trns = trns.withContext(msgId);
        if (typeof count === "number") {
          trns = trns.ifPlural(count);
        }
        args = args.map(function(s) {
          return _escapeHtml(s + "");
        });
        return nl2br(trns.fetch.apply(trns, args));
      }
      function translation(msgId, trns) {
        return trns;
      }
      function localized(msgId, trns) {
        return trns;
      }
      function adjustTranslation(msgId, trns, opt) {
        if (window2.__TRANSLATE) {
          trns = translation(msgId, trns);
        } else if (window2.__LOCALIZED) {
          trns = localized(msgId, trns);
        }
        if (opt && opt.ellipsis) {
          trns = _ellipsis(trns, opt.ellipsis);
        }
        return trns;
      }
      function nl2br(str) {
        if (!str) {
          return str;
        }
        return str.replace(/(?:\r|\n)/g, "<br />");
      }
      var Localization2 = function() {
        function Localization3() {
          _classCallCheck(this, Localization3);
          this.moment = _moment2.default;
        }
        _createClass(Localization3, [{
          key: "direction",
          value: function direction() {
            if (lngResources.resources) {
              return _i18next2.default.dir(lngCode);
            }
            return _rtl2.default.indexOf(lngCode) > -1 ? "rtl" : "ltr";
          }
        }, {
          key: "register",
          value: function register(data, force) {
            if (data.resources) {
              (0, _extend2.default)(true, allRawData, data);
              return this.register_lng(data, force);
            } else {
              for (var lng in data) {
                if (lng.indexOf("_") > -1 && data[lng].locale_data) {
                  for (var key in data[lng].locale_data.messages) {
                    if (data[lng].locale_data.messages[key][0] == "") {
                      delete data[lng].locale_data.messages[key];
                    }
                  }
                }
                data[lng.toLowerCase()] = data[lng];
              }
              (0, _extend2.default)(true, allRawData, data);
              allJedData = data;
            }
          }
        }, {
          key: "register_lng",
          value: function register_lng(data, force) {
            (0, _extend2.default)(true, allRawData, data);
            lngResources = data;
          }
        }, {
          key: "nls",
          value: function nls2(msgId) {
            for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
              args[_key2 - 1] = arguments[_key2];
            }
            var count = args && args[0];
            try {
              return adjustTranslation(msgId, translate.apply(null, [msgId, count].concat(args)), count);
            } catch (err) {
              console.log("Translation failed for '" + msgId + "', with error " + err);
              throw err;
            }
          }
        }, {
          key: "nlsc",
          value: function nlsc2(msgId, count) {
            try {
              for (var _len3 = arguments.length, args = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
                args[_key3 - 2] = arguments[_key3];
              }
              return adjustTranslation(msgId, translate.apply(null, [msgId, count].concat(args)), count);
            } catch (err) {
              console.log("Translation failed for '" + msgId + "', with error " + err);
              throw err;
            }
          }
        }, {
          key: "nlsRaw",
          value: function nlsRaw(msgId) {
            var locale = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : countryCode;
            locale = locale.toLowerCase();
            var id = msgId + MSG_CONTEXT_DELIMITER + msgMap[msgId];
            var masterLocale = locale.split("_")[0];
            if (allRawData.resources) {
              if (isLocaleNotEmpty(locale, msgId))
                return [allRawData.resources[locale].translation[msgId]];
              if (isLocaleNotEmpty(masterLocale, msgId))
                return [allRawData.resources[masterLocale].translation[msgId]];
            } else {
              if (isLocaleNotEmpty(locale, id))
                return allRawData[locale].locale_data.messages[id];
              if (isLocaleNotEmpty(masterLocale, id))
                return allRawData[masterLocale].locale_data.messages[id];
            }
            return null;
            function isLocaleNotEmpty(l, id2) {
              if (allRawData.resources) {
                return allRawData.resources && allRawData.resources[l] && allRawData.resources[l].translation && allRawData.resources[l].translation[id2] && allRawData.resources[l].translation[id2] !== "";
              } else if (allRawData[l] && allRawData[l].locale_data.messages[id2]) {
                return allRawData[l].locale_data.messages[id2].some(function(str) {
                  return str != null && str !== "";
                });
              } else {
                return false;
              }
            }
          }
        }, {
          key: "escapeHtml",
          value: function escapeHtml2(param) {
            return _escapeHtml(param + "");
          }
        }, {
          key: "ellipsis",
          value: function ellipsis2() {
            return _ellipsis.apply(null, arguments);
          }
        }, {
          key: "TRANSLATE",
          get: function get() {
            return window2.debuggerTRANSLATE;
          },
          set: function set(l) {
            window2.debuggerTRANSLATE = l;
          }
        }, {
          key: "locale",
          get: function get() {
            return lngCode;
          },
          set: function set(language) {
            var l = language.replace("-", "_");
            var id = l.split("_")[0];
            var region = l.split("_")[1], loc = id + (region ? "_" + region.toUpperCase() : ""), lngData = void 0, jedMsgKeys = void 0, msgIdAndStr = void 0, defaultLngData = void 0;
            if (countryCode == l && lngCode == id || id == null)
              return;
            _moment2.default.locale(language);
            countryCode = l;
            lngCode = id;
            var getSupportedLang = function getSupportedLang2(lang) {
              var origLang = lang;
              if (lngResources.resources[lang]) {
                return lang;
              }
              if (/-/.test(lang)) {
                lang = lang.replace("-", "_");
              } else if (/_/.test(lang)) {
                lang = lang.replace("_", "-");
              }
              if (lngResources.resources[lang]) {
                return lang;
              }
              var lngParts = lang.split(/[-_]/);
              lang = [lngParts[0], lngParts[1].toUpperCase()].join("_");
              if (lngResources.resources[lang]) {
                return lang;
              }
              lang = lang.replace("_", "-");
              if (lngResources.resources[lang]) {
                return lang;
              }
              lang = lngParts[0];
              if (lngResources.resources[lang]) {
                return lang;
              }
              return origLang;
            };
            if (lngResources.resources) {
              language = getSupportedLang(language);
              _i18next2.default.use(_i18nextSprintfPostprocessor2.default).init({
                resources: lngResources.resources,
                lng: language,
                keySeparator: false,
                fallbackLng: "en"
              });
            }
            defaultLngData = {
              domain: "messages",
              locale_data: {
                messages: {
                  "": {
                    domain: "messages",
                    plural_forms: void 0,
                    lang: lngCode
                  }
                }
              }
            };
            allJedData[loc] = (0, _extend2.default)(true, {}, defaultLngData, allJedData.en, allJedData[lngCode], allJedData[lngCode + "_" + lngCode.toUpperCase()], allJedData[loc]);
            lngData = allJedData[loc];
            if (allJedData.en && allJedData.en.locale_data && allJedData.en.locale_data.messages) {
              jedMsgKeys = Object.keys(allJedData.en.locale_data.messages);
              jedMsgKeys.forEach(function(jedMsgKey) {
                if (!jedMsgKey) {
                  return;
                }
                msgIdAndStr = jedMsgKey.split(MSG_CONTEXT_DELIMITER);
                msgMap[msgIdAndStr[0]] = msgIdAndStr[1];
              });
            }
            jed = new _jed2.default({
              domain: lngData.domain,
              missing_key_callback: function missing_key_callback(msgId) {
                console.log(LOG_PREFIX + "missing message ID " + msgId);
              },
              locale_data: lngData.locale_data
            });
          }
        }]);
        return Localization3;
      }();
      var localization = window2._NITRO_LOCALIZATION = !window2._NITRO_LOCALIZATION ? new Localization2() : window2._NITRO_LOCALIZATION;
      exports2.default = localization;
      var nls = exports2.nls = localization.nls;
      var nlsc = exports2.nlsc = localization.nlsc;
      var escapeHtml = exports2.escapeHtml = localization.escapeHtml;
      var ellipsis = exports2.ellipsis = localization.ellipsis;
    }
  });

  // node_modules/events/events.js
  var require_events = __commonJS({
    "node_modules/events/events.js"(exports2, module2) {
      "use strict";
      var R = typeof Reflect === "object" ? Reflect : null;
      var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
        return Function.prototype.apply.call(target, receiver, args);
      };
      var ReflectOwnKeys;
      if (R && typeof R.ownKeys === "function") {
        ReflectOwnKeys = R.ownKeys;
      } else if (Object.getOwnPropertySymbols) {
        ReflectOwnKeys = function ReflectOwnKeys2(target) {
          return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
        };
      } else {
        ReflectOwnKeys = function ReflectOwnKeys2(target) {
          return Object.getOwnPropertyNames(target);
        };
      }
      function ProcessEmitWarning(warning) {
        if (console && console.warn)
          console.warn(warning);
      }
      var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
        return value !== value;
      };
      function EventEmitter2() {
        EventEmitter2.init.call(this);
      }
      module2.exports = EventEmitter2;
      module2.exports.once = once;
      EventEmitter2.EventEmitter = EventEmitter2;
      EventEmitter2.prototype._events = void 0;
      EventEmitter2.prototype._eventsCount = 0;
      EventEmitter2.prototype._maxListeners = void 0;
      var defaultMaxListeners = 10;
      function checkListener(listener) {
        if (typeof listener !== "function") {
          throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
        }
      }
      Object.defineProperty(EventEmitter2, "defaultMaxListeners", {
        enumerable: true,
        get: function() {
          return defaultMaxListeners;
        },
        set: function(arg) {
          if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
            throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
          }
          defaultMaxListeners = arg;
        }
      });
      EventEmitter2.init = function() {
        if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        }
        this._maxListeners = this._maxListeners || void 0;
      };
      EventEmitter2.prototype.setMaxListeners = function setMaxListeners(n) {
        if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
          throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
        }
        this._maxListeners = n;
        return this;
      };
      function _getMaxListeners(that) {
        if (that._maxListeners === void 0)
          return EventEmitter2.defaultMaxListeners;
        return that._maxListeners;
      }
      EventEmitter2.prototype.getMaxListeners = function getMaxListeners() {
        return _getMaxListeners(this);
      };
      EventEmitter2.prototype.emit = function emit(type) {
        var args = [];
        for (var i = 1; i < arguments.length; i++)
          args.push(arguments[i]);
        var doError = type === "error";
        var events = this._events;
        if (events !== void 0)
          doError = doError && events.error === void 0;
        else if (!doError)
          return false;
        if (doError) {
          var er;
          if (args.length > 0)
            er = args[0];
          if (er instanceof Error) {
            throw er;
          }
          var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
          err.context = er;
          throw err;
        }
        var handler = events[type];
        if (handler === void 0)
          return false;
        if (typeof handler === "function") {
          ReflectApply(handler, this, args);
        } else {
          var len = handler.length;
          var listeners = arrayClone(handler, len);
          for (var i = 0; i < len; ++i)
            ReflectApply(listeners[i], this, args);
        }
        return true;
      };
      function _addListener(target, type, listener, prepend) {
        var m;
        var events;
        var existing;
        checkListener(listener);
        events = target._events;
        if (events === void 0) {
          events = target._events = /* @__PURE__ */ Object.create(null);
          target._eventsCount = 0;
        } else {
          if (events.newListener !== void 0) {
            target.emit(
              "newListener",
              type,
              listener.listener ? listener.listener : listener
            );
            events = target._events;
          }
          existing = events[type];
        }
        if (existing === void 0) {
          existing = events[type] = listener;
          ++target._eventsCount;
        } else {
          if (typeof existing === "function") {
            existing = events[type] = prepend ? [listener, existing] : [existing, listener];
          } else if (prepend) {
            existing.unshift(listener);
          } else {
            existing.push(listener);
          }
          m = _getMaxListeners(target);
          if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
          }
        }
        return target;
      }
      EventEmitter2.prototype.addListener = function addListener(type, listener) {
        return _addListener(this, type, listener, false);
      };
      EventEmitter2.prototype.on = EventEmitter2.prototype.addListener;
      EventEmitter2.prototype.prependListener = function prependListener(type, listener) {
        return _addListener(this, type, listener, true);
      };
      function onceWrapper() {
        if (!this.fired) {
          this.target.removeListener(this.type, this.wrapFn);
          this.fired = true;
          if (arguments.length === 0)
            return this.listener.call(this.target);
          return this.listener.apply(this.target, arguments);
        }
      }
      function _onceWrap(target, type, listener) {
        var state = { fired: false, wrapFn: void 0, target, type, listener };
        var wrapped = onceWrapper.bind(state);
        wrapped.listener = listener;
        state.wrapFn = wrapped;
        return wrapped;
      }
      EventEmitter2.prototype.once = function once2(type, listener) {
        checkListener(listener);
        this.on(type, _onceWrap(this, type, listener));
        return this;
      };
      EventEmitter2.prototype.prependOnceListener = function prependOnceListener(type, listener) {
        checkListener(listener);
        this.prependListener(type, _onceWrap(this, type, listener));
        return this;
      };
      EventEmitter2.prototype.removeListener = function removeListener(type, listener) {
        var list, events, position, i, originalListener;
        checkListener(listener);
        events = this._events;
        if (events === void 0)
          return this;
        list = events[type];
        if (list === void 0)
          return this;
        if (list === listener || list.listener === listener) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else {
            delete events[type];
            if (events.removeListener)
              this.emit("removeListener", type, list.listener || listener);
          }
        } else if (typeof list !== "function") {
          position = -1;
          for (i = list.length - 1; i >= 0; i--) {
            if (list[i] === listener || list[i].listener === listener) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }
          if (position < 0)
            return this;
          if (position === 0)
            list.shift();
          else {
            spliceOne(list, position);
          }
          if (list.length === 1)
            events[type] = list[0];
          if (events.removeListener !== void 0)
            this.emit("removeListener", type, originalListener || listener);
        }
        return this;
      };
      EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
      EventEmitter2.prototype.removeAllListeners = function removeAllListeners(type) {
        var listeners, events, i;
        events = this._events;
        if (events === void 0)
          return this;
        if (events.removeListener === void 0) {
          if (arguments.length === 0) {
            this._events = /* @__PURE__ */ Object.create(null);
            this._eventsCount = 0;
          } else if (events[type] !== void 0) {
            if (--this._eventsCount === 0)
              this._events = /* @__PURE__ */ Object.create(null);
            else
              delete events[type];
          }
          return this;
        }
        if (arguments.length === 0) {
          var keys = Object.keys(events);
          var key;
          for (i = 0; i < keys.length; ++i) {
            key = keys[i];
            if (key === "removeListener")
              continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners("removeListener");
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
          return this;
        }
        listeners = events[type];
        if (typeof listeners === "function") {
          this.removeListener(type, listeners);
        } else if (listeners !== void 0) {
          for (i = listeners.length - 1; i >= 0; i--) {
            this.removeListener(type, listeners[i]);
          }
        }
        return this;
      };
      function _listeners(target, type, unwrap) {
        var events = target._events;
        if (events === void 0)
          return [];
        var evlistener = events[type];
        if (evlistener === void 0)
          return [];
        if (typeof evlistener === "function")
          return unwrap ? [evlistener.listener || evlistener] : [evlistener];
        return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
      }
      EventEmitter2.prototype.listeners = function listeners(type) {
        return _listeners(this, type, true);
      };
      EventEmitter2.prototype.rawListeners = function rawListeners(type) {
        return _listeners(this, type, false);
      };
      EventEmitter2.listenerCount = function(emitter, type) {
        if (typeof emitter.listenerCount === "function") {
          return emitter.listenerCount(type);
        } else {
          return listenerCount.call(emitter, type);
        }
      };
      EventEmitter2.prototype.listenerCount = listenerCount;
      function listenerCount(type) {
        var events = this._events;
        if (events !== void 0) {
          var evlistener = events[type];
          if (typeof evlistener === "function") {
            return 1;
          } else if (evlistener !== void 0) {
            return evlistener.length;
          }
        }
        return 0;
      }
      EventEmitter2.prototype.eventNames = function eventNames() {
        return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
      };
      function arrayClone(arr, n) {
        var copy = new Array(n);
        for (var i = 0; i < n; ++i)
          copy[i] = arr[i];
        return copy;
      }
      function spliceOne(list, index) {
        for (; index + 1 < list.length; index++)
          list[index] = list[index + 1];
        list.pop();
      }
      function unwrapListeners(arr) {
        var ret = new Array(arr.length);
        for (var i = 0; i < ret.length; ++i) {
          ret[i] = arr[i].listener || arr[i];
        }
        return ret;
      }
      function once(emitter, name) {
        return new Promise(function(resolve, reject) {
          function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
          }
          function resolver() {
            if (typeof emitter.removeListener === "function") {
              emitter.removeListener("error", errorListener);
            }
            resolve([].slice.call(arguments));
          }
          ;
          eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
          if (name !== "error") {
            addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
          }
        });
      }
      function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
        if (typeof emitter.on === "function") {
          eventTargetAgnosticAddListener(emitter, "error", handler, flags);
        }
      }
      function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
        if (typeof emitter.on === "function") {
          if (flags.once) {
            emitter.once(name, listener);
          } else {
            emitter.on(name, listener);
          }
        } else if (typeof emitter.addEventListener === "function") {
          emitter.addEventListener(name, function wrapListener(arg) {
            if (flags.once) {
              emitter.removeEventListener(name, wrapListener);
            }
            listener(arg);
          });
        } else {
          throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
        }
      }
    }
  });

  // node_modules/ua-parser-js/src/ua-parser.js
  var require_ua_parser = __commonJS({
    "node_modules/ua-parser-js/src/ua-parser.js"(exports2, module2) {
      (function(window2, undefined2) {
        "use strict";
        var LIBVERSION = "0.7.34", EMPTY = "", UNKNOWN = "?", FUNC_TYPE = "function", UNDEF_TYPE = "undefined", OBJ_TYPE = "object", STR_TYPE = "string", MAJOR = "major", MODEL = "model", NAME = "name", TYPE = "type", VENDOR = "vendor", VERSION = "version", ARCHITECTURE = "architecture", CONSOLE = "console", MOBILE = "mobile", TABLET = "tablet", SMARTTV = "smarttv", WEARABLE = "wearable", EMBEDDED = "embedded", UA_MAX_LENGTH = 350;
        var AMAZON = "Amazon", APPLE = "Apple", ASUS = "ASUS", BLACKBERRY = "BlackBerry", BROWSER = "Browser", CHROME = "Chrome", EDGE = "Edge", FIREFOX = "Firefox", GOOGLE = "Google", HUAWEI = "Huawei", LG = "LG", MICROSOFT = "Microsoft", MOTOROLA = "Motorola", OPERA = "Opera", SAMSUNG = "Samsung", SHARP = "Sharp", SONY = "Sony", VIERA = "Viera", XIAOMI = "Xiaomi", ZEBRA = "Zebra", FACEBOOK = "Facebook", CHROMIUM_OS = "Chromium OS", MAC_OS = "Mac OS";
        var extend = function(regexes2, extensions) {
          var mergedRegexes = {};
          for (var i in regexes2) {
            if (extensions[i] && extensions[i].length % 2 === 0) {
              mergedRegexes[i] = extensions[i].concat(regexes2[i]);
            } else {
              mergedRegexes[i] = regexes2[i];
            }
          }
          return mergedRegexes;
        }, enumerize = function(arr) {
          var enums = {};
          for (var i = 0; i < arr.length; i++) {
            enums[arr[i].toUpperCase()] = arr[i];
          }
          return enums;
        }, has = function(str1, str2) {
          return typeof str1 === STR_TYPE ? lowerize(str2).indexOf(lowerize(str1)) !== -1 : false;
        }, lowerize = function(str) {
          return str.toLowerCase();
        }, majorize = function(version) {
          return typeof version === STR_TYPE ? version.replace(/[^\d\.]/g, EMPTY).split(".")[0] : undefined2;
        }, trim = function(str, len) {
          if (typeof str === STR_TYPE) {
            str = str.replace(/^\s\s*/, EMPTY);
            return typeof len === UNDEF_TYPE ? str : str.substring(0, UA_MAX_LENGTH);
          }
        };
        var rgxMapper = function(ua, arrays) {
          var i = 0, j, k, p, q, matches, match;
          while (i < arrays.length && !matches) {
            var regex = arrays[i], props = arrays[i + 1];
            j = k = 0;
            while (j < regex.length && !matches) {
              if (!regex[j]) {
                break;
              }
              matches = regex[j++].exec(ua);
              if (!!matches) {
                for (p = 0; p < props.length; p++) {
                  match = matches[++k];
                  q = props[p];
                  if (typeof q === OBJ_TYPE && q.length > 0) {
                    if (q.length === 2) {
                      if (typeof q[1] == FUNC_TYPE) {
                        this[q[0]] = q[1].call(this, match);
                      } else {
                        this[q[0]] = q[1];
                      }
                    } else if (q.length === 3) {
                      if (typeof q[1] === FUNC_TYPE && !(q[1].exec && q[1].test)) {
                        this[q[0]] = match ? q[1].call(this, match, q[2]) : undefined2;
                      } else {
                        this[q[0]] = match ? match.replace(q[1], q[2]) : undefined2;
                      }
                    } else if (q.length === 4) {
                      this[q[0]] = match ? q[3].call(this, match.replace(q[1], q[2])) : undefined2;
                    }
                  } else {
                    this[q] = match ? match : undefined2;
                  }
                }
              }
            }
            i += 2;
          }
        }, strMapper = function(str, map) {
          for (var i in map) {
            if (typeof map[i] === OBJ_TYPE && map[i].length > 0) {
              for (var j = 0; j < map[i].length; j++) {
                if (has(map[i][j], str)) {
                  return i === UNKNOWN ? undefined2 : i;
                }
              }
            } else if (has(map[i], str)) {
              return i === UNKNOWN ? undefined2 : i;
            }
          }
          return str;
        };
        var oldSafariMap = {
          "1.0": "/8",
          "1.2": "/1",
          "1.3": "/3",
          "2.0": "/412",
          "2.0.2": "/416",
          "2.0.3": "/417",
          "2.0.4": "/419",
          "?": "/"
        }, windowsVersionMap = {
          "ME": "4.90",
          "NT 3.11": "NT3.51",
          "NT 4.0": "NT4.0",
          "2000": "NT 5.0",
          "XP": ["NT 5.1", "NT 5.2"],
          "Vista": "NT 6.0",
          "7": "NT 6.1",
          "8": "NT 6.2",
          "8.1": "NT 6.3",
          "10": ["NT 6.4", "NT 10.0"],
          "RT": "ARM"
        };
        var regexes = {
          browser: [
            [
              /\b(?:crmo|crios)\/([\w\.]+)/i
            ],
            [VERSION, [NAME, "Chrome"]],
            [
              /edg(?:e|ios|a)?\/([\w\.]+)/i
            ],
            [VERSION, [NAME, "Edge"]],
            [
              /(opera mini)\/([-\w\.]+)/i,
              /(opera [mobiletab]{3,6})\b.+version\/([-\w\.]+)/i,
              /(opera)(?:.+version\/|[\/ ]+)([\w\.]+)/i
            ],
            [NAME, VERSION],
            [
              /opios[\/ ]+([\w\.]+)/i
            ],
            [VERSION, [NAME, OPERA + " Mini"]],
            [
              /\bopr\/([\w\.]+)/i
            ],
            [VERSION, [NAME, OPERA]],
            [
              /(kindle)\/([\w\.]+)/i,
              /(lunascape|maxthon|netfront|jasmine|blazer)[\/ ]?([\w\.]*)/i,
              /(avant |iemobile|slim)(?:browser)?[\/ ]?([\w\.]*)/i,
              /(ba?idubrowser)[\/ ]?([\w\.]+)/i,
              /(?:ms|\()(ie) ([\w\.]+)/i,
              /(flock|rockmelt|midori|epiphany|silk|skyfire|ovibrowser|bolt|iron|vivaldi|iridium|phantomjs|bowser|quark|qupzilla|falkon|rekonq|puffin|brave|whale(?!.+naver)|qqbrowserlite|qq|duckduckgo)\/([-\w\.]+)/i,
              /(weibo)__([\d\.]+)/i
            ],
            [NAME, VERSION],
            [
              /(?:\buc? ?browser|(?:juc.+)ucweb)[\/ ]?([\w\.]+)/i
            ],
            [VERSION, [NAME, "UC" + BROWSER]],
            [
              /microm.+\bqbcore\/([\w\.]+)/i,
              /\bqbcore\/([\w\.]+).+microm/i
            ],
            [VERSION, [NAME, "WeChat(Win) Desktop"]],
            [
              /micromessenger\/([\w\.]+)/i
            ],
            [VERSION, [NAME, "WeChat"]],
            [
              /konqueror\/([\w\.]+)/i
            ],
            [VERSION, [NAME, "Konqueror"]],
            [
              /trident.+rv[: ]([\w\.]{1,9})\b.+like gecko/i
            ],
            [VERSION, [NAME, "IE"]],
            [
              /yabrowser\/([\w\.]+)/i
            ],
            [VERSION, [NAME, "Yandex"]],
            [
              /(avast|avg)\/([\w\.]+)/i
            ],
            [[NAME, /(.+)/, "$1 Secure " + BROWSER], VERSION],
            [
              /\bfocus\/([\w\.]+)/i
            ],
            [VERSION, [NAME, FIREFOX + " Focus"]],
            [
              /\bopt\/([\w\.]+)/i
            ],
            [VERSION, [NAME, OPERA + " Touch"]],
            [
              /coc_coc\w+\/([\w\.]+)/i
            ],
            [VERSION, [NAME, "Coc Coc"]],
            [
              /dolfin\/([\w\.]+)/i
            ],
            [VERSION, [NAME, "Dolphin"]],
            [
              /coast\/([\w\.]+)/i
            ],
            [VERSION, [NAME, OPERA + " Coast"]],
            [
              /miuibrowser\/([\w\.]+)/i
            ],
            [VERSION, [NAME, "MIUI " + BROWSER]],
            [
              /fxios\/([-\w\.]+)/i
            ],
            [VERSION, [NAME, FIREFOX]],
            [
              /\bqihu|(qi?ho?o?|360)browser/i
            ],
            [[NAME, "360 " + BROWSER]],
            [
              /(oculus|samsung|sailfish|huawei)browser\/([\w\.]+)/i
            ],
            [[NAME, /(.+)/, "$1 " + BROWSER], VERSION],
            [
              /(comodo_dragon)\/([\w\.]+)/i
            ],
            [[NAME, /_/g, " "], VERSION],
            [
              /(electron)\/([\w\.]+) safari/i,
              /(tesla)(?: qtcarbrowser|\/(20\d\d\.[-\w\.]+))/i,
              /m?(qqbrowser|baiduboxapp|2345Explorer)[\/ ]?([\w\.]+)/i
            ],
            [NAME, VERSION],
            [
              /(metasr)[\/ ]?([\w\.]+)/i,
              /(lbbrowser)/i,
              /\[(linkedin)app\]/i
            ],
            [NAME],
            [
              /((?:fban\/fbios|fb_iab\/fb4a)(?!.+fbav)|;fbav\/([\w\.]+);)/i
            ],
            [[NAME, FACEBOOK], VERSION],
            [
              /(kakao(?:talk|story))[\/ ]([\w\.]+)/i,
              /(naver)\(.*?(\d+\.[\w\.]+).*\)/i,
              /safari (line)\/([\w\.]+)/i,
              /\b(line)\/([\w\.]+)\/iab/i,
              /(chromium|instagram)[\/ ]([-\w\.]+)/i
            ],
            [NAME, VERSION],
            [
              /\bgsa\/([\w\.]+) .*safari\//i
            ],
            [VERSION, [NAME, "GSA"]],
            [
              /headlesschrome(?:\/([\w\.]+)| )/i
            ],
            [VERSION, [NAME, CHROME + " Headless"]],
            [
              / wv\).+(chrome)\/([\w\.]+)/i
            ],
            [[NAME, CHROME + " WebView"], VERSION],
            [
              /droid.+ version\/([\w\.]+)\b.+(?:mobile safari|safari)/i
            ],
            [VERSION, [NAME, "Android " + BROWSER]],
            [
              /(chrome|omniweb|arora|[tizenoka]{5} ?browser)\/v?([\w\.]+)/i
            ],
            [NAME, VERSION],
            [
              /version\/([\w\.\,]+) .*mobile\/\w+ (safari)/i
            ],
            [VERSION, [NAME, "Mobile Safari"]],
            [
              /version\/([\w(\.|\,)]+) .*(mobile ?safari|safari)/i
            ],
            [VERSION, NAME],
            [
              /webkit.+?(mobile ?safari|safari)(\/[\w\.]+)/i
            ],
            [NAME, [VERSION, strMapper, oldSafariMap]],
            [
              /(webkit|khtml)\/([\w\.]+)/i
            ],
            [NAME, VERSION],
            [
              /(navigator|netscape\d?)\/([-\w\.]+)/i
            ],
            [[NAME, "Netscape"], VERSION],
            [
              /mobile vr; rv:([\w\.]+)\).+firefox/i
            ],
            [VERSION, [NAME, FIREFOX + " Reality"]],
            [
              /ekiohf.+(flow)\/([\w\.]+)/i,
              /(swiftfox)/i,
              /(icedragon|iceweasel|camino|chimera|fennec|maemo browser|minimo|conkeror|klar)[\/ ]?([\w\.\+]+)/i,
              /(seamonkey|k-meleon|icecat|iceape|firebird|phoenix|palemoon|basilisk|waterfox)\/([-\w\.]+)$/i,
              /(firefox)\/([\w\.]+)/i,
              /(mozilla)\/([\w\.]+) .+rv\:.+gecko\/\d+/i,
              /(polaris|lynx|dillo|icab|doris|amaya|w3m|netsurf|sleipnir|obigo|mosaic|(?:go|ice|up)[\. ]?browser)[-\/ ]?v?([\w\.]+)/i,
              /(links) \(([\w\.]+)/i,
              /panasonic;(viera)/i
            ],
            [NAME, VERSION],
            [
              /(cobalt)\/([\w\.]+)/i
            ],
            [NAME, [VERSION, /master.|lts./, ""]]
          ],
          cpu: [
            [
              /(?:(amd|x(?:(?:86|64)[-_])?|wow|win)64)[;\)]/i
            ],
            [[ARCHITECTURE, "amd64"]],
            [
              /(ia32(?=;))/i
            ],
            [[ARCHITECTURE, lowerize]],
            [
              /((?:i[346]|x)86)[;\)]/i
            ],
            [[ARCHITECTURE, "ia32"]],
            [
              /\b(aarch64|arm(v?8e?l?|_?64))\b/i
            ],
            [[ARCHITECTURE, "arm64"]],
            [
              /\b(arm(?:v[67])?ht?n?[fl]p?)\b/i
            ],
            [[ARCHITECTURE, "armhf"]],
            [
              /windows (ce|mobile); ppc;/i
            ],
            [[ARCHITECTURE, "arm"]],
            [
              /((?:ppc|powerpc)(?:64)?)(?: mac|;|\))/i
            ],
            [[ARCHITECTURE, /ower/, EMPTY, lowerize]],
            [
              /(sun4\w)[;\)]/i
            ],
            [[ARCHITECTURE, "sparc"]],
            [
              /((?:avr32|ia64(?=;))|68k(?=\))|\barm(?=v(?:[1-7]|[5-7]1)l?|;|eabi)|(?=atmel )avr|(?:irix|mips|sparc)(?:64)?\b|pa-risc)/i
            ],
            [[ARCHITECTURE, lowerize]]
          ],
          device: [
            [
              /\b(sch-i[89]0\d|shw-m380s|sm-[ptx]\w{2,4}|gt-[pn]\d{2,4}|sgh-t8[56]9|nexus 10)/i
            ],
            [MODEL, [VENDOR, SAMSUNG], [TYPE, TABLET]],
            [
              /\b((?:s[cgp]h|gt|sm)-\w+|sc[g-]?[\d]+a?|galaxy nexus)/i,
              /samsung[- ]([-\w]+)/i,
              /sec-(sgh\w+)/i
            ],
            [MODEL, [VENDOR, SAMSUNG], [TYPE, MOBILE]],
            [
              /\((ip(?:hone|od)[\w ]*);/i
            ],
            [MODEL, [VENDOR, APPLE], [TYPE, MOBILE]],
            [
              /\((ipad);[-\w\),; ]+apple/i,
              /applecoremedia\/[\w\.]+ \((ipad)/i,
              /\b(ipad)\d\d?,\d\d?[;\]].+ios/i
            ],
            [MODEL, [VENDOR, APPLE], [TYPE, TABLET]],
            [
              /(macintosh);/i
            ],
            [MODEL, [VENDOR, APPLE]],
            [
              /\b(sh-?[altvz]?\d\d[a-ekm]?)/i
            ],
            [MODEL, [VENDOR, SHARP], [TYPE, MOBILE]],
            [
              /\b((?:ag[rs][23]?|bah2?|sht?|btv)-a?[lw]\d{2})\b(?!.+d\/s)/i
            ],
            [MODEL, [VENDOR, HUAWEI], [TYPE, TABLET]],
            [
              /(?:huawei|honor)([-\w ]+)[;\)]/i,
              /\b(nexus 6p|\w{2,4}e?-[atu]?[ln][\dx][012359c][adn]?)\b(?!.+d\/s)/i
            ],
            [MODEL, [VENDOR, HUAWEI], [TYPE, MOBILE]],
            [
              /\b(poco[\w ]+)(?: bui|\))/i,
              /\b; (\w+) build\/hm\1/i,
              /\b(hm[-_ ]?note?[_ ]?(?:\d\w)?) bui/i,
              /\b(redmi[\-_ ]?(?:note|k)?[\w_ ]+)(?: bui|\))/i,
              /\b(mi[-_ ]?(?:a\d|one|one[_ ]plus|note lte|max|cc)?[_ ]?(?:\d?\w?)[_ ]?(?:plus|se|lite)?)(?: bui|\))/i
            ],
            [[MODEL, /_/g, " "], [VENDOR, XIAOMI], [TYPE, MOBILE]],
            [
              /\b(mi[-_ ]?(?:pad)(?:[\w_ ]+))(?: bui|\))/i
            ],
            [[MODEL, /_/g, " "], [VENDOR, XIAOMI], [TYPE, TABLET]],
            [
              /; (\w+) bui.+ oppo/i,
              /\b(cph[12]\d{3}|p(?:af|c[al]|d\w|e[ar])[mt]\d0|x9007|a101op)\b/i
            ],
            [MODEL, [VENDOR, "OPPO"], [TYPE, MOBILE]],
            [
              /vivo (\w+)(?: bui|\))/i,
              /\b(v[12]\d{3}\w?[at])(?: bui|;)/i
            ],
            [MODEL, [VENDOR, "Vivo"], [TYPE, MOBILE]],
            [
              /\b(rmx[12]\d{3})(?: bui|;|\))/i
            ],
            [MODEL, [VENDOR, "Realme"], [TYPE, MOBILE]],
            [
              /\b(milestone|droid(?:[2-4x]| (?:bionic|x2|pro|razr))?:?( 4g)?)\b[\w ]+build\//i,
              /\bmot(?:orola)?[- ](\w*)/i,
              /((?:moto[\w\(\) ]+|xt\d{3,4}|nexus 6)(?= bui|\)))/i
            ],
            [MODEL, [VENDOR, MOTOROLA], [TYPE, MOBILE]],
            [
              /\b(mz60\d|xoom[2 ]{0,2}) build\//i
            ],
            [MODEL, [VENDOR, MOTOROLA], [TYPE, TABLET]],
            [
              /((?=lg)?[vl]k\-?\d{3}) bui| 3\.[-\w; ]{10}lg?-([06cv9]{3,4})/i
            ],
            [MODEL, [VENDOR, LG], [TYPE, TABLET]],
            [
              /(lm(?:-?f100[nv]?|-[\w\.]+)(?= bui|\))|nexus [45])/i,
              /\blg[-e;\/ ]+((?!browser|netcast|android tv)\w+)/i,
              /\blg-?([\d\w]+) bui/i
            ],
            [MODEL, [VENDOR, LG], [TYPE, MOBILE]],
            [
              /(ideatab[-\w ]+)/i,
              /lenovo ?(s[56]000[-\w]+|tab(?:[\w ]+)|yt[-\d\w]{6}|tb[-\d\w]{6})/i
            ],
            [MODEL, [VENDOR, "Lenovo"], [TYPE, TABLET]],
            [
              /(?:maemo|nokia).*(n900|lumia \d+)/i,
              /nokia[-_ ]?([-\w\.]*)/i
            ],
            [[MODEL, /_/g, " "], [VENDOR, "Nokia"], [TYPE, MOBILE]],
            [
              /(pixel c)\b/i
            ],
            [MODEL, [VENDOR, GOOGLE], [TYPE, TABLET]],
            [
              /droid.+; (pixel[\daxl ]{0,6})(?: bui|\))/i
            ],
            [MODEL, [VENDOR, GOOGLE], [TYPE, MOBILE]],
            [
              /droid.+ (a?\d[0-2]{2}so|[c-g]\d{4}|so[-gl]\w+|xq-a\w[4-7][12])(?= bui|\).+chrome\/(?![1-6]{0,1}\d\.))/i
            ],
            [MODEL, [VENDOR, SONY], [TYPE, MOBILE]],
            [
              /sony tablet [ps]/i,
              /\b(?:sony)?sgp\w+(?: bui|\))/i
            ],
            [[MODEL, "Xperia Tablet"], [VENDOR, SONY], [TYPE, TABLET]],
            [
              / (kb2005|in20[12]5|be20[12][59])\b/i,
              /(?:one)?(?:plus)? (a\d0\d\d)(?: b|\))/i
            ],
            [MODEL, [VENDOR, "OnePlus"], [TYPE, MOBILE]],
            [
              /(alexa)webm/i,
              /(kf[a-z]{2}wi)( bui|\))/i,
              /(kf[a-z]+)( bui|\)).+silk\//i
            ],
            [MODEL, [VENDOR, AMAZON], [TYPE, TABLET]],
            [
              /((?:sd|kf)[0349hijorstuw]+)( bui|\)).+silk\//i
            ],
            [[MODEL, /(.+)/g, "Fire Phone $1"], [VENDOR, AMAZON], [TYPE, MOBILE]],
            [
              /(playbook);[-\w\),; ]+(rim)/i
            ],
            [MODEL, VENDOR, [TYPE, TABLET]],
            [
              /\b((?:bb[a-f]|st[hv])100-\d)/i,
              /\(bb10; (\w+)/i
            ],
            [MODEL, [VENDOR, BLACKBERRY], [TYPE, MOBILE]],
            [
              /(?:\b|asus_)(transfo[prime ]{4,10} \w+|eeepc|slider \w+|nexus 7|padfone|p00[cj])/i
            ],
            [MODEL, [VENDOR, ASUS], [TYPE, TABLET]],
            [
              / (z[bes]6[027][012][km][ls]|zenfone \d\w?)\b/i
            ],
            [MODEL, [VENDOR, ASUS], [TYPE, MOBILE]],
            [
              /(nexus 9)/i
            ],
            [MODEL, [VENDOR, "HTC"], [TYPE, TABLET]],
            [
              /(htc)[-;_ ]{1,2}([\w ]+(?=\)| bui)|\w+)/i,
              /(zte)[- ]([\w ]+?)(?: bui|\/|\))/i,
              /(alcatel|geeksphone|nexian|panasonic(?!(?:;|\.))|sony(?!-bra))[-_ ]?([-\w]*)/i
            ],
            [VENDOR, [MODEL, /_/g, " "], [TYPE, MOBILE]],
            [
              /droid.+; ([ab][1-7]-?[0178a]\d\d?)/i
            ],
            [MODEL, [VENDOR, "Acer"], [TYPE, TABLET]],
            [
              /droid.+; (m[1-5] note) bui/i,
              /\bmz-([-\w]{2,})/i
            ],
            [MODEL, [VENDOR, "Meizu"], [TYPE, MOBILE]],
            [
              /(blackberry|benq|palm(?=\-)|sonyericsson|acer|asus|dell|meizu|motorola|polytron)[-_ ]?([-\w]*)/i,
              /(hp) ([\w ]+\w)/i,
              /(asus)-?(\w+)/i,
              /(microsoft); (lumia[\w ]+)/i,
              /(lenovo)[-_ ]?([-\w]+)/i,
              /(jolla)/i,
              /(oppo) ?([\w ]+) bui/i
            ],
            [VENDOR, MODEL, [TYPE, MOBILE]],
            [
              /(kobo)\s(ereader|touch)/i,
              /(archos) (gamepad2?)/i,
              /(hp).+(touchpad(?!.+tablet)|tablet)/i,
              /(kindle)\/([\w\.]+)/i,
              /(nook)[\w ]+build\/(\w+)/i,
              /(dell) (strea[kpr\d ]*[\dko])/i,
              /(le[- ]+pan)[- ]+(\w{1,9}) bui/i,
              /(trinity)[- ]*(t\d{3}) bui/i,
              /(gigaset)[- ]+(q\w{1,9}) bui/i,
              /(vodafone) ([\w ]+)(?:\)| bui)/i
            ],
            [VENDOR, MODEL, [TYPE, TABLET]],
            [
              /(surface duo)/i
            ],
            [MODEL, [VENDOR, MICROSOFT], [TYPE, TABLET]],
            [
              /droid [\d\.]+; (fp\du?)(?: b|\))/i
            ],
            [MODEL, [VENDOR, "Fairphone"], [TYPE, MOBILE]],
            [
              /(u304aa)/i
            ],
            [MODEL, [VENDOR, "AT&T"], [TYPE, MOBILE]],
            [
              /\bsie-(\w*)/i
            ],
            [MODEL, [VENDOR, "Siemens"], [TYPE, MOBILE]],
            [
              /\b(rct\w+) b/i
            ],
            [MODEL, [VENDOR, "RCA"], [TYPE, TABLET]],
            [
              /\b(venue[\d ]{2,7}) b/i
            ],
            [MODEL, [VENDOR, "Dell"], [TYPE, TABLET]],
            [
              /\b(q(?:mv|ta)\w+) b/i
            ],
            [MODEL, [VENDOR, "Verizon"], [TYPE, TABLET]],
            [
              /\b(?:barnes[& ]+noble |bn[rt])([\w\+ ]*) b/i
            ],
            [MODEL, [VENDOR, "Barnes & Noble"], [TYPE, TABLET]],
            [
              /\b(tm\d{3}\w+) b/i
            ],
            [MODEL, [VENDOR, "NuVision"], [TYPE, TABLET]],
            [
              /\b(k88) b/i
            ],
            [MODEL, [VENDOR, "ZTE"], [TYPE, TABLET]],
            [
              /\b(nx\d{3}j) b/i
            ],
            [MODEL, [VENDOR, "ZTE"], [TYPE, MOBILE]],
            [
              /\b(gen\d{3}) b.+49h/i
            ],
            [MODEL, [VENDOR, "Swiss"], [TYPE, MOBILE]],
            [
              /\b(zur\d{3}) b/i
            ],
            [MODEL, [VENDOR, "Swiss"], [TYPE, TABLET]],
            [
              /\b((zeki)?tb.*\b) b/i
            ],
            [MODEL, [VENDOR, "Zeki"], [TYPE, TABLET]],
            [
              /\b([yr]\d{2}) b/i,
              /\b(dragon[- ]+touch |dt)(\w{5}) b/i
            ],
            [[VENDOR, "Dragon Touch"], MODEL, [TYPE, TABLET]],
            [
              /\b(ns-?\w{0,9}) b/i
            ],
            [MODEL, [VENDOR, "Insignia"], [TYPE, TABLET]],
            [
              /\b((nxa|next)-?\w{0,9}) b/i
            ],
            [MODEL, [VENDOR, "NextBook"], [TYPE, TABLET]],
            [
              /\b(xtreme\_)?(v(1[045]|2[015]|[3469]0|7[05])) b/i
            ],
            [[VENDOR, "Voice"], MODEL, [TYPE, MOBILE]],
            [
              /\b(lvtel\-)?(v1[12]) b/i
            ],
            [[VENDOR, "LvTel"], MODEL, [TYPE, MOBILE]],
            [
              /\b(ph-1) /i
            ],
            [MODEL, [VENDOR, "Essential"], [TYPE, MOBILE]],
            [
              /\b(v(100md|700na|7011|917g).*\b) b/i
            ],
            [MODEL, [VENDOR, "Envizen"], [TYPE, TABLET]],
            [
              /\b(trio[-\w\. ]+) b/i
            ],
            [MODEL, [VENDOR, "MachSpeed"], [TYPE, TABLET]],
            [
              /\btu_(1491) b/i
            ],
            [MODEL, [VENDOR, "Rotor"], [TYPE, TABLET]],
            [
              /(shield[\w ]+) b/i
            ],
            [MODEL, [VENDOR, "Nvidia"], [TYPE, TABLET]],
            [
              /(sprint) (\w+)/i
            ],
            [VENDOR, MODEL, [TYPE, MOBILE]],
            [
              /(kin\.[onetw]{3})/i
            ],
            [[MODEL, /\./g, " "], [VENDOR, MICROSOFT], [TYPE, MOBILE]],
            [
              /droid.+; (cc6666?|et5[16]|mc[239][23]x?|vc8[03]x?)\)/i
            ],
            [MODEL, [VENDOR, ZEBRA], [TYPE, TABLET]],
            [
              /droid.+; (ec30|ps20|tc[2-8]\d[kx])\)/i
            ],
            [MODEL, [VENDOR, ZEBRA], [TYPE, MOBILE]],
            [
              /smart-tv.+(samsung)/i
            ],
            [VENDOR, [TYPE, SMARTTV]],
            [
              /hbbtv.+maple;(\d+)/i
            ],
            [[MODEL, /^/, "SmartTV"], [VENDOR, SAMSUNG], [TYPE, SMARTTV]],
            [
              /(nux; netcast.+smarttv|lg (netcast\.tv-201\d|android tv))/i
            ],
            [[VENDOR, LG], [TYPE, SMARTTV]],
            [
              /(apple) ?tv/i
            ],
            [VENDOR, [MODEL, APPLE + " TV"], [TYPE, SMARTTV]],
            [
              /crkey/i
            ],
            [[MODEL, CHROME + "cast"], [VENDOR, GOOGLE], [TYPE, SMARTTV]],
            [
              /droid.+aft(\w)( bui|\))/i
            ],
            [MODEL, [VENDOR, AMAZON], [TYPE, SMARTTV]],
            [
              /\(dtv[\);].+(aquos)/i,
              /(aquos-tv[\w ]+)\)/i
            ],
            [MODEL, [VENDOR, SHARP], [TYPE, SMARTTV]],
            [
              /(bravia[\w ]+)( bui|\))/i
            ],
            [MODEL, [VENDOR, SONY], [TYPE, SMARTTV]],
            [
              /(mitv-\w{5}) bui/i
            ],
            [MODEL, [VENDOR, XIAOMI], [TYPE, SMARTTV]],
            [
              /Hbbtv.*(technisat) (.*);/i
            ],
            [VENDOR, MODEL, [TYPE, SMARTTV]],
            [
              /\b(roku)[\dx]*[\)\/]((?:dvp-)?[\d\.]*)/i,
              /hbbtv\/\d+\.\d+\.\d+ +\([\w\+ ]*; *([\w\d][^;]*);([^;]*)/i
            ],
            [[VENDOR, trim], [MODEL, trim], [TYPE, SMARTTV]],
            [
              /\b(android tv|smart[- ]?tv|opera tv|tv; rv:)\b/i
            ],
            [[TYPE, SMARTTV]],
            [
              /(ouya)/i,
              /(nintendo) ([wids3utch]+)/i
            ],
            [VENDOR, MODEL, [TYPE, CONSOLE]],
            [
              /droid.+; (shield) bui/i
            ],
            [MODEL, [VENDOR, "Nvidia"], [TYPE, CONSOLE]],
            [
              /(playstation [345portablevi]+)/i
            ],
            [MODEL, [VENDOR, SONY], [TYPE, CONSOLE]],
            [
              /\b(xbox(?: one)?(?!; xbox))[\); ]/i
            ],
            [MODEL, [VENDOR, MICROSOFT], [TYPE, CONSOLE]],
            [
              /((pebble))app/i
            ],
            [VENDOR, MODEL, [TYPE, WEARABLE]],
            [
              /(watch)(?: ?os[,\/]|\d,\d\/)[\d\.]+/i
            ],
            [MODEL, [VENDOR, APPLE], [TYPE, WEARABLE]],
            [
              /droid.+; (glass) \d/i
            ],
            [MODEL, [VENDOR, GOOGLE], [TYPE, WEARABLE]],
            [
              /droid.+; (wt63?0{2,3})\)/i
            ],
            [MODEL, [VENDOR, ZEBRA], [TYPE, WEARABLE]],
            [
              /(quest( 2| pro)?)/i
            ],
            [MODEL, [VENDOR, FACEBOOK], [TYPE, WEARABLE]],
            [
              /(tesla)(?: qtcarbrowser|\/[-\w\.]+)/i
            ],
            [VENDOR, [TYPE, EMBEDDED]],
            [
              /droid .+?; ([^;]+?)(?: bui|\) applew).+? mobile safari/i
            ],
            [MODEL, [TYPE, MOBILE]],
            [
              /droid .+?; ([^;]+?)(?: bui|\) applew).+?(?! mobile) safari/i
            ],
            [MODEL, [TYPE, TABLET]],
            [
              /\b((tablet|tab)[;\/]|focus\/\d(?!.+mobile))/i
            ],
            [[TYPE, TABLET]],
            [
              /(phone|mobile(?:[;\/]| [ \w\/\.]*safari)|pda(?=.+windows ce))/i
            ],
            [[TYPE, MOBILE]],
            [
              /(android[-\w\. ]{0,9});.+buil/i
            ],
            [MODEL, [VENDOR, "Generic"]]
          ],
          engine: [
            [
              /windows.+ edge\/([\w\.]+)/i
            ],
            [VERSION, [NAME, EDGE + "HTML"]],
            [
              /webkit\/537\.36.+chrome\/(?!27)([\w\.]+)/i
            ],
            [VERSION, [NAME, "Blink"]],
            [
              /(presto)\/([\w\.]+)/i,
              /(webkit|trident|netfront|netsurf|amaya|lynx|w3m|goanna)\/([\w\.]+)/i,
              /ekioh(flow)\/([\w\.]+)/i,
              /(khtml|tasman|links)[\/ ]\(?([\w\.]+)/i,
              /(icab)[\/ ]([23]\.[\d\.]+)/i
            ],
            [NAME, VERSION],
            [
              /rv\:([\w\.]{1,9})\b.+(gecko)/i
            ],
            [VERSION, NAME]
          ],
          os: [
            [
              /microsoft (windows) (vista|xp)/i
            ],
            [NAME, VERSION],
            [
              /(windows) nt 6\.2; (arm)/i,
              /(windows (?:phone(?: os)?|mobile))[\/ ]?([\d\.\w ]*)/i,
              /(windows)[\/ ]?([ntce\d\. ]+\w)(?!.+xbox)/i
            ],
            [NAME, [VERSION, strMapper, windowsVersionMap]],
            [
              /(win(?=3|9|n)|win 9x )([nt\d\.]+)/i
            ],
            [[NAME, "Windows"], [VERSION, strMapper, windowsVersionMap]],
            [
              /ip[honead]{2,4}\b(?:.*os ([\w]+) like mac|; opera)/i,
              /cfnetwork\/.+darwin/i
            ],
            [[VERSION, /_/g, "."], [NAME, "iOS"]],
            [
              /(mac os x) ?([\w\. ]*)/i,
              /(macintosh|mac_powerpc\b)(?!.+haiku)/i
            ],
            [[NAME, MAC_OS], [VERSION, /_/g, "."]],
            [
              /droid ([\w\.]+)\b.+(android[- ]x86|harmonyos)/i
            ],
            [VERSION, NAME],
            [
              /(android|webos|qnx|bada|rim tablet os|maemo|meego|sailfish)[-\/ ]?([\w\.]*)/i,
              /(blackberry)\w*\/([\w\.]*)/i,
              /(tizen|kaios)[\/ ]([\w\.]+)/i,
              /\((series40);/i
            ],
            [NAME, VERSION],
            [
              /\(bb(10);/i
            ],
            [VERSION, [NAME, BLACKBERRY]],
            [
              /(?:symbian ?os|symbos|s60(?=;)|series60)[-\/ ]?([\w\.]*)/i
            ],
            [VERSION, [NAME, "Symbian"]],
            [
              /mozilla\/[\d\.]+ \((?:mobile|tablet|tv|mobile; [\w ]+); rv:.+ gecko\/([\w\.]+)/i
            ],
            [VERSION, [NAME, FIREFOX + " OS"]],
            [
              /web0s;.+rt(tv)/i,
              /\b(?:hp)?wos(?:browser)?\/([\w\.]+)/i
            ],
            [VERSION, [NAME, "webOS"]],
            [
              /watch(?: ?os[,\/]|\d,\d\/)([\d\.]+)/i
            ],
            [VERSION, [NAME, "watchOS"]],
            [
              /crkey\/([\d\.]+)/i
            ],
            [VERSION, [NAME, CHROME + "cast"]],
            [
              /(cros) [\w]+(?:\)| ([\w\.]+)\b)/i
            ],
            [[NAME, CHROMIUM_OS], VERSION],
            [
              /panasonic;(viera)/i,
              /(netrange)mmh/i,
              /(nettv)\/(\d+\.[\w\.]+)/i,
              /(nintendo|playstation) ([wids345portablevuch]+)/i,
              /(xbox); +xbox ([^\);]+)/i,
              /\b(joli|palm)\b ?(?:os)?\/?([\w\.]*)/i,
              /(mint)[\/\(\) ]?(\w*)/i,
              /(mageia|vectorlinux)[; ]/i,
              /([kxln]?ubuntu|debian|suse|opensuse|gentoo|arch(?= linux)|slackware|fedora|mandriva|centos|pclinuxos|red ?hat|zenwalk|linpus|raspbian|plan 9|minix|risc os|contiki|deepin|manjaro|elementary os|sabayon|linspire)(?: gnu\/linux)?(?: enterprise)?(?:[- ]linux)?(?:-gnu)?[-\/ ]?(?!chrom|package)([-\w\.]*)/i,
              /(hurd|linux) ?([\w\.]*)/i,
              /(gnu) ?([\w\.]*)/i,
              /\b([-frentopcghs]{0,5}bsd|dragonfly)[\/ ]?(?!amd|[ix346]{1,2}86)([\w\.]*)/i,
              /(haiku) (\w+)/i
            ],
            [NAME, VERSION],
            [
              /(sunos) ?([\w\.\d]*)/i
            ],
            [[NAME, "Solaris"], VERSION],
            [
              /((?:open)?solaris)[-\/ ]?([\w\.]*)/i,
              /(aix) ((\d)(?=\.|\)| )[\w\.])*/i,
              /\b(beos|os\/2|amigaos|morphos|openvms|fuchsia|hp-ux)/i,
              /(unix) ?([\w\.]*)/i
            ],
            [NAME, VERSION]
          ]
        };
        var UAParser = function(ua, extensions) {
          if (typeof ua === OBJ_TYPE) {
            extensions = ua;
            ua = undefined2;
          }
          if (!(this instanceof UAParser)) {
            return new UAParser(ua, extensions).getResult();
          }
          var _navigator = typeof window2 !== UNDEF_TYPE && window2.navigator ? window2.navigator : undefined2;
          var _ua = ua || (_navigator && _navigator.userAgent ? _navigator.userAgent : EMPTY);
          var _uach = _navigator && _navigator.userAgentData ? _navigator.userAgentData : undefined2;
          var _rgxmap = extensions ? extend(regexes, extensions) : regexes;
          this.getBrowser = function() {
            var _browser = {};
            _browser[NAME] = undefined2;
            _browser[VERSION] = undefined2;
            rgxMapper.call(_browser, _ua, _rgxmap.browser);
            _browser[MAJOR] = majorize(_browser[VERSION]);
            if (_navigator && _navigator.brave && typeof _navigator.brave.isBrave == FUNC_TYPE) {
              _browser[NAME] = "Brave";
            }
            return _browser;
          };
          this.getCPU = function() {
            var _cpu = {};
            _cpu[ARCHITECTURE] = undefined2;
            rgxMapper.call(_cpu, _ua, _rgxmap.cpu);
            return _cpu;
          };
          this.getDevice = function() {
            var _device = {};
            _device[VENDOR] = undefined2;
            _device[MODEL] = undefined2;
            _device[TYPE] = undefined2;
            rgxMapper.call(_device, _ua, _rgxmap.device);
            if (!_device[TYPE] && _uach && _uach.mobile) {
              _device[TYPE] = MOBILE;
            }
            if (_device[MODEL] == "Macintosh" && _navigator && typeof _navigator.standalone !== UNDEF_TYPE && _navigator.maxTouchPoints && _navigator.maxTouchPoints > 2) {
              _device[MODEL] = "iPad";
              _device[TYPE] = TABLET;
            }
            return _device;
          };
          this.getEngine = function() {
            var _engine = {};
            _engine[NAME] = undefined2;
            _engine[VERSION] = undefined2;
            rgxMapper.call(_engine, _ua, _rgxmap.engine);
            return _engine;
          };
          this.getOS = function() {
            var _os = {};
            _os[NAME] = undefined2;
            _os[VERSION] = undefined2;
            rgxMapper.call(_os, _ua, _rgxmap.os);
            if (!_os[NAME] && _uach && _uach.platform != "Unknown") {
              _os[NAME] = _uach.platform.replace(/chrome os/i, CHROMIUM_OS).replace(/macos/i, MAC_OS);
            }
            return _os;
          };
          this.getResult = function() {
            return {
              ua: this.getUA(),
              browser: this.getBrowser(),
              engine: this.getEngine(),
              os: this.getOS(),
              device: this.getDevice(),
              cpu: this.getCPU()
            };
          };
          this.getUA = function() {
            return _ua;
          };
          this.setUA = function(ua2) {
            _ua = typeof ua2 === STR_TYPE && ua2.length > UA_MAX_LENGTH ? trim(ua2, UA_MAX_LENGTH) : ua2;
            return this;
          };
          this.setUA(_ua);
          return this;
        };
        UAParser.VERSION = LIBVERSION;
        UAParser.BROWSER = enumerize([NAME, VERSION, MAJOR]);
        UAParser.CPU = enumerize([ARCHITECTURE]);
        UAParser.DEVICE = enumerize([MODEL, VENDOR, TYPE, CONSOLE, MOBILE, SMARTTV, TABLET, WEARABLE, EMBEDDED]);
        UAParser.ENGINE = UAParser.OS = enumerize([NAME, VERSION]);
        if (typeof exports2 !== UNDEF_TYPE) {
          if (typeof module2 !== UNDEF_TYPE && module2.exports) {
            exports2 = module2.exports = UAParser;
          }
          exports2.UAParser = UAParser;
        } else {
          if (typeof define === FUNC_TYPE && define.amd) {
            define(function() {
              return UAParser;
            });
          } else if (typeof window2 !== UNDEF_TYPE) {
            window2.UAParser = UAParser;
          }
        }
        var $ = typeof window2 !== UNDEF_TYPE && (window2.jQuery || window2.Zepto);
        if ($ && !$.ua) {
          var parser = new UAParser();
          $.ua = parser.getResult();
          $.ua.get = function() {
            return parser.getUA();
          };
          $.ua.set = function(ua) {
            parser.setUA(ua);
            var result = parser.getResult();
            for (var prop in result) {
              $.ua[prop] = result[prop];
            }
          };
        }
      })(typeof window === "object" ? window : exports2);
    }
  });

  // node_modules/@avast/burger-client/send.js
  var require_send = __commonJS({
    "node_modules/@avast/burger-client/send.js"(exports2, module2) {
      var send = {
        _activity(subtype, activity) {
          let activityMessage = Object.assign({
            common: {
              session_id: this._sessionId,
              test_id: this._abTests.map(function(a) {
                return a.test_id;
              }).join(","),
              test_group_id: this._abTests.map(function(a) {
                return a.test_group_id;
              }).join(","),
              error_state: this._errorState
            }
          }, activity);
          const event = {
            type: 5,
            subtype,
            time: Date.now()
          };
          this.sendEvent({ event, activity: activityMessage });
        },
        activity: {
          click: 1,
          view: 2,
          ipm: 3,
          auto: 10
        },
        commonActivity(activity) {
          let activityMessage = Object.assign({}, activity);
          const event = {
            type: 48,
            subtype: 1,
            time: Date.now()
          };
          this.sendEvent({ event, activity: activityMessage });
        },
        heartbeat(uptimeMs) {
          let heartbeatMessage = {
            uptime: uptimeMs
          };
          const event = {
            type: 2,
            subtype: 1,
            time: Date.now()
          };
          this.sendEvent({ event, heartbeat: heartbeatMessage });
        },
        install(operation) {
          let installMessage = {
            operation: operation || 1
          };
          const event = {
            type: 1,
            subtype: installMessage.operation,
            time: Date.now()
          };
          this.sendEvent({ event, install: installMessage });
        },
        aosWebshieldScanning(scanning) {
          let scanningMessage = Object.assign({
            caller_id: this._options.caller_id,
            product_av: {
              identity: this._options.extensionProductIdentity,
              product: this._options.extensionProduct
            }
          }, scanning);
          const event = {
            type: 41,
            subtype: 1,
            time: Date.now()
          };
          this.sendEvent({ event, aos_webshield_scanning: scanningMessage });
        },
        update(data = {}) {
          const subtype = data.action || 3;
          const now = Date.now();
          const updateData = Object.assign({
            action: subtype,
            component: 1,
            type: 1,
            time: { ends: now }
          }, data);
          const event = {
            type: 4,
            subtype,
            time: now
          };
          this.sendEvent({ event, updates: updateData });
        },
        preferences(configuration = []) {
          const configData = {
            config: { configuration }
          };
          const event = {
            type: 6,
            subtype: 1,
            time: Date.now()
          };
          this.sendEvent({ event, preferences: configData });
        },
        maliciousUrl(url) {
          const event = {
            type: 46,
            subtype: 1,
            time: Date.now()
          };
          this.sendEvent({ event, malicious: { url } });
        },
        npsScore(score) {
          if (score < 0 || score > 10) {
            return;
          }
          const event = {
            type: 11,
            subtype: 1,
            time: Date.now()
          };
          this.sendEvent({ event, nps_survey: { score } });
        },
        npsFeedback(score, textFeedback) {
          if (score < 0 || score > 10) {
            return;
          }
          try {
            const event = {
              type: 11,
              subtype: 2,
              time: Date.now()
            };
            const sanitizedTextFeedback = textFeedback.replace(/<\/?[^>]+(>|$)/g, "");
            this.sendEvent({ event, nps_survey: { score, textFeedback: sanitizedTextFeedback } });
          } catch (e) {
          }
        },
        vote(url, rating) {
          const event = {
            type: 47,
            subtype: 1,
            time: Date.now()
          };
          this.sendEvent({ event, vote: { url, rating } });
        },
        _issue(category, error, opt_source) {
          let issueMessage = {
            category,
            source: typeof opt_source !== "undefined" ? opt_source : 3,
            error: Object.assign(error)
          };
          const event = {
            type: 9,
            subtype: category,
            time: Date.now()
          };
          this.sendEvent({ event, issue: issueMessage });
        },
        issue: {
          debug: 1,
          crash: 2,
          error: 3,
          failure: 4,
          warning: 5
        }
      };
      module2.exports = {
        bind: function(burgerClient) {
          let bound = {};
          for (let fun in send) {
            if (!fun.startsWith("_") && typeof send[fun] === "function") {
              bound[fun] = send[fun].bind(burgerClient);
            } else if (typeof send[fun] === "object") {
              bound[fun] = {};
              for (let subfun in send[fun]) {
                bound[fun][subfun] = send["_" + fun].bind(burgerClient, send[fun][subfun]);
              }
            }
          }
          return bound;
        }
      };
    }
  });

  // node_modules/@avast/burger-client/burgerEnum.js
  var require_burgerEnum = __commonJS({
    "node_modules/@avast/burger-client/burgerEnum.js"(exports2, module2) {
      "use strict";
      function browserNameToEnum(name) {
        name = name.toLowerCase();
        if (name === "avast secure browser" || name === "avg secure browser")
          return 2;
        if (name.includes("chrome"))
          return 3;
        if (name.includes("firefox"))
          return 4;
        if (name.includes("safari"))
          return 5;
        if (name.includes("edge"))
          return 6;
        if (name.includes("opera"))
          return 7;
        if (name === "ie")
          return 8;
        if (name === "ucbrowser")
          return 11;
        if (name === "yandex")
          return 12;
        if (name === "coc coc")
          return 13;
        if (name === "chromium")
          return 14;
        if (name === "vivaldi")
          return 15;
        return 1;
      }
      function platformNameToEnum(name) {
        if (!name)
          return 5;
        if (name.startsWith("Win"))
          return 1;
        if (name.startsWith("Mac"))
          return 2;
        if (name.startsWith("iP"))
          return 3;
        if (name.toLowerCase().startsWith("android"))
          return 5;
        if (name.toLowerCase().startsWith("chromium os"))
          return 6;
        return 4;
      }
      function cpuToEnum(name) {
        if (name === "arm")
          return 3;
        if (name === "arm64")
          return 4;
        if (name === "amd64" || name === "ia64")
          return 2;
        if (name === "ia32")
          return 1;
        return 5;
      }
      module2.exports = {
        browserNameToEnum,
        platformNameToEnum,
        cpuToEnum
      };
    }
  });

  // node_modules/@avast/burger-client/index.js
  var require_burger_client = __commonJS({
    "node_modules/@avast/burger-client/index.js"(exports2, module2) {
      "use strict";
      var EventEmitter2 = require_events();
      var uaparser = require_ua_parser();
      var send = require_send();
      var { browserNameToEnum, platformNameToEnum, cpuToEnum } = require_burgerEnum();
      var DEFAULT_BATCH_TIMEOUT = 5e3;
      var DEFAULT_BATCH_SIZE = 500;
      var BurgerClient2 = class extends EventEmitter2 {
        constructor(burgerUrl, adapter, options) {
          super();
          this._localStorage = options.localStorage || localStorage;
          this._retries = 0;
          this._url = burgerUrl;
          this._adapter = adapter;
          this._options = options;
          this._flushInterval = null;
          this._eventsCache = {};
          this._storageKey = options.storageKey || "records";
          this._sessionId = options.session_id || BurgerClient2.createSessionId();
          this._errorState = 0;
          this._abTests = [];
          this.send = send.bind(this);
          this._loadEvents().then((events) => {
            const syncBack = Object.keys(this._eventsCache).length > 0;
            const allTypes = [...Object.keys(events), ...Object.keys(this._eventsCache)];
            allTypes.forEach((type) => this._eventsCache[type] = [...events[type] || [], ...this._eventsCache[type] || []]);
            if (syncBack) {
              this._localStorage.setItem(this._storageKey, JSON.stringify(this._eventsCache));
            }
            this.flush();
            this._flushInterval = setInterval(() => {
              this.flush();
            }, options.batchTimeoutMs || DEFAULT_BATCH_TIMEOUT);
            this.emit(BurgerClient2.Event.INITIALIZED);
          });
        }
        updateIdentity(identity) {
          return this._updateOptions("identity", identity);
        }
        updateProduct(product) {
          return this._updateOptions("product", product);
        }
        updatePlatform(platform2) {
          return this._updateOptions("platform", platform2);
        }
        updateGeo(geo) {
          return this._updateOptions("geo", geo);
        }
        updateInstallation(installation) {
          return this._updateOptions("installation", installation);
        }
        updateLicense(license) {
          return this._updateOptions("license", license);
        }
        updateShepherd(shepherd) {
          return this._updateOptions("shepherd", shepherd);
        }
        updateExtensionProduct(product) {
          return this._updateOptions("extensionProduct", product);
        }
        updateExtensionProductIdentity(extensionProductIdentity) {
          return this._updateOptions("extensionProductIdentity", extensionProductIdentity);
        }
        updateCampaign(campaign) {
          return this._updateOptions("campaign", campaign);
        }
        updateSettings(settings) {
          return this._updateOptions("settings", settings);
        }
        get hasPendingEvents() {
          return Object.keys(this._eventsCache).some((type) => this._eventsCache[type].length !== 0);
        }
        static createSessionId() {
          return randHex(24);
        }
        setSessionId(session_id) {
          this._sessionId = session_id;
          return this;
        }
        setErrorState(state) {
          this._errorState = state;
          return this;
        }
        setHTTPErrorState(httpStatusCode) {
          let state = httpStatusCode;
          if (httpStatusCode == 0) {
            state = -1;
          } else if (httpStatusCode < 400) {
            state = 0;
          }
          this.setErrorState(state);
          return this;
        }
        setABTest(test_id, test_group_id) {
          let existing = this._abTests.find(function(a) {
            return a.test_id === test_id;
          });
          if (existing) {
            existing.test_group_id = test_group_id;
          } else {
            this._abTests.push({ test_id, test_group_id });
            this._abTests.sort(function(a, b) {
              return a.test_id < b.test_id ? -1 : a.test_id > b.test_id ? 1 : 0;
            });
          }
          return this;
        }
        setABTests(tests) {
          if (!Array.isArray(tests) || tests.some((t) => typeof t.test_id !== "string" || typeof t.test_group_id !== "string")) {
            throw new Error("Invalid parameter:", JSON.stringify(tests, null, 2));
          }
          this._abTests = tests;
          this._abTests.sort(function(a, b) {
            return a.test_id < b.test_id ? -1 : a.test_id > b.test_id ? 1 : 0;
          });
          return this;
        }
        sendEvent(data) {
          const record = removeCRLF(Object.assign({}, data));
          if (!record.event || typeof record.event.type === "undefined") {
            console.error("missing event.type at " + JSON.stringify(record));
            return;
          }
          const isSendImmediately = [1, 2, 6, 11].includes(record.event.type);
          if (isSendImmediately) {
            try {
              fetch(this._url, this._adapter({
                record: [this._updateRecord(record)],
                common: {
                  send_time: Date.now()
                }
              }));
            } catch (ex) {
              console.error(ex);
            }
            return;
          }
          if (!this._eventsCache[record.event.type]) {
            this._eventsCache[record.event.type] = [];
          }
          this._eventsCache[record.event.type].push(record);
          if (this._flushInterval) {
            this._localStorage.setItem(this._storageKey, JSON.stringify(this._eventsCache));
          }
          if (this._eventsCache[record.event.type].length < (this._options.batchSizeLimit || DEFAULT_BATCH_SIZE)) {
            return;
          }
          this.flush({ type: record.event.type });
        }
        flush(options) {
          if (options && typeof options.type !== "undefined" && this._eventsCache[options.type].length == 0 || !this.hasPendingEvents) {
            return Promise.resolve(null);
          }
          if (options && options.doNotVerify) {
            if (typeof options.type !== "undefined") {
              let after = Object.assign({}, this._eventsCache);
              delete after[options.type];
              this._localStorage.setItem(this._storageKey, JSON.stringify(after));
            } else {
              this._localStorage.setItem(this._storageKey, "{}");
            }
          }
          const types = options && options.type !== "undefined" ? [options.type] : Object.keys(this._eventsCache);
          return Promise.all(types.map((type) => {
            try {
              let envelope = {
                record: this._eventsCache[type].map(this._updateRecord.bind(this)),
                common: {
                  send_time: Date.now()
                }
              };
              const fetchOpt = this._adapter(envelope);
              return fetch(this._url, fetchOpt).then((resp) => {
                if (resp.status >= 400 && resp.status < 500 || ++this._retries >= (this._options.maxRetries || 3)) {
                  this._clearEvents(type);
                  return resp.text().then((text) => "Data rejected: " + resp.status + " " + resp.statusText + "\n" + text);
                } else if (resp.status >= 500) {
                  return "Burger failure: " + resp.status + " " + resp.statusText;
                } else {
                  this._clearEvents(type);
                  this.emit(BurgerClient2.Event.FLUSHED);
                  return null;
                }
              }).catch((ex) => {
                if (this._options.ignoreNetworkErrors) {
                  this._retries = 0;
                  return null;
                }
                return ex;
              });
            } catch (ex) {
              console.error(ex);
              this._clearEvents(type);
              return Promise.resolve(ex);
            }
          })).then((responses) => {
            if (responses.length == 1) {
              return responses[0];
            }
            const errors = responses.filter((r) => r !== null);
            if (errors.length > 0) {
              return errors.join(", ");
            }
            return null;
          });
        }
        _updateOptions(optionsKey, value) {
          for (var key in value) {
            if (typeof value[key] === "undefined") {
              if (this._options[optionsKey]) {
                delete this._options[optionsKey][key];
              }
            } else {
              if (!this._options[optionsKey]) {
                this._options[optionsKey] = {};
              }
              this._options[optionsKey][key] = value[key];
            }
          }
          return this;
        }
        _updateRecord(record) {
          if (this._options.identity) {
            record.identity = this._options.identity;
          }
          if (this._options.product) {
            record.product = this._options.product;
          }
          if (this._options.platform) {
            record.platform = this._options.platform;
            if (typeof record.platform.os !== "undefined" && typeof record.platform.os !== "number") {
              record.platform.os = platformNameToEnum(record.platform.os);
            }
            if (typeof record.platform.architecture !== "undefined" && typeof record.platform.architecture !== "number") {
              record.platform.architecture = cpuToEnum(record.platform.architecture);
            }
          }
          if (this._options.license) {
            record.license = this._options.license;
          }
          if (this._options.installation) {
            record.installation = this._options.installation;
          }
          if (this._options.shepherd) {
            record.shepherd = this._options.shepherd;
          }
          if (this._options.geo) {
            record.geo = this._options.geo;
          }
          if (typeof navigator !== "undefined" && navigator.userAgent) {
            let ua = uaparser(navigator.userAgent);
            record.browser = {
              type: browserNameToEnum(ua.browser.name),
              version: ua.browser.version
            };
            if (navigator.language) {
              record.browser.lang = navigator.language;
            }
          }
          if (typeof navigator !== "undefined") {
            shallowAddIfUndefined(record, { platform: {} });
            shallowAddIfUndefined(record.platform, {
              os: platformNameToEnum(navigator.platform),
              time_zone: -new Date().getTimezoneOffset()
            });
            if (navigator.userAgent) {
              let ua = uaparser(navigator.userAgent);
              shallowAddIfUndefined(record.platform, {
                version: ua.os.version,
                architecture: cpuToEnum(ua.cpu.architecture)
              });
              if (ua.os.name === "Chromium OS") {
                record.platform.os = 6;
                if (record.platform.architecture == 5) {
                  if (navigator.userAgent.indexOf("x86_64") != -1) {
                    record.platform.architecture = 2;
                  } else if (navigator.userAgent.indexOf("x86") != -1) {
                    record.platform.architecture = 1;
                  } else if (navigator.userAgent.indexOf("armv") != -1) {
                    record.platform.architecture = 4;
                  }
                }
              }
            }
          }
          if (this._options.campaign) {
            record.campaign = this._options.campaign;
          }
          if (this._options.settings) {
            record.settings = this._options.settings;
          }
          return record;
        }
        _loadEvents() {
          return Promise.resolve(this._localStorage.getItem(this._storageKey)).then((recordStr) => recordStr ? JSON.parse(recordStr) : {}).then((records) => !Array.isArray(records) && typeof records === "object" ? records : {}).catch(() => {
            this._localStorage.setItem(this._storageKey, "{}");
            return {};
          });
        }
        _clearEvents(type) {
          this._retries = 0;
          if (typeof type === "undefined") {
            this._eventsCache = {};
          } else {
            delete this._eventsCache[type];
          }
          this._localStorage.setItem(this._storageKey, JSON.stringify(this._eventsCache));
        }
      };
      BurgerClient2.Event = {
        INITIALIZED: "initialized",
        FLUSHED: "flushed"
      };
      function randHex(digits) {
        var r = "";
        while (digits-- > 0) {
          r += Math.floor(Math.random() * 16).toString(16);
        }
        return r;
      }
      function shallowAddIfUndefined(obj, values) {
        for (let key in values) {
          if (typeof obj[key] === "undefined") {
            obj[key] = values[key];
          }
        }
        return obj;
      }
      function removeCRLF(obj) {
        if (typeof obj === "object" && obj !== null) {
          if (Array.isArray(obj)) {
            obj = obj.map(removeCRLF);
          } else {
            for (var key in obj) {
              obj[key] = removeCRLF(obj[key]);
            }
          }
          return obj;
        }
        if (typeof obj === "string") {
          return obj.replace(/[\r\n]+/g, " ");
        }
        return obj;
      }
      module2.exports = BurgerClient2;
    }
  });

  // node_modules/@avast/burger-client/adapters/pbjs5/pbjs5Adapter.js
  var require_pbjs5Adapter = __commonJS({
    "node_modules/@avast/burger-client/adapters/pbjs5/pbjs5Adapter.js"(exports2, module2) {
      "use strict";
      var ENVELOPE_TYPES = {
        InstallEnvelope: 1,
        HeartbeatEnvelope: 2,
        UpdateEnvelope: 4,
        ActivityEnvelope: 5,
        PreferencesEnvelope: 6,
        IssueEnvelope: 9,
        NPSSurveyEnvelope: 11,
        AOSWebshieldScanningEnvelope: 41,
        MaliciousURLEnvelope: 46,
        VoteEnvelope: 47,
        CommonActivityEnvelope: 48
      };
      var TYPE_ENVELOPES = Object.keys(ENVELOPE_TYPES).reduce(function(obj, key) {
        obj[ENVELOPE_TYPES[key]] = key;
        return obj;
      }, {});
      function create(envelopePrototypes) {
        return function(envelope) {
          const envelopeType = envelope.record[0].event.type;
          const Prototype = envelopePrototypes[TYPE_ENVELOPES[envelopeType]];
          let record = envelope.record.slice().map((o) => Object.assign({}, o));
          const recordType = Prototype.$type.getChild("record").resolvedType;
          record.forEach(function(r) {
            for (let key in r) {
              if (!recordType.getChild(key)) {
                delete r[key];
              }
            }
          });
          const filteredEnvelope = Object.assign({}, envelope, { record });
          const body = new Prototype(filteredEnvelope).encodeAB();
          return {
            method: "POST",
            headers: {
              "Content-Type": "application/octet-stream"
            },
            body
          };
        };
      }
      module2.exports = { create };
    }
  });

  // node_modules/bytebuffer/node_modules/long/dist/long.js
  var require_long = __commonJS({
    "node_modules/bytebuffer/node_modules/long/dist/long.js"(exports2, module2) {
      (function(global2, factory) {
        if (typeof define === "function" && define["amd"])
          define([], factory);
        else if (typeof __require === "function" && typeof module2 === "object" && module2 && module2["exports"])
          module2["exports"] = factory();
        else
          (global2["dcodeIO"] = global2["dcodeIO"] || {})["Long"] = factory();
      })(exports2, function() {
        "use strict";
        function Long(low, high, unsigned) {
          this.low = low | 0;
          this.high = high | 0;
          this.unsigned = !!unsigned;
        }
        Long.prototype.__isLong__;
        Object.defineProperty(Long.prototype, "__isLong__", {
          value: true,
          enumerable: false,
          configurable: false
        });
        function isLong(obj) {
          return (obj && obj["__isLong__"]) === true;
        }
        Long.isLong = isLong;
        var INT_CACHE = {};
        var UINT_CACHE = {};
        function fromInt(value, unsigned) {
          var obj, cachedObj, cache;
          if (unsigned) {
            value >>>= 0;
            if (cache = 0 <= value && value < 256) {
              cachedObj = UINT_CACHE[value];
              if (cachedObj)
                return cachedObj;
            }
            obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);
            if (cache)
              UINT_CACHE[value] = obj;
            return obj;
          } else {
            value |= 0;
            if (cache = -128 <= value && value < 128) {
              cachedObj = INT_CACHE[value];
              if (cachedObj)
                return cachedObj;
            }
            obj = fromBits(value, value < 0 ? -1 : 0, false);
            if (cache)
              INT_CACHE[value] = obj;
            return obj;
          }
        }
        Long.fromInt = fromInt;
        function fromNumber(value, unsigned) {
          if (isNaN(value) || !isFinite(value))
            return unsigned ? UZERO : ZERO;
          if (unsigned) {
            if (value < 0)
              return UZERO;
            if (value >= TWO_PWR_64_DBL)
              return MAX_UNSIGNED_VALUE;
          } else {
            if (value <= -TWO_PWR_63_DBL)
              return MIN_VALUE;
            if (value + 1 >= TWO_PWR_63_DBL)
              return MAX_VALUE;
          }
          if (value < 0)
            return fromNumber(-value, unsigned).neg();
          return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);
        }
        Long.fromNumber = fromNumber;
        function fromBits(lowBits, highBits, unsigned) {
          return new Long(lowBits, highBits, unsigned);
        }
        Long.fromBits = fromBits;
        var pow_dbl = Math.pow;
        function fromString(str, unsigned, radix) {
          if (str.length === 0)
            throw Error("empty string");
          if (str === "NaN" || str === "Infinity" || str === "+Infinity" || str === "-Infinity")
            return ZERO;
          if (typeof unsigned === "number") {
            radix = unsigned, unsigned = false;
          } else {
            unsigned = !!unsigned;
          }
          radix = radix || 10;
          if (radix < 2 || 36 < radix)
            throw RangeError("radix");
          var p;
          if ((p = str.indexOf("-")) > 0)
            throw Error("interior hyphen");
          else if (p === 0) {
            return fromString(str.substring(1), unsigned, radix).neg();
          }
          var radixToPower = fromNumber(pow_dbl(radix, 8));
          var result = ZERO;
          for (var i = 0; i < str.length; i += 8) {
            var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);
            if (size < 8) {
              var power = fromNumber(pow_dbl(radix, size));
              result = result.mul(power).add(fromNumber(value));
            } else {
              result = result.mul(radixToPower);
              result = result.add(fromNumber(value));
            }
          }
          result.unsigned = unsigned;
          return result;
        }
        Long.fromString = fromString;
        function fromValue(val) {
          if (val instanceof Long)
            return val;
          if (typeof val === "number")
            return fromNumber(val);
          if (typeof val === "string")
            return fromString(val);
          return fromBits(val.low, val.high, val.unsigned);
        }
        Long.fromValue = fromValue;
        var TWO_PWR_16_DBL = 1 << 16;
        var TWO_PWR_24_DBL = 1 << 24;
        var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;
        var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;
        var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;
        var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);
        var ZERO = fromInt(0);
        Long.ZERO = ZERO;
        var UZERO = fromInt(0, true);
        Long.UZERO = UZERO;
        var ONE = fromInt(1);
        Long.ONE = ONE;
        var UONE = fromInt(1, true);
        Long.UONE = UONE;
        var NEG_ONE = fromInt(-1);
        Long.NEG_ONE = NEG_ONE;
        var MAX_VALUE = fromBits(4294967295 | 0, 2147483647 | 0, false);
        Long.MAX_VALUE = MAX_VALUE;
        var MAX_UNSIGNED_VALUE = fromBits(4294967295 | 0, 4294967295 | 0, true);
        Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;
        var MIN_VALUE = fromBits(0, 2147483648 | 0, false);
        Long.MIN_VALUE = MIN_VALUE;
        var LongPrototype = Long.prototype;
        LongPrototype.toInt = function toInt() {
          return this.unsigned ? this.low >>> 0 : this.low;
        };
        LongPrototype.toNumber = function toNumber() {
          if (this.unsigned)
            return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);
          return this.high * TWO_PWR_32_DBL + (this.low >>> 0);
        };
        LongPrototype.toString = function toString(radix) {
          radix = radix || 10;
          if (radix < 2 || 36 < radix)
            throw RangeError("radix");
          if (this.isZero())
            return "0";
          if (this.isNegative()) {
            if (this.eq(MIN_VALUE)) {
              var radixLong = fromNumber(radix), div = this.div(radixLong), rem1 = div.mul(radixLong).sub(this);
              return div.toString(radix) + rem1.toInt().toString(radix);
            } else
              return "-" + this.neg().toString(radix);
          }
          var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned), rem = this;
          var result = "";
          while (true) {
            var remDiv = rem.div(radixToPower), intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0, digits = intval.toString(radix);
            rem = remDiv;
            if (rem.isZero())
              return digits + result;
            else {
              while (digits.length < 6)
                digits = "0" + digits;
              result = "" + digits + result;
            }
          }
        };
        LongPrototype.getHighBits = function getHighBits() {
          return this.high;
        };
        LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {
          return this.high >>> 0;
        };
        LongPrototype.getLowBits = function getLowBits() {
          return this.low;
        };
        LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {
          return this.low >>> 0;
        };
        LongPrototype.getNumBitsAbs = function getNumBitsAbs() {
          if (this.isNegative())
            return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();
          var val = this.high != 0 ? this.high : this.low;
          for (var bit = 31; bit > 0; bit--)
            if ((val & 1 << bit) != 0)
              break;
          return this.high != 0 ? bit + 33 : bit + 1;
        };
        LongPrototype.isZero = function isZero() {
          return this.high === 0 && this.low === 0;
        };
        LongPrototype.isNegative = function isNegative() {
          return !this.unsigned && this.high < 0;
        };
        LongPrototype.isPositive = function isPositive() {
          return this.unsigned || this.high >= 0;
        };
        LongPrototype.isOdd = function isOdd() {
          return (this.low & 1) === 1;
        };
        LongPrototype.isEven = function isEven() {
          return (this.low & 1) === 0;
        };
        LongPrototype.equals = function equals(other) {
          if (!isLong(other))
            other = fromValue(other);
          if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1)
            return false;
          return this.high === other.high && this.low === other.low;
        };
        LongPrototype.eq = LongPrototype.equals;
        LongPrototype.notEquals = function notEquals(other) {
          return !this.eq(other);
        };
        LongPrototype.neq = LongPrototype.notEquals;
        LongPrototype.lessThan = function lessThan(other) {
          return this.comp(other) < 0;
        };
        LongPrototype.lt = LongPrototype.lessThan;
        LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {
          return this.comp(other) <= 0;
        };
        LongPrototype.lte = LongPrototype.lessThanOrEqual;
        LongPrototype.greaterThan = function greaterThan(other) {
          return this.comp(other) > 0;
        };
        LongPrototype.gt = LongPrototype.greaterThan;
        LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {
          return this.comp(other) >= 0;
        };
        LongPrototype.gte = LongPrototype.greaterThanOrEqual;
        LongPrototype.compare = function compare(other) {
          if (!isLong(other))
            other = fromValue(other);
          if (this.eq(other))
            return 0;
          var thisNeg = this.isNegative(), otherNeg = other.isNegative();
          if (thisNeg && !otherNeg)
            return -1;
          if (!thisNeg && otherNeg)
            return 1;
          if (!this.unsigned)
            return this.sub(other).isNegative() ? -1 : 1;
          return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;
        };
        LongPrototype.comp = LongPrototype.compare;
        LongPrototype.negate = function negate() {
          if (!this.unsigned && this.eq(MIN_VALUE))
            return MIN_VALUE;
          return this.not().add(ONE);
        };
        LongPrototype.neg = LongPrototype.negate;
        LongPrototype.add = function add(addend) {
          if (!isLong(addend))
            addend = fromValue(addend);
          var a48 = this.high >>> 16;
          var a32 = this.high & 65535;
          var a16 = this.low >>> 16;
          var a00 = this.low & 65535;
          var b48 = addend.high >>> 16;
          var b32 = addend.high & 65535;
          var b16 = addend.low >>> 16;
          var b00 = addend.low & 65535;
          var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
          c00 += a00 + b00;
          c16 += c00 >>> 16;
          c00 &= 65535;
          c16 += a16 + b16;
          c32 += c16 >>> 16;
          c16 &= 65535;
          c32 += a32 + b32;
          c48 += c32 >>> 16;
          c32 &= 65535;
          c48 += a48 + b48;
          c48 &= 65535;
          return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
        };
        LongPrototype.subtract = function subtract(subtrahend) {
          if (!isLong(subtrahend))
            subtrahend = fromValue(subtrahend);
          return this.add(subtrahend.neg());
        };
        LongPrototype.sub = LongPrototype.subtract;
        LongPrototype.multiply = function multiply(multiplier) {
          if (this.isZero())
            return ZERO;
          if (!isLong(multiplier))
            multiplier = fromValue(multiplier);
          if (multiplier.isZero())
            return ZERO;
          if (this.eq(MIN_VALUE))
            return multiplier.isOdd() ? MIN_VALUE : ZERO;
          if (multiplier.eq(MIN_VALUE))
            return this.isOdd() ? MIN_VALUE : ZERO;
          if (this.isNegative()) {
            if (multiplier.isNegative())
              return this.neg().mul(multiplier.neg());
            else
              return this.neg().mul(multiplier).neg();
          } else if (multiplier.isNegative())
            return this.mul(multiplier.neg()).neg();
          if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))
            return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);
          var a48 = this.high >>> 16;
          var a32 = this.high & 65535;
          var a16 = this.low >>> 16;
          var a00 = this.low & 65535;
          var b48 = multiplier.high >>> 16;
          var b32 = multiplier.high & 65535;
          var b16 = multiplier.low >>> 16;
          var b00 = multiplier.low & 65535;
          var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
          c00 += a00 * b00;
          c16 += c00 >>> 16;
          c00 &= 65535;
          c16 += a16 * b00;
          c32 += c16 >>> 16;
          c16 &= 65535;
          c16 += a00 * b16;
          c32 += c16 >>> 16;
          c16 &= 65535;
          c32 += a32 * b00;
          c48 += c32 >>> 16;
          c32 &= 65535;
          c32 += a16 * b16;
          c48 += c32 >>> 16;
          c32 &= 65535;
          c32 += a00 * b32;
          c48 += c32 >>> 16;
          c32 &= 65535;
          c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
          c48 &= 65535;
          return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);
        };
        LongPrototype.mul = LongPrototype.multiply;
        LongPrototype.divide = function divide(divisor) {
          if (!isLong(divisor))
            divisor = fromValue(divisor);
          if (divisor.isZero())
            throw Error("division by zero");
          if (this.isZero())
            return this.unsigned ? UZERO : ZERO;
          var approx, rem, res;
          if (!this.unsigned) {
            if (this.eq(MIN_VALUE)) {
              if (divisor.eq(ONE) || divisor.eq(NEG_ONE))
                return MIN_VALUE;
              else if (divisor.eq(MIN_VALUE))
                return ONE;
              else {
                var halfThis = this.shr(1);
                approx = halfThis.div(divisor).shl(1);
                if (approx.eq(ZERO)) {
                  return divisor.isNegative() ? ONE : NEG_ONE;
                } else {
                  rem = this.sub(divisor.mul(approx));
                  res = approx.add(rem.div(divisor));
                  return res;
                }
              }
            } else if (divisor.eq(MIN_VALUE))
              return this.unsigned ? UZERO : ZERO;
            if (this.isNegative()) {
              if (divisor.isNegative())
                return this.neg().div(divisor.neg());
              return this.neg().div(divisor).neg();
            } else if (divisor.isNegative())
              return this.div(divisor.neg()).neg();
            res = ZERO;
          } else {
            if (!divisor.unsigned)
              divisor = divisor.toUnsigned();
            if (divisor.gt(this))
              return UZERO;
            if (divisor.gt(this.shru(1)))
              return UONE;
            res = UZERO;
          }
          rem = this;
          while (rem.gte(divisor)) {
            approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));
            var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48), approxRes = fromNumber(approx), approxRem = approxRes.mul(divisor);
            while (approxRem.isNegative() || approxRem.gt(rem)) {
              approx -= delta;
              approxRes = fromNumber(approx, this.unsigned);
              approxRem = approxRes.mul(divisor);
            }
            if (approxRes.isZero())
              approxRes = ONE;
            res = res.add(approxRes);
            rem = rem.sub(approxRem);
          }
          return res;
        };
        LongPrototype.div = LongPrototype.divide;
        LongPrototype.modulo = function modulo(divisor) {
          if (!isLong(divisor))
            divisor = fromValue(divisor);
          return this.sub(this.div(divisor).mul(divisor));
        };
        LongPrototype.mod = LongPrototype.modulo;
        LongPrototype.not = function not() {
          return fromBits(~this.low, ~this.high, this.unsigned);
        };
        LongPrototype.and = function and(other) {
          if (!isLong(other))
            other = fromValue(other);
          return fromBits(this.low & other.low, this.high & other.high, this.unsigned);
        };
        LongPrototype.or = function or(other) {
          if (!isLong(other))
            other = fromValue(other);
          return fromBits(this.low | other.low, this.high | other.high, this.unsigned);
        };
        LongPrototype.xor = function xor(other) {
          if (!isLong(other))
            other = fromValue(other);
          return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);
        };
        LongPrototype.shiftLeft = function shiftLeft(numBits) {
          if (isLong(numBits))
            numBits = numBits.toInt();
          if ((numBits &= 63) === 0)
            return this;
          else if (numBits < 32)
            return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);
          else
            return fromBits(0, this.low << numBits - 32, this.unsigned);
        };
        LongPrototype.shl = LongPrototype.shiftLeft;
        LongPrototype.shiftRight = function shiftRight(numBits) {
          if (isLong(numBits))
            numBits = numBits.toInt();
          if ((numBits &= 63) === 0)
            return this;
          else if (numBits < 32)
            return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);
          else
            return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);
        };
        LongPrototype.shr = LongPrototype.shiftRight;
        LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {
          if (isLong(numBits))
            numBits = numBits.toInt();
          numBits &= 63;
          if (numBits === 0)
            return this;
          else {
            var high = this.high;
            if (numBits < 32) {
              var low = this.low;
              return fromBits(low >>> numBits | high << 32 - numBits, high >>> numBits, this.unsigned);
            } else if (numBits === 32)
              return fromBits(high, 0, this.unsigned);
            else
              return fromBits(high >>> numBits - 32, 0, this.unsigned);
          }
        };
        LongPrototype.shru = LongPrototype.shiftRightUnsigned;
        LongPrototype.toSigned = function toSigned() {
          if (!this.unsigned)
            return this;
          return fromBits(this.low, this.high, false);
        };
        LongPrototype.toUnsigned = function toUnsigned() {
          if (this.unsigned)
            return this;
          return fromBits(this.low, this.high, true);
        };
        LongPrototype.toBytes = function(le) {
          return le ? this.toBytesLE() : this.toBytesBE();
        };
        LongPrototype.toBytesLE = function() {
          var hi = this.high, lo = this.low;
          return [
            lo & 255,
            lo >>> 8 & 255,
            lo >>> 16 & 255,
            lo >>> 24 & 255,
            hi & 255,
            hi >>> 8 & 255,
            hi >>> 16 & 255,
            hi >>> 24 & 255
          ];
        };
        LongPrototype.toBytesBE = function() {
          var hi = this.high, lo = this.low;
          return [
            hi >>> 24 & 255,
            hi >>> 16 & 255,
            hi >>> 8 & 255,
            hi & 255,
            lo >>> 24 & 255,
            lo >>> 16 & 255,
            lo >>> 8 & 255,
            lo & 255
          ];
        };
        return Long;
      });
    }
  });

  // node_modules/bytebuffer/dist/bytebuffer.js
  var require_bytebuffer = __commonJS({
    "node_modules/bytebuffer/dist/bytebuffer.js"(exports2, module2) {
      (function(global2, factory) {
        if (typeof define === "function" && define["amd"])
          define(["long"], factory);
        else if (typeof __require === "function" && typeof module2 === "object" && module2 && module2["exports"])
          module2["exports"] = function() {
            var Long;
            try {
              Long = require_long();
            } catch (e) {
            }
            return factory(Long);
          }();
        else
          (global2["dcodeIO"] = global2["dcodeIO"] || {})["ByteBuffer"] = factory(global2["dcodeIO"]["Long"]);
      })(exports2, function(Long) {
        "use strict";
        var ByteBuffer = function(capacity, littleEndian, noAssert) {
          if (typeof capacity === "undefined")
            capacity = ByteBuffer.DEFAULT_CAPACITY;
          if (typeof littleEndian === "undefined")
            littleEndian = ByteBuffer.DEFAULT_ENDIAN;
          if (typeof noAssert === "undefined")
            noAssert = ByteBuffer.DEFAULT_NOASSERT;
          if (!noAssert) {
            capacity = capacity | 0;
            if (capacity < 0)
              throw RangeError("Illegal capacity");
            littleEndian = !!littleEndian;
            noAssert = !!noAssert;
          }
          this.buffer = capacity === 0 ? EMPTY_BUFFER : new ArrayBuffer(capacity);
          this.view = capacity === 0 ? null : new Uint8Array(this.buffer);
          this.offset = 0;
          this.markedOffset = -1;
          this.limit = capacity;
          this.littleEndian = littleEndian;
          this.noAssert = noAssert;
        };
        ByteBuffer.VERSION = "5.0.1";
        ByteBuffer.LITTLE_ENDIAN = true;
        ByteBuffer.BIG_ENDIAN = false;
        ByteBuffer.DEFAULT_CAPACITY = 16;
        ByteBuffer.DEFAULT_ENDIAN = ByteBuffer.BIG_ENDIAN;
        ByteBuffer.DEFAULT_NOASSERT = false;
        ByteBuffer.Long = Long || null;
        var ByteBufferPrototype = ByteBuffer.prototype;
        ByteBufferPrototype.__isByteBuffer__;
        Object.defineProperty(ByteBufferPrototype, "__isByteBuffer__", {
          value: true,
          enumerable: false,
          configurable: false
        });
        var EMPTY_BUFFER = new ArrayBuffer(0);
        var stringFromCharCode = String.fromCharCode;
        function stringSource(s) {
          var i = 0;
          return function() {
            return i < s.length ? s.charCodeAt(i++) : null;
          };
        }
        function stringDestination() {
          var cs2 = [], ps = [];
          return function() {
            if (arguments.length === 0)
              return ps.join("") + stringFromCharCode.apply(String, cs2);
            if (cs2.length + arguments.length > 1024)
              ps.push(stringFromCharCode.apply(String, cs2)), cs2.length = 0;
            Array.prototype.push.apply(cs2, arguments);
          };
        }
        ByteBuffer.accessor = function() {
          return Uint8Array;
        };
        ByteBuffer.allocate = function(capacity, littleEndian, noAssert) {
          return new ByteBuffer(capacity, littleEndian, noAssert);
        };
        ByteBuffer.concat = function(buffers, encoding, littleEndian, noAssert) {
          if (typeof encoding === "boolean" || typeof encoding !== "string") {
            noAssert = littleEndian;
            littleEndian = encoding;
            encoding = void 0;
          }
          var capacity = 0;
          for (var i = 0, k = buffers.length, length; i < k; ++i) {
            if (!ByteBuffer.isByteBuffer(buffers[i]))
              buffers[i] = ByteBuffer.wrap(buffers[i], encoding);
            length = buffers[i].limit - buffers[i].offset;
            if (length > 0)
              capacity += length;
          }
          if (capacity === 0)
            return new ByteBuffer(0, littleEndian, noAssert);
          var bb = new ByteBuffer(capacity, littleEndian, noAssert), bi;
          i = 0;
          while (i < k) {
            bi = buffers[i++];
            length = bi.limit - bi.offset;
            if (length <= 0)
              continue;
            bb.view.set(bi.view.subarray(bi.offset, bi.limit), bb.offset);
            bb.offset += length;
          }
          bb.limit = bb.offset;
          bb.offset = 0;
          return bb;
        };
        ByteBuffer.isByteBuffer = function(bb) {
          return (bb && bb["__isByteBuffer__"]) === true;
        };
        ByteBuffer.type = function() {
          return ArrayBuffer;
        };
        ByteBuffer.wrap = function(buffer, encoding, littleEndian, noAssert) {
          if (typeof encoding !== "string") {
            noAssert = littleEndian;
            littleEndian = encoding;
            encoding = void 0;
          }
          if (typeof buffer === "string") {
            if (typeof encoding === "undefined")
              encoding = "utf8";
            switch (encoding) {
              case "base64":
                return ByteBuffer.fromBase64(buffer, littleEndian);
              case "hex":
                return ByteBuffer.fromHex(buffer, littleEndian);
              case "binary":
                return ByteBuffer.fromBinary(buffer, littleEndian);
              case "utf8":
                return ByteBuffer.fromUTF8(buffer, littleEndian);
              case "debug":
                return ByteBuffer.fromDebug(buffer, littleEndian);
              default:
                throw Error("Unsupported encoding: " + encoding);
            }
          }
          if (buffer === null || typeof buffer !== "object")
            throw TypeError("Illegal buffer");
          var bb;
          if (ByteBuffer.isByteBuffer(buffer)) {
            bb = ByteBufferPrototype.clone.call(buffer);
            bb.markedOffset = -1;
            return bb;
          }
          if (buffer instanceof Uint8Array) {
            bb = new ByteBuffer(0, littleEndian, noAssert);
            if (buffer.length > 0) {
              bb.buffer = buffer.buffer;
              bb.offset = buffer.byteOffset;
              bb.limit = buffer.byteOffset + buffer.byteLength;
              bb.view = new Uint8Array(buffer.buffer);
            }
          } else if (buffer instanceof ArrayBuffer) {
            bb = new ByteBuffer(0, littleEndian, noAssert);
            if (buffer.byteLength > 0) {
              bb.buffer = buffer;
              bb.offset = 0;
              bb.limit = buffer.byteLength;
              bb.view = buffer.byteLength > 0 ? new Uint8Array(buffer) : null;
            }
          } else if (Object.prototype.toString.call(buffer) === "[object Array]") {
            bb = new ByteBuffer(buffer.length, littleEndian, noAssert);
            bb.limit = buffer.length;
            for (var i = 0; i < buffer.length; ++i)
              bb.view[i] = buffer[i];
          } else
            throw TypeError("Illegal buffer");
          return bb;
        };
        ByteBufferPrototype.writeBitSet = function(value, offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (!(value instanceof Array))
              throw TypeError("Illegal BitSet: Not an array");
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
          }
          var start = offset, bits = value.length, bytes = bits >> 3, bit = 0, k;
          offset += this.writeVarint32(bits, offset);
          while (bytes--) {
            k = !!value[bit++] & 1 | (!!value[bit++] & 1) << 1 | (!!value[bit++] & 1) << 2 | (!!value[bit++] & 1) << 3 | (!!value[bit++] & 1) << 4 | (!!value[bit++] & 1) << 5 | (!!value[bit++] & 1) << 6 | (!!value[bit++] & 1) << 7;
            this.writeByte(k, offset++);
          }
          if (bit < bits) {
            var m = 0;
            k = 0;
            while (bit < bits)
              k = k | (!!value[bit++] & 1) << m++;
            this.writeByte(k, offset++);
          }
          if (relative) {
            this.offset = offset;
            return this;
          }
          return offset - start;
        };
        ByteBufferPrototype.readBitSet = function(offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          var ret = this.readVarint32(offset), bits = ret.value, bytes = bits >> 3, bit = 0, value = [], k;
          offset += ret.length;
          while (bytes--) {
            k = this.readByte(offset++);
            value[bit++] = !!(k & 1);
            value[bit++] = !!(k & 2);
            value[bit++] = !!(k & 4);
            value[bit++] = !!(k & 8);
            value[bit++] = !!(k & 16);
            value[bit++] = !!(k & 32);
            value[bit++] = !!(k & 64);
            value[bit++] = !!(k & 128);
          }
          if (bit < bits) {
            var m = 0;
            k = this.readByte(offset++);
            while (bit < bits)
              value[bit++] = !!(k >> m++ & 1);
          }
          if (relative) {
            this.offset = offset;
          }
          return value;
        };
        ByteBufferPrototype.readBytes = function(length, offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + length > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + length + ") <= " + this.buffer.byteLength);
          }
          var slice = this.slice(offset, offset + length);
          if (relative)
            this.offset += length;
          return slice;
        };
        ByteBufferPrototype.writeBytes = ByteBufferPrototype.append;
        ByteBufferPrototype.writeInt8 = function(value, offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof value !== "number" || value % 1 !== 0)
              throw TypeError("Illegal value: " + value + " (not an integer)");
            value |= 0;
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
          }
          offset += 1;
          var capacity0 = this.buffer.byteLength;
          if (offset > capacity0)
            this.resize((capacity0 *= 2) > offset ? capacity0 : offset);
          offset -= 1;
          this.view[offset] = value;
          if (relative)
            this.offset += 1;
          return this;
        };
        ByteBufferPrototype.writeByte = ByteBufferPrototype.writeInt8;
        ByteBufferPrototype.readInt8 = function(offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 1 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 1 + ") <= " + this.buffer.byteLength);
          }
          var value = this.view[offset];
          if ((value & 128) === 128)
            value = -(255 - value + 1);
          if (relative)
            this.offset += 1;
          return value;
        };
        ByteBufferPrototype.readByte = ByteBufferPrototype.readInt8;
        ByteBufferPrototype.writeUint8 = function(value, offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof value !== "number" || value % 1 !== 0)
              throw TypeError("Illegal value: " + value + " (not an integer)");
            value >>>= 0;
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
          }
          offset += 1;
          var capacity1 = this.buffer.byteLength;
          if (offset > capacity1)
            this.resize((capacity1 *= 2) > offset ? capacity1 : offset);
          offset -= 1;
          this.view[offset] = value;
          if (relative)
            this.offset += 1;
          return this;
        };
        ByteBufferPrototype.writeUInt8 = ByteBufferPrototype.writeUint8;
        ByteBufferPrototype.readUint8 = function(offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 1 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 1 + ") <= " + this.buffer.byteLength);
          }
          var value = this.view[offset];
          if (relative)
            this.offset += 1;
          return value;
        };
        ByteBufferPrototype.readUInt8 = ByteBufferPrototype.readUint8;
        ByteBufferPrototype.writeInt16 = function(value, offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof value !== "number" || value % 1 !== 0)
              throw TypeError("Illegal value: " + value + " (not an integer)");
            value |= 0;
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
          }
          offset += 2;
          var capacity2 = this.buffer.byteLength;
          if (offset > capacity2)
            this.resize((capacity2 *= 2) > offset ? capacity2 : offset);
          offset -= 2;
          if (this.littleEndian) {
            this.view[offset + 1] = (value & 65280) >>> 8;
            this.view[offset] = value & 255;
          } else {
            this.view[offset] = (value & 65280) >>> 8;
            this.view[offset + 1] = value & 255;
          }
          if (relative)
            this.offset += 2;
          return this;
        };
        ByteBufferPrototype.writeShort = ByteBufferPrototype.writeInt16;
        ByteBufferPrototype.readInt16 = function(offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 2 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 2 + ") <= " + this.buffer.byteLength);
          }
          var value = 0;
          if (this.littleEndian) {
            value = this.view[offset];
            value |= this.view[offset + 1] << 8;
          } else {
            value = this.view[offset] << 8;
            value |= this.view[offset + 1];
          }
          if ((value & 32768) === 32768)
            value = -(65535 - value + 1);
          if (relative)
            this.offset += 2;
          return value;
        };
        ByteBufferPrototype.readShort = ByteBufferPrototype.readInt16;
        ByteBufferPrototype.writeUint16 = function(value, offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof value !== "number" || value % 1 !== 0)
              throw TypeError("Illegal value: " + value + " (not an integer)");
            value >>>= 0;
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
          }
          offset += 2;
          var capacity3 = this.buffer.byteLength;
          if (offset > capacity3)
            this.resize((capacity3 *= 2) > offset ? capacity3 : offset);
          offset -= 2;
          if (this.littleEndian) {
            this.view[offset + 1] = (value & 65280) >>> 8;
            this.view[offset] = value & 255;
          } else {
            this.view[offset] = (value & 65280) >>> 8;
            this.view[offset + 1] = value & 255;
          }
          if (relative)
            this.offset += 2;
          return this;
        };
        ByteBufferPrototype.writeUInt16 = ByteBufferPrototype.writeUint16;
        ByteBufferPrototype.readUint16 = function(offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 2 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 2 + ") <= " + this.buffer.byteLength);
          }
          var value = 0;
          if (this.littleEndian) {
            value = this.view[offset];
            value |= this.view[offset + 1] << 8;
          } else {
            value = this.view[offset] << 8;
            value |= this.view[offset + 1];
          }
          if (relative)
            this.offset += 2;
          return value;
        };
        ByteBufferPrototype.readUInt16 = ByteBufferPrototype.readUint16;
        ByteBufferPrototype.writeInt32 = function(value, offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof value !== "number" || value % 1 !== 0)
              throw TypeError("Illegal value: " + value + " (not an integer)");
            value |= 0;
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
          }
          offset += 4;
          var capacity4 = this.buffer.byteLength;
          if (offset > capacity4)
            this.resize((capacity4 *= 2) > offset ? capacity4 : offset);
          offset -= 4;
          if (this.littleEndian) {
            this.view[offset + 3] = value >>> 24 & 255;
            this.view[offset + 2] = value >>> 16 & 255;
            this.view[offset + 1] = value >>> 8 & 255;
            this.view[offset] = value & 255;
          } else {
            this.view[offset] = value >>> 24 & 255;
            this.view[offset + 1] = value >>> 16 & 255;
            this.view[offset + 2] = value >>> 8 & 255;
            this.view[offset + 3] = value & 255;
          }
          if (relative)
            this.offset += 4;
          return this;
        };
        ByteBufferPrototype.writeInt = ByteBufferPrototype.writeInt32;
        ByteBufferPrototype.readInt32 = function(offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 4 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 4 + ") <= " + this.buffer.byteLength);
          }
          var value = 0;
          if (this.littleEndian) {
            value = this.view[offset + 2] << 16;
            value |= this.view[offset + 1] << 8;
            value |= this.view[offset];
            value += this.view[offset + 3] << 24 >>> 0;
          } else {
            value = this.view[offset + 1] << 16;
            value |= this.view[offset + 2] << 8;
            value |= this.view[offset + 3];
            value += this.view[offset] << 24 >>> 0;
          }
          value |= 0;
          if (relative)
            this.offset += 4;
          return value;
        };
        ByteBufferPrototype.readInt = ByteBufferPrototype.readInt32;
        ByteBufferPrototype.writeUint32 = function(value, offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof value !== "number" || value % 1 !== 0)
              throw TypeError("Illegal value: " + value + " (not an integer)");
            value >>>= 0;
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
          }
          offset += 4;
          var capacity5 = this.buffer.byteLength;
          if (offset > capacity5)
            this.resize((capacity5 *= 2) > offset ? capacity5 : offset);
          offset -= 4;
          if (this.littleEndian) {
            this.view[offset + 3] = value >>> 24 & 255;
            this.view[offset + 2] = value >>> 16 & 255;
            this.view[offset + 1] = value >>> 8 & 255;
            this.view[offset] = value & 255;
          } else {
            this.view[offset] = value >>> 24 & 255;
            this.view[offset + 1] = value >>> 16 & 255;
            this.view[offset + 2] = value >>> 8 & 255;
            this.view[offset + 3] = value & 255;
          }
          if (relative)
            this.offset += 4;
          return this;
        };
        ByteBufferPrototype.writeUInt32 = ByteBufferPrototype.writeUint32;
        ByteBufferPrototype.readUint32 = function(offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 4 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 4 + ") <= " + this.buffer.byteLength);
          }
          var value = 0;
          if (this.littleEndian) {
            value = this.view[offset + 2] << 16;
            value |= this.view[offset + 1] << 8;
            value |= this.view[offset];
            value += this.view[offset + 3] << 24 >>> 0;
          } else {
            value = this.view[offset + 1] << 16;
            value |= this.view[offset + 2] << 8;
            value |= this.view[offset + 3];
            value += this.view[offset] << 24 >>> 0;
          }
          if (relative)
            this.offset += 4;
          return value;
        };
        ByteBufferPrototype.readUInt32 = ByteBufferPrototype.readUint32;
        if (Long) {
          ByteBufferPrototype.writeInt64 = function(value, offset) {
            var relative = typeof offset === "undefined";
            if (relative)
              offset = this.offset;
            if (!this.noAssert) {
              if (typeof value === "number")
                value = Long.fromNumber(value);
              else if (typeof value === "string")
                value = Long.fromString(value);
              else if (!(value && value instanceof Long))
                throw TypeError("Illegal value: " + value + " (not an integer or Long)");
              if (typeof offset !== "number" || offset % 1 !== 0)
                throw TypeError("Illegal offset: " + offset + " (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
            }
            if (typeof value === "number")
              value = Long.fromNumber(value);
            else if (typeof value === "string")
              value = Long.fromString(value);
            offset += 8;
            var capacity6 = this.buffer.byteLength;
            if (offset > capacity6)
              this.resize((capacity6 *= 2) > offset ? capacity6 : offset);
            offset -= 8;
            var lo = value.low, hi = value.high;
            if (this.littleEndian) {
              this.view[offset + 3] = lo >>> 24 & 255;
              this.view[offset + 2] = lo >>> 16 & 255;
              this.view[offset + 1] = lo >>> 8 & 255;
              this.view[offset] = lo & 255;
              offset += 4;
              this.view[offset + 3] = hi >>> 24 & 255;
              this.view[offset + 2] = hi >>> 16 & 255;
              this.view[offset + 1] = hi >>> 8 & 255;
              this.view[offset] = hi & 255;
            } else {
              this.view[offset] = hi >>> 24 & 255;
              this.view[offset + 1] = hi >>> 16 & 255;
              this.view[offset + 2] = hi >>> 8 & 255;
              this.view[offset + 3] = hi & 255;
              offset += 4;
              this.view[offset] = lo >>> 24 & 255;
              this.view[offset + 1] = lo >>> 16 & 255;
              this.view[offset + 2] = lo >>> 8 & 255;
              this.view[offset + 3] = lo & 255;
            }
            if (relative)
              this.offset += 8;
            return this;
          };
          ByteBufferPrototype.writeLong = ByteBufferPrototype.writeInt64;
          ByteBufferPrototype.readInt64 = function(offset) {
            var relative = typeof offset === "undefined";
            if (relative)
              offset = this.offset;
            if (!this.noAssert) {
              if (typeof offset !== "number" || offset % 1 !== 0)
                throw TypeError("Illegal offset: " + offset + " (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 8 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 8 + ") <= " + this.buffer.byteLength);
            }
            var lo = 0, hi = 0;
            if (this.littleEndian) {
              lo = this.view[offset + 2] << 16;
              lo |= this.view[offset + 1] << 8;
              lo |= this.view[offset];
              lo += this.view[offset + 3] << 24 >>> 0;
              offset += 4;
              hi = this.view[offset + 2] << 16;
              hi |= this.view[offset + 1] << 8;
              hi |= this.view[offset];
              hi += this.view[offset + 3] << 24 >>> 0;
            } else {
              hi = this.view[offset + 1] << 16;
              hi |= this.view[offset + 2] << 8;
              hi |= this.view[offset + 3];
              hi += this.view[offset] << 24 >>> 0;
              offset += 4;
              lo = this.view[offset + 1] << 16;
              lo |= this.view[offset + 2] << 8;
              lo |= this.view[offset + 3];
              lo += this.view[offset] << 24 >>> 0;
            }
            var value = new Long(lo, hi, false);
            if (relative)
              this.offset += 8;
            return value;
          };
          ByteBufferPrototype.readLong = ByteBufferPrototype.readInt64;
          ByteBufferPrototype.writeUint64 = function(value, offset) {
            var relative = typeof offset === "undefined";
            if (relative)
              offset = this.offset;
            if (!this.noAssert) {
              if (typeof value === "number")
                value = Long.fromNumber(value);
              else if (typeof value === "string")
                value = Long.fromString(value);
              else if (!(value && value instanceof Long))
                throw TypeError("Illegal value: " + value + " (not an integer or Long)");
              if (typeof offset !== "number" || offset % 1 !== 0)
                throw TypeError("Illegal offset: " + offset + " (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
            }
            if (typeof value === "number")
              value = Long.fromNumber(value);
            else if (typeof value === "string")
              value = Long.fromString(value);
            offset += 8;
            var capacity7 = this.buffer.byteLength;
            if (offset > capacity7)
              this.resize((capacity7 *= 2) > offset ? capacity7 : offset);
            offset -= 8;
            var lo = value.low, hi = value.high;
            if (this.littleEndian) {
              this.view[offset + 3] = lo >>> 24 & 255;
              this.view[offset + 2] = lo >>> 16 & 255;
              this.view[offset + 1] = lo >>> 8 & 255;
              this.view[offset] = lo & 255;
              offset += 4;
              this.view[offset + 3] = hi >>> 24 & 255;
              this.view[offset + 2] = hi >>> 16 & 255;
              this.view[offset + 1] = hi >>> 8 & 255;
              this.view[offset] = hi & 255;
            } else {
              this.view[offset] = hi >>> 24 & 255;
              this.view[offset + 1] = hi >>> 16 & 255;
              this.view[offset + 2] = hi >>> 8 & 255;
              this.view[offset + 3] = hi & 255;
              offset += 4;
              this.view[offset] = lo >>> 24 & 255;
              this.view[offset + 1] = lo >>> 16 & 255;
              this.view[offset + 2] = lo >>> 8 & 255;
              this.view[offset + 3] = lo & 255;
            }
            if (relative)
              this.offset += 8;
            return this;
          };
          ByteBufferPrototype.writeUInt64 = ByteBufferPrototype.writeUint64;
          ByteBufferPrototype.readUint64 = function(offset) {
            var relative = typeof offset === "undefined";
            if (relative)
              offset = this.offset;
            if (!this.noAssert) {
              if (typeof offset !== "number" || offset % 1 !== 0)
                throw TypeError("Illegal offset: " + offset + " (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 8 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 8 + ") <= " + this.buffer.byteLength);
            }
            var lo = 0, hi = 0;
            if (this.littleEndian) {
              lo = this.view[offset + 2] << 16;
              lo |= this.view[offset + 1] << 8;
              lo |= this.view[offset];
              lo += this.view[offset + 3] << 24 >>> 0;
              offset += 4;
              hi = this.view[offset + 2] << 16;
              hi |= this.view[offset + 1] << 8;
              hi |= this.view[offset];
              hi += this.view[offset + 3] << 24 >>> 0;
            } else {
              hi = this.view[offset + 1] << 16;
              hi |= this.view[offset + 2] << 8;
              hi |= this.view[offset + 3];
              hi += this.view[offset] << 24 >>> 0;
              offset += 4;
              lo = this.view[offset + 1] << 16;
              lo |= this.view[offset + 2] << 8;
              lo |= this.view[offset + 3];
              lo += this.view[offset] << 24 >>> 0;
            }
            var value = new Long(lo, hi, true);
            if (relative)
              this.offset += 8;
            return value;
          };
          ByteBufferPrototype.readUInt64 = ByteBufferPrototype.readUint64;
        }
        function ieee754_read(buffer, offset, isLE, mLen, nBytes) {
          var e, m, eLen = nBytes * 8 - mLen - 1, eMax = (1 << eLen) - 1, eBias = eMax >> 1, nBits = -7, i = isLE ? nBytes - 1 : 0, d = isLE ? -1 : 1, s = buffer[offset + i];
          i += d;
          e = s & (1 << -nBits) - 1;
          s >>= -nBits;
          nBits += eLen;
          for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
          }
          m = e & (1 << -nBits) - 1;
          e >>= -nBits;
          nBits += mLen;
          for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
          }
          if (e === 0) {
            e = 1 - eBias;
          } else if (e === eMax) {
            return m ? NaN : (s ? -1 : 1) * Infinity;
          } else {
            m = m + Math.pow(2, mLen);
            e = e - eBias;
          }
          return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
        }
        function ieee754_write(buffer, value, offset, isLE, mLen, nBytes) {
          var e, m, c, eLen = nBytes * 8 - mLen - 1, eMax = (1 << eLen) - 1, eBias = eMax >> 1, rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, i = isLE ? 0 : nBytes - 1, d = isLE ? 1 : -1, s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
          value = Math.abs(value);
          if (isNaN(value) || value === Infinity) {
            m = isNaN(value) ? 1 : 0;
            e = eMax;
          } else {
            e = Math.floor(Math.log(value) / Math.LN2);
            if (value * (c = Math.pow(2, -e)) < 1) {
              e--;
              c *= 2;
            }
            if (e + eBias >= 1) {
              value += rt / c;
            } else {
              value += rt * Math.pow(2, 1 - eBias);
            }
            if (value * c >= 2) {
              e++;
              c /= 2;
            }
            if (e + eBias >= eMax) {
              m = 0;
              e = eMax;
            } else if (e + eBias >= 1) {
              m = (value * c - 1) * Math.pow(2, mLen);
              e = e + eBias;
            } else {
              m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
              e = 0;
            }
          }
          for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
          }
          e = e << mLen | m;
          eLen += mLen;
          for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
          }
          buffer[offset + i - d] |= s * 128;
        }
        ByteBufferPrototype.writeFloat32 = function(value, offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof value !== "number")
              throw TypeError("Illegal value: " + value + " (not a number)");
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
          }
          offset += 4;
          var capacity8 = this.buffer.byteLength;
          if (offset > capacity8)
            this.resize((capacity8 *= 2) > offset ? capacity8 : offset);
          offset -= 4;
          ieee754_write(this.view, value, offset, this.littleEndian, 23, 4);
          if (relative)
            this.offset += 4;
          return this;
        };
        ByteBufferPrototype.writeFloat = ByteBufferPrototype.writeFloat32;
        ByteBufferPrototype.readFloat32 = function(offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 4 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 4 + ") <= " + this.buffer.byteLength);
          }
          var value = ieee754_read(this.view, offset, this.littleEndian, 23, 4);
          if (relative)
            this.offset += 4;
          return value;
        };
        ByteBufferPrototype.readFloat = ByteBufferPrototype.readFloat32;
        ByteBufferPrototype.writeFloat64 = function(value, offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof value !== "number")
              throw TypeError("Illegal value: " + value + " (not a number)");
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
          }
          offset += 8;
          var capacity9 = this.buffer.byteLength;
          if (offset > capacity9)
            this.resize((capacity9 *= 2) > offset ? capacity9 : offset);
          offset -= 8;
          ieee754_write(this.view, value, offset, this.littleEndian, 52, 8);
          if (relative)
            this.offset += 8;
          return this;
        };
        ByteBufferPrototype.writeDouble = ByteBufferPrototype.writeFloat64;
        ByteBufferPrototype.readFloat64 = function(offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 8 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 8 + ") <= " + this.buffer.byteLength);
          }
          var value = ieee754_read(this.view, offset, this.littleEndian, 52, 8);
          if (relative)
            this.offset += 8;
          return value;
        };
        ByteBufferPrototype.readDouble = ByteBufferPrototype.readFloat64;
        ByteBuffer.MAX_VARINT32_BYTES = 5;
        ByteBuffer.calculateVarint32 = function(value) {
          value = value >>> 0;
          if (value < 1 << 7)
            return 1;
          else if (value < 1 << 14)
            return 2;
          else if (value < 1 << 21)
            return 3;
          else if (value < 1 << 28)
            return 4;
          else
            return 5;
        };
        ByteBuffer.zigZagEncode32 = function(n) {
          return ((n |= 0) << 1 ^ n >> 31) >>> 0;
        };
        ByteBuffer.zigZagDecode32 = function(n) {
          return n >>> 1 ^ -(n & 1) | 0;
        };
        ByteBufferPrototype.writeVarint32 = function(value, offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof value !== "number" || value % 1 !== 0)
              throw TypeError("Illegal value: " + value + " (not an integer)");
            value |= 0;
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
          }
          var size = ByteBuffer.calculateVarint32(value), b;
          offset += size;
          var capacity10 = this.buffer.byteLength;
          if (offset > capacity10)
            this.resize((capacity10 *= 2) > offset ? capacity10 : offset);
          offset -= size;
          value >>>= 0;
          while (value >= 128) {
            b = value & 127 | 128;
            this.view[offset++] = b;
            value >>>= 7;
          }
          this.view[offset++] = value;
          if (relative) {
            this.offset = offset;
            return this;
          }
          return size;
        };
        ByteBufferPrototype.writeVarint32ZigZag = function(value, offset) {
          return this.writeVarint32(ByteBuffer.zigZagEncode32(value), offset);
        };
        ByteBufferPrototype.readVarint32 = function(offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 1 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 1 + ") <= " + this.buffer.byteLength);
          }
          var c = 0, value = 0 >>> 0, b;
          do {
            if (!this.noAssert && offset > this.limit) {
              var err = Error("Truncated");
              err["truncated"] = true;
              throw err;
            }
            b = this.view[offset++];
            if (c < 5)
              value |= (b & 127) << 7 * c;
            ++c;
          } while ((b & 128) !== 0);
          value |= 0;
          if (relative) {
            this.offset = offset;
            return value;
          }
          return {
            "value": value,
            "length": c
          };
        };
        ByteBufferPrototype.readVarint32ZigZag = function(offset) {
          var val = this.readVarint32(offset);
          if (typeof val === "object")
            val["value"] = ByteBuffer.zigZagDecode32(val["value"]);
          else
            val = ByteBuffer.zigZagDecode32(val);
          return val;
        };
        if (Long) {
          ByteBuffer.MAX_VARINT64_BYTES = 10;
          ByteBuffer.calculateVarint64 = function(value) {
            if (typeof value === "number")
              value = Long.fromNumber(value);
            else if (typeof value === "string")
              value = Long.fromString(value);
            var part0 = value.toInt() >>> 0, part1 = value.shiftRightUnsigned(28).toInt() >>> 0, part2 = value.shiftRightUnsigned(56).toInt() >>> 0;
            if (part2 == 0) {
              if (part1 == 0) {
                if (part0 < 1 << 14)
                  return part0 < 1 << 7 ? 1 : 2;
                else
                  return part0 < 1 << 21 ? 3 : 4;
              } else {
                if (part1 < 1 << 14)
                  return part1 < 1 << 7 ? 5 : 6;
                else
                  return part1 < 1 << 21 ? 7 : 8;
              }
            } else
              return part2 < 1 << 7 ? 9 : 10;
          };
          ByteBuffer.zigZagEncode64 = function(value) {
            if (typeof value === "number")
              value = Long.fromNumber(value, false);
            else if (typeof value === "string")
              value = Long.fromString(value, false);
            else if (value.unsigned !== false)
              value = value.toSigned();
            return value.shiftLeft(1).xor(value.shiftRight(63)).toUnsigned();
          };
          ByteBuffer.zigZagDecode64 = function(value) {
            if (typeof value === "number")
              value = Long.fromNumber(value, false);
            else if (typeof value === "string")
              value = Long.fromString(value, false);
            else if (value.unsigned !== false)
              value = value.toSigned();
            return value.shiftRightUnsigned(1).xor(value.and(Long.ONE).toSigned().negate()).toSigned();
          };
          ByteBufferPrototype.writeVarint64 = function(value, offset) {
            var relative = typeof offset === "undefined";
            if (relative)
              offset = this.offset;
            if (!this.noAssert) {
              if (typeof value === "number")
                value = Long.fromNumber(value);
              else if (typeof value === "string")
                value = Long.fromString(value);
              else if (!(value && value instanceof Long))
                throw TypeError("Illegal value: " + value + " (not an integer or Long)");
              if (typeof offset !== "number" || offset % 1 !== 0)
                throw TypeError("Illegal offset: " + offset + " (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 0 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
            }
            if (typeof value === "number")
              value = Long.fromNumber(value, false);
            else if (typeof value === "string")
              value = Long.fromString(value, false);
            else if (value.unsigned !== false)
              value = value.toSigned();
            var size = ByteBuffer.calculateVarint64(value), part0 = value.toInt() >>> 0, part1 = value.shiftRightUnsigned(28).toInt() >>> 0, part2 = value.shiftRightUnsigned(56).toInt() >>> 0;
            offset += size;
            var capacity11 = this.buffer.byteLength;
            if (offset > capacity11)
              this.resize((capacity11 *= 2) > offset ? capacity11 : offset);
            offset -= size;
            switch (size) {
              case 10:
                this.view[offset + 9] = part2 >>> 7 & 1;
              case 9:
                this.view[offset + 8] = size !== 9 ? part2 | 128 : part2 & 127;
              case 8:
                this.view[offset + 7] = size !== 8 ? part1 >>> 21 | 128 : part1 >>> 21 & 127;
              case 7:
                this.view[offset + 6] = size !== 7 ? part1 >>> 14 | 128 : part1 >>> 14 & 127;
              case 6:
                this.view[offset + 5] = size !== 6 ? part1 >>> 7 | 128 : part1 >>> 7 & 127;
              case 5:
                this.view[offset + 4] = size !== 5 ? part1 | 128 : part1 & 127;
              case 4:
                this.view[offset + 3] = size !== 4 ? part0 >>> 21 | 128 : part0 >>> 21 & 127;
              case 3:
                this.view[offset + 2] = size !== 3 ? part0 >>> 14 | 128 : part0 >>> 14 & 127;
              case 2:
                this.view[offset + 1] = size !== 2 ? part0 >>> 7 | 128 : part0 >>> 7 & 127;
              case 1:
                this.view[offset] = size !== 1 ? part0 | 128 : part0 & 127;
            }
            if (relative) {
              this.offset += size;
              return this;
            } else {
              return size;
            }
          };
          ByteBufferPrototype.writeVarint64ZigZag = function(value, offset) {
            return this.writeVarint64(ByteBuffer.zigZagEncode64(value), offset);
          };
          ByteBufferPrototype.readVarint64 = function(offset) {
            var relative = typeof offset === "undefined";
            if (relative)
              offset = this.offset;
            if (!this.noAssert) {
              if (typeof offset !== "number" || offset % 1 !== 0)
                throw TypeError("Illegal offset: " + offset + " (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + 1 > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 1 + ") <= " + this.buffer.byteLength);
            }
            var start = offset, part0 = 0, part1 = 0, part2 = 0, b = 0;
            b = this.view[offset++];
            part0 = b & 127;
            if (b & 128) {
              b = this.view[offset++];
              part0 |= (b & 127) << 7;
              if (b & 128 || this.noAssert && typeof b === "undefined") {
                b = this.view[offset++];
                part0 |= (b & 127) << 14;
                if (b & 128 || this.noAssert && typeof b === "undefined") {
                  b = this.view[offset++];
                  part0 |= (b & 127) << 21;
                  if (b & 128 || this.noAssert && typeof b === "undefined") {
                    b = this.view[offset++];
                    part1 = b & 127;
                    if (b & 128 || this.noAssert && typeof b === "undefined") {
                      b = this.view[offset++];
                      part1 |= (b & 127) << 7;
                      if (b & 128 || this.noAssert && typeof b === "undefined") {
                        b = this.view[offset++];
                        part1 |= (b & 127) << 14;
                        if (b & 128 || this.noAssert && typeof b === "undefined") {
                          b = this.view[offset++];
                          part1 |= (b & 127) << 21;
                          if (b & 128 || this.noAssert && typeof b === "undefined") {
                            b = this.view[offset++];
                            part2 = b & 127;
                            if (b & 128 || this.noAssert && typeof b === "undefined") {
                              b = this.view[offset++];
                              part2 |= (b & 127) << 7;
                              if (b & 128 || this.noAssert && typeof b === "undefined") {
                                throw Error("Buffer overrun");
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            var value = Long.fromBits(part0 | part1 << 28, part1 >>> 4 | part2 << 24, false);
            if (relative) {
              this.offset = offset;
              return value;
            } else {
              return {
                "value": value,
                "length": offset - start
              };
            }
          };
          ByteBufferPrototype.readVarint64ZigZag = function(offset) {
            var val = this.readVarint64(offset);
            if (val && val["value"] instanceof Long)
              val["value"] = ByteBuffer.zigZagDecode64(val["value"]);
            else
              val = ByteBuffer.zigZagDecode64(val);
            return val;
          };
        }
        ByteBufferPrototype.writeCString = function(str, offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          var i, k = str.length;
          if (!this.noAssert) {
            if (typeof str !== "string")
              throw TypeError("Illegal str: Not a string");
            for (i = 0; i < k; ++i) {
              if (str.charCodeAt(i) === 0)
                throw RangeError("Illegal str: Contains NULL-characters");
            }
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
          }
          k = utfx.calculateUTF16asUTF8(stringSource(str))[1];
          offset += k + 1;
          var capacity12 = this.buffer.byteLength;
          if (offset > capacity12)
            this.resize((capacity12 *= 2) > offset ? capacity12 : offset);
          offset -= k + 1;
          utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
            this.view[offset++] = b;
          }.bind(this));
          this.view[offset++] = 0;
          if (relative) {
            this.offset = offset;
            return this;
          }
          return k;
        };
        ByteBufferPrototype.readCString = function(offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 1 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 1 + ") <= " + this.buffer.byteLength);
          }
          var start = offset, temp;
          var sd, b = -1;
          utfx.decodeUTF8toUTF16(function() {
            if (b === 0)
              return null;
            if (offset >= this.limit)
              throw RangeError("Illegal range: Truncated data, " + offset + " < " + this.limit);
            b = this.view[offset++];
            return b === 0 ? null : b;
          }.bind(this), sd = stringDestination(), true);
          if (relative) {
            this.offset = offset;
            return sd();
          } else {
            return {
              "string": sd(),
              "length": offset - start
            };
          }
        };
        ByteBufferPrototype.writeIString = function(str, offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof str !== "string")
              throw TypeError("Illegal str: Not a string");
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
          }
          var start = offset, k;
          k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];
          offset += 4 + k;
          var capacity13 = this.buffer.byteLength;
          if (offset > capacity13)
            this.resize((capacity13 *= 2) > offset ? capacity13 : offset);
          offset -= 4 + k;
          if (this.littleEndian) {
            this.view[offset + 3] = k >>> 24 & 255;
            this.view[offset + 2] = k >>> 16 & 255;
            this.view[offset + 1] = k >>> 8 & 255;
            this.view[offset] = k & 255;
          } else {
            this.view[offset] = k >>> 24 & 255;
            this.view[offset + 1] = k >>> 16 & 255;
            this.view[offset + 2] = k >>> 8 & 255;
            this.view[offset + 3] = k & 255;
          }
          offset += 4;
          utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
            this.view[offset++] = b;
          }.bind(this));
          if (offset !== start + 4 + k)
            throw RangeError("Illegal range: Truncated data, " + offset + " == " + (offset + 4 + k));
          if (relative) {
            this.offset = offset;
            return this;
          }
          return offset - start;
        };
        ByteBufferPrototype.readIString = function(offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 4 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 4 + ") <= " + this.buffer.byteLength);
          }
          var start = offset;
          var len = this.readUint32(offset);
          var str = this.readUTF8String(len, ByteBuffer.METRICS_BYTES, offset += 4);
          offset += str["length"];
          if (relative) {
            this.offset = offset;
            return str["string"];
          } else {
            return {
              "string": str["string"],
              "length": offset - start
            };
          }
        };
        ByteBuffer.METRICS_CHARS = "c";
        ByteBuffer.METRICS_BYTES = "b";
        ByteBufferPrototype.writeUTF8String = function(str, offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
          }
          var k;
          var start = offset;
          k = utfx.calculateUTF16asUTF8(stringSource(str))[1];
          offset += k;
          var capacity14 = this.buffer.byteLength;
          if (offset > capacity14)
            this.resize((capacity14 *= 2) > offset ? capacity14 : offset);
          offset -= k;
          utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
            this.view[offset++] = b;
          }.bind(this));
          if (relative) {
            this.offset = offset;
            return this;
          }
          return offset - start;
        };
        ByteBufferPrototype.writeString = ByteBufferPrototype.writeUTF8String;
        ByteBuffer.calculateUTF8Chars = function(str) {
          return utfx.calculateUTF16asUTF8(stringSource(str))[0];
        };
        ByteBuffer.calculateUTF8Bytes = function(str) {
          return utfx.calculateUTF16asUTF8(stringSource(str))[1];
        };
        ByteBuffer.calculateString = ByteBuffer.calculateUTF8Bytes;
        ByteBufferPrototype.readUTF8String = function(length, metrics, offset) {
          if (typeof metrics === "number") {
            offset = metrics;
            metrics = void 0;
          }
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (typeof metrics === "undefined")
            metrics = ByteBuffer.METRICS_CHARS;
          if (!this.noAssert) {
            if (typeof length !== "number" || length % 1 !== 0)
              throw TypeError("Illegal length: " + length + " (not an integer)");
            length |= 0;
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
          }
          var i = 0, start = offset, sd;
          if (metrics === ByteBuffer.METRICS_CHARS) {
            sd = stringDestination();
            utfx.decodeUTF8(function() {
              return i < length && offset < this.limit ? this.view[offset++] : null;
            }.bind(this), function(cp) {
              ++i;
              utfx.UTF8toUTF16(cp, sd);
            });
            if (i !== length)
              throw RangeError("Illegal range: Truncated data, " + i + " == " + length);
            if (relative) {
              this.offset = offset;
              return sd();
            } else {
              return {
                "string": sd(),
                "length": offset - start
              };
            }
          } else if (metrics === ByteBuffer.METRICS_BYTES) {
            if (!this.noAssert) {
              if (typeof offset !== "number" || offset % 1 !== 0)
                throw TypeError("Illegal offset: " + offset + " (not an integer)");
              offset >>>= 0;
              if (offset < 0 || offset + length > this.buffer.byteLength)
                throw RangeError("Illegal offset: 0 <= " + offset + " (+" + length + ") <= " + this.buffer.byteLength);
            }
            var k = offset + length;
            utfx.decodeUTF8toUTF16(function() {
              return offset < k ? this.view[offset++] : null;
            }.bind(this), sd = stringDestination(), this.noAssert);
            if (offset !== k)
              throw RangeError("Illegal range: Truncated data, " + offset + " == " + k);
            if (relative) {
              this.offset = offset;
              return sd();
            } else {
              return {
                "string": sd(),
                "length": offset - start
              };
            }
          } else
            throw TypeError("Unsupported metrics: " + metrics);
        };
        ByteBufferPrototype.readString = ByteBufferPrototype.readUTF8String;
        ByteBufferPrototype.writeVString = function(str, offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof str !== "string")
              throw TypeError("Illegal str: Not a string");
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
          }
          var start = offset, k, l;
          k = utfx.calculateUTF16asUTF8(stringSource(str), this.noAssert)[1];
          l = ByteBuffer.calculateVarint32(k);
          offset += l + k;
          var capacity15 = this.buffer.byteLength;
          if (offset > capacity15)
            this.resize((capacity15 *= 2) > offset ? capacity15 : offset);
          offset -= l + k;
          offset += this.writeVarint32(k, offset);
          utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
            this.view[offset++] = b;
          }.bind(this));
          if (offset !== start + k + l)
            throw RangeError("Illegal range: Truncated data, " + offset + " == " + (offset + k + l));
          if (relative) {
            this.offset = offset;
            return this;
          }
          return offset - start;
        };
        ByteBufferPrototype.readVString = function(offset) {
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 1 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 1 + ") <= " + this.buffer.byteLength);
          }
          var start = offset;
          var len = this.readVarint32(offset);
          var str = this.readUTF8String(len["value"], ByteBuffer.METRICS_BYTES, offset += len["length"]);
          offset += str["length"];
          if (relative) {
            this.offset = offset;
            return str["string"];
          } else {
            return {
              "string": str["string"],
              "length": offset - start
            };
          }
        };
        ByteBufferPrototype.append = function(source, encoding, offset) {
          if (typeof encoding === "number" || typeof encoding !== "string") {
            offset = encoding;
            encoding = void 0;
          }
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
          }
          if (!(source instanceof ByteBuffer))
            source = ByteBuffer.wrap(source, encoding);
          var length = source.limit - source.offset;
          if (length <= 0)
            return this;
          offset += length;
          var capacity16 = this.buffer.byteLength;
          if (offset > capacity16)
            this.resize((capacity16 *= 2) > offset ? capacity16 : offset);
          offset -= length;
          this.view.set(source.view.subarray(source.offset, source.limit), offset);
          source.offset += length;
          if (relative)
            this.offset += length;
          return this;
        };
        ByteBufferPrototype.appendTo = function(target, offset) {
          target.append(this, offset);
          return this;
        };
        ByteBufferPrototype.assert = function(assert) {
          this.noAssert = !assert;
          return this;
        };
        ByteBufferPrototype.capacity = function() {
          return this.buffer.byteLength;
        };
        ByteBufferPrototype.clear = function() {
          this.offset = 0;
          this.limit = this.buffer.byteLength;
          this.markedOffset = -1;
          return this;
        };
        ByteBufferPrototype.clone = function(copy) {
          var bb = new ByteBuffer(0, this.littleEndian, this.noAssert);
          if (copy) {
            bb.buffer = new ArrayBuffer(this.buffer.byteLength);
            bb.view = new Uint8Array(bb.buffer);
          } else {
            bb.buffer = this.buffer;
            bb.view = this.view;
          }
          bb.offset = this.offset;
          bb.markedOffset = this.markedOffset;
          bb.limit = this.limit;
          return bb;
        };
        ByteBufferPrototype.compact = function(begin, end) {
          if (typeof begin === "undefined")
            begin = this.offset;
          if (typeof end === "undefined")
            end = this.limit;
          if (!this.noAssert) {
            if (typeof begin !== "number" || begin % 1 !== 0)
              throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== "number" || end % 1 !== 0)
              throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength)
              throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
          }
          if (begin === 0 && end === this.buffer.byteLength)
            return this;
          var len = end - begin;
          if (len === 0) {
            this.buffer = EMPTY_BUFFER;
            this.view = null;
            if (this.markedOffset >= 0)
              this.markedOffset -= begin;
            this.offset = 0;
            this.limit = 0;
            return this;
          }
          var buffer = new ArrayBuffer(len);
          var view = new Uint8Array(buffer);
          view.set(this.view.subarray(begin, end));
          this.buffer = buffer;
          this.view = view;
          if (this.markedOffset >= 0)
            this.markedOffset -= begin;
          this.offset = 0;
          this.limit = len;
          return this;
        };
        ByteBufferPrototype.copy = function(begin, end) {
          if (typeof begin === "undefined")
            begin = this.offset;
          if (typeof end === "undefined")
            end = this.limit;
          if (!this.noAssert) {
            if (typeof begin !== "number" || begin % 1 !== 0)
              throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== "number" || end % 1 !== 0)
              throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength)
              throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
          }
          if (begin === end)
            return new ByteBuffer(0, this.littleEndian, this.noAssert);
          var capacity = end - begin, bb = new ByteBuffer(capacity, this.littleEndian, this.noAssert);
          bb.offset = 0;
          bb.limit = capacity;
          if (bb.markedOffset >= 0)
            bb.markedOffset -= begin;
          this.copyTo(bb, 0, begin, end);
          return bb;
        };
        ByteBufferPrototype.copyTo = function(target, targetOffset, sourceOffset, sourceLimit) {
          var relative, targetRelative;
          if (!this.noAssert) {
            if (!ByteBuffer.isByteBuffer(target))
              throw TypeError("Illegal target: Not a ByteBuffer");
          }
          targetOffset = (targetRelative = typeof targetOffset === "undefined") ? target.offset : targetOffset | 0;
          sourceOffset = (relative = typeof sourceOffset === "undefined") ? this.offset : sourceOffset | 0;
          sourceLimit = typeof sourceLimit === "undefined" ? this.limit : sourceLimit | 0;
          if (targetOffset < 0 || targetOffset > target.buffer.byteLength)
            throw RangeError("Illegal target range: 0 <= " + targetOffset + " <= " + target.buffer.byteLength);
          if (sourceOffset < 0 || sourceLimit > this.buffer.byteLength)
            throw RangeError("Illegal source range: 0 <= " + sourceOffset + " <= " + this.buffer.byteLength);
          var len = sourceLimit - sourceOffset;
          if (len === 0)
            return target;
          target.ensureCapacity(targetOffset + len);
          target.view.set(this.view.subarray(sourceOffset, sourceLimit), targetOffset);
          if (relative)
            this.offset += len;
          if (targetRelative)
            target.offset += len;
          return this;
        };
        ByteBufferPrototype.ensureCapacity = function(capacity) {
          var current = this.buffer.byteLength;
          if (current < capacity)
            return this.resize((current *= 2) > capacity ? current : capacity);
          return this;
        };
        ByteBufferPrototype.fill = function(value, begin, end) {
          var relative = typeof begin === "undefined";
          if (relative)
            begin = this.offset;
          if (typeof value === "string" && value.length > 0)
            value = value.charCodeAt(0);
          if (typeof begin === "undefined")
            begin = this.offset;
          if (typeof end === "undefined")
            end = this.limit;
          if (!this.noAssert) {
            if (typeof value !== "number" || value % 1 !== 0)
              throw TypeError("Illegal value: " + value + " (not an integer)");
            value |= 0;
            if (typeof begin !== "number" || begin % 1 !== 0)
              throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== "number" || end % 1 !== 0)
              throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength)
              throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
          }
          if (begin >= end)
            return this;
          while (begin < end)
            this.view[begin++] = value;
          if (relative)
            this.offset = begin;
          return this;
        };
        ByteBufferPrototype.flip = function() {
          this.limit = this.offset;
          this.offset = 0;
          return this;
        };
        ByteBufferPrototype.mark = function(offset) {
          offset = typeof offset === "undefined" ? this.offset : offset;
          if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
          }
          this.markedOffset = offset;
          return this;
        };
        ByteBufferPrototype.order = function(littleEndian) {
          if (!this.noAssert) {
            if (typeof littleEndian !== "boolean")
              throw TypeError("Illegal littleEndian: Not a boolean");
          }
          this.littleEndian = !!littleEndian;
          return this;
        };
        ByteBufferPrototype.LE = function(littleEndian) {
          this.littleEndian = typeof littleEndian !== "undefined" ? !!littleEndian : true;
          return this;
        };
        ByteBufferPrototype.BE = function(bigEndian) {
          this.littleEndian = typeof bigEndian !== "undefined" ? !bigEndian : false;
          return this;
        };
        ByteBufferPrototype.prepend = function(source, encoding, offset) {
          if (typeof encoding === "number" || typeof encoding !== "string") {
            offset = encoding;
            encoding = void 0;
          }
          var relative = typeof offset === "undefined";
          if (relative)
            offset = this.offset;
          if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: " + offset + " (not an integer)");
            offset >>>= 0;
            if (offset < 0 || offset + 0 > this.buffer.byteLength)
              throw RangeError("Illegal offset: 0 <= " + offset + " (+" + 0 + ") <= " + this.buffer.byteLength);
          }
          if (!(source instanceof ByteBuffer))
            source = ByteBuffer.wrap(source, encoding);
          var len = source.limit - source.offset;
          if (len <= 0)
            return this;
          var diff = len - offset;
          if (diff > 0) {
            var buffer = new ArrayBuffer(this.buffer.byteLength + diff);
            var view = new Uint8Array(buffer);
            view.set(this.view.subarray(offset, this.buffer.byteLength), len);
            this.buffer = buffer;
            this.view = view;
            this.offset += diff;
            if (this.markedOffset >= 0)
              this.markedOffset += diff;
            this.limit += diff;
            offset += diff;
          } else {
            var arrayView = new Uint8Array(this.buffer);
          }
          this.view.set(source.view.subarray(source.offset, source.limit), offset - len);
          source.offset = source.limit;
          if (relative)
            this.offset -= len;
          return this;
        };
        ByteBufferPrototype.prependTo = function(target, offset) {
          target.prepend(this, offset);
          return this;
        };
        ByteBufferPrototype.printDebug = function(out) {
          if (typeof out !== "function")
            out = console.log.bind(console);
          out(
            this.toString() + "\n-------------------------------------------------------------------\n" + this.toDebug(true)
          );
        };
        ByteBufferPrototype.remaining = function() {
          return this.limit - this.offset;
        };
        ByteBufferPrototype.reset = function() {
          if (this.markedOffset >= 0) {
            this.offset = this.markedOffset;
            this.markedOffset = -1;
          } else {
            this.offset = 0;
          }
          return this;
        };
        ByteBufferPrototype.resize = function(capacity) {
          if (!this.noAssert) {
            if (typeof capacity !== "number" || capacity % 1 !== 0)
              throw TypeError("Illegal capacity: " + capacity + " (not an integer)");
            capacity |= 0;
            if (capacity < 0)
              throw RangeError("Illegal capacity: 0 <= " + capacity);
          }
          if (this.buffer.byteLength < capacity) {
            var buffer = new ArrayBuffer(capacity);
            var view = new Uint8Array(buffer);
            view.set(this.view);
            this.buffer = buffer;
            this.view = view;
          }
          return this;
        };
        ByteBufferPrototype.reverse = function(begin, end) {
          if (typeof begin === "undefined")
            begin = this.offset;
          if (typeof end === "undefined")
            end = this.limit;
          if (!this.noAssert) {
            if (typeof begin !== "number" || begin % 1 !== 0)
              throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== "number" || end % 1 !== 0)
              throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength)
              throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
          }
          if (begin === end)
            return this;
          Array.prototype.reverse.call(this.view.subarray(begin, end));
          return this;
        };
        ByteBufferPrototype.skip = function(length) {
          if (!this.noAssert) {
            if (typeof length !== "number" || length % 1 !== 0)
              throw TypeError("Illegal length: " + length + " (not an integer)");
            length |= 0;
          }
          var offset = this.offset + length;
          if (!this.noAssert) {
            if (offset < 0 || offset > this.buffer.byteLength)
              throw RangeError("Illegal length: 0 <= " + this.offset + " + " + length + " <= " + this.buffer.byteLength);
          }
          this.offset = offset;
          return this;
        };
        ByteBufferPrototype.slice = function(begin, end) {
          if (typeof begin === "undefined")
            begin = this.offset;
          if (typeof end === "undefined")
            end = this.limit;
          if (!this.noAssert) {
            if (typeof begin !== "number" || begin % 1 !== 0)
              throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== "number" || end % 1 !== 0)
              throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength)
              throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
          }
          var bb = this.clone();
          bb.offset = begin;
          bb.limit = end;
          return bb;
        };
        ByteBufferPrototype.toBuffer = function(forceCopy) {
          var offset = this.offset, limit = this.limit;
          if (!this.noAssert) {
            if (typeof offset !== "number" || offset % 1 !== 0)
              throw TypeError("Illegal offset: Not an integer");
            offset >>>= 0;
            if (typeof limit !== "number" || limit % 1 !== 0)
              throw TypeError("Illegal limit: Not an integer");
            limit >>>= 0;
            if (offset < 0 || offset > limit || limit > this.buffer.byteLength)
              throw RangeError("Illegal range: 0 <= " + offset + " <= " + limit + " <= " + this.buffer.byteLength);
          }
          if (!forceCopy && offset === 0 && limit === this.buffer.byteLength)
            return this.buffer;
          if (offset === limit)
            return EMPTY_BUFFER;
          var buffer = new ArrayBuffer(limit - offset);
          new Uint8Array(buffer).set(new Uint8Array(this.buffer).subarray(offset, limit), 0);
          return buffer;
        };
        ByteBufferPrototype.toArrayBuffer = ByteBufferPrototype.toBuffer;
        ByteBufferPrototype.toString = function(encoding, begin, end) {
          if (typeof encoding === "undefined")
            return "ByteBufferAB(offset=" + this.offset + ",markedOffset=" + this.markedOffset + ",limit=" + this.limit + ",capacity=" + this.capacity() + ")";
          if (typeof encoding === "number")
            encoding = "utf8", begin = encoding, end = begin;
          switch (encoding) {
            case "utf8":
              return this.toUTF8(begin, end);
            case "base64":
              return this.toBase64(begin, end);
            case "hex":
              return this.toHex(begin, end);
            case "binary":
              return this.toBinary(begin, end);
            case "debug":
              return this.toDebug();
            case "columns":
              return this.toColumns();
            default:
              throw Error("Unsupported encoding: " + encoding);
          }
        };
        var lxiv = function() {
          "use strict";
          var lxiv2 = {};
          var aout = [
            65,
            66,
            67,
            68,
            69,
            70,
            71,
            72,
            73,
            74,
            75,
            76,
            77,
            78,
            79,
            80,
            81,
            82,
            83,
            84,
            85,
            86,
            87,
            88,
            89,
            90,
            97,
            98,
            99,
            100,
            101,
            102,
            103,
            104,
            105,
            106,
            107,
            108,
            109,
            110,
            111,
            112,
            113,
            114,
            115,
            116,
            117,
            118,
            119,
            120,
            121,
            122,
            48,
            49,
            50,
            51,
            52,
            53,
            54,
            55,
            56,
            57,
            43,
            47
          ];
          var ain = [];
          for (var i = 0, k = aout.length; i < k; ++i)
            ain[aout[i]] = i;
          lxiv2.encode = function(src, dst) {
            var b, t;
            while ((b = src()) !== null) {
              dst(aout[b >> 2 & 63]);
              t = (b & 3) << 4;
              if ((b = src()) !== null) {
                t |= b >> 4 & 15;
                dst(aout[(t | b >> 4 & 15) & 63]);
                t = (b & 15) << 2;
                if ((b = src()) !== null)
                  dst(aout[(t | b >> 6 & 3) & 63]), dst(aout[b & 63]);
                else
                  dst(aout[t & 63]), dst(61);
              } else
                dst(aout[t & 63]), dst(61), dst(61);
            }
          };
          lxiv2.decode = function(src, dst) {
            var c, t1, t2;
            function fail(c2) {
              throw Error("Illegal character code: " + c2);
            }
            while ((c = src()) !== null) {
              t1 = ain[c];
              if (typeof t1 === "undefined")
                fail(c);
              if ((c = src()) !== null) {
                t2 = ain[c];
                if (typeof t2 === "undefined")
                  fail(c);
                dst(t1 << 2 >>> 0 | (t2 & 48) >> 4);
                if ((c = src()) !== null) {
                  t1 = ain[c];
                  if (typeof t1 === "undefined")
                    if (c === 61)
                      break;
                    else
                      fail(c);
                  dst((t2 & 15) << 4 >>> 0 | (t1 & 60) >> 2);
                  if ((c = src()) !== null) {
                    t2 = ain[c];
                    if (typeof t2 === "undefined")
                      if (c === 61)
                        break;
                      else
                        fail(c);
                    dst((t1 & 3) << 6 >>> 0 | t2);
                  }
                }
              }
            }
          };
          lxiv2.test = function(str) {
            return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(str);
          };
          return lxiv2;
        }();
        ByteBufferPrototype.toBase64 = function(begin, end) {
          if (typeof begin === "undefined")
            begin = this.offset;
          if (typeof end === "undefined")
            end = this.limit;
          begin = begin | 0;
          end = end | 0;
          if (begin < 0 || end > this.capacity || begin > end)
            throw RangeError("begin, end");
          var sd;
          lxiv.encode(function() {
            return begin < end ? this.view[begin++] : null;
          }.bind(this), sd = stringDestination());
          return sd();
        };
        ByteBuffer.fromBase64 = function(str, littleEndian) {
          if (typeof str !== "string")
            throw TypeError("str");
          var bb = new ByteBuffer(str.length / 4 * 3, littleEndian), i = 0;
          lxiv.decode(stringSource(str), function(b) {
            bb.view[i++] = b;
          });
          bb.limit = i;
          return bb;
        };
        ByteBuffer.btoa = function(str) {
          return ByteBuffer.fromBinary(str).toBase64();
        };
        ByteBuffer.atob = function(b64) {
          return ByteBuffer.fromBase64(b64).toBinary();
        };
        ByteBufferPrototype.toBinary = function(begin, end) {
          if (typeof begin === "undefined")
            begin = this.offset;
          if (typeof end === "undefined")
            end = this.limit;
          begin |= 0;
          end |= 0;
          if (begin < 0 || end > this.capacity() || begin > end)
            throw RangeError("begin, end");
          if (begin === end)
            return "";
          var chars = [], parts = [];
          while (begin < end) {
            chars.push(this.view[begin++]);
            if (chars.length >= 1024)
              parts.push(String.fromCharCode.apply(String, chars)), chars = [];
          }
          return parts.join("") + String.fromCharCode.apply(String, chars);
        };
        ByteBuffer.fromBinary = function(str, littleEndian) {
          if (typeof str !== "string")
            throw TypeError("str");
          var i = 0, k = str.length, charCode, bb = new ByteBuffer(k, littleEndian);
          while (i < k) {
            charCode = str.charCodeAt(i);
            if (charCode > 255)
              throw RangeError("illegal char code: " + charCode);
            bb.view[i++] = charCode;
          }
          bb.limit = k;
          return bb;
        };
        ByteBufferPrototype.toDebug = function(columns) {
          var i = -1, k = this.buffer.byteLength, b, hex = "", asc = "", out = "";
          while (i < k) {
            if (i !== -1) {
              b = this.view[i];
              if (b < 16)
                hex += "0" + b.toString(16).toUpperCase();
              else
                hex += b.toString(16).toUpperCase();
              if (columns)
                asc += b > 32 && b < 127 ? String.fromCharCode(b) : ".";
            }
            ++i;
            if (columns) {
              if (i > 0 && i % 16 === 0 && i !== k) {
                while (hex.length < 3 * 16 + 3)
                  hex += " ";
                out += hex + asc + "\n";
                hex = asc = "";
              }
            }
            if (i === this.offset && i === this.limit)
              hex += i === this.markedOffset ? "!" : "|";
            else if (i === this.offset)
              hex += i === this.markedOffset ? "[" : "<";
            else if (i === this.limit)
              hex += i === this.markedOffset ? "]" : ">";
            else
              hex += i === this.markedOffset ? "'" : columns || i !== 0 && i !== k ? " " : "";
          }
          if (columns && hex !== " ") {
            while (hex.length < 3 * 16 + 3)
              hex += " ";
            out += hex + asc + "\n";
          }
          return columns ? out : hex;
        };
        ByteBuffer.fromDebug = function(str, littleEndian, noAssert) {
          var k = str.length, bb = new ByteBuffer((k + 1) / 3 | 0, littleEndian, noAssert);
          var i = 0, j = 0, ch, b, rs = false, ho = false, hm = false, hl = false, fail = false;
          while (i < k) {
            switch (ch = str.charAt(i++)) {
              case "!":
                if (!noAssert) {
                  if (ho || hm || hl) {
                    fail = true;
                    break;
                  }
                  ho = hm = hl = true;
                }
                bb.offset = bb.markedOffset = bb.limit = j;
                rs = false;
                break;
              case "|":
                if (!noAssert) {
                  if (ho || hl) {
                    fail = true;
                    break;
                  }
                  ho = hl = true;
                }
                bb.offset = bb.limit = j;
                rs = false;
                break;
              case "[":
                if (!noAssert) {
                  if (ho || hm) {
                    fail = true;
                    break;
                  }
                  ho = hm = true;
                }
                bb.offset = bb.markedOffset = j;
                rs = false;
                break;
              case "<":
                if (!noAssert) {
                  if (ho) {
                    fail = true;
                    break;
                  }
                  ho = true;
                }
                bb.offset = j;
                rs = false;
                break;
              case "]":
                if (!noAssert) {
                  if (hl || hm) {
                    fail = true;
                    break;
                  }
                  hl = hm = true;
                }
                bb.limit = bb.markedOffset = j;
                rs = false;
                break;
              case ">":
                if (!noAssert) {
                  if (hl) {
                    fail = true;
                    break;
                  }
                  hl = true;
                }
                bb.limit = j;
                rs = false;
                break;
              case "'":
                if (!noAssert) {
                  if (hm) {
                    fail = true;
                    break;
                  }
                  hm = true;
                }
                bb.markedOffset = j;
                rs = false;
                break;
              case " ":
                rs = false;
                break;
              default:
                if (!noAssert) {
                  if (rs) {
                    fail = true;
                    break;
                  }
                }
                b = parseInt(ch + str.charAt(i++), 16);
                if (!noAssert) {
                  if (isNaN(b) || b < 0 || b > 255)
                    throw TypeError("Illegal str: Not a debug encoded string");
                }
                bb.view[j++] = b;
                rs = true;
            }
            if (fail)
              throw TypeError("Illegal str: Invalid symbol at " + i);
          }
          if (!noAssert) {
            if (!ho || !hl)
              throw TypeError("Illegal str: Missing offset or limit");
            if (j < bb.buffer.byteLength)
              throw TypeError("Illegal str: Not a debug encoded string (is it hex?) " + j + " < " + k);
          }
          return bb;
        };
        ByteBufferPrototype.toHex = function(begin, end) {
          begin = typeof begin === "undefined" ? this.offset : begin;
          end = typeof end === "undefined" ? this.limit : end;
          if (!this.noAssert) {
            if (typeof begin !== "number" || begin % 1 !== 0)
              throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== "number" || end % 1 !== 0)
              throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength)
              throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
          }
          var out = new Array(end - begin), b;
          while (begin < end) {
            b = this.view[begin++];
            if (b < 16)
              out.push("0", b.toString(16));
            else
              out.push(b.toString(16));
          }
          return out.join("");
        };
        ByteBuffer.fromHex = function(str, littleEndian, noAssert) {
          if (!noAssert) {
            if (typeof str !== "string")
              throw TypeError("Illegal str: Not a string");
            if (str.length % 2 !== 0)
              throw TypeError("Illegal str: Length not a multiple of 2");
          }
          var k = str.length, bb = new ByteBuffer(k / 2 | 0, littleEndian), b;
          for (var i = 0, j = 0; i < k; i += 2) {
            b = parseInt(str.substring(i, i + 2), 16);
            if (!noAssert) {
              if (!isFinite(b) || b < 0 || b > 255)
                throw TypeError("Illegal str: Contains non-hex characters");
            }
            bb.view[j++] = b;
          }
          bb.limit = j;
          return bb;
        };
        var utfx = function() {
          "use strict";
          var utfx2 = {};
          utfx2.MAX_CODEPOINT = 1114111;
          utfx2.encodeUTF8 = function(src, dst) {
            var cp = null;
            if (typeof src === "number")
              cp = src, src = function() {
                return null;
              };
            while (cp !== null || (cp = src()) !== null) {
              if (cp < 128)
                dst(cp & 127);
              else if (cp < 2048)
                dst(cp >> 6 & 31 | 192), dst(cp & 63 | 128);
              else if (cp < 65536)
                dst(cp >> 12 & 15 | 224), dst(cp >> 6 & 63 | 128), dst(cp & 63 | 128);
              else
                dst(cp >> 18 & 7 | 240), dst(cp >> 12 & 63 | 128), dst(cp >> 6 & 63 | 128), dst(cp & 63 | 128);
              cp = null;
            }
          };
          utfx2.decodeUTF8 = function(src, dst) {
            var a, b, c, d, fail = function(b2) {
              b2 = b2.slice(0, b2.indexOf(null));
              var err = Error(b2.toString());
              err.name = "TruncatedError";
              err["bytes"] = b2;
              throw err;
            };
            while ((a = src()) !== null) {
              if ((a & 128) === 0)
                dst(a);
              else if ((a & 224) === 192)
                (b = src()) === null && fail([a, b]), dst((a & 31) << 6 | b & 63);
              else if ((a & 240) === 224)
                ((b = src()) === null || (c = src()) === null) && fail([a, b, c]), dst((a & 15) << 12 | (b & 63) << 6 | c & 63);
              else if ((a & 248) === 240)
                ((b = src()) === null || (c = src()) === null || (d = src()) === null) && fail([a, b, c, d]), dst((a & 7) << 18 | (b & 63) << 12 | (c & 63) << 6 | d & 63);
              else
                throw RangeError("Illegal starting byte: " + a);
            }
          };
          utfx2.UTF16toUTF8 = function(src, dst) {
            var c1, c2 = null;
            while (true) {
              if ((c1 = c2 !== null ? c2 : src()) === null)
                break;
              if (c1 >= 55296 && c1 <= 57343) {
                if ((c2 = src()) !== null) {
                  if (c2 >= 56320 && c2 <= 57343) {
                    dst((c1 - 55296) * 1024 + c2 - 56320 + 65536);
                    c2 = null;
                    continue;
                  }
                }
              }
              dst(c1);
            }
            if (c2 !== null)
              dst(c2);
          };
          utfx2.UTF8toUTF16 = function(src, dst) {
            var cp = null;
            if (typeof src === "number")
              cp = src, src = function() {
                return null;
              };
            while (cp !== null || (cp = src()) !== null) {
              if (cp <= 65535)
                dst(cp);
              else
                cp -= 65536, dst((cp >> 10) + 55296), dst(cp % 1024 + 56320);
              cp = null;
            }
          };
          utfx2.encodeUTF16toUTF8 = function(src, dst) {
            utfx2.UTF16toUTF8(src, function(cp) {
              utfx2.encodeUTF8(cp, dst);
            });
          };
          utfx2.decodeUTF8toUTF16 = function(src, dst) {
            utfx2.decodeUTF8(src, function(cp) {
              utfx2.UTF8toUTF16(cp, dst);
            });
          };
          utfx2.calculateCodePoint = function(cp) {
            return cp < 128 ? 1 : cp < 2048 ? 2 : cp < 65536 ? 3 : 4;
          };
          utfx2.calculateUTF8 = function(src) {
            var cp, l = 0;
            while ((cp = src()) !== null)
              l += cp < 128 ? 1 : cp < 2048 ? 2 : cp < 65536 ? 3 : 4;
            return l;
          };
          utfx2.calculateUTF16asUTF8 = function(src) {
            var n = 0, l = 0;
            utfx2.UTF16toUTF8(src, function(cp) {
              ++n;
              l += cp < 128 ? 1 : cp < 2048 ? 2 : cp < 65536 ? 3 : 4;
            });
            return [n, l];
          };
          return utfx2;
        }();
        ByteBufferPrototype.toUTF8 = function(begin, end) {
          if (typeof begin === "undefined")
            begin = this.offset;
          if (typeof end === "undefined")
            end = this.limit;
          if (!this.noAssert) {
            if (typeof begin !== "number" || begin % 1 !== 0)
              throw TypeError("Illegal begin: Not an integer");
            begin >>>= 0;
            if (typeof end !== "number" || end % 1 !== 0)
              throw TypeError("Illegal end: Not an integer");
            end >>>= 0;
            if (begin < 0 || begin > end || end > this.buffer.byteLength)
              throw RangeError("Illegal range: 0 <= " + begin + " <= " + end + " <= " + this.buffer.byteLength);
          }
          var sd;
          try {
            utfx.decodeUTF8toUTF16(function() {
              return begin < end ? this.view[begin++] : null;
            }.bind(this), sd = stringDestination());
          } catch (e) {
            if (begin !== end)
              throw RangeError("Illegal range: Truncated data, " + begin + " != " + end);
          }
          return sd();
        };
        ByteBuffer.fromUTF8 = function(str, littleEndian, noAssert) {
          if (!noAssert) {
            if (typeof str !== "string")
              throw TypeError("Illegal str: Not a string");
          }
          var bb = new ByteBuffer(utfx.calculateUTF16asUTF8(stringSource(str), true)[1], littleEndian, noAssert), i = 0;
          utfx.encodeUTF16toUTF8(stringSource(str), function(b) {
            bb.view[i++] = b;
          });
          bb.limit = i;
          return bb;
        };
        return ByteBuffer;
      });
    }
  });

  // (disabled):fs
  var require_fs = __commonJS({
    "(disabled):fs"() {
    }
  });

  // (disabled):path
  var require_path = __commonJS({
    "(disabled):path"() {
    }
  });

  // node_modules/@avast/burger-client/node_modules/protobufjs/dist/protobuf.js
  var require_protobuf = __commonJS({
    "node_modules/@avast/burger-client/node_modules/protobufjs/dist/protobuf.js"(exports2, module2) {
      (function(global2, factory) {
        if (typeof define === "function" && define["amd"])
          define(["bytebuffer"], factory);
        else if (typeof __require === "function" && typeof module2 === "object" && module2 && module2["exports"])
          module2["exports"] = factory(require_bytebuffer(), true);
        else
          (global2["dcodeIO"] = global2["dcodeIO"] || {})["ProtoBuf"] = factory(global2["dcodeIO"]["ByteBuffer"]);
      })(exports2, function(ByteBuffer, isCommonJS) {
        "use strict";
        var ProtoBuf = {};
        ProtoBuf.ByteBuffer = ByteBuffer;
        ProtoBuf.Long = ByteBuffer.Long || null;
        ProtoBuf.VERSION = "5.0.3";
        ProtoBuf.WIRE_TYPES = {};
        ProtoBuf.WIRE_TYPES.VARINT = 0;
        ProtoBuf.WIRE_TYPES.BITS64 = 1;
        ProtoBuf.WIRE_TYPES.LDELIM = 2;
        ProtoBuf.WIRE_TYPES.STARTGROUP = 3;
        ProtoBuf.WIRE_TYPES.ENDGROUP = 4;
        ProtoBuf.WIRE_TYPES.BITS32 = 5;
        ProtoBuf.PACKABLE_WIRE_TYPES = [
          ProtoBuf.WIRE_TYPES.VARINT,
          ProtoBuf.WIRE_TYPES.BITS64,
          ProtoBuf.WIRE_TYPES.BITS32
        ];
        ProtoBuf.TYPES = {
          "int32": {
            name: "int32",
            wireType: ProtoBuf.WIRE_TYPES.VARINT,
            defaultValue: 0
          },
          "uint32": {
            name: "uint32",
            wireType: ProtoBuf.WIRE_TYPES.VARINT,
            defaultValue: 0
          },
          "sint32": {
            name: "sint32",
            wireType: ProtoBuf.WIRE_TYPES.VARINT,
            defaultValue: 0
          },
          "int64": {
            name: "int64",
            wireType: ProtoBuf.WIRE_TYPES.VARINT,
            defaultValue: ProtoBuf.Long ? ProtoBuf.Long.ZERO : void 0
          },
          "uint64": {
            name: "uint64",
            wireType: ProtoBuf.WIRE_TYPES.VARINT,
            defaultValue: ProtoBuf.Long ? ProtoBuf.Long.UZERO : void 0
          },
          "sint64": {
            name: "sint64",
            wireType: ProtoBuf.WIRE_TYPES.VARINT,
            defaultValue: ProtoBuf.Long ? ProtoBuf.Long.ZERO : void 0
          },
          "bool": {
            name: "bool",
            wireType: ProtoBuf.WIRE_TYPES.VARINT,
            defaultValue: false
          },
          "double": {
            name: "double",
            wireType: ProtoBuf.WIRE_TYPES.BITS64,
            defaultValue: 0
          },
          "string": {
            name: "string",
            wireType: ProtoBuf.WIRE_TYPES.LDELIM,
            defaultValue: ""
          },
          "bytes": {
            name: "bytes",
            wireType: ProtoBuf.WIRE_TYPES.LDELIM,
            defaultValue: null
          },
          "fixed32": {
            name: "fixed32",
            wireType: ProtoBuf.WIRE_TYPES.BITS32,
            defaultValue: 0
          },
          "sfixed32": {
            name: "sfixed32",
            wireType: ProtoBuf.WIRE_TYPES.BITS32,
            defaultValue: 0
          },
          "fixed64": {
            name: "fixed64",
            wireType: ProtoBuf.WIRE_TYPES.BITS64,
            defaultValue: ProtoBuf.Long ? ProtoBuf.Long.UZERO : void 0
          },
          "sfixed64": {
            name: "sfixed64",
            wireType: ProtoBuf.WIRE_TYPES.BITS64,
            defaultValue: ProtoBuf.Long ? ProtoBuf.Long.ZERO : void 0
          },
          "float": {
            name: "float",
            wireType: ProtoBuf.WIRE_TYPES.BITS32,
            defaultValue: 0
          },
          "enum": {
            name: "enum",
            wireType: ProtoBuf.WIRE_TYPES.VARINT,
            defaultValue: 0
          },
          "message": {
            name: "message",
            wireType: ProtoBuf.WIRE_TYPES.LDELIM,
            defaultValue: null
          },
          "group": {
            name: "group",
            wireType: ProtoBuf.WIRE_TYPES.STARTGROUP,
            defaultValue: null
          }
        };
        ProtoBuf.MAP_KEY_TYPES = [
          ProtoBuf.TYPES["int32"],
          ProtoBuf.TYPES["sint32"],
          ProtoBuf.TYPES["sfixed32"],
          ProtoBuf.TYPES["uint32"],
          ProtoBuf.TYPES["fixed32"],
          ProtoBuf.TYPES["int64"],
          ProtoBuf.TYPES["sint64"],
          ProtoBuf.TYPES["sfixed64"],
          ProtoBuf.TYPES["uint64"],
          ProtoBuf.TYPES["fixed64"],
          ProtoBuf.TYPES["bool"],
          ProtoBuf.TYPES["string"],
          ProtoBuf.TYPES["bytes"]
        ];
        ProtoBuf.ID_MIN = 1;
        ProtoBuf.ID_MAX = 536870911;
        ProtoBuf.convertFieldsToCamelCase = false;
        ProtoBuf.populateAccessors = true;
        ProtoBuf.populateDefaults = true;
        ProtoBuf.Util = function() {
          "use strict";
          var Util = {};
          Util.IS_NODE = !!(typeof process === "object" && process + "" === "[object process]" && !process["browser"]);
          Util.XHR = function() {
            var XMLHttpFactories = [
              function() {
                return new XMLHttpRequest();
              },
              function() {
                return new ActiveXObject("Msxml2.XMLHTTP");
              },
              function() {
                return new ActiveXObject("Msxml3.XMLHTTP");
              },
              function() {
                return new ActiveXObject("Microsoft.XMLHTTP");
              }
            ];
            var xhr = null;
            for (var i = 0; i < XMLHttpFactories.length; i++) {
              try {
                xhr = XMLHttpFactories[i]();
              } catch (e) {
                continue;
              }
              break;
            }
            if (!xhr)
              throw Error("XMLHttpRequest is not supported");
            return xhr;
          };
          Util.fetch = function(path, callback) {
            if (callback && typeof callback != "function")
              callback = null;
            if (Util.IS_NODE) {
              var fs = require_fs();
              if (callback) {
                fs.readFile(path, function(err, data) {
                  if (err)
                    callback(null);
                  else
                    callback("" + data);
                });
              } else
                try {
                  return fs.readFileSync(path);
                } catch (e) {
                  return null;
                }
            } else {
              var xhr = Util.XHR();
              xhr.open("GET", path, callback ? true : false);
              xhr.setRequestHeader("Accept", "text/plain");
              if (typeof xhr.overrideMimeType === "function")
                xhr.overrideMimeType("text/plain");
              if (callback) {
                xhr.onreadystatechange = function() {
                  if (xhr.readyState != 4)
                    return;
                  if (xhr.status == 200 || xhr.status == 0 && typeof xhr.responseText === "string")
                    callback(xhr.responseText);
                  else
                    callback(null);
                };
                if (xhr.readyState == 4)
                  return;
                xhr.send(null);
              } else {
                xhr.send(null);
                if (xhr.status == 200 || xhr.status == 0 && typeof xhr.responseText === "string")
                  return xhr.responseText;
                return null;
              }
            }
          };
          Util.toCamelCase = function(str) {
            return str.replace(/_([a-zA-Z])/g, function($0, $1) {
              return $1.toUpperCase();
            });
          };
          return Util;
        }();
        ProtoBuf.Lang = {
          DELIM: /[\s\{\}=;:\[\],'"\(\)<>]/g,
          RULE: /^(?:required|optional|repeated|map)$/,
          TYPE: /^(?:double|float|int32|uint32|sint32|int64|uint64|sint64|fixed32|sfixed32|fixed64|sfixed64|bool|string|bytes)$/,
          NAME: /^[a-zA-Z_][a-zA-Z_0-9]*$/,
          TYPEDEF: /^[a-zA-Z][a-zA-Z_0-9]*$/,
          TYPEREF: /^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,
          FQTYPEREF: /^(?:\.[a-zA-Z_][a-zA-Z_0-9]*)+$/,
          NUMBER: /^-?(?:[1-9][0-9]*|0|0[xX][0-9a-fA-F]+|0[0-7]+|([0-9]*(\.[0-9]*)?([Ee][+-]?[0-9]+)?)|inf|nan)$/,
          NUMBER_DEC: /^(?:[1-9][0-9]*|0)$/,
          NUMBER_HEX: /^0[xX][0-9a-fA-F]+$/,
          NUMBER_OCT: /^0[0-7]+$/,
          NUMBER_FLT: /^([0-9]*(\.[0-9]*)?([Ee][+-]?[0-9]+)?|inf|nan)$/,
          BOOL: /^(?:true|false)$/i,
          ID: /^(?:[1-9][0-9]*|0|0[xX][0-9a-fA-F]+|0[0-7]+)$/,
          NEGID: /^\-?(?:[1-9][0-9]*|0|0[xX][0-9a-fA-F]+|0[0-7]+)$/,
          WHITESPACE: /\s/,
          STRING: /(?:"([^"\\]*(?:\\.[^"\\]*)*)")|(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g,
          STRING_DQ: /(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g,
          STRING_SQ: /(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g
        };
        ProtoBuf.DotProto = function(ProtoBuf2, Lang) {
          "use strict";
          var DotProto = {};
          var Tokenizer = function(proto) {
            this.source = proto + "";
            this.index = 0;
            this.line = 1;
            this.stack = [];
            this._stringOpen = null;
          };
          var TokenizerPrototype = Tokenizer.prototype;
          TokenizerPrototype._readString = function() {
            var re = this._stringOpen === '"' ? Lang.STRING_DQ : Lang.STRING_SQ;
            re.lastIndex = this.index - 1;
            var match = re.exec(this.source);
            if (!match)
              throw Error("unterminated string");
            this.index = re.lastIndex;
            this.stack.push(this._stringOpen);
            this._stringOpen = null;
            return match[1];
          };
          TokenizerPrototype.next = function() {
            if (this.stack.length > 0)
              return this.stack.shift();
            if (this.index >= this.source.length)
              return null;
            if (this._stringOpen !== null)
              return this._readString();
            var repeat, prev, next;
            do {
              repeat = false;
              while (Lang.WHITESPACE.test(next = this.source.charAt(this.index))) {
                if (next === "\n")
                  ++this.line;
                if (++this.index === this.source.length)
                  return null;
              }
              if (this.source.charAt(this.index) === "/") {
                ++this.index;
                if (this.source.charAt(this.index) === "/") {
                  while (this.source.charAt(++this.index) !== "\n")
                    if (this.index == this.source.length)
                      return null;
                  ++this.index;
                  ++this.line;
                  repeat = true;
                } else if ((next = this.source.charAt(this.index)) === "*") {
                  do {
                    if (next === "\n")
                      ++this.line;
                    if (++this.index === this.source.length)
                      return null;
                    prev = next;
                    next = this.source.charAt(this.index);
                  } while (prev !== "*" || next !== "/");
                  ++this.index;
                  repeat = true;
                } else
                  return "/";
              }
            } while (repeat);
            if (this.index === this.source.length)
              return null;
            var end = this.index;
            Lang.DELIM.lastIndex = 0;
            var delim = Lang.DELIM.test(this.source.charAt(end++));
            if (!delim)
              while (end < this.source.length && !Lang.DELIM.test(this.source.charAt(end)))
                ++end;
            var token = this.source.substring(this.index, this.index = end);
            if (token === '"' || token === "'")
              this._stringOpen = token;
            return token;
          };
          TokenizerPrototype.peek = function() {
            if (this.stack.length === 0) {
              var token = this.next();
              if (token === null)
                return null;
              this.stack.push(token);
            }
            return this.stack[0];
          };
          TokenizerPrototype.skip = function(expected) {
            var actual = this.next();
            if (actual !== expected)
              throw Error("illegal '" + actual + "', '" + expected + "' expected");
          };
          TokenizerPrototype.omit = function(expected) {
            if (this.peek() === expected) {
              this.next();
              return true;
            }
            return false;
          };
          TokenizerPrototype.toString = function() {
            return "Tokenizer (" + this.index + "/" + this.source.length + " at line " + this.line + ")";
          };
          DotProto.Tokenizer = Tokenizer;
          var Parser = function(source) {
            this.tn = new Tokenizer(source);
            this.proto3 = false;
          };
          var ParserPrototype = Parser.prototype;
          ParserPrototype.parse = function() {
            var topLevel = {
              "name": "[ROOT]",
              "package": null,
              "messages": [],
              "enums": [],
              "imports": [],
              "options": {},
              "services": []
            };
            var token, head = true, weak;
            try {
              while (token = this.tn.next()) {
                switch (token) {
                  case "package":
                    if (!head || topLevel["package"] !== null)
                      throw Error("unexpected 'package'");
                    token = this.tn.next();
                    if (!Lang.TYPEREF.test(token))
                      throw Error("illegal package name: " + token);
                    this.tn.skip(";");
                    topLevel["package"] = token;
                    break;
                  case "import":
                    if (!head)
                      throw Error("unexpected 'import'");
                    token = this.tn.peek();
                    if (token === "public" || (weak = token === "weak"))
                      this.tn.next();
                    token = this._readString();
                    this.tn.skip(";");
                    if (!weak)
                      topLevel["imports"].push(token);
                    break;
                  case "syntax":
                    if (!head)
                      throw Error("unexpected 'syntax'");
                    this.tn.skip("=");
                    if ((topLevel["syntax"] = this._readString()) === "proto3")
                      this.proto3 = true;
                    this.tn.skip(";");
                    break;
                  case "message":
                    this._parseMessage(topLevel, null);
                    head = false;
                    break;
                  case "enum":
                    this._parseEnum(topLevel);
                    head = false;
                    break;
                  case "option":
                    this._parseOption(topLevel);
                    break;
                  case "service":
                    this._parseService(topLevel);
                    break;
                  case "extend":
                    this._parseExtend(topLevel);
                    break;
                  default:
                    throw Error("unexpected '" + token + "'");
                }
              }
            } catch (e) {
              e.message = "Parse error at line " + this.tn.line + ": " + e.message;
              throw e;
            }
            delete topLevel["name"];
            return topLevel;
          };
          Parser.parse = function(source) {
            return new Parser(source).parse();
          };
          function mkId(value, mayBeNegative) {
            var id = -1, sign = 1;
            if (value.charAt(0) == "-") {
              sign = -1;
              value = value.substring(1);
            }
            if (Lang.NUMBER_DEC.test(value))
              id = parseInt(value);
            else if (Lang.NUMBER_HEX.test(value))
              id = parseInt(value.substring(2), 16);
            else if (Lang.NUMBER_OCT.test(value))
              id = parseInt(value.substring(1), 8);
            else
              throw Error("illegal id value: " + (sign < 0 ? "-" : "") + value);
            id = sign * id | 0;
            if (!mayBeNegative && id < 0)
              throw Error("illegal id value: " + (sign < 0 ? "-" : "") + value);
            return id;
          }
          function mkNumber(val) {
            var sign = 1;
            if (val.charAt(0) == "-") {
              sign = -1;
              val = val.substring(1);
            }
            if (Lang.NUMBER_DEC.test(val))
              return sign * parseInt(val, 10);
            else if (Lang.NUMBER_HEX.test(val))
              return sign * parseInt(val.substring(2), 16);
            else if (Lang.NUMBER_OCT.test(val))
              return sign * parseInt(val.substring(1), 8);
            else if (val === "inf")
              return sign * Infinity;
            else if (val === "nan")
              return NaN;
            else if (Lang.NUMBER_FLT.test(val))
              return sign * parseFloat(val);
            throw Error("illegal number value: " + (sign < 0 ? "-" : "") + val);
          }
          ParserPrototype._readString = function() {
            var value = "", token, delim;
            do {
              delim = this.tn.next();
              if (delim !== "'" && delim !== '"')
                throw Error("illegal string delimiter: " + delim);
              value += this.tn.next();
              this.tn.skip(delim);
              token = this.tn.peek();
            } while (token === '"' || token === '"');
            return value;
          };
          ParserPrototype._readValue = function(mayBeTypeRef) {
            var token = this.tn.peek(), value;
            if (token === '"' || token === "'")
              return this._readString();
            this.tn.next();
            if (Lang.NUMBER.test(token))
              return mkNumber(token);
            if (Lang.BOOL.test(token))
              return token.toLowerCase() === "true";
            if (mayBeTypeRef && Lang.TYPEREF.test(token))
              return token;
            throw Error("illegal value: " + token);
          };
          ParserPrototype._parseOption = function(parent, isList) {
            var token = this.tn.next(), custom = false;
            if (token === "(") {
              custom = true;
              token = this.tn.next();
            }
            if (!Lang.TYPEREF.test(token))
              throw Error("illegal option name: " + token);
            var name = token;
            if (custom) {
              this.tn.skip(")");
              name = "(" + name + ")";
              token = this.tn.peek();
              if (Lang.FQTYPEREF.test(token)) {
                name += token;
                this.tn.next();
              }
            }
            this.tn.skip("=");
            this._parseOptionValue(parent, name);
            if (!isList)
              this.tn.skip(";");
          };
          function setOption(options, name, value) {
            if (typeof options[name] === "undefined")
              options[name] = value;
            else {
              if (!Array.isArray(options[name]))
                options[name] = [options[name]];
              options[name].push(value);
            }
          }
          ParserPrototype._parseOptionValue = function(parent, name) {
            var token = this.tn.peek();
            if (token !== "{") {
              setOption(parent["options"], name, this._readValue(true));
            } else {
              this.tn.skip("{");
              while ((token = this.tn.next()) !== "}") {
                if (!Lang.NAME.test(token))
                  throw Error("illegal option name: " + name + "." + token);
                if (this.tn.omit(":"))
                  setOption(parent["options"], name + "." + token, this._readValue(true));
                else
                  this._parseOptionValue(parent, name + "." + token);
              }
            }
          };
          ParserPrototype._parseService = function(parent) {
            var token = this.tn.next();
            if (!Lang.NAME.test(token))
              throw Error("illegal service name at line " + this.tn.line + ": " + token);
            var name = token;
            var svc = {
              "name": name,
              "rpc": {},
              "options": {}
            };
            this.tn.skip("{");
            while ((token = this.tn.next()) !== "}") {
              if (token === "option")
                this._parseOption(svc);
              else if (token === "rpc")
                this._parseServiceRPC(svc);
              else
                throw Error("illegal service token: " + token);
            }
            this.tn.omit(";");
            parent["services"].push(svc);
          };
          ParserPrototype._parseServiceRPC = function(svc) {
            var type = "rpc", token = this.tn.next();
            if (!Lang.NAME.test(token))
              throw Error("illegal rpc service method name: " + token);
            var name = token;
            var method = {
              "request": null,
              "response": null,
              "request_stream": false,
              "response_stream": false,
              "options": {}
            };
            this.tn.skip("(");
            token = this.tn.next();
            if (token.toLowerCase() === "stream") {
              method["request_stream"] = true;
              token = this.tn.next();
            }
            if (!Lang.TYPEREF.test(token))
              throw Error("illegal rpc service request type: " + token);
            method["request"] = token;
            this.tn.skip(")");
            token = this.tn.next();
            if (token.toLowerCase() !== "returns")
              throw Error("illegal rpc service request type delimiter: " + token);
            this.tn.skip("(");
            token = this.tn.next();
            if (token.toLowerCase() === "stream") {
              method["response_stream"] = true;
              token = this.tn.next();
            }
            method["response"] = token;
            this.tn.skip(")");
            token = this.tn.peek();
            if (token === "{") {
              this.tn.next();
              while ((token = this.tn.next()) !== "}") {
                if (token === "option")
                  this._parseOption(method);
                else
                  throw Error("illegal rpc service token: " + token);
              }
              this.tn.omit(";");
            } else
              this.tn.skip(";");
            if (typeof svc[type] === "undefined")
              svc[type] = {};
            svc[type][name] = method;
          };
          ParserPrototype._parseMessage = function(parent, fld) {
            var isGroup = !!fld, token = this.tn.next();
            var msg = {
              "name": "",
              "fields": [],
              "enums": [],
              "messages": [],
              "options": {},
              "services": [],
              "oneofs": {}
            };
            if (!Lang.NAME.test(token))
              throw Error("illegal " + (isGroup ? "group" : "message") + " name: " + token);
            msg["name"] = token;
            if (isGroup) {
              this.tn.skip("=");
              fld["id"] = mkId(this.tn.next());
              msg["isGroup"] = true;
            }
            token = this.tn.peek();
            if (token === "[" && fld)
              this._parseFieldOptions(fld);
            this.tn.skip("{");
            while ((token = this.tn.next()) !== "}") {
              if (Lang.RULE.test(token))
                this._parseMessageField(msg, token);
              else if (token === "oneof")
                this._parseMessageOneOf(msg);
              else if (token === "enum")
                this._parseEnum(msg);
              else if (token === "message")
                this._parseMessage(msg);
              else if (token === "option")
                this._parseOption(msg);
              else if (token === "service")
                this._parseService(msg);
              else if (token === "extensions")
                if (msg.hasOwnProperty("extensions")) {
                  msg["extensions"] = msg["extensions"].concat(this._parseExtensionRanges());
                } else {
                  msg["extensions"] = this._parseExtensionRanges();
                }
              else if (token === "reserved")
                this._parseIgnored();
              else if (token === "extend")
                this._parseExtend(msg);
              else if (Lang.TYPEREF.test(token)) {
                if (!this.proto3)
                  throw Error("illegal field rule: " + token);
                this._parseMessageField(msg, "optional", token);
              } else
                throw Error("illegal message token: " + token);
            }
            this.tn.omit(";");
            parent["messages"].push(msg);
            return msg;
          };
          ParserPrototype._parseIgnored = function() {
            while (this.tn.peek() !== ";")
              this.tn.next();
            this.tn.skip(";");
          };
          ParserPrototype._parseMessageField = function(msg, rule, type) {
            if (!Lang.RULE.test(rule))
              throw Error("illegal message field rule: " + rule);
            var fld = {
              "rule": rule,
              "type": "",
              "name": "",
              "options": {},
              "id": 0
            };
            var token;
            if (rule === "map") {
              if (type)
                throw Error("illegal type: " + type);
              this.tn.skip("<");
              token = this.tn.next();
              if (!Lang.TYPE.test(token) && !Lang.TYPEREF.test(token))
                throw Error("illegal message field type: " + token);
              fld["keytype"] = token;
              this.tn.skip(",");
              token = this.tn.next();
              if (!Lang.TYPE.test(token) && !Lang.TYPEREF.test(token))
                throw Error("illegal message field: " + token);
              fld["type"] = token;
              this.tn.skip(">");
              token = this.tn.next();
              if (!Lang.NAME.test(token))
                throw Error("illegal message field name: " + token);
              fld["name"] = token;
              this.tn.skip("=");
              fld["id"] = mkId(this.tn.next());
              token = this.tn.peek();
              if (token === "[")
                this._parseFieldOptions(fld);
              this.tn.skip(";");
            } else {
              type = typeof type !== "undefined" ? type : this.tn.next();
              if (type === "group") {
                var grp = this._parseMessage(msg, fld);
                if (!/^[A-Z]/.test(grp["name"]))
                  throw Error("illegal group name: " + grp["name"]);
                fld["type"] = grp["name"];
                fld["name"] = grp["name"].toLowerCase();
                this.tn.omit(";");
              } else {
                if (!Lang.TYPE.test(type) && !Lang.TYPEREF.test(type))
                  throw Error("illegal message field type: " + type);
                fld["type"] = type;
                token = this.tn.next();
                if (!Lang.NAME.test(token))
                  throw Error("illegal message field name: " + token);
                fld["name"] = token;
                this.tn.skip("=");
                fld["id"] = mkId(this.tn.next());
                token = this.tn.peek();
                if (token === "[")
                  this._parseFieldOptions(fld);
                this.tn.skip(";");
              }
            }
            msg["fields"].push(fld);
            return fld;
          };
          ParserPrototype._parseMessageOneOf = function(msg) {
            var token = this.tn.next();
            if (!Lang.NAME.test(token))
              throw Error("illegal oneof name: " + token);
            var name = token, fld;
            var fields = [];
            this.tn.skip("{");
            while ((token = this.tn.next()) !== "}") {
              fld = this._parseMessageField(msg, "optional", token);
              fld["oneof"] = name;
              fields.push(fld["id"]);
            }
            this.tn.omit(";");
            msg["oneofs"][name] = fields;
          };
          ParserPrototype._parseFieldOptions = function(fld) {
            this.tn.skip("[");
            var token, first = true;
            while ((token = this.tn.peek()) !== "]") {
              if (!first)
                this.tn.skip(",");
              this._parseOption(fld, true);
              first = false;
            }
            this.tn.next();
          };
          ParserPrototype._parseEnum = function(msg) {
            var enm = {
              "name": "",
              "values": [],
              "options": {}
            };
            var token = this.tn.next();
            if (!Lang.NAME.test(token))
              throw Error("illegal name: " + token);
            enm["name"] = token;
            this.tn.skip("{");
            while ((token = this.tn.next()) !== "}") {
              if (token === "option")
                this._parseOption(enm);
              else {
                if (!Lang.NAME.test(token))
                  throw Error("illegal name: " + token);
                this.tn.skip("=");
                var val = {
                  "name": token,
                  "id": mkId(this.tn.next(), true)
                };
                token = this.tn.peek();
                if (token === "[")
                  this._parseFieldOptions({ "options": {} });
                this.tn.skip(";");
                enm["values"].push(val);
              }
            }
            this.tn.omit(";");
            msg["enums"].push(enm);
          };
          ParserPrototype._parseExtensionRanges = function() {
            var ranges = [];
            var token, range, value;
            do {
              range = [];
              while (true) {
                token = this.tn.next();
                switch (token) {
                  case "min":
                    value = ProtoBuf2.ID_MIN;
                    break;
                  case "max":
                    value = ProtoBuf2.ID_MAX;
                    break;
                  default:
                    value = mkNumber(token);
                    break;
                }
                range.push(value);
                if (range.length === 2)
                  break;
                if (this.tn.peek() !== "to") {
                  range.push(value);
                  break;
                }
                this.tn.next();
              }
              ranges.push(range);
            } while (this.tn.omit(","));
            this.tn.skip(";");
            return ranges;
          };
          ParserPrototype._parseExtend = function(parent) {
            var token = this.tn.next();
            if (!Lang.TYPEREF.test(token))
              throw Error("illegal extend reference: " + token);
            var ext = {
              "ref": token,
              "fields": []
            };
            this.tn.skip("{");
            while ((token = this.tn.next()) !== "}") {
              if (Lang.RULE.test(token))
                this._parseMessageField(ext, token);
              else if (Lang.TYPEREF.test(token)) {
                if (!this.proto3)
                  throw Error("illegal field rule: " + token);
                this._parseMessageField(ext, "optional", token);
              } else
                throw Error("illegal extend token: " + token);
            }
            this.tn.omit(";");
            parent["messages"].push(ext);
            return ext;
          };
          ParserPrototype.toString = function() {
            return "Parser at line " + this.tn.line;
          };
          DotProto.Parser = Parser;
          return DotProto;
        }(ProtoBuf, ProtoBuf.Lang);
        ProtoBuf.Reflect = function(ProtoBuf2) {
          "use strict";
          var Reflect3 = {};
          var T = function(builder, parent, name) {
            this.builder = builder;
            this.parent = parent;
            this.name = name;
            this.className;
          };
          var TPrototype = T.prototype;
          TPrototype.fqn = function() {
            var name = this.name, ptr = this;
            do {
              ptr = ptr.parent;
              if (ptr == null)
                break;
              name = ptr.name + "." + name;
            } while (true);
            return name;
          };
          TPrototype.toString = function(includeClass) {
            return (includeClass ? this.className + " " : "") + this.fqn();
          };
          TPrototype.build = function() {
            throw Error(this.toString(true) + " cannot be built directly");
          };
          Reflect3.T = T;
          var Namespace = function(builder, parent, name, options, syntax) {
            T.call(this, builder, parent, name);
            this.className = "Namespace";
            this.children = [];
            this.options = options || {};
            this.syntax = syntax || "proto2";
          };
          var NamespacePrototype = Namespace.prototype = Object.create(T.prototype);
          NamespacePrototype.getChildren = function(type) {
            type = type || null;
            if (type == null)
              return this.children.slice();
            var children = [];
            for (var i = 0, k = this.children.length; i < k; ++i)
              if (this.children[i] instanceof type)
                children.push(this.children[i]);
            return children;
          };
          NamespacePrototype.addChild = function(child) {
            var other;
            if (other = this.getChild(child.name)) {
              if (other instanceof Message2.Field && other.name !== other.originalName && this.getChild(other.originalName) === null)
                other.name = other.originalName;
              else if (child instanceof Message2.Field && child.name !== child.originalName && this.getChild(child.originalName) === null)
                child.name = child.originalName;
              else
                throw Error("Duplicate name in namespace " + this.toString(true) + ": " + child.name);
            }
            this.children.push(child);
          };
          NamespacePrototype.getChild = function(nameOrId) {
            var key = typeof nameOrId === "number" ? "id" : "name";
            for (var i = 0, k = this.children.length; i < k; ++i)
              if (this.children[i][key] === nameOrId)
                return this.children[i];
            return null;
          };
          NamespacePrototype.resolve = function(qn, excludeNonNamespace) {
            var part = typeof qn === "string" ? qn.split(".") : qn, ptr = this, i = 0;
            if (part[i] === "") {
              while (ptr.parent !== null)
                ptr = ptr.parent;
              i++;
            }
            var child;
            do {
              do {
                if (!(ptr instanceof Reflect3.Namespace)) {
                  ptr = null;
                  break;
                }
                child = ptr.getChild(part[i]);
                if (!child || !(child instanceof Reflect3.T) || excludeNonNamespace && !(child instanceof Reflect3.Namespace)) {
                  ptr = null;
                  break;
                }
                ptr = child;
                i++;
              } while (i < part.length);
              if (ptr != null)
                break;
              if (this.parent !== null)
                return this.parent.resolve(qn, excludeNonNamespace);
            } while (ptr != null);
            return ptr;
          };
          NamespacePrototype.qn = function(t) {
            var part = [], ptr = t;
            do {
              part.unshift(ptr.name);
              ptr = ptr.parent;
            } while (ptr !== null);
            for (var len = 1; len <= part.length; len++) {
              var qn = part.slice(part.length - len);
              if (t === this.resolve(qn, t instanceof Reflect3.Namespace))
                return qn.join(".");
            }
            return t.fqn();
          };
          NamespacePrototype.build = function() {
            var ns = {};
            var children = this.children;
            for (var i = 0, k = children.length, child; i < k; ++i) {
              child = children[i];
              if (child instanceof Namespace)
                ns[child.name] = child.build();
            }
            if (Object.defineProperty)
              Object.defineProperty(ns, "$options", { "value": this.buildOpt() });
            return ns;
          };
          NamespacePrototype.buildOpt = function() {
            var opt = {}, keys = Object.keys(this.options);
            for (var i = 0, k = keys.length; i < k; ++i) {
              var key = keys[i], val = this.options[keys[i]];
              opt[key] = val;
            }
            return opt;
          };
          NamespacePrototype.getOption = function(name) {
            if (typeof name === "undefined")
              return this.options;
            return typeof this.options[name] !== "undefined" ? this.options[name] : null;
          };
          Reflect3.Namespace = Namespace;
          var Element = function(type, resolvedType, isMapKey, syntax, name) {
            this.type = type;
            this.resolvedType = resolvedType;
            this.isMapKey = isMapKey;
            this.syntax = syntax;
            this.name = name;
            if (isMapKey && ProtoBuf2.MAP_KEY_TYPES.indexOf(type) < 0)
              throw Error("Invalid map key type: " + type.name);
          };
          var ElementPrototype = Element.prototype;
          function mkDefault(type) {
            if (typeof type === "string")
              type = ProtoBuf2.TYPES[type];
            if (typeof type.defaultValue === "undefined")
              throw Error("default value for type " + type.name + " is not supported");
            if (type == ProtoBuf2.TYPES["bytes"])
              return new ByteBuffer(0);
            return type.defaultValue;
          }
          Element.defaultFieldValue = mkDefault;
          function mkLong(value, unsigned) {
            if (value && typeof value.low === "number" && typeof value.high === "number" && typeof value.unsigned === "boolean" && value.low === value.low && value.high === value.high)
              return new ProtoBuf2.Long(value.low, value.high, typeof unsigned === "undefined" ? value.unsigned : unsigned);
            if (typeof value === "string")
              return ProtoBuf2.Long.fromString(value, unsigned || false, 10);
            if (typeof value === "number")
              return ProtoBuf2.Long.fromNumber(value, unsigned || false);
            throw Error("not convertible to Long");
          }
          ElementPrototype.toString = function() {
            return (this.name || "") + (this.isMapKey ? "map" : "value") + " element";
          };
          ElementPrototype.verifyValue = function(value) {
            var self2 = this;
            function fail(val, msg) {
              throw Error("Illegal value for " + self2.toString(true) + " of type " + self2.type.name + ": " + val + " (" + msg + ")");
            }
            switch (this.type) {
              case ProtoBuf2.TYPES["int32"]:
              case ProtoBuf2.TYPES["sint32"]:
              case ProtoBuf2.TYPES["sfixed32"]:
                if (typeof value !== "number" || value === value && value % 1 !== 0)
                  fail(typeof value, "not an integer");
                return value > 4294967295 ? value | 0 : value;
              case ProtoBuf2.TYPES["uint32"]:
              case ProtoBuf2.TYPES["fixed32"]:
                if (typeof value !== "number" || value === value && value % 1 !== 0)
                  fail(typeof value, "not an integer");
                return value < 0 ? value >>> 0 : value;
              case ProtoBuf2.TYPES["int64"]:
              case ProtoBuf2.TYPES["sint64"]:
              case ProtoBuf2.TYPES["sfixed64"]: {
                if (ProtoBuf2.Long)
                  try {
                    return mkLong(value, false);
                  } catch (e) {
                    fail(typeof value, e.message);
                  }
                else
                  fail(typeof value, "requires Long.js");
              }
              case ProtoBuf2.TYPES["uint64"]:
              case ProtoBuf2.TYPES["fixed64"]: {
                if (ProtoBuf2.Long)
                  try {
                    return mkLong(value, true);
                  } catch (e) {
                    fail(typeof value, e.message);
                  }
                else
                  fail(typeof value, "requires Long.js");
              }
              case ProtoBuf2.TYPES["bool"]:
                if (typeof value !== "boolean")
                  fail(typeof value, "not a boolean");
                return value;
              case ProtoBuf2.TYPES["float"]:
              case ProtoBuf2.TYPES["double"]:
                if (typeof value !== "number")
                  fail(typeof value, "not a number");
                return value;
              case ProtoBuf2.TYPES["string"]:
                if (typeof value !== "string" && !(value && value instanceof String))
                  fail(typeof value, "not a string");
                return "" + value;
              case ProtoBuf2.TYPES["bytes"]:
                if (ByteBuffer.isByteBuffer(value))
                  return value;
                return ByteBuffer.wrap(value, "base64");
              case ProtoBuf2.TYPES["enum"]: {
                var values = this.resolvedType.getChildren(ProtoBuf2.Reflect.Enum.Value);
                for (i = 0; i < values.length; i++)
                  if (values[i].name == value)
                    return values[i].id;
                  else if (values[i].id == value)
                    return values[i].id;
                if (this.syntax === "proto3") {
                  if (typeof value !== "number" || value === value && value % 1 !== 0)
                    fail(typeof value, "not an integer");
                  if (value > 4294967295 || value < 0)
                    fail(typeof value, "not in range for uint32");
                  return value;
                } else {
                  fail(value, "not a valid enum value");
                }
              }
              case ProtoBuf2.TYPES["group"]:
              case ProtoBuf2.TYPES["message"]: {
                if (!value || typeof value !== "object")
                  fail(typeof value, "object expected");
                if (value instanceof this.resolvedType.clazz)
                  return value;
                if (value instanceof ProtoBuf2.Builder.Message) {
                  var obj = {};
                  for (var i in value)
                    if (value.hasOwnProperty(i))
                      obj[i] = value[i];
                  value = obj;
                }
                return new this.resolvedType.clazz(value);
              }
            }
            throw Error("[INTERNAL] Illegal value for " + this.toString(true) + ": " + value + " (undefined type " + this.type + ")");
          };
          ElementPrototype.calculateLength = function(id, value) {
            if (value === null)
              return 0;
            var n;
            switch (this.type) {
              case ProtoBuf2.TYPES["int32"]:
                return value < 0 ? ByteBuffer.calculateVarint64(value) : ByteBuffer.calculateVarint32(value);
              case ProtoBuf2.TYPES["uint32"]:
                return ByteBuffer.calculateVarint32(value);
              case ProtoBuf2.TYPES["sint32"]:
                return ByteBuffer.calculateVarint32(ByteBuffer.zigZagEncode32(value));
              case ProtoBuf2.TYPES["fixed32"]:
              case ProtoBuf2.TYPES["sfixed32"]:
              case ProtoBuf2.TYPES["float"]:
                return 4;
              case ProtoBuf2.TYPES["int64"]:
              case ProtoBuf2.TYPES["uint64"]:
                return ByteBuffer.calculateVarint64(value);
              case ProtoBuf2.TYPES["sint64"]:
                return ByteBuffer.calculateVarint64(ByteBuffer.zigZagEncode64(value));
              case ProtoBuf2.TYPES["fixed64"]:
              case ProtoBuf2.TYPES["sfixed64"]:
                return 8;
              case ProtoBuf2.TYPES["bool"]:
                return 1;
              case ProtoBuf2.TYPES["enum"]:
                return ByteBuffer.calculateVarint32(value);
              case ProtoBuf2.TYPES["double"]:
                return 8;
              case ProtoBuf2.TYPES["string"]:
                n = ByteBuffer.calculateUTF8Bytes(value);
                return ByteBuffer.calculateVarint32(n) + n;
              case ProtoBuf2.TYPES["bytes"]:
                if (value.remaining() < 0)
                  throw Error("Illegal value for " + this.toString(true) + ": " + value.remaining() + " bytes remaining");
                return ByteBuffer.calculateVarint32(value.remaining()) + value.remaining();
              case ProtoBuf2.TYPES["message"]:
                n = this.resolvedType.calculate(value);
                return ByteBuffer.calculateVarint32(n) + n;
              case ProtoBuf2.TYPES["group"]:
                n = this.resolvedType.calculate(value);
                return n + ByteBuffer.calculateVarint32(id << 3 | ProtoBuf2.WIRE_TYPES.ENDGROUP);
            }
            throw Error("[INTERNAL] Illegal value to encode in " + this.toString(true) + ": " + value + " (unknown type)");
          };
          ElementPrototype.encodeValue = function(id, value, buffer) {
            if (value === null)
              return buffer;
            switch (this.type) {
              case ProtoBuf2.TYPES["int32"]:
                if (value < 0)
                  buffer.writeVarint64(value);
                else
                  buffer.writeVarint32(value);
                break;
              case ProtoBuf2.TYPES["uint32"]:
                buffer.writeVarint32(value);
                break;
              case ProtoBuf2.TYPES["sint32"]:
                buffer.writeVarint32ZigZag(value);
                break;
              case ProtoBuf2.TYPES["fixed32"]:
                buffer.writeUint32(value);
                break;
              case ProtoBuf2.TYPES["sfixed32"]:
                buffer.writeInt32(value);
                break;
              case ProtoBuf2.TYPES["int64"]:
              case ProtoBuf2.TYPES["uint64"]:
                buffer.writeVarint64(value);
                break;
              case ProtoBuf2.TYPES["sint64"]:
                buffer.writeVarint64ZigZag(value);
                break;
              case ProtoBuf2.TYPES["fixed64"]:
                buffer.writeUint64(value);
                break;
              case ProtoBuf2.TYPES["sfixed64"]:
                buffer.writeInt64(value);
                break;
              case ProtoBuf2.TYPES["bool"]:
                if (typeof value === "string")
                  buffer.writeVarint32(value.toLowerCase() === "false" ? 0 : !!value);
                else
                  buffer.writeVarint32(value ? 1 : 0);
                break;
              case ProtoBuf2.TYPES["enum"]:
                buffer.writeVarint32(value);
                break;
              case ProtoBuf2.TYPES["float"]:
                buffer.writeFloat32(value);
                break;
              case ProtoBuf2.TYPES["double"]:
                buffer.writeFloat64(value);
                break;
              case ProtoBuf2.TYPES["string"]:
                buffer.writeVString(value);
                break;
              case ProtoBuf2.TYPES["bytes"]:
                if (value.remaining() < 0)
                  throw Error("Illegal value for " + this.toString(true) + ": " + value.remaining() + " bytes remaining");
                var prevOffset = value.offset;
                buffer.writeVarint32(value.remaining());
                buffer.append(value);
                value.offset = prevOffset;
                break;
              case ProtoBuf2.TYPES["message"]:
                var bb = new ByteBuffer().LE();
                this.resolvedType.encode(value, bb);
                buffer.writeVarint32(bb.offset);
                buffer.append(bb.flip());
                break;
              case ProtoBuf2.TYPES["group"]:
                this.resolvedType.encode(value, buffer);
                buffer.writeVarint32(id << 3 | ProtoBuf2.WIRE_TYPES.ENDGROUP);
                break;
              default:
                throw Error("[INTERNAL] Illegal value to encode in " + this.toString(true) + ": " + value + " (unknown type)");
            }
            return buffer;
          };
          ElementPrototype.decode = function(buffer, wireType, id) {
            if (wireType != this.type.wireType)
              throw Error("Unexpected wire type for element");
            var value, nBytes;
            switch (this.type) {
              case ProtoBuf2.TYPES["int32"]:
                return buffer.readVarint32() | 0;
              case ProtoBuf2.TYPES["uint32"]:
                return buffer.readVarint32() >>> 0;
              case ProtoBuf2.TYPES["sint32"]:
                return buffer.readVarint32ZigZag() | 0;
              case ProtoBuf2.TYPES["fixed32"]:
                return buffer.readUint32() >>> 0;
              case ProtoBuf2.TYPES["sfixed32"]:
                return buffer.readInt32() | 0;
              case ProtoBuf2.TYPES["int64"]:
                return buffer.readVarint64();
              case ProtoBuf2.TYPES["uint64"]:
                return buffer.readVarint64().toUnsigned();
              case ProtoBuf2.TYPES["sint64"]:
                return buffer.readVarint64ZigZag();
              case ProtoBuf2.TYPES["fixed64"]:
                return buffer.readUint64();
              case ProtoBuf2.TYPES["sfixed64"]:
                return buffer.readInt64();
              case ProtoBuf2.TYPES["bool"]:
                return !!buffer.readVarint32();
              case ProtoBuf2.TYPES["enum"]:
                return buffer.readVarint32();
              case ProtoBuf2.TYPES["float"]:
                return buffer.readFloat();
              case ProtoBuf2.TYPES["double"]:
                return buffer.readDouble();
              case ProtoBuf2.TYPES["string"]:
                return buffer.readVString();
              case ProtoBuf2.TYPES["bytes"]: {
                nBytes = buffer.readVarint32();
                if (buffer.remaining() < nBytes)
                  throw Error("Illegal number of bytes for " + this.toString(true) + ": " + nBytes + " required but got only " + buffer.remaining());
                value = buffer.clone();
                value.limit = value.offset + nBytes;
                buffer.offset += nBytes;
                return value;
              }
              case ProtoBuf2.TYPES["message"]: {
                nBytes = buffer.readVarint32();
                return this.resolvedType.decode(buffer, nBytes);
              }
              case ProtoBuf2.TYPES["group"]:
                return this.resolvedType.decode(buffer, -1, id);
            }
            throw Error("[INTERNAL] Illegal decode type");
          };
          ElementPrototype.valueFromString = function(str) {
            if (!this.isMapKey) {
              throw Error("valueFromString() called on non-map-key element");
            }
            switch (this.type) {
              case ProtoBuf2.TYPES["int32"]:
              case ProtoBuf2.TYPES["sint32"]:
              case ProtoBuf2.TYPES["sfixed32"]:
              case ProtoBuf2.TYPES["uint32"]:
              case ProtoBuf2.TYPES["fixed32"]:
                return this.verifyValue(parseInt(str));
              case ProtoBuf2.TYPES["int64"]:
              case ProtoBuf2.TYPES["sint64"]:
              case ProtoBuf2.TYPES["sfixed64"]:
              case ProtoBuf2.TYPES["uint64"]:
              case ProtoBuf2.TYPES["fixed64"]:
                return this.verifyValue(str);
              case ProtoBuf2.TYPES["bool"]:
                return str === "true";
              case ProtoBuf2.TYPES["string"]:
                return this.verifyValue(str);
              case ProtoBuf2.TYPES["bytes"]:
                return ByteBuffer.fromBinary(str);
            }
          };
          ElementPrototype.valueToString = function(value) {
            if (!this.isMapKey) {
              throw Error("valueToString() called on non-map-key element");
            }
            if (this.type === ProtoBuf2.TYPES["bytes"]) {
              return value.toString("binary");
            } else {
              return value.toString();
            }
          };
          Reflect3.Element = Element;
          var Message2 = function(builder, parent, name, options, isGroup, syntax) {
            Namespace.call(this, builder, parent, name, options, syntax);
            this.className = "Message";
            this.extensions = void 0;
            this.clazz = null;
            this.isGroup = !!isGroup;
            this._fields = null;
            this._fieldsById = null;
            this._fieldsByName = null;
          };
          var MessagePrototype = Message2.prototype = Object.create(Namespace.prototype);
          MessagePrototype.build = function(rebuild) {
            if (this.clazz && !rebuild)
              return this.clazz;
            var clazz = function(ProtoBuf3, T2) {
              var fields = T2.getChildren(ProtoBuf3.Reflect.Message.Field), oneofs = T2.getChildren(ProtoBuf3.Reflect.Message.OneOf);
              var Message3 = function(values, var_args) {
                ProtoBuf3.Builder.Message.call(this);
                for (var i3 = 0, k2 = oneofs.length; i3 < k2; ++i3)
                  this[oneofs[i3].name] = null;
                for (i3 = 0, k2 = fields.length; i3 < k2; ++i3) {
                  var field2 = fields[i3];
                  this[field2.name] = field2.repeated ? [] : field2.map ? new ProtoBuf3.Map(field2) : null;
                  if ((field2.required || T2.syntax === "proto3") && field2.defaultValue !== null)
                    this[field2.name] = field2.defaultValue;
                }
                if (arguments.length > 0) {
                  var value;
                  if (arguments.length === 1 && values !== null && typeof values === "object" && (typeof values.encode !== "function" || values instanceof Message3) && !Array.isArray(values) && !(values instanceof ProtoBuf3.Map) && !ByteBuffer.isByteBuffer(values) && !(values instanceof ArrayBuffer) && !(ProtoBuf3.Long && values instanceof ProtoBuf3.Long)) {
                    this.$set(values);
                  } else
                    for (i3 = 0, k2 = arguments.length; i3 < k2; ++i3)
                      if (typeof (value = arguments[i3]) !== "undefined")
                        this.$set(fields[i3].name, value);
                }
              };
              var MessagePrototype2 = Message3.prototype = Object.create(ProtoBuf3.Builder.Message.prototype);
              MessagePrototype2.add = function(key, value, noAssert) {
                var field2 = T2._fieldsByName[key];
                if (!noAssert) {
                  if (!field2)
                    throw Error(this + "#" + key + " is undefined");
                  if (!(field2 instanceof ProtoBuf3.Reflect.Message.Field))
                    throw Error(this + "#" + key + " is not a field: " + field2.toString(true));
                  if (!field2.repeated)
                    throw Error(this + "#" + key + " is not a repeated field");
                  value = field2.verifyValue(value, true);
                }
                if (this[key] === null)
                  this[key] = [];
                this[key].push(value);
                return this;
              };
              MessagePrototype2.$add = MessagePrototype2.add;
              MessagePrototype2.set = function(keyOrObj, value, noAssert) {
                if (keyOrObj && typeof keyOrObj === "object") {
                  noAssert = value;
                  for (var ikey in keyOrObj) {
                    if (keyOrObj.hasOwnProperty(ikey) && typeof (value = keyOrObj[ikey]) !== "undefined" && T2._oneofsByName[ikey] === void 0)
                      this.$set(ikey, value, noAssert);
                  }
                  return this;
                }
                var field2 = T2._fieldsByName[keyOrObj];
                if (!noAssert) {
                  if (!field2)
                    throw Error(this + "#" + keyOrObj + " is not a field: undefined");
                  if (!(field2 instanceof ProtoBuf3.Reflect.Message.Field))
                    throw Error(this + "#" + keyOrObj + " is not a field: " + field2.toString(true));
                  this[field2.name] = value = field2.verifyValue(value);
                } else
                  this[keyOrObj] = value;
                if (field2 && field2.oneof) {
                  var currentField = this[field2.oneof.name];
                  if (value !== null) {
                    if (currentField !== null && currentField !== field2.name)
                      this[currentField] = null;
                    this[field2.oneof.name] = field2.name;
                  } else if (currentField === keyOrObj)
                    this[field2.oneof.name] = null;
                }
                return this;
              };
              MessagePrototype2.$set = MessagePrototype2.set;
              MessagePrototype2.get = function(key, noAssert) {
                if (noAssert)
                  return this[key];
                var field2 = T2._fieldsByName[key];
                if (!field2 || !(field2 instanceof ProtoBuf3.Reflect.Message.Field))
                  throw Error(this + "#" + key + " is not a field: undefined");
                if (!(field2 instanceof ProtoBuf3.Reflect.Message.Field))
                  throw Error(this + "#" + key + " is not a field: " + field2.toString(true));
                return this[field2.name];
              };
              MessagePrototype2.$get = MessagePrototype2.get;
              for (var i2 = 0; i2 < fields.length; i2++) {
                var field = fields[i2];
                if (field instanceof ProtoBuf3.Reflect.Message.ExtensionField)
                  continue;
                if (T2.builder.options["populateAccessors"])
                  (function(field2) {
                    var Name = field2.originalName.replace(/(_[a-zA-Z])/g, function(match) {
                      return match.toUpperCase().replace("_", "");
                    });
                    Name = Name.substring(0, 1).toUpperCase() + Name.substring(1);
                    var name = field2.originalName.replace(/([A-Z])/g, function(match) {
                      return "_" + match;
                    });
                    var setter = function(value, noAssert) {
                      this[field2.name] = noAssert ? value : field2.verifyValue(value);
                      return this;
                    };
                    var getter = function() {
                      return this[field2.name];
                    };
                    if (T2.getChild("set" + Name) === null)
                      MessagePrototype2["set" + Name] = setter;
                    if (T2.getChild("set_" + name) === null)
                      MessagePrototype2["set_" + name] = setter;
                    if (T2.getChild("get" + Name) === null)
                      MessagePrototype2["get" + Name] = getter;
                    if (T2.getChild("get_" + name) === null)
                      MessagePrototype2["get_" + name] = getter;
                  })(field);
              }
              MessagePrototype2.encode = function(buffer, noVerify) {
                if (typeof buffer === "boolean")
                  noVerify = buffer, buffer = void 0;
                var isNew = false;
                if (!buffer)
                  buffer = new ByteBuffer(), isNew = true;
                var le = buffer.littleEndian;
                try {
                  T2.encode(this, buffer.LE(), noVerify);
                  return (isNew ? buffer.flip() : buffer).LE(le);
                } catch (e) {
                  buffer.LE(le);
                  throw e;
                }
              };
              Message3.encode = function(data, buffer, noVerify) {
                return new Message3(data).encode(buffer, noVerify);
              };
              MessagePrototype2.calculate = function() {
                return T2.calculate(this);
              };
              MessagePrototype2.encodeDelimited = function(buffer, noVerify) {
                var isNew = false;
                if (!buffer)
                  buffer = new ByteBuffer(), isNew = true;
                var enc = new ByteBuffer().LE();
                T2.encode(this, enc, noVerify).flip();
                buffer.writeVarint32(enc.remaining());
                buffer.append(enc);
                return isNew ? buffer.flip() : buffer;
              };
              MessagePrototype2.encodeAB = function() {
                try {
                  return this.encode().toArrayBuffer();
                } catch (e) {
                  if (e["encoded"])
                    e["encoded"] = e["encoded"].toArrayBuffer();
                  throw e;
                }
              };
              MessagePrototype2.toArrayBuffer = MessagePrototype2.encodeAB;
              MessagePrototype2.encodeNB = function() {
                try {
                  return this.encode().toBuffer();
                } catch (e) {
                  if (e["encoded"])
                    e["encoded"] = e["encoded"].toBuffer();
                  throw e;
                }
              };
              MessagePrototype2.toBuffer = MessagePrototype2.encodeNB;
              MessagePrototype2.encode64 = function() {
                try {
                  return this.encode().toBase64();
                } catch (e) {
                  if (e["encoded"])
                    e["encoded"] = e["encoded"].toBase64();
                  throw e;
                }
              };
              MessagePrototype2.toBase64 = MessagePrototype2.encode64;
              MessagePrototype2.encodeHex = function() {
                try {
                  return this.encode().toHex();
                } catch (e) {
                  if (e["encoded"])
                    e["encoded"] = e["encoded"].toHex();
                  throw e;
                }
              };
              MessagePrototype2.toHex = MessagePrototype2.encodeHex;
              function cloneRaw(obj, binaryAsBase64, longsAsStrings, resolvedType) {
                if (obj === null || typeof obj !== "object") {
                  if (resolvedType && resolvedType instanceof ProtoBuf3.Reflect.Enum) {
                    var name = ProtoBuf3.Reflect.Enum.getName(resolvedType.object, obj);
                    if (name !== null)
                      return name;
                  }
                  return obj;
                }
                if (ByteBuffer.isByteBuffer(obj))
                  return binaryAsBase64 ? obj.toBase64() : obj.toBuffer();
                if (ProtoBuf3.Long.isLong(obj))
                  return longsAsStrings ? obj.toString() : ProtoBuf3.Long.fromValue(obj);
                var clone;
                if (Array.isArray(obj)) {
                  clone = [];
                  obj.forEach(function(v, k2) {
                    clone[k2] = cloneRaw(v, binaryAsBase64, longsAsStrings, resolvedType);
                  });
                  return clone;
                }
                clone = {};
                if (obj instanceof ProtoBuf3.Map) {
                  var it2 = obj.entries();
                  for (var e = it2.next(); !e.done; e = it2.next())
                    clone[obj.keyElem.valueToString(e.value[0])] = cloneRaw(e.value[1], binaryAsBase64, longsAsStrings, obj.valueElem.resolvedType);
                  return clone;
                }
                var type = obj.$type, field2 = void 0;
                for (var i3 in obj)
                  if (obj.hasOwnProperty(i3)) {
                    if (type && (field2 = type.getChild(i3)))
                      clone[i3] = cloneRaw(obj[i3], binaryAsBase64, longsAsStrings, field2.resolvedType);
                    else
                      clone[i3] = cloneRaw(obj[i3], binaryAsBase64, longsAsStrings);
                  }
                return clone;
              }
              MessagePrototype2.toRaw = function(binaryAsBase64, longsAsStrings) {
                return cloneRaw(this, !!binaryAsBase64, !!longsAsStrings, this.$type);
              };
              MessagePrototype2.encodeJSON = function() {
                return JSON.stringify(
                  cloneRaw(
                    this,
                    true,
                    true,
                    this.$type
                  )
                );
              };
              Message3.decode = function(buffer, length, enc) {
                if (typeof length === "string")
                  enc = length, length = -1;
                if (typeof buffer === "string")
                  buffer = ByteBuffer.wrap(buffer, enc ? enc : "base64");
                else if (!ByteBuffer.isByteBuffer(buffer))
                  buffer = ByteBuffer.wrap(buffer);
                var le = buffer.littleEndian;
                try {
                  var msg = T2.decode(buffer.LE(), length);
                  buffer.LE(le);
                  return msg;
                } catch (e) {
                  buffer.LE(le);
                  throw e;
                }
              };
              Message3.decodeDelimited = function(buffer, enc) {
                if (typeof buffer === "string")
                  buffer = ByteBuffer.wrap(buffer, enc ? enc : "base64");
                else if (!ByteBuffer.isByteBuffer(buffer))
                  buffer = ByteBuffer.wrap(buffer);
                if (buffer.remaining() < 1)
                  return null;
                var off = buffer.offset, len = buffer.readVarint32();
                if (buffer.remaining() < len) {
                  buffer.offset = off;
                  return null;
                }
                try {
                  var msg = T2.decode(buffer.slice(buffer.offset, buffer.offset + len).LE());
                  buffer.offset += len;
                  return msg;
                } catch (err) {
                  buffer.offset += len;
                  throw err;
                }
              };
              Message3.decode64 = function(str) {
                return Message3.decode(str, "base64");
              };
              Message3.decodeHex = function(str) {
                return Message3.decode(str, "hex");
              };
              Message3.decodeJSON = function(str) {
                return new Message3(JSON.parse(str));
              };
              MessagePrototype2.toString = function() {
                return T2.toString();
              };
              var $optionsS;
              var $options;
              var $typeS;
              var $type;
              if (Object.defineProperty)
                Object.defineProperty(Message3, "$options", { "value": T2.buildOpt() }), Object.defineProperty(MessagePrototype2, "$options", { "value": Message3["$options"] }), Object.defineProperty(Message3, "$type", { "value": T2 }), Object.defineProperty(MessagePrototype2, "$type", { "value": T2 });
              return Message3;
            }(ProtoBuf2, this);
            this._fields = [];
            this._fieldsById = {};
            this._fieldsByName = {};
            this._oneofsByName = {};
            for (var i = 0, k = this.children.length, child; i < k; i++) {
              child = this.children[i];
              if (child instanceof Enum || child instanceof Message2 || child instanceof Service) {
                if (clazz.hasOwnProperty(child.name))
                  throw Error("Illegal reflect child of " + this.toString(true) + ": " + child.toString(true) + " cannot override static property '" + child.name + "'");
                clazz[child.name] = child.build();
              } else if (child instanceof Message2.Field)
                child.build(), this._fields.push(child), this._fieldsById[child.id] = child, this._fieldsByName[child.name] = child;
              else if (child instanceof Message2.OneOf) {
                this._oneofsByName[child.name] = child;
              } else if (!(child instanceof Message2.OneOf) && !(child instanceof Extension))
                throw Error("Illegal reflect child of " + this.toString(true) + ": " + this.children[i].toString(true));
            }
            return this.clazz = clazz;
          };
          MessagePrototype.encode = function(message, buffer, noVerify) {
            var fieldMissing = null, field;
            for (var i = 0, k = this._fields.length, val; i < k; ++i) {
              field = this._fields[i];
              val = message[field.name];
              if (field.required && val === null) {
                if (fieldMissing === null)
                  fieldMissing = field;
              } else
                field.encode(noVerify ? val : field.verifyValue(val), buffer, message);
            }
            if (fieldMissing !== null) {
              var err = Error("Missing at least one required field for " + this.toString(true) + ": " + fieldMissing);
              err["encoded"] = buffer;
              throw err;
            }
            return buffer;
          };
          MessagePrototype.calculate = function(message) {
            for (var n = 0, i = 0, k = this._fields.length, field, val; i < k; ++i) {
              field = this._fields[i];
              val = message[field.name];
              if (field.required && val === null)
                throw Error("Missing at least one required field for " + this.toString(true) + ": " + field);
              else
                n += field.calculate(val, message);
            }
            return n;
          };
          function skipTillGroupEnd(expectedId, buf) {
            var tag = buf.readVarint32(), wireType = tag & 7, id = tag >>> 3;
            switch (wireType) {
              case ProtoBuf2.WIRE_TYPES.VARINT:
                do
                  tag = buf.readUint8();
                while ((tag & 128) === 128);
                break;
              case ProtoBuf2.WIRE_TYPES.BITS64:
                buf.offset += 8;
                break;
              case ProtoBuf2.WIRE_TYPES.LDELIM:
                tag = buf.readVarint32();
                buf.offset += tag;
                break;
              case ProtoBuf2.WIRE_TYPES.STARTGROUP:
                skipTillGroupEnd(id, buf);
                break;
              case ProtoBuf2.WIRE_TYPES.ENDGROUP:
                if (id === expectedId)
                  return false;
                else
                  throw Error("Illegal GROUPEND after unknown group: " + id + " (" + expectedId + " expected)");
              case ProtoBuf2.WIRE_TYPES.BITS32:
                buf.offset += 4;
                break;
              default:
                throw Error("Illegal wire type in unknown group " + expectedId + ": " + wireType);
            }
            return true;
          }
          MessagePrototype.decode = function(buffer, length, expectedGroupEndId) {
            if (typeof length !== "number")
              length = -1;
            var start = buffer.offset, msg = new this.clazz(), tag, wireType, id, field;
            while (buffer.offset < start + length || length === -1 && buffer.remaining() > 0) {
              tag = buffer.readVarint32();
              wireType = tag & 7;
              id = tag >>> 3;
              if (wireType === ProtoBuf2.WIRE_TYPES.ENDGROUP) {
                if (id !== expectedGroupEndId)
                  throw Error("Illegal group end indicator for " + this.toString(true) + ": " + id + " (" + (expectedGroupEndId ? expectedGroupEndId + " expected" : "not a group") + ")");
                break;
              }
              if (!(field = this._fieldsById[id])) {
                switch (wireType) {
                  case ProtoBuf2.WIRE_TYPES.VARINT:
                    buffer.readVarint32();
                    break;
                  case ProtoBuf2.WIRE_TYPES.BITS32:
                    buffer.offset += 4;
                    break;
                  case ProtoBuf2.WIRE_TYPES.BITS64:
                    buffer.offset += 8;
                    break;
                  case ProtoBuf2.WIRE_TYPES.LDELIM:
                    var len = buffer.readVarint32();
                    buffer.offset += len;
                    break;
                  case ProtoBuf2.WIRE_TYPES.STARTGROUP:
                    while (skipTillGroupEnd(id, buffer)) {
                    }
                    break;
                  default:
                    throw Error("Illegal wire type for unknown field " + id + " in " + this.toString(true) + "#decode: " + wireType);
                }
                continue;
              }
              if (field.repeated && !field.options["packed"]) {
                msg[field.name].push(field.decode(wireType, buffer));
              } else if (field.map) {
                var keyval = field.decode(wireType, buffer);
                msg[field.name].set(keyval[0], keyval[1]);
              } else {
                msg[field.name] = field.decode(wireType, buffer);
                if (field.oneof) {
                  var currentField = msg[field.oneof.name];
                  if (currentField !== null && currentField !== field.name)
                    msg[currentField] = null;
                  msg[field.oneof.name] = field.name;
                }
              }
            }
            for (var i = 0, k = this._fields.length; i < k; ++i) {
              field = this._fields[i];
              if (msg[field.name] === null) {
                if (this.syntax === "proto3") {
                  msg[field.name] = field.defaultValue;
                } else if (field.required) {
                  var err = Error("Missing at least one required field for " + this.toString(true) + ": " + field.name);
                  err["decoded"] = msg;
                  throw err;
                } else if (ProtoBuf2.populateDefaults && field.defaultValue !== null)
                  msg[field.name] = field.defaultValue;
              }
            }
            return msg;
          };
          Reflect3.Message = Message2;
          var Field = function(builder, message, rule, keytype, type, name, id, options, oneof, syntax) {
            T.call(this, builder, message, name);
            this.className = "Message.Field";
            this.required = rule === "required";
            this.repeated = rule === "repeated";
            this.map = rule === "map";
            this.keyType = keytype || null;
            this.type = type;
            this.resolvedType = null;
            this.id = id;
            this.options = options || {};
            this.defaultValue = null;
            this.oneof = oneof || null;
            this.syntax = syntax || "proto2";
            this.originalName = this.name;
            this.element = null;
            this.keyElement = null;
            if (this.builder.options["convertFieldsToCamelCase"] && !(this instanceof Message2.ExtensionField))
              this.name = ProtoBuf2.Util.toCamelCase(this.name);
          };
          var FieldPrototype = Field.prototype = Object.create(T.prototype);
          FieldPrototype.build = function() {
            this.element = new Element(this.type, this.resolvedType, false, this.syntax, this.name);
            if (this.map)
              this.keyElement = new Element(this.keyType, void 0, true, this.syntax, this.name);
            if (this.syntax === "proto3" && !this.repeated && !this.map)
              this.defaultValue = Element.defaultFieldValue(this.type);
            else if (typeof this.options["default"] !== "undefined")
              this.defaultValue = this.verifyValue(this.options["default"]);
          };
          FieldPrototype.verifyValue = function(value, skipRepeated) {
            skipRepeated = skipRepeated || false;
            var self2 = this;
            function fail(val, msg) {
              throw Error("Illegal value for " + self2.toString(true) + " of type " + self2.type.name + ": " + val + " (" + msg + ")");
            }
            if (value === null) {
              if (this.required)
                fail(typeof value, "required");
              if (this.syntax === "proto3" && this.type !== ProtoBuf2.TYPES["message"])
                fail(typeof value, "proto3 field without field presence cannot be null");
              return null;
            }
            var i;
            if (this.repeated && !skipRepeated) {
              if (!Array.isArray(value))
                value = [value];
              var res = [];
              for (i = 0; i < value.length; i++)
                res.push(this.element.verifyValue(value[i]));
              return res;
            }
            if (this.map && !skipRepeated) {
              if (!(value instanceof ProtoBuf2.Map)) {
                if (!(value instanceof Object)) {
                  fail(
                    typeof value,
                    "expected ProtoBuf.Map or raw object for map field"
                  );
                }
                return new ProtoBuf2.Map(this, value);
              } else {
                return value;
              }
            }
            if (!this.repeated && Array.isArray(value))
              fail(typeof value, "no array expected");
            return this.element.verifyValue(value);
          };
          FieldPrototype.hasWirePresence = function(value, message) {
            if (this.syntax !== "proto3")
              return value !== null;
            if (this.oneof && message[this.oneof.name] === this.name)
              return true;
            switch (this.type) {
              case ProtoBuf2.TYPES["int32"]:
              case ProtoBuf2.TYPES["sint32"]:
              case ProtoBuf2.TYPES["sfixed32"]:
              case ProtoBuf2.TYPES["uint32"]:
              case ProtoBuf2.TYPES["fixed32"]:
                return value !== 0;
              case ProtoBuf2.TYPES["int64"]:
              case ProtoBuf2.TYPES["sint64"]:
              case ProtoBuf2.TYPES["sfixed64"]:
              case ProtoBuf2.TYPES["uint64"]:
              case ProtoBuf2.TYPES["fixed64"]:
                return value.low !== 0 || value.high !== 0;
              case ProtoBuf2.TYPES["bool"]:
                return value;
              case ProtoBuf2.TYPES["float"]:
              case ProtoBuf2.TYPES["double"]:
                return value !== 0;
              case ProtoBuf2.TYPES["string"]:
                return value.length > 0;
              case ProtoBuf2.TYPES["bytes"]:
                return value.remaining() > 0;
              case ProtoBuf2.TYPES["enum"]:
                return value !== 0;
              case ProtoBuf2.TYPES["message"]:
                return value !== null;
              default:
                return true;
            }
          };
          FieldPrototype.encode = function(value, buffer, message) {
            if (this.type === null || typeof this.type !== "object")
              throw Error("[INTERNAL] Unresolved type in " + this.toString(true) + ": " + this.type);
            if (value === null || this.repeated && value.length == 0)
              return buffer;
            try {
              if (this.repeated) {
                var i;
                if (this.options["packed"] && ProtoBuf2.PACKABLE_WIRE_TYPES.indexOf(this.type.wireType) >= 0) {
                  buffer.writeVarint32(this.id << 3 | ProtoBuf2.WIRE_TYPES.LDELIM);
                  buffer.ensureCapacity(buffer.offset += 1);
                  var start = buffer.offset;
                  for (i = 0; i < value.length; i++)
                    this.element.encodeValue(this.id, value[i], buffer);
                  var len = buffer.offset - start, varintLen = ByteBuffer.calculateVarint32(len);
                  if (varintLen > 1) {
                    var contents = buffer.slice(start, buffer.offset);
                    start += varintLen - 1;
                    buffer.offset = start;
                    buffer.append(contents);
                  }
                  buffer.writeVarint32(len, start - varintLen);
                } else {
                  for (i = 0; i < value.length; i++)
                    buffer.writeVarint32(this.id << 3 | this.type.wireType), this.element.encodeValue(this.id, value[i], buffer);
                }
              } else if (this.map) {
                value.forEach(function(val, key, m) {
                  var length = ByteBuffer.calculateVarint32(1 << 3 | this.keyType.wireType) + this.keyElement.calculateLength(1, key) + ByteBuffer.calculateVarint32(2 << 3 | this.type.wireType) + this.element.calculateLength(2, val);
                  buffer.writeVarint32(this.id << 3 | ProtoBuf2.WIRE_TYPES.LDELIM);
                  buffer.writeVarint32(length);
                  buffer.writeVarint32(1 << 3 | this.keyType.wireType);
                  this.keyElement.encodeValue(1, key, buffer);
                  buffer.writeVarint32(2 << 3 | this.type.wireType);
                  this.element.encodeValue(2, val, buffer);
                }, this);
              } else {
                if (this.hasWirePresence(value, message)) {
                  buffer.writeVarint32(this.id << 3 | this.type.wireType);
                  this.element.encodeValue(this.id, value, buffer);
                }
              }
            } catch (e) {
              throw Error("Illegal value for " + this.toString(true) + ": " + value + " (" + e + ")");
            }
            return buffer;
          };
          FieldPrototype.calculate = function(value, message) {
            value = this.verifyValue(value);
            if (this.type === null || typeof this.type !== "object")
              throw Error("[INTERNAL] Unresolved type in " + this.toString(true) + ": " + this.type);
            if (value === null || this.repeated && value.length == 0)
              return 0;
            var n = 0;
            try {
              if (this.repeated) {
                var i, ni;
                if (this.options["packed"] && ProtoBuf2.PACKABLE_WIRE_TYPES.indexOf(this.type.wireType) >= 0) {
                  n += ByteBuffer.calculateVarint32(this.id << 3 | ProtoBuf2.WIRE_TYPES.LDELIM);
                  ni = 0;
                  for (i = 0; i < value.length; i++)
                    ni += this.element.calculateLength(this.id, value[i]);
                  n += ByteBuffer.calculateVarint32(ni);
                  n += ni;
                } else {
                  for (i = 0; i < value.length; i++)
                    n += ByteBuffer.calculateVarint32(this.id << 3 | this.type.wireType), n += this.element.calculateLength(this.id, value[i]);
                }
              } else if (this.map) {
                value.forEach(function(val, key, m) {
                  var length = ByteBuffer.calculateVarint32(1 << 3 | this.keyType.wireType) + this.keyElement.calculateLength(1, key) + ByteBuffer.calculateVarint32(2 << 3 | this.type.wireType) + this.element.calculateLength(2, val);
                  n += ByteBuffer.calculateVarint32(this.id << 3 | ProtoBuf2.WIRE_TYPES.LDELIM);
                  n += ByteBuffer.calculateVarint32(length);
                  n += length;
                }, this);
              } else {
                if (this.hasWirePresence(value, message)) {
                  n += ByteBuffer.calculateVarint32(this.id << 3 | this.type.wireType);
                  n += this.element.calculateLength(this.id, value);
                }
              }
            } catch (e) {
              throw Error("Illegal value for " + this.toString(true) + ": " + value + " (" + e + ")");
            }
            return n;
          };
          FieldPrototype.decode = function(wireType, buffer, skipRepeated) {
            var value, nBytes;
            var wireTypeOK = !this.map && wireType == this.type.wireType || !skipRepeated && this.repeated && this.options["packed"] && wireType == ProtoBuf2.WIRE_TYPES.LDELIM || this.map && wireType == ProtoBuf2.WIRE_TYPES.LDELIM;
            if (!wireTypeOK)
              throw Error("Illegal wire type for field " + this.toString(true) + ": " + wireType + " (" + this.type.wireType + " expected)");
            if (wireType == ProtoBuf2.WIRE_TYPES.LDELIM && this.repeated && this.options["packed"] && ProtoBuf2.PACKABLE_WIRE_TYPES.indexOf(this.type.wireType) >= 0) {
              if (!skipRepeated) {
                nBytes = buffer.readVarint32();
                nBytes = buffer.offset + nBytes;
                var values = [];
                while (buffer.offset < nBytes)
                  values.push(this.decode(this.type.wireType, buffer, true));
                return values;
              }
            }
            if (this.map) {
              var key = Element.defaultFieldValue(this.keyType);
              value = Element.defaultFieldValue(this.type);
              nBytes = buffer.readVarint32();
              if (buffer.remaining() < nBytes)
                throw Error("Illegal number of bytes for " + this.toString(true) + ": " + nBytes + " required but got only " + buffer.remaining());
              var msgbuf = buffer.clone();
              msgbuf.limit = msgbuf.offset + nBytes;
              buffer.offset += nBytes;
              while (msgbuf.remaining() > 0) {
                var tag = msgbuf.readVarint32();
                wireType = tag & 7;
                var id = tag >>> 3;
                if (id === 1) {
                  key = this.keyElement.decode(msgbuf, wireType, id);
                } else if (id === 2) {
                  value = this.element.decode(msgbuf, wireType, id);
                } else {
                  throw Error("Unexpected tag in map field key/value submessage");
                }
              }
              return [key, value];
            }
            return this.element.decode(buffer, wireType, this.id);
          };
          Reflect3.Message.Field = Field;
          var ExtensionField = function(builder, message, rule, type, name, id, options) {
            Field.call(this, builder, message, rule, null, type, name, id, options);
            this.extension;
          };
          ExtensionField.prototype = Object.create(Field.prototype);
          Reflect3.Message.ExtensionField = ExtensionField;
          var OneOf = function(builder, message, name) {
            T.call(this, builder, message, name);
            this.fields = [];
          };
          Reflect3.Message.OneOf = OneOf;
          var Enum = function(builder, parent, name, options, syntax) {
            Namespace.call(this, builder, parent, name, options, syntax);
            this.className = "Enum";
            this.object = null;
          };
          Enum.getName = function(enm, value) {
            var keys = Object.keys(enm);
            for (var i = 0, key; i < keys.length; ++i)
              if (enm[key = keys[i]] === value)
                return key;
            return null;
          };
          var EnumPrototype = Enum.prototype = Object.create(Namespace.prototype);
          EnumPrototype.build = function(rebuild) {
            if (this.object && !rebuild)
              return this.object;
            var enm = new ProtoBuf2.Builder.Enum(), values = this.getChildren(Enum.Value);
            for (var i = 0, k = values.length; i < k; ++i)
              enm[values[i]["name"]] = values[i]["id"];
            if (Object.defineProperty)
              Object.defineProperty(enm, "$options", {
                "value": this.buildOpt(),
                "enumerable": false
              });
            return this.object = enm;
          };
          Reflect3.Enum = Enum;
          var Value = function(builder, enm, name, id) {
            T.call(this, builder, enm, name);
            this.className = "Enum.Value";
            this.id = id;
          };
          Value.prototype = Object.create(T.prototype);
          Reflect3.Enum.Value = Value;
          var Extension = function(builder, parent, name, field) {
            T.call(this, builder, parent, name);
            this.field = field;
          };
          Extension.prototype = Object.create(T.prototype);
          Reflect3.Extension = Extension;
          var Service = function(builder, root, name, options) {
            Namespace.call(this, builder, root, name, options);
            this.className = "Service";
            this.clazz = null;
          };
          var ServicePrototype = Service.prototype = Object.create(Namespace.prototype);
          ServicePrototype.build = function(rebuild) {
            if (this.clazz && !rebuild)
              return this.clazz;
            return this.clazz = function(ProtoBuf3, T2) {
              var Service2 = function(rpcImpl) {
                ProtoBuf3.Builder.Service.call(this);
                this.rpcImpl = rpcImpl || function(name, msg, callback) {
                  setTimeout(callback.bind(this, Error("Not implemented, see: https://github.com/dcodeIO/ProtoBuf.js/wiki/Services")), 0);
                };
              };
              var ServicePrototype2 = Service2.prototype = Object.create(ProtoBuf3.Builder.Service.prototype);
              var rpc = T2.getChildren(ProtoBuf3.Reflect.Service.RPCMethod);
              for (var i = 0; i < rpc.length; i++) {
                (function(method) {
                  ServicePrototype2[method.name] = function(req, callback) {
                    try {
                      try {
                        req = method.resolvedRequestType.clazz.decode(ByteBuffer.wrap(req));
                      } catch (err) {
                        if (!(err instanceof TypeError))
                          throw err;
                      }
                      if (req === null || typeof req !== "object")
                        throw Error("Illegal arguments");
                      if (!(req instanceof method.resolvedRequestType.clazz))
                        req = new method.resolvedRequestType.clazz(req);
                      this.rpcImpl(method.fqn(), req, function(err, res) {
                        if (err) {
                          callback(err);
                          return;
                        }
                        if (res === null)
                          res = "";
                        try {
                          res = method.resolvedResponseType.clazz.decode(res);
                        } catch (notABuffer) {
                        }
                        if (!res || !(res instanceof method.resolvedResponseType.clazz)) {
                          callback(Error("Illegal response type received in service method " + T2.name + "#" + method.name));
                          return;
                        }
                        callback(null, res);
                      });
                    } catch (err) {
                      setTimeout(callback.bind(this, err), 0);
                    }
                  };
                  Service2[method.name] = function(rpcImpl, req, callback) {
                    new Service2(rpcImpl)[method.name](req, callback);
                  };
                  if (Object.defineProperty)
                    Object.defineProperty(Service2[method.name], "$options", { "value": method.buildOpt() }), Object.defineProperty(ServicePrototype2[method.name], "$options", { "value": Service2[method.name]["$options"] });
                })(rpc[i]);
              }
              var $optionsS;
              var $options;
              var $typeS;
              var $type;
              if (Object.defineProperty)
                Object.defineProperty(Service2, "$options", { "value": T2.buildOpt() }), Object.defineProperty(ServicePrototype2, "$options", { "value": Service2["$options"] }), Object.defineProperty(Service2, "$type", { "value": T2 }), Object.defineProperty(ServicePrototype2, "$type", { "value": T2 });
              return Service2;
            }(ProtoBuf2, this);
          };
          Reflect3.Service = Service;
          var Method = function(builder, svc, name, options) {
            T.call(this, builder, svc, name);
            this.className = "Service.Method";
            this.options = options || {};
          };
          var MethodPrototype = Method.prototype = Object.create(T.prototype);
          MethodPrototype.buildOpt = NamespacePrototype.buildOpt;
          Reflect3.Service.Method = Method;
          var RPCMethod = function(builder, svc, name, request, response, request_stream, response_stream, options) {
            Method.call(this, builder, svc, name, options);
            this.className = "Service.RPCMethod";
            this.requestName = request;
            this.responseName = response;
            this.requestStream = request_stream;
            this.responseStream = response_stream;
            this.resolvedRequestType = null;
            this.resolvedResponseType = null;
          };
          RPCMethod.prototype = Object.create(Method.prototype);
          Reflect3.Service.RPCMethod = RPCMethod;
          return Reflect3;
        }(ProtoBuf);
        ProtoBuf.Builder = function(ProtoBuf2, Lang, Reflect3) {
          "use strict";
          var Builder = function(options) {
            this.ns = new Reflect3.Namespace(this, null, "");
            this.ptr = this.ns;
            this.resolved = false;
            this.result = null;
            this.files = {};
            this.importRoot = null;
            this.options = options || {};
          };
          var BuilderPrototype = Builder.prototype;
          Builder.isMessage = function(def) {
            if (typeof def["name"] !== "string")
              return false;
            if (typeof def["values"] !== "undefined" || typeof def["rpc"] !== "undefined")
              return false;
            return true;
          };
          Builder.isMessageField = function(def) {
            if (typeof def["rule"] !== "string" || typeof def["name"] !== "string" || typeof def["type"] !== "string" || typeof def["id"] === "undefined")
              return false;
            return true;
          };
          Builder.isEnum = function(def) {
            if (typeof def["name"] !== "string")
              return false;
            if (typeof def["values"] === "undefined" || !Array.isArray(def["values"]) || def["values"].length === 0)
              return false;
            return true;
          };
          Builder.isService = function(def) {
            if (typeof def["name"] !== "string" || typeof def["rpc"] !== "object" || !def["rpc"])
              return false;
            return true;
          };
          Builder.isExtend = function(def) {
            if (typeof def["ref"] !== "string")
              return false;
            return true;
          };
          BuilderPrototype.reset = function() {
            this.ptr = this.ns;
            return this;
          };
          BuilderPrototype.define = function(namespace) {
            if (typeof namespace !== "string" || !Lang.TYPEREF.test(namespace))
              throw Error("illegal namespace: " + namespace);
            namespace.split(".").forEach(function(part) {
              var ns = this.ptr.getChild(part);
              if (ns === null)
                this.ptr.addChild(ns = new Reflect3.Namespace(this, this.ptr, part));
              this.ptr = ns;
            }, this);
            return this;
          };
          BuilderPrototype.create = function(defs) {
            if (!defs)
              return this;
            if (!Array.isArray(defs))
              defs = [defs];
            else {
              if (defs.length === 0)
                return this;
              defs = defs.slice();
            }
            var stack = [defs];
            while (stack.length > 0) {
              defs = stack.pop();
              if (!Array.isArray(defs))
                throw Error("not a valid namespace: " + JSON.stringify(defs));
              while (defs.length > 0) {
                var def = defs.shift();
                if (Builder.isMessage(def)) {
                  var obj = new Reflect3.Message(this, this.ptr, def["name"], def["options"], def["isGroup"], def["syntax"]);
                  var oneofs = {};
                  if (def["oneofs"])
                    Object.keys(def["oneofs"]).forEach(function(name) {
                      obj.addChild(oneofs[name] = new Reflect3.Message.OneOf(this, obj, name));
                    }, this);
                  if (def["fields"])
                    def["fields"].forEach(function(fld) {
                      if (obj.getChild(fld["id"] | 0) !== null)
                        throw Error("duplicate or invalid field id in " + obj.name + ": " + fld["id"]);
                      if (fld["options"] && typeof fld["options"] !== "object")
                        throw Error("illegal field options in " + obj.name + "#" + fld["name"]);
                      var oneof = null;
                      if (typeof fld["oneof"] === "string" && !(oneof = oneofs[fld["oneof"]]))
                        throw Error("illegal oneof in " + obj.name + "#" + fld["name"] + ": " + fld["oneof"]);
                      fld = new Reflect3.Message.Field(this, obj, fld["rule"], fld["keytype"], fld["type"], fld["name"], fld["id"], fld["options"], oneof, def["syntax"]);
                      if (oneof)
                        oneof.fields.push(fld);
                      obj.addChild(fld);
                    }, this);
                  var subObj = [];
                  if (def["enums"])
                    def["enums"].forEach(function(enm) {
                      subObj.push(enm);
                    });
                  if (def["messages"])
                    def["messages"].forEach(function(msg) {
                      subObj.push(msg);
                    });
                  if (def["services"])
                    def["services"].forEach(function(svc) {
                      subObj.push(svc);
                    });
                  if (def["extensions"]) {
                    if (typeof def["extensions"][0] === "number")
                      obj.extensions = [def["extensions"]];
                    else
                      obj.extensions = def["extensions"];
                  }
                  this.ptr.addChild(obj);
                  if (subObj.length > 0) {
                    stack.push(defs);
                    defs = subObj;
                    subObj = null;
                    this.ptr = obj;
                    obj = null;
                    continue;
                  }
                  subObj = null;
                } else if (Builder.isEnum(def)) {
                  obj = new Reflect3.Enum(this, this.ptr, def["name"], def["options"], def["syntax"]);
                  def["values"].forEach(function(val) {
                    obj.addChild(new Reflect3.Enum.Value(this, obj, val["name"], val["id"]));
                  }, this);
                  this.ptr.addChild(obj);
                } else if (Builder.isService(def)) {
                  obj = new Reflect3.Service(this, this.ptr, def["name"], def["options"]);
                  Object.keys(def["rpc"]).forEach(function(name) {
                    var mtd = def["rpc"][name];
                    obj.addChild(new Reflect3.Service.RPCMethod(this, obj, name, mtd["request"], mtd["response"], !!mtd["request_stream"], !!mtd["response_stream"], mtd["options"]));
                  }, this);
                  this.ptr.addChild(obj);
                } else if (Builder.isExtend(def)) {
                  obj = this.ptr.resolve(def["ref"], true);
                  if (obj) {
                    def["fields"].forEach(function(fld) {
                      if (obj.getChild(fld["id"] | 0) !== null)
                        throw Error("duplicate extended field id in " + obj.name + ": " + fld["id"]);
                      if (obj.extensions) {
                        var valid = false;
                        obj.extensions.forEach(function(range) {
                          if (fld["id"] >= range[0] && fld["id"] <= range[1])
                            valid = true;
                        });
                        if (!valid)
                          throw Error("illegal extended field id in " + obj.name + ": " + fld["id"] + " (not within valid ranges)");
                      }
                      var name = fld["name"];
                      if (this.options["convertFieldsToCamelCase"])
                        name = ProtoBuf2.Util.toCamelCase(name);
                      var field = new Reflect3.Message.ExtensionField(this, obj, fld["rule"], fld["type"], this.ptr.fqn() + "." + name, fld["id"], fld["options"]);
                      var ext = new Reflect3.Extension(this, this.ptr, fld["name"], field);
                      field.extension = ext;
                      this.ptr.addChild(ext);
                      obj.addChild(field);
                    }, this);
                  } else if (!/\.?google\.protobuf\./.test(def["ref"]))
                    throw Error("extended message " + def["ref"] + " is not defined");
                } else
                  throw Error("not a valid definition: " + JSON.stringify(def));
                def = null;
                obj = null;
              }
              defs = null;
              this.ptr = this.ptr.parent;
            }
            this.resolved = false;
            this.result = null;
            return this;
          };
          function propagateSyntax(parent) {
            if (parent["messages"]) {
              parent["messages"].forEach(function(child) {
                child["syntax"] = parent["syntax"];
                propagateSyntax(child);
              });
            }
            if (parent["enums"]) {
              parent["enums"].forEach(function(child) {
                child["syntax"] = parent["syntax"];
              });
            }
          }
          BuilderPrototype["import"] = function(json, filename) {
            var delim = "/";
            if (typeof filename === "string") {
              if (ProtoBuf2.Util.IS_NODE)
                filename = require_path()["resolve"](filename);
              if (this.files[filename] === true)
                return this.reset();
              this.files[filename] = true;
            } else if (typeof filename === "object") {
              var root = filename.root;
              if (ProtoBuf2.Util.IS_NODE)
                root = require_path()["resolve"](root);
              if (root.indexOf("\\") >= 0 || filename.file.indexOf("\\") >= 0)
                delim = "\\";
              var fname;
              if (ProtoBuf2.Util.IS_NODE)
                fname = require_path()["join"](root, filename.file);
              else
                fname = root + delim + filename.file;
              if (this.files[fname] === true)
                return this.reset();
              this.files[fname] = true;
            }
            if (json["imports"] && json["imports"].length > 0) {
              var importRoot, resetRoot = false;
              if (typeof filename === "object") {
                this.importRoot = filename["root"];
                resetRoot = true;
                importRoot = this.importRoot;
                filename = filename["file"];
                if (importRoot.indexOf("\\") >= 0 || filename.indexOf("\\") >= 0)
                  delim = "\\";
              } else if (typeof filename === "string") {
                if (this.importRoot)
                  importRoot = this.importRoot;
                else {
                  if (filename.indexOf("/") >= 0) {
                    importRoot = filename.replace(/\/[^\/]*$/, "");
                    if (importRoot === "")
                      importRoot = "/";
                  } else if (filename.indexOf("\\") >= 0) {
                    importRoot = filename.replace(/\\[^\\]*$/, "");
                    delim = "\\";
                  } else
                    importRoot = ".";
                }
              } else
                importRoot = null;
              for (var i = 0; i < json["imports"].length; i++) {
                if (typeof json["imports"][i] === "string") {
                  if (!importRoot)
                    throw Error("cannot determine import root");
                  var importFilename = json["imports"][i];
                  if (importFilename === "google/protobuf/descriptor.proto")
                    continue;
                  if (ProtoBuf2.Util.IS_NODE)
                    importFilename = require_path()["join"](importRoot, importFilename);
                  else
                    importFilename = importRoot + delim + importFilename;
                  if (this.files[importFilename] === true)
                    continue;
                  if (/\.proto$/i.test(importFilename) && !ProtoBuf2.DotProto)
                    importFilename = importFilename.replace(/\.proto$/, ".json");
                  var contents = ProtoBuf2.Util.fetch(importFilename);
                  if (contents === null)
                    throw Error("failed to import '" + importFilename + "' in '" + filename + "': file not found");
                  if (/\.json$/i.test(importFilename))
                    this["import"](JSON.parse(contents + ""), importFilename);
                  else
                    this["import"](ProtoBuf2.DotProto.Parser.parse(contents), importFilename);
                } else if (!filename)
                  this["import"](json["imports"][i]);
                else if (/\.(\w+)$/.test(filename))
                  this["import"](json["imports"][i], filename.replace(/^(.+)\.(\w+)$/, function($0, $1, $2) {
                    return $1 + "_import" + i + "." + $2;
                  }));
                else
                  this["import"](json["imports"][i], filename + "_import" + i);
              }
              if (resetRoot)
                this.importRoot = null;
            }
            if (json["package"])
              this.define(json["package"]);
            if (json["syntax"])
              propagateSyntax(json);
            var base = this.ptr;
            if (json["options"])
              Object.keys(json["options"]).forEach(function(key) {
                base.options[key] = json["options"][key];
              });
            if (json["messages"])
              this.create(json["messages"]), this.ptr = base;
            if (json["enums"])
              this.create(json["enums"]), this.ptr = base;
            if (json["services"])
              this.create(json["services"]), this.ptr = base;
            if (json["extends"])
              this.create(json["extends"]);
            return this.reset();
          };
          BuilderPrototype.resolveAll = function() {
            var res;
            if (this.ptr == null || typeof this.ptr.type === "object")
              return this;
            if (this.ptr instanceof Reflect3.Namespace) {
              this.ptr.children.forEach(function(child) {
                this.ptr = child;
                this.resolveAll();
              }, this);
            } else if (this.ptr instanceof Reflect3.Message.Field) {
              if (!Lang.TYPE.test(this.ptr.type)) {
                if (!Lang.TYPEREF.test(this.ptr.type))
                  throw Error("illegal type reference in " + this.ptr.toString(true) + ": " + this.ptr.type);
                res = (this.ptr instanceof Reflect3.Message.ExtensionField ? this.ptr.extension.parent : this.ptr.parent).resolve(this.ptr.type, true);
                if (!res)
                  throw Error("unresolvable type reference in " + this.ptr.toString(true) + ": " + this.ptr.type);
                this.ptr.resolvedType = res;
                if (res instanceof Reflect3.Enum) {
                  this.ptr.type = ProtoBuf2.TYPES["enum"];
                  if (this.ptr.syntax === "proto3" && res.syntax !== "proto3")
                    throw Error("proto3 message cannot reference proto2 enum");
                } else if (res instanceof Reflect3.Message)
                  this.ptr.type = res.isGroup ? ProtoBuf2.TYPES["group"] : ProtoBuf2.TYPES["message"];
                else
                  throw Error("illegal type reference in " + this.ptr.toString(true) + ": " + this.ptr.type);
              } else
                this.ptr.type = ProtoBuf2.TYPES[this.ptr.type];
              if (this.ptr.map) {
                if (!Lang.TYPE.test(this.ptr.keyType))
                  throw Error("illegal key type for map field in " + this.ptr.toString(true) + ": " + this.ptr.keyType);
                this.ptr.keyType = ProtoBuf2.TYPES[this.ptr.keyType];
              }
              if (this.ptr.syntax === "proto3" && this.ptr.repeated && this.ptr.options.packed === void 0 && ProtoBuf2.PACKABLE_WIRE_TYPES.indexOf(this.ptr.type.wireType) !== -1) {
                this.ptr.options.packed = true;
              }
            } else if (this.ptr instanceof ProtoBuf2.Reflect.Service.Method) {
              if (this.ptr instanceof ProtoBuf2.Reflect.Service.RPCMethod) {
                res = this.ptr.parent.resolve(this.ptr.requestName, true);
                if (!res || !(res instanceof ProtoBuf2.Reflect.Message))
                  throw Error("Illegal type reference in " + this.ptr.toString(true) + ": " + this.ptr.requestName);
                this.ptr.resolvedRequestType = res;
                res = this.ptr.parent.resolve(this.ptr.responseName, true);
                if (!res || !(res instanceof ProtoBuf2.Reflect.Message))
                  throw Error("Illegal type reference in " + this.ptr.toString(true) + ": " + this.ptr.responseName);
                this.ptr.resolvedResponseType = res;
              } else
                throw Error("illegal service type in " + this.ptr.toString(true));
            } else if (!(this.ptr instanceof ProtoBuf2.Reflect.Message.OneOf) && !(this.ptr instanceof ProtoBuf2.Reflect.Extension) && !(this.ptr instanceof ProtoBuf2.Reflect.Enum.Value))
              throw Error("illegal object in namespace: " + typeof this.ptr + ": " + this.ptr);
            return this.reset();
          };
          BuilderPrototype.build = function(path) {
            this.reset();
            if (!this.resolved)
              this.resolveAll(), this.resolved = true, this.result = null;
            if (this.result === null)
              this.result = this.ns.build();
            if (!path)
              return this.result;
            var part = typeof path === "string" ? path.split(".") : path, ptr = this.result;
            for (var i = 0; i < part.length; i++)
              if (ptr[part[i]])
                ptr = ptr[part[i]];
              else {
                ptr = null;
                break;
              }
            return ptr;
          };
          BuilderPrototype.lookup = function(path, excludeNonNamespace) {
            return path ? this.ns.resolve(path, excludeNonNamespace) : this.ns;
          };
          BuilderPrototype.toString = function() {
            return "Builder";
          };
          Builder.Message = function() {
          };
          Builder.Enum = function() {
          };
          Builder.Service = function() {
          };
          return Builder;
        }(ProtoBuf, ProtoBuf.Lang, ProtoBuf.Reflect);
        ProtoBuf.Map = function(ProtoBuf2, Reflect3) {
          "use strict";
          var Map2 = function(field, contents) {
            if (!field.map)
              throw Error("field is not a map");
            this.field = field;
            this.keyElem = new Reflect3.Element(field.keyType, null, true, field.syntax);
            this.valueElem = new Reflect3.Element(field.type, field.resolvedType, false, field.syntax);
            this.map = {};
            Object.defineProperty(this, "size", {
              get: function() {
                return Object.keys(this.map).length;
              }
            });
            if (contents) {
              var keys = Object.keys(contents);
              for (var i = 0; i < keys.length; i++) {
                var key = this.keyElem.valueFromString(keys[i]);
                var val = this.valueElem.verifyValue(contents[keys[i]]);
                this.map[this.keyElem.valueToString(key)] = { key, value: val };
              }
            }
          };
          var MapPrototype = Map2.prototype;
          function arrayIterator(arr) {
            var idx = 0;
            return {
              next: function() {
                if (idx < arr.length)
                  return { done: false, value: arr[idx++] };
                return { done: true };
              }
            };
          }
          MapPrototype.clear = function() {
            this.map = {};
          };
          MapPrototype["delete"] = function(key) {
            var keyValue = this.keyElem.valueToString(this.keyElem.verifyValue(key));
            var hadKey = keyValue in this.map;
            delete this.map[keyValue];
            return hadKey;
          };
          MapPrototype.entries = function() {
            var entries = [];
            var strKeys = Object.keys(this.map);
            for (var i = 0, entry; i < strKeys.length; i++)
              entries.push([(entry = this.map[strKeys[i]]).key, entry.value]);
            return arrayIterator(entries);
          };
          MapPrototype.keys = function() {
            var keys = [];
            var strKeys = Object.keys(this.map);
            for (var i = 0; i < strKeys.length; i++)
              keys.push(this.map[strKeys[i]].key);
            return arrayIterator(keys);
          };
          MapPrototype.values = function() {
            var values = [];
            var strKeys = Object.keys(this.map);
            for (var i = 0; i < strKeys.length; i++)
              values.push(this.map[strKeys[i]].value);
            return arrayIterator(values);
          };
          MapPrototype.forEach = function(cb, thisArg) {
            var strKeys = Object.keys(this.map);
            for (var i = 0, entry; i < strKeys.length; i++)
              cb.call(thisArg, (entry = this.map[strKeys[i]]).value, entry.key, this);
          };
          MapPrototype.set = function(key, value) {
            var keyValue = this.keyElem.verifyValue(key);
            var valValue = this.valueElem.verifyValue(value);
            this.map[this.keyElem.valueToString(keyValue)] = { key: keyValue, value: valValue };
            return this;
          };
          MapPrototype.get = function(key) {
            var keyValue = this.keyElem.valueToString(this.keyElem.verifyValue(key));
            if (!(keyValue in this.map))
              return void 0;
            return this.map[keyValue].value;
          };
          MapPrototype.has = function(key) {
            var keyValue = this.keyElem.valueToString(this.keyElem.verifyValue(key));
            return keyValue in this.map;
          };
          return Map2;
        }(ProtoBuf, ProtoBuf.Reflect);
        ProtoBuf.loadProto = function(proto, builder, filename) {
          if (typeof builder === "string" || builder && typeof builder["file"] === "string" && typeof builder["root"] === "string")
            filename = builder, builder = void 0;
          return ProtoBuf.loadJson(ProtoBuf.DotProto.Parser.parse(proto), builder, filename);
        };
        ProtoBuf.protoFromString = ProtoBuf.loadProto;
        ProtoBuf.loadProtoFile = function(filename, callback, builder) {
          if (callback && typeof callback === "object")
            builder = callback, callback = null;
          else if (!callback || typeof callback !== "function")
            callback = null;
          if (callback)
            return ProtoBuf.Util.fetch(typeof filename === "string" ? filename : filename["root"] + "/" + filename["file"], function(contents2) {
              if (contents2 === null) {
                callback(Error("Failed to fetch file"));
                return;
              }
              try {
                callback(null, ProtoBuf.loadProto(contents2, builder, filename));
              } catch (e) {
                callback(e);
              }
            });
          var contents = ProtoBuf.Util.fetch(typeof filename === "object" ? filename["root"] + "/" + filename["file"] : filename);
          return contents === null ? null : ProtoBuf.loadProto(contents, builder, filename);
        };
        ProtoBuf.protoFromFile = ProtoBuf.loadProtoFile;
        ProtoBuf.newBuilder = function(options) {
          options = options || {};
          if (typeof options["convertFieldsToCamelCase"] === "undefined")
            options["convertFieldsToCamelCase"] = ProtoBuf.convertFieldsToCamelCase;
          if (typeof options["populateAccessors"] === "undefined")
            options["populateAccessors"] = ProtoBuf.populateAccessors;
          return new ProtoBuf.Builder(options);
        };
        ProtoBuf.loadJson = function(json, builder, filename) {
          if (typeof builder === "string" || builder && typeof builder["file"] === "string" && typeof builder["root"] === "string")
            filename = builder, builder = null;
          if (!builder || typeof builder !== "object")
            builder = ProtoBuf.newBuilder();
          if (typeof json === "string")
            json = JSON.parse(json);
          builder["import"](json, filename);
          builder.resolveAll();
          return builder;
        };
        ProtoBuf.loadJsonFile = function(filename, callback, builder) {
          if (callback && typeof callback === "object")
            builder = callback, callback = null;
          else if (!callback || typeof callback !== "function")
            callback = null;
          if (callback)
            return ProtoBuf.Util.fetch(typeof filename === "string" ? filename : filename["root"] + "/" + filename["file"], function(contents2) {
              if (contents2 === null) {
                callback(Error("Failed to fetch file"));
                return;
              }
              try {
                callback(null, ProtoBuf.loadJson(JSON.parse(contents2), builder, filename));
              } catch (e) {
                callback(e);
              }
            });
          var contents = ProtoBuf.Util.fetch(typeof filename === "object" ? filename["root"] + "/" + filename["file"] : filename);
          return contents === null ? null : ProtoBuf.loadJson(JSON.parse(contents), builder, filename);
        };
        return ProtoBuf;
      });
    }
  });

  // node_modules/@avast/burger-client/adapters/pbjs5/envelopes.js
  var require_envelopes = __commonJS({
    "node_modules/@avast/burger-client/adapters/pbjs5/envelopes.js"(exports2, module2) {
      module2.exports = require_protobuf().newBuilder({})["import"]({
        "package": null,
        "syntax": "proto2",
        "options": {
          "java_outer_classname": "VPNConnectionEnvelopeProto"
        },
        "messages": [
          {
            "name": "Browser",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "BrowserType",
                "name": "type",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "version",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "lang",
                "id": 3
              }
            ]
          },
          {
            "name": "EnvelopeCommon",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "int64",
                "name": "send_time",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "bool",
                "name": "no_geo",
                "id": 2
              }
            ]
          },
          {
            "name": "Event",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "int32",
                "name": "type",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "subtype",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "int64",
                "name": "time",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "int64",
                "name": "reception_time",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "request_id",
                "id": 5
              }
            ]
          },
          {
            "name": "Geo",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "bytes",
                "name": "ip",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "country",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "region",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "city",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "double",
                "name": "latitude",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "double",
                "name": "longitude",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "isp",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "int64",
                "name": "asn",
                "id": 8
              }
            ]
          },
          {
            "name": "Identity",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "guid",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "hwid",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "uuid",
                "id": 3
              }
            ]
          },
          {
            "name": "Installation",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "aiid",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "int64",
                "name": "time",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "SetupAction",
                "name": "action",
                "id": 3
              }
            ]
          },
          {
            "name": "License",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "wallet_key",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "container_id",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "LicenseEdition",
                "name": "edition",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "ModeType",
                "name": "type",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "bool",
                "name": "subscription_mode",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "schema_id",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "int64",
                "name": "issued",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "int64",
                "name": "activation",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "int64",
                "name": "valid_thru",
                "id": 9
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "count",
                "id": 10
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "count_device",
                "id": 11
              }
            ]
          },
          {
            "name": "Platform",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "OperatingSystem",
                "name": "os",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "version",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "build",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "ubr",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "Architecture",
                "name": "architecture",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "score",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "lang",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "sint32",
                "name": "time_zone",
                "id": 8
              }
            ]
          },
          {
            "name": "Product",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "int32",
                "name": "id",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "edition",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "ModeType",
                "name": "mode",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "StateType",
                "name": "state",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "lang",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "version_app",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "version_gui",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "build",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "partner_id",
                "id": 9
              }
            ]
          },
          {
            "name": "Shepherd",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "int64",
                "name": "id",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "name",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "int64",
                "name": "version",
                "id": 3
              }
            ]
          },
          {
            "name": "Campaign",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "string",
                "name": "test",
                "id": 1
              }
            ]
          },
          {
            "name": "Settings",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "SettingsConsent",
                "name": "consent",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "eula",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "eula_version",
                "id": 3
              }
            ]
          },
          {
            "name": "SettingsConsent",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "bool",
                "name": "product_marketing",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "bool",
                "name": "product_development",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "bool",
                "name": "third_party_apps",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "bool",
                "name": "third_party_analytics",
                "id": 4
              }
            ]
          },
          {
            "name": "CommonActivity",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "category",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "action",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "label",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "value",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "f1",
                "id": 11
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "f2",
                "id": 12
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "f3",
                "id": 13
              }
            ]
          },
          {
            "name": "CommonActivityEnvelope",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "CommonActivityRecord",
                "name": "record",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "EnvelopeCommon",
                "name": "common",
                "id": 2
              }
            ]
          },
          {
            "name": "CommonActivityRecord",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "Event",
                "name": "event",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "Identity",
                "name": "identity",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "Product",
                "name": "product",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "Platform",
                "name": "platform",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "Geo",
                "name": "geo",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "Installation",
                "name": "installation",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "License",
                "name": "license",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "Shepherd",
                "name": "shepherd",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "Browser",
                "name": "browser",
                "id": 10
              },
              {
                "rule": "optional",
                "type": "Campaign",
                "name": "campaign",
                "id": 11
              },
              {
                "rule": "optional",
                "type": "Settings",
                "name": "settings",
                "id": 12
              },
              {
                "rule": "optional",
                "type": "CommonActivity",
                "name": "activity",
                "id": 1e3
              }
            ]
          },
          {
            "name": "ABTest",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "string",
                "name": "test",
                "id": 3
              }
            ]
          },
          {
            "name": "Order",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "int64",
                "name": "unique_id",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "ordering",
                "id": 2
              }
            ]
          },
          {
            "name": "InternalEnvelope",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "InternalRecord",
                "name": "record",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "EnvelopeCommon",
                "name": "common",
                "id": 2
              }
            ]
          },
          {
            "name": "InternalRecord",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "Event",
                "name": "event",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "Identity",
                "name": "identity",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "Product",
                "name": "product",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "Platform",
                "name": "platform",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "Geo",
                "name": "geo",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "Installation",
                "name": "installation",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "License",
                "name": "license",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "Shepherd",
                "name": "shepherd",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "Order",
                "name": "order",
                "id": 9
              },
              {
                "rule": "optional",
                "type": "Browser",
                "name": "browser",
                "id": 10
              },
              {
                "rule": "optional",
                "type": "ABTest",
                "name": "ab_test",
                "id": 11
              }
            ]
          },
          {
            "name": "TestEnvelope",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "TestRecord",
                "name": "record",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "EnvelopeCommon",
                "name": "common",
                "id": 2
              }
            ]
          },
          {
            "name": "TestRecord",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "Event",
                "name": "event",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "test_id",
                "id": 1e3
              }
            ]
          },
          {
            "name": "Activity",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "ActivityCommon",
                "name": "common",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "ActivityObject",
                "name": "object",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "ActivityTime",
                "name": "time",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "ActivityScope",
                "name": "scope",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "ActivityCustom",
                "name": "custom",
                "id": 5
              }
            ]
          },
          {
            "name": "ActivityCommon",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "session_id",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "test_id",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "test_group_id",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "error_state",
                "id": 4
              }
            ]
          },
          {
            "name": "ActivityObject",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "category",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "action",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "label",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "view",
                "id": 4
              }
            ]
          },
          {
            "name": "ActivityTime",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "int64",
                "name": "request",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "int64",
                "name": "response",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "int64",
                "name": "render",
                "id": 3
              }
            ]
          },
          {
            "name": "ActivityScope",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "int64",
                "name": "hit",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "int64",
                "name": "session",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "int64",
                "name": "user_level",
                "id": 3
              }
            ]
          },
          {
            "name": "ActivityCustom",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "a1",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "a2",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "a3",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "a4",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "a5",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "a6",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "a7",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "a8",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "a9",
                "id": 9
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "a10",
                "id": 10
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "f1",
                "id": 11
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "f2",
                "id": 12
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "f3",
                "id": 13
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "f4",
                "id": 14
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "f5",
                "id": 15
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "f6",
                "id": 16
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "f7",
                "id": 17
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "f8",
                "id": 18
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "f9",
                "id": 19
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "f10",
                "id": 20
              }
            ]
          },
          {
            "name": "ActivityEnvelope",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "ActivityRecord",
                "name": "record",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "EnvelopeCommon",
                "name": "common",
                "id": 2
              }
            ]
          },
          {
            "name": "ActivityRecord",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "Event",
                "name": "event",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "Identity",
                "name": "identity",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "Product",
                "name": "product",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "Platform",
                "name": "platform",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "Geo",
                "name": "geo",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "Installation",
                "name": "installation",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "License",
                "name": "license",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "Shepherd",
                "name": "shepherd",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "Browser",
                "name": "browser",
                "id": 10
              },
              {
                "rule": "optional",
                "type": "Campaign",
                "name": "campaign",
                "id": 11
              },
              {
                "rule": "optional",
                "type": "Settings",
                "name": "settings",
                "id": 12
              },
              {
                "rule": "optional",
                "type": "Activity",
                "name": "activity",
                "id": 1e3
              }
            ]
          },
          {
            "name": "Heartbeat",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "int64",
                "name": "uptime",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "HeartbeatAV",
                "name": "av",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "HeartbeatVPN",
                "name": "vpn",
                "id": 3
              }
            ]
          },
          {
            "name": "HeartbeatAV",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "HeartbeatWinAV",
                "name": "windows",
                "id": 1
              }
            ]
          },
          {
            "name": "HeartbeatWinAV",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "WinAVGSMainStatus",
                "name": "gs_main_status",
                "id": 1
              }
            ]
          },
          {
            "name": "HeartbeatVPN",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "vpn_name",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "connections_succeeded",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "connections_failed",
                "id": 3
              }
            ]
          },
          {
            "name": "HeartbeatEnvelope",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "HeartbeatRecord",
                "name": "record",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "EnvelopeCommon",
                "name": "common",
                "id": 2
              }
            ]
          },
          {
            "name": "HeartbeatRecord",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "Event",
                "name": "event",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "Identity",
                "name": "identity",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "Product",
                "name": "product",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "Platform",
                "name": "platform",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "Geo",
                "name": "geo",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "Installation",
                "name": "installation",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "License",
                "name": "license",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "Shepherd",
                "name": "shepherd",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "Browser",
                "name": "browser",
                "id": 10
              },
              {
                "rule": "optional",
                "type": "Campaign",
                "name": "campaign",
                "id": 11
              },
              {
                "rule": "optional",
                "type": "Settings",
                "name": "settings",
                "id": 12
              },
              {
                "rule": "optional",
                "type": "Heartbeat",
                "name": "heartbeat",
                "id": 1e3
              }
            ]
          },
          {
            "name": "Install",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "SetupAction",
                "name": "operation",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "InstallError",
                "name": "error",
                "id": 2
              }
            ]
          },
          {
            "name": "InstallError",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "code",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "msg",
                "id": 2
              }
            ]
          },
          {
            "name": "InstallEnvelope",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "InstallRecord",
                "name": "record",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "EnvelopeCommon",
                "name": "common",
                "id": 2
              }
            ]
          },
          {
            "name": "InstallRecord",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "Event",
                "name": "event",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "Identity",
                "name": "identity",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "Product",
                "name": "product",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "Platform",
                "name": "platform",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "Geo",
                "name": "geo",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "Installation",
                "name": "installation",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "License",
                "name": "license",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "Shepherd",
                "name": "shepherd",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "Browser",
                "name": "browser",
                "id": 9
              },
              {
                "rule": "optional",
                "type": "Campaign",
                "name": "campaign",
                "id": 10
              },
              {
                "rule": "optional",
                "type": "Settings",
                "name": "settings",
                "id": 11
              },
              {
                "rule": "optional",
                "type": "Install",
                "name": "install",
                "id": 1e3
              }
            ]
          },
          {
            "name": "Issue",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "IssueCategory",
                "name": "category",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "IssueSource",
                "name": "source",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "IssueObject",
                "name": "error",
                "id": 3
              }
            ]
          },
          {
            "name": "IssueObject",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "code",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "subcode",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "IssueSeverity",
                "name": "severity",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "message",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "log",
                "id": 5
              }
            ]
          },
          {
            "name": "IssueEnvelope",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "IssueRecord",
                "name": "record",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "EnvelopeCommon",
                "name": "common",
                "id": 2
              }
            ]
          },
          {
            "name": "IssueRecord",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "Event",
                "name": "event",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "Identity",
                "name": "identity",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "Product",
                "name": "product",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "Platform",
                "name": "platform",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "Geo",
                "name": "geo",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "Installation",
                "name": "installation",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "License",
                "name": "license",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "Shepherd",
                "name": "shepherd",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "Browser",
                "name": "browser",
                "id": 10
              },
              {
                "rule": "optional",
                "type": "Campaign",
                "name": "campaign",
                "id": 11
              },
              {
                "rule": "optional",
                "type": "Settings",
                "name": "settings",
                "id": 12
              },
              {
                "rule": "optional",
                "type": "Issue",
                "name": "issue",
                "id": 1e3
              }
            ]
          },
          {
            "name": "Licensing",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "LicensingOperation",
                "name": "operation",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "LicensingType",
                "name": "type",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "LicensingInitiated",
                "name": "initiated",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "License",
                "name": "new_license",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "LicensingError",
                "name": "error",
                "id": 6
              }
            ]
          },
          {
            "name": "LicensingError",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "code",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "msg",
                "id": 2
              }
            ]
          },
          {
            "name": "LicensingEnvelope",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "LicensingRecord",
                "name": "record",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "EnvelopeCommon",
                "name": "common",
                "id": 2
              }
            ]
          },
          {
            "name": "LicensingRecord",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "Event",
                "name": "event",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "Identity",
                "name": "identity",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "Product",
                "name": "product",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "Platform",
                "name": "platform",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "Geo",
                "name": "geo",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "Installation",
                "name": "installation",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "License",
                "name": "license",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "Shepherd",
                "name": "shepherd",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "Browser",
                "name": "browser",
                "id": 10
              },
              {
                "rule": "optional",
                "type": "Campaign",
                "name": "campaign",
                "id": 11
              },
              {
                "rule": "optional",
                "type": "Settings",
                "name": "settings",
                "id": 12
              },
              {
                "rule": "optional",
                "type": "Licensing",
                "name": "licensing",
                "id": 1e3
              }
            ]
          },
          {
            "name": "NPSSurvey",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "uint32",
                "name": "score",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "textFeedback",
                "id": 2
              }
            ]
          },
          {
            "name": "NPSSurveyEnvelope",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "NPSSurveyRecord",
                "name": "record",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "EnvelopeCommon",
                "name": "common",
                "id": 2
              }
            ]
          },
          {
            "name": "NPSSurveyRecord",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "Event",
                "name": "event",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "Identity",
                "name": "identity",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "Product",
                "name": "product",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "Platform",
                "name": "platform",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "Geo",
                "name": "geo",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "Installation",
                "name": "installation",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "License",
                "name": "license",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "Shepherd",
                "name": "shepherd",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "Browser",
                "name": "browser",
                "id": 10
              },
              {
                "rule": "optional",
                "type": "Campaign",
                "name": "campaign",
                "id": 11
              },
              {
                "rule": "optional",
                "type": "Settings",
                "name": "settings",
                "id": 12
              },
              {
                "rule": "optional",
                "type": "NPSSurvey",
                "name": "nps_survey",
                "id": 1e3
              }
            ]
          },
          {
            "name": "Preferences",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "PreferencesProduct",
                "name": "config",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "int64",
                "name": "previous_time",
                "id": 3
              }
            ]
          },
          {
            "name": "PreferencesProduct",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "PreferencesProductFeature",
                "name": "configuration",
                "id": 1
              }
            ]
          },
          {
            "name": "PreferencesProductFeature",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "category",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "name",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "state",
                "id": 3
              }
            ]
          },
          {
            "name": "PreferencesEnvelope",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "PreferencesRecord",
                "name": "record",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "EnvelopeCommon",
                "name": "common",
                "id": 2
              }
            ]
          },
          {
            "name": "PreferencesRecord",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "Event",
                "name": "event",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "Identity",
                "name": "identity",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "Product",
                "name": "product",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "Platform",
                "name": "platform",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "Geo",
                "name": "geo",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "Installation",
                "name": "installation",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "License",
                "name": "license",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "Shepherd",
                "name": "shepherd",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "Browser",
                "name": "browser",
                "id": 10
              },
              {
                "rule": "optional",
                "type": "Campaign",
                "name": "campaign",
                "id": 11
              },
              {
                "rule": "optional",
                "type": "Settings",
                "name": "settings",
                "id": 12
              },
              {
                "rule": "optional",
                "type": "Preferences",
                "name": "preferences",
                "id": 1e3
              }
            ]
          },
          {
            "name": "Uninstall",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "UninstallOperation",
                "name": "operation",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "UninstallError",
                "name": "error",
                "id": 2
              }
            ]
          },
          {
            "name": "UninstallError",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "code",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "msg",
                "id": 2
              }
            ]
          },
          {
            "name": "UninstallEnvelope",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "UninstallRecord",
                "name": "record",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "EnvelopeCommon",
                "name": "common",
                "id": 2
              }
            ]
          },
          {
            "name": "UninstallRecord",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "Event",
                "name": "event",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "Identity",
                "name": "identity",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "Product",
                "name": "product",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "Platform",
                "name": "platform",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "Geo",
                "name": "geo",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "Installation",
                "name": "installation",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "License",
                "name": "license",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "Shepherd",
                "name": "shepherd",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "Browser",
                "name": "browser",
                "id": 9
              },
              {
                "rule": "optional",
                "type": "Campaign",
                "name": "campaign",
                "id": 11
              },
              {
                "rule": "optional",
                "type": "Settings",
                "name": "settings",
                "id": 12
              },
              {
                "rule": "optional",
                "type": "Uninstall",
                "name": "uninstall",
                "id": 1e3
              }
            ]
          },
          {
            "name": "Update",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "UpdateAction",
                "name": "action",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "UpdateComponent",
                "name": "component",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "UpdateType",
                "name": "type",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "UpdateTime",
                "name": "time",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "UpdateTargetVersion",
                "name": "version",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "UpdateProductSetting",
                "name": "setting",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "UpdateError",
                "name": "error",
                "id": 7
              }
            ]
          },
          {
            "name": "UpdateTime",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "int64",
                "name": "previous",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "int64",
                "name": "starts",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "int64",
                "name": "ends",
                "id": 3
              }
            ]
          },
          {
            "name": "UpdateProductSetting",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "program",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "source",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "svc_state",
                "id": 3
              }
            ]
          },
          {
            "name": "UpdateTargetVersion",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "version_app",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "version_gui",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "build",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "version_setup",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "microupdate_id",
                "id": 5
              }
            ]
          },
          {
            "name": "UpdateError",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "code",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "msg",
                "id": 2
              }
            ]
          },
          {
            "name": "UpdateEnvelope",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "UpdateRecord",
                "name": "record",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "EnvelopeCommon",
                "name": "common",
                "id": 2
              }
            ]
          },
          {
            "name": "UpdateRecord",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "Event",
                "name": "event",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "Identity",
                "name": "identity",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "Product",
                "name": "product",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "Platform",
                "name": "platform",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "Geo",
                "name": "geo",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "Installation",
                "name": "installation",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "License",
                "name": "license",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "Shepherd",
                "name": "shepherd",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "Browser",
                "name": "browser",
                "id": 9
              },
              {
                "rule": "optional",
                "type": "Update",
                "name": "updates",
                "id": 1e3
              }
            ]
          },
          {
            "name": "AOSWebshieldScanning",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "sint64",
                "name": "caller_id",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "int64",
                "name": "webshield_setting",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "request_domain",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "AOSRequestDurations",
                "name": "request_durations",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "AOSProductAV",
                "name": "product_av",
                "id": 5
              }
            ]
          },
          {
            "name": "AOSProductAV",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "Identity",
                "name": "identity",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "Product",
                "name": "product",
                "id": 2
              }
            ]
          },
          {
            "name": "AOSRequestDurations",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "int32",
                "name": "headers_received",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "response_started",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "request_completed",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "dom_loaded",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "page_loaded",
                "id": 5
              }
            ]
          },
          {
            "name": "AOSWebshieldScanningEnvelope",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "AOSWebshieldScanningRecord",
                "name": "record",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "EnvelopeCommon",
                "name": "common",
                "id": 2
              }
            ]
          },
          {
            "name": "AOSWebshieldScanningRecord",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "Event",
                "name": "event",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "Identity",
                "name": "identity",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "Product",
                "name": "product",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "Platform",
                "name": "platform",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "Geo",
                "name": "geo",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "Browser",
                "name": "browser",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "AOSWebshieldScanning",
                "name": "aos_webshield_scanning",
                "id": 1e3
              }
            ]
          },
          {
            "name": "BatterySaverStats",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "laptop_vendor",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "cpu_model",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "brightness",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "wifi_status",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "bluetooth_status",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "active_profile",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "automode_ac",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "automode_dc",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "remaining_time",
                "id": 9
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "average_battery_life",
                "id": 10
              },
              {
                "rule": "repeated",
                "type": "BatteryInfo",
                "name": "info",
                "id": 11
              }
            ]
          },
          {
            "name": "BatteryInfo",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "battery_id",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "rate",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "designed_capacity",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "full_charged_capacity",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "capacity",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "state",
                "id": 6
              }
            ]
          },
          {
            "name": "BatterySaverEnvelope",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "BatterySaverRecord",
                "name": "record",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "EnvelopeCommon",
                "name": "common",
                "id": 2
              }
            ]
          },
          {
            "name": "BatterySaverRecord",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "Event",
                "name": "event",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "Identity",
                "name": "identity",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "Product",
                "name": "product",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "Platform",
                "name": "platform",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "Geo",
                "name": "geo",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "Installation",
                "name": "installation",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "License",
                "name": "license",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "Shepherd",
                "name": "shepherd",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "BatterySaverStats",
                "name": "battery_saver",
                "id": 1e3
              }
            ]
          },
          {
            "name": "BreachGuardDbrs",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "bool",
                "name": "all_scenarios_run",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "uint32",
                "name": "successfull_scenarios",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "uint32",
                "name": "failed_scenarios",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "uint32",
                "name": "not_run_scenarios",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "int64",
                "name": "time_last_all_scenarios_run",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "uint32",
                "name": "total_scenarios",
                "id": 6
              }
            ]
          },
          {
            "name": "BreachGuardDbrsEnvelope",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "BreachGuardDbrsRecord",
                "name": "record",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "EnvelopeCommon",
                "name": "common",
                "id": 2
              }
            ]
          },
          {
            "name": "BreachGuardDbrsRecord",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "Event",
                "name": "event",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "Identity",
                "name": "identity",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "Product",
                "name": "product",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "Platform",
                "name": "platform",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "Geo",
                "name": "geo",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "Installation",
                "name": "installation",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "License",
                "name": "license",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "Shepherd",
                "name": "shepherd",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "BreachGuardDbrs",
                "name": "breach_guard_dbrs",
                "id": 1e3
              }
            ]
          },
          {
            "name": "BreachGuardDbrsFail",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "scenario_id",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "scenario_version",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "uint32",
                "name": "scenario_step",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "scenario_err_msg",
                "id": 4
              }
            ]
          },
          {
            "name": "BreachGuardDbrsFailEnvelope",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "BreachGuardDbrsFailRecord",
                "name": "record",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "EnvelopeCommon",
                "name": "common",
                "id": 2
              }
            ]
          },
          {
            "name": "BreachGuardDbrsFailRecord",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "Event",
                "name": "event",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "Identity",
                "name": "identity",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "Product",
                "name": "product",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "Platform",
                "name": "platform",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "Geo",
                "name": "geo",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "Installation",
                "name": "installation",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "License",
                "name": "license",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "Shepherd",
                "name": "shepherd",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "BreachGuardDbrsFail",
                "name": "breach_guard_dbrs_fail",
                "id": 1e3
              }
            ]
          },
          {
            "name": "BreachGuardDwm",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "uint32",
                "name": "unverified_emails",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "uint32",
                "name": "verified_emails",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "uint32",
                "name": "subscribed_emails",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "uint32",
                "name": "unresolved_breaches",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "uint32",
                "name": "resolved_breaches",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "uint32",
                "name": "searches",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "uint32",
                "name": "searche_unique_emails",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "uint32",
                "name": "onboarding_breaches",
                "id": 8
              }
            ]
          },
          {
            "name": "BreachGuardDwmEnvelope",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "BreachGuardDwmRecord",
                "name": "record",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "EnvelopeCommon",
                "name": "common",
                "id": 2
              }
            ]
          },
          {
            "name": "BreachGuardDwmRecord",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "Event",
                "name": "event",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "Identity",
                "name": "identity",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "Product",
                "name": "product",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "Platform",
                "name": "platform",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "Geo",
                "name": "geo",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "Installation",
                "name": "installation",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "License",
                "name": "license",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "Shepherd",
                "name": "shepherd",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "BreachGuardDwm",
                "name": "breach_guard_dwm",
                "id": 1e3
              }
            ]
          },
          {
            "name": "ConnectivityChecker",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "int64",
                "name": "event_time",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "service_id",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "status_code",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "error_code",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "vpn",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "wifi",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "ipv4",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "ipv6",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "count",
                "id": 9
              }
            ]
          },
          {
            "name": "ConnectivityCheckerEnvelope",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "ConnectivityCheckerRecord",
                "name": "record",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "EnvelopeCommon",
                "name": "common",
                "id": 2
              }
            ]
          },
          {
            "name": "ConnectivityCheckerRecord",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "Event",
                "name": "event",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "Identity",
                "name": "identity",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "Product",
                "name": "product",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "Platform",
                "name": "platform",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "Geo",
                "name": "geo",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "Installation",
                "name": "installation",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "License",
                "name": "license",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "Shepherd",
                "name": "shepherd",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "ConnectivityChecker",
                "name": "connectivity_checker",
                "id": 1e3
              }
            ]
          },
          {
            "name": "MaliciousContent",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "url",
                "id": 1
              }
            ]
          },
          {
            "name": "MaliciousURLEnvelope",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "MaliciousURLRecord",
                "name": "record",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "EnvelopeCommon",
                "name": "common",
                "id": 2
              }
            ]
          },
          {
            "name": "MaliciousURLRecord",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "Event",
                "name": "event",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "Identity",
                "name": "identity",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "Product",
                "name": "product",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "Platform",
                "name": "platform",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "Geo",
                "name": "geo",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "Browser",
                "name": "browser",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "MaliciousContent",
                "name": "malicious",
                "id": 1e3
              }
            ]
          },
          {
            "name": "Setup",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "SetupCommon",
                "name": "common",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "SetupProductConfig",
                "name": "product",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "SetupMain",
                "name": "config",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "SetupSystem",
                "name": "system",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "SetupUI",
                "name": "ui",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "SetupFinishState",
                "name": "finish_state",
                "id": 7
              }
            ]
          },
          {
            "name": "SetupCommon",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "SetupOperation",
                "name": "operation",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "session_id",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "stage",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "title",
                "id": 4
              }
            ]
          },
          {
            "name": "SetupFinishState",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "reboot",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "ret_code",
                "id": 2
              }
            ]
          },
          {
            "name": "SetupMain",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "SetupProductConfig",
                "name": "configuration",
                "id": 1
              },
              {
                "rule": "repeated",
                "type": "SetupMainProducts",
                "name": "main_products",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "master_icarus_ver",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "bool",
                "name": "manual_update",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "sfx_ver",
                "id": 5
              }
            ]
          },
          {
            "name": "SetupProductConfig",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "channel",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "local_product_ver",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "SetupOperation",
                "name": "operation",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "remote_icarus_ver",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "remote_product_ver",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "bool",
                "name": "executing",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "local_icarus_ver",
                "id": 10
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "bundle_guid",
                "id": 11
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "guid",
                "id": 12
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "overlay_channel",
                "id": 13
              },
              {
                "rule": "optional",
                "type": "int64",
                "name": "overlay_expiration",
                "id": 14
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "name",
                "id": 15
              }
            ]
          },
          {
            "name": "SetupMainProducts",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "channel",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "product",
                "id": 2
              }
            ]
          },
          {
            "name": "SetupSystem",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "int32",
                "name": "memory",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "processors",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "bool",
                "name": "workstation",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "SetupSystemHdd",
                "name": "hdd",
                "id": 4
              }
            ]
          },
          {
            "name": "SetupSystemHdd",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "int32",
                "name": "available",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "company_path",
                "id": 2
              }
            ]
          },
          {
            "name": "SetupUI",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "category",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "action",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "label",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "view",
                "id": 4
              }
            ]
          },
          {
            "name": "SetupEnvelope",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "SetupRecord",
                "name": "record",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "EnvelopeCommon",
                "name": "common",
                "id": 2
              }
            ]
          },
          {
            "name": "SetupRecord",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "Event",
                "name": "event",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "Identity",
                "name": "identity",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "Product",
                "name": "product",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "Platform",
                "name": "platform",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "Geo",
                "name": "geo",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "Installation",
                "name": "installation",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "Setup",
                "name": "setup",
                "id": 1e3
              }
            ]
          },
          {
            "name": "VoteRequest",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "url",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "rating",
                "id": 2
              }
            ]
          },
          {
            "name": "VoteEnvelope",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "VoteRecord",
                "name": "record",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "EnvelopeCommon",
                "name": "common",
                "id": 2
              }
            ]
          },
          {
            "name": "VoteRecord",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "Event",
                "name": "event",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "Identity",
                "name": "identity",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "Product",
                "name": "product",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "Platform",
                "name": "platform",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "Geo",
                "name": "geo",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "Installation",
                "name": "installation",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "License",
                "name": "license",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "Shepherd",
                "name": "shepherd",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "Browser",
                "name": "browser",
                "id": 10
              },
              {
                "rule": "optional",
                "type": "Campaign",
                "name": "campaign",
                "id": 11
              },
              {
                "rule": "optional",
                "type": "Settings",
                "name": "settings",
                "id": 12
              },
              {
                "rule": "optional",
                "type": "VoteRequest",
                "name": "vote",
                "id": 1e3
              }
            ]
          },
          {
            "name": "VPNConnection",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "vpn_name",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "VPNSourceType",
                "name": "source",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "VPNTechnology",
                "name": "vpn_technology",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "VPNError",
                "name": "error",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "VPNInfo",
                "name": "vpn_info",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "VPNSessionInfo",
                "name": "vpn_session_info",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "VPNMobileParams",
                "name": "vpn_mobile_params",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "VPNOpenVpnClient",
                "name": "vpn_openvpn",
                "id": 8
              }
            ]
          },
          {
            "name": "VPNOpenVpnClient",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "build_version",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "VPNOpenVpnClientConnectionMethod",
                "name": "connection_method",
                "id": 2
              }
            ]
          },
          {
            "name": "VPNError",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "code",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "subcode",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "VPNErrorSeverity",
                "name": "severity",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "description",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "log",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "service_endpoint",
                "id": 6
              }
            ]
          },
          {
            "name": "VPNInfo",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "server_address",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "bytes",
                "name": "server_ip_address",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "int64",
                "name": "latency_avast",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "int64",
                "name": "latency_server",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "event_duration",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "double",
                "name": "packet_loss",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "VPNOptimalLocation",
                "name": "optimal_locations",
                "id": 9
              },
              {
                "rule": "optional",
                "type": "VPNSettingsConnection",
                "name": "settings",
                "id": 10
              },
              {
                "rule": "optional",
                "type": "VPNReconnection",
                "name": "reconnection",
                "id": 11
              }
            ]
          },
          {
            "name": "VPNOptimalLocation",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "VPNOptimalLocationType",
                "name": "type",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "remaining_ttl",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "request_duration",
                "id": 3
              }
            ]
          },
          {
            "name": "VPNReconnection",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "int32",
                "name": "attempt",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "VPNReconnectionEventSource",
                "name": "source",
                "id": 2
              }
            ]
          },
          {
            "name": "VPNSettingsConnection",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "bool",
                "name": "autoconnect",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "bool",
                "name": "killswitch",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "int32",
                "name": "ipperiod",
                "id": 3
              }
            ]
          },
          {
            "name": "VPNMobileParams",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "carrier_name",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "iso_country_code",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "string",
                "name": "mnc",
                "id": 3
              },
              {
                "rule": "repeated",
                "type": "VPNNetworkInterfaceType",
                "name": "network_interface_stack",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "VPNRadioTechnologyType",
                "name": "radio_technology",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "uint32",
                "name": "reachability_flags",
                "id": 6
              }
            ]
          },
          {
            "name": "VPNSessionInfo",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "string",
                "name": "session_id",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "uint64",
                "name": "startTimestamp",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "uint64",
                "name": "endTimestamp",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "uint64",
                "name": "clientDownloadBytes",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "uint64",
                "name": "clientUploadBytes",
                "id": 5
              }
            ]
          },
          {
            "name": "VPNConnectionEnvelope",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "repeated",
                "type": "VPNConnectionRecord",
                "name": "event",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "EnvelopeCommon",
                "name": "common",
                "id": 2
              }
            ]
          },
          {
            "name": "VPNConnectionRecord",
            "syntax": "proto2",
            "fields": [
              {
                "rule": "optional",
                "type": "Event",
                "name": "event",
                "id": 1
              },
              {
                "rule": "optional",
                "type": "Identity",
                "name": "identity",
                "id": 2
              },
              {
                "rule": "optional",
                "type": "Product",
                "name": "product",
                "id": 3
              },
              {
                "rule": "optional",
                "type": "Platform",
                "name": "platform",
                "id": 4
              },
              {
                "rule": "optional",
                "type": "Geo",
                "name": "geo",
                "id": 5
              },
              {
                "rule": "optional",
                "type": "Installation",
                "name": "installation",
                "id": 6
              },
              {
                "rule": "optional",
                "type": "License",
                "name": "license",
                "id": 7
              },
              {
                "rule": "optional",
                "type": "Shepherd",
                "name": "shepherd",
                "id": 8
              },
              {
                "rule": "optional",
                "type": "Browser",
                "name": "browser",
                "id": 10
              },
              {
                "rule": "optional",
                "type": "VPNConnection",
                "name": "vpn_connection",
                "id": 1e3
              }
            ]
          }
        ],
        "enums": [
          {
            "name": "BrowserType",
            "syntax": "proto2",
            "values": [
              {
                "name": "OTHER_BROWSER",
                "id": 1
              },
              {
                "name": "AVAST_SECURE_BROWSER",
                "id": 2
              },
              {
                "name": "CHROME",
                "id": 3
              },
              {
                "name": "FIREFOX",
                "id": 4
              },
              {
                "name": "SAFARI",
                "id": 5
              },
              {
                "name": "MICROSOFTEDGE",
                "id": 6
              },
              {
                "name": "OPERA",
                "id": 7
              },
              {
                "name": "IE",
                "id": 8
              },
              {
                "name": "PALE_MOON",
                "id": 9
              },
              {
                "name": "NETSCAPE",
                "id": 10
              },
              {
                "name": "UC",
                "id": 11
              },
              {
                "name": "YAB",
                "id": 12
              },
              {
                "name": "COC_COC",
                "id": 13
              },
              {
                "name": "CHROMIUM",
                "id": 14
              },
              {
                "name": "VIVALDI",
                "id": 15
              }
            ]
          },
          {
            "name": "SetupAction",
            "syntax": "proto2",
            "values": [
              {
                "name": "INSTALL",
                "id": 1
              },
              {
                "name": "REINSTALL",
                "id": 2
              },
              {
                "name": "REPAIR",
                "id": 3
              },
              {
                "name": "UPGRADE",
                "id": 4
              },
              {
                "name": "MIGRATION",
                "id": 5
              },
              {
                "name": "UNINSTALL",
                "id": 6
              },
              {
                "name": "CHANGE",
                "id": 7
              },
              {
                "name": "CHECKFORUPDATES",
                "id": 8
              },
              {
                "name": "COMPLETEOPERATION",
                "id": 9
              },
              {
                "name": "OTHER",
                "id": 10
              }
            ]
          },
          {
            "name": "LicenseEdition",
            "syntax": "proto2",
            "values": [
              {
                "name": "AV_FREE",
                "id": 1
              },
              {
                "name": "AV_PRO",
                "id": 2
              },
              {
                "name": "AV_AIS",
                "id": 3
              },
              {
                "name": "AV_APR",
                "id": 4
              },
              {
                "name": "AV_BUSINESS",
                "id": 5
              },
              {
                "name": "AV_VPN",
                "id": 6
              },
              {
                "name": "GF_SRV",
                "id": 7
              },
              {
                "name": "AV_PSW",
                "id": 8
              },
              {
                "name": "AV_PAP",
                "id": 9
              },
              {
                "name": "AV_PSM",
                "id": 10
              },
              {
                "name": "AV_ASH",
                "id": 12
              },
              {
                "name": "AV_SOHO",
                "id": 13
              },
              {
                "name": "AV_AVG_PRO",
                "id": 14
              },
              {
                "name": "AV_AVG_FREE",
                "id": 15
              },
              {
                "name": "AV_AVG_BUSINESS",
                "id": 16
              },
              {
                "name": "PCT_AVG_PRO",
                "id": 17
              },
              {
                "name": "AVG_VPN",
                "id": 18
              },
              {
                "name": "HMA_VPN_CONSUMER",
                "id": 19
              },
              {
                "name": "HMA_VPN_TRIAL",
                "id": 20
              },
              {
                "name": "HMA_VPN_BUSINESS",
                "id": 21
              },
              {
                "name": "GF_V2",
                "id": 22
              },
              {
                "name": "BS_AVAST",
                "id": 23
              },
              {
                "name": "BS_AVG",
                "id": 24
              },
              {
                "name": "DU_AVAST",
                "id": 25
              },
              {
                "name": "DU_AVG",
                "id": 26
              }
            ]
          },
          {
            "name": "ModeType",
            "syntax": "proto2",
            "values": [
              {
                "name": "NO_LICENSE",
                "id": 1
              },
              {
                "name": "FREE",
                "id": 2
              },
              {
                "name": "TRIAL",
                "id": 3
              },
              {
                "name": "PAID",
                "id": 4
              },
              {
                "name": "OEM",
                "id": 5
              },
              {
                "name": "PRE_AUTH_TRIAL",
                "id": 6
              },
              {
                "name": "BETA",
                "id": 7
              },
              {
                "name": "FREEMIUM",
                "id": 8
              },
              {
                "name": "TRIAL_HARDCODED",
                "id": 9
              }
            ]
          },
          {
            "name": "StateType",
            "syntax": "proto2",
            "values": [
              {
                "name": "ACTIVE",
                "id": 1
              },
              {
                "name": "EXPIRED",
                "id": 2
              }
            ]
          },
          {
            "name": "OperatingSystem",
            "syntax": "proto2",
            "values": [
              {
                "name": "WINDOWS",
                "id": 1
              },
              {
                "name": "OSX",
                "id": 2
              },
              {
                "name": "IOS",
                "id": 3
              },
              {
                "name": "LINUX",
                "id": 4
              },
              {
                "name": "ANDROID",
                "id": 5
              },
              {
                "name": "CHROMEOS",
                "id": 6
              }
            ]
          },
          {
            "name": "Architecture",
            "syntax": "proto2",
            "values": [
              {
                "name": "X86",
                "id": 1
              },
              {
                "name": "X64",
                "id": 2
              },
              {
                "name": "ARM",
                "id": 3
              },
              {
                "name": "ARM64",
                "id": 4
              },
              {
                "name": "MIPS",
                "id": 5
              }
            ]
          },
          {
            "name": "WinAVGSMainStatus",
            "syntax": "proto2",
            "values": [
              {
                "name": "NULL",
                "id": 0
              },
              {
                "name": "GREEN",
                "id": 1
              },
              {
                "name": "YELLOW",
                "id": 2
              },
              {
                "name": "RED",
                "id": 3
              }
            ]
          },
          {
            "name": "IssueCategory",
            "syntax": "proto2",
            "values": [
              {
                "name": "DEBUG",
                "id": 1
              },
              {
                "name": "CRASH",
                "id": 2
              },
              {
                "name": "ERROR_FAULT",
                "id": 3
              },
              {
                "name": "FAILURE",
                "id": 4
              },
              {
                "name": "WARNING",
                "id": 5
              }
            ]
          },
          {
            "name": "IssueSource",
            "syntax": "proto2",
            "values": [
              {
                "name": "USER",
                "id": 1
              },
              {
                "name": "SYSTEM",
                "id": 2
              },
              {
                "name": "CLIENT",
                "id": 3
              },
              {
                "name": "SERVICE",
                "id": 4
              },
              {
                "name": "BACKEND",
                "id": 5
              }
            ]
          },
          {
            "name": "IssueSeverity",
            "syntax": "proto2",
            "values": [
              {
                "name": "TRIVIAL",
                "id": 1
              },
              {
                "name": "LOW",
                "id": 2
              },
              {
                "name": "HIGH",
                "id": 3
              },
              {
                "name": "CRITICAL",
                "id": 4
              },
              {
                "name": "BLOCKER",
                "id": 5
              }
            ]
          },
          {
            "name": "LicensingOperation",
            "syntax": "proto2",
            "values": [
              {
                "name": "NOTACTIVATED",
                "id": 1
              },
              {
                "name": "NA_FREE",
                "id": 2
              },
              {
                "name": "FREE_FREE",
                "id": 3
              },
              {
                "name": "FREE_TRIAL",
                "id": 4
              },
              {
                "name": "FREE_PAID",
                "id": 5
              },
              {
                "name": "NA_TRIAL",
                "id": 6
              },
              {
                "name": "TRIAL_TRIAL",
                "id": 8
              },
              {
                "name": "TRIAL_FREE",
                "id": 9
              },
              {
                "name": "TRIAL_PAID",
                "id": 10
              },
              {
                "name": "NA_PAID",
                "id": 11
              },
              {
                "name": "PAID_PAID",
                "id": 12
              },
              {
                "name": "PAID_FREE",
                "id": 13
              },
              {
                "name": "PAID_TRIAL",
                "id": 14
              }
            ]
          },
          {
            "name": "LicensingType",
            "syntax": "proto2",
            "values": [
              {
                "name": "UNKNOWN_LICENSE_TYPE_ON_CLIENT",
                "id": 0
              },
              {
                "name": "WALLET_KEY_LICENSE_TYPE",
                "id": 1
              },
              {
                "name": "S_TYPE",
                "id": 2
              },
              {
                "name": "C_TYPE",
                "id": 3
              },
              {
                "name": "FILE_LEGACY",
                "id": 4
              },
              {
                "name": "FILE_ALPHA",
                "id": 5
              },
              {
                "name": "AVG",
                "id": 6
              },
              {
                "name": "EMS_TYPE",
                "id": 7
              }
            ]
          },
          {
            "name": "LicensingInitiated",
            "syntax": "proto2",
            "values": [
              {
                "name": "UNKNOWN_ORIGIN",
                "id": 0
              },
              {
                "name": "MANUAL",
                "id": 1
              },
              {
                "name": "CART",
                "id": 2
              },
              {
                "name": "LOCAL_WK",
                "id": 3
              },
              {
                "name": "ALD_GET_UNATTENDED_TRIAL",
                "id": 4
              },
              {
                "name": "ALD_ACCEPT_TRIAL",
                "id": 5
              },
              {
                "name": "ALD_DISCOVER_WK",
                "id": 6
              },
              {
                "name": "ALD_SWITCH_TO_FREE",
                "id": 7
              },
              {
                "name": "INSTALLER",
                "id": 8
              },
              {
                "name": "WEBSHIELD",
                "id": 9
              },
              {
                "name": "MYAVAST",
                "id": 10
              },
              {
                "name": "SUBSCRIPTION_PAGE",
                "id": 11
              },
              {
                "name": "CONFLICT",
                "id": 12
              },
              {
                "name": "MIGRATIONALPHA",
                "id": 13
              }
            ]
          },
          {
            "name": "UninstallOperation",
            "syntax": "proto2",
            "values": [
              {
                "name": "USERSTARTED",
                "id": 1
              },
              {
                "name": "UNINSTALLED",
                "id": 2
              }
            ]
          },
          {
            "name": "UpdateAction",
            "syntax": "proto2",
            "values": [
              {
                "name": "DOWNLOADING_SUCCESS",
                "id": 1
              },
              {
                "name": "DOWNLOADING_FAILED",
                "id": 2
              },
              {
                "name": "UPDATING_SUCCESS",
                "id": 3
              },
              {
                "name": "UPDATING_FAILED",
                "id": 4
              }
            ]
          },
          {
            "name": "UpdateComponent",
            "syntax": "proto2",
            "values": [
              {
                "name": "PROGRAM",
                "id": 1
              },
              {
                "name": "SETUP",
                "id": 2
              },
              {
                "name": "VPS",
                "id": 3
              }
            ]
          },
          {
            "name": "UpdateType",
            "syntax": "proto2",
            "values": [
              {
                "name": "NORMAL",
                "id": 1
              },
              {
                "name": "MICRO",
                "id": 2
              },
              {
                "name": "EMERGENCY",
                "id": 3
              }
            ]
          },
          {
            "name": "SetupOperation",
            "syntax": "proto2",
            "values": [
              {
                "name": "unknown",
                "id": 0
              },
              {
                "name": "install",
                "id": 1
              },
              {
                "name": "uninstall",
                "id": 2
              },
              {
                "name": "repair",
                "id": 3
              },
              {
                "name": "update",
                "id": 4
              },
              {
                "name": "change",
                "id": 5
              },
              {
                "name": "checkforupdates",
                "id": 6
              },
              {
                "name": "completeoperation",
                "id": 7
              }
            ]
          },
          {
            "name": "VPNSourceType",
            "syntax": "proto2",
            "values": [
              {
                "name": "USERS",
                "id": 1
              },
              {
                "name": "SYSTEMS",
                "id": 2
              },
              {
                "name": "CLIENTS",
                "id": 3
              },
              {
                "name": "EXTENSIONS",
                "id": 4
              }
            ]
          },
          {
            "name": "VPNTechnology",
            "syntax": "proto2",
            "values": [
              {
                "name": "OpenVPN",
                "id": 1
              },
              {
                "name": "IPsec_IKEv1_cert",
                "id": 2
              },
              {
                "name": "IPsec_IKEv2_PSK",
                "id": 3
              }
            ]
          },
          {
            "name": "VPNOpenVpnClientConnectionMethod",
            "syntax": "proto2",
            "values": [
              {
                "name": "Adaptive",
                "id": 1
              },
              {
                "name": "IPAPI",
                "id": 2
              },
              {
                "name": "Dynamic",
                "id": 3
              },
              {
                "name": "Netsh",
                "id": 4
              },
              {
                "name": "Manual",
                "id": 5
              }
            ]
          },
          {
            "name": "VPNErrorSeverity",
            "syntax": "proto2",
            "values": [
              {
                "name": "Blocker",
                "id": 1
              },
              {
                "name": "Warning",
                "id": 2
              }
            ]
          },
          {
            "name": "VPNOptimalLocationType",
            "syntax": "proto2",
            "values": [
              {
                "name": "DNS",
                "id": 1
              },
              {
                "name": "HTTPDNSProxy",
                "id": 2
              }
            ]
          },
          {
            "name": "VPNReconnectionEventSource",
            "syntax": "proto2",
            "values": [
              {
                "name": "Other",
                "id": 0
              },
              {
                "name": "User",
                "id": 1
              },
              {
                "name": "IpShuffle",
                "id": 2
              },
              {
                "name": "AutoConnect",
                "id": 3
              },
              {
                "name": "InternetReconnected",
                "id": 4
              }
            ]
          },
          {
            "name": "VPNNetworkInterfaceType",
            "syntax": "proto2",
            "values": [
              {
                "name": "CELLULAR",
                "id": 1
              },
              {
                "name": "WIFI",
                "id": 2
              },
              {
                "name": "TUNNEL",
                "id": 3
              },
              {
                "name": "WIMAX",
                "id": 4
              },
              {
                "name": "ETHERNET",
                "id": 5
              },
              {
                "name": "BLUETOOTH",
                "id": 6
              },
              {
                "name": "DUMMY",
                "id": 7
              },
              {
                "name": "MOBILE_DUN",
                "id": 8
              },
              {
                "name": "MOBILE_HIPRI",
                "id": 9
              },
              {
                "name": "MOBILE_MMS",
                "id": 10
              },
              {
                "name": "MOBILE_SUPL",
                "id": 11
              }
            ]
          },
          {
            "name": "VPNRadioTechnologyType",
            "syntax": "proto2",
            "values": [
              {
                "name": "GPRS",
                "id": 1
              },
              {
                "name": "EDGE",
                "id": 2
              },
              {
                "name": "CDMA",
                "id": 3
              },
              {
                "name": "CDMA1X",
                "id": 4
              },
              {
                "name": "WCDMA",
                "id": 5
              },
              {
                "name": "IDEN",
                "id": 6
              },
              {
                "name": "HSDPA",
                "id": 7
              },
              {
                "name": "HSUPA",
                "id": 8
              },
              {
                "name": "CDMAEVDOREV0",
                "id": 9
              },
              {
                "name": "CDMAEVDOREVA",
                "id": 10
              },
              {
                "name": "CDMAEVDOREVB",
                "id": 11
              },
              {
                "name": "EHRPD",
                "id": 12
              },
              {
                "name": "HSPA",
                "id": 13
              },
              {
                "name": "HSPAP",
                "id": 14
              },
              {
                "name": "UMTS",
                "id": 15
              },
              {
                "name": "LTE",
                "id": 16
              },
              {
                "name": "UNKNOWN",
                "id": 17
              }
            ]
          }
        ],
        "isNamespace": true
      }).build();
    }
  });

  // node_modules/reflect-metadata/Reflect.js
  var Reflect2;
  (function(Reflect3) {
    (function(factory) {
      var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : Function("return this;")();
      var exporter = makeExporter(Reflect3);
      if (typeof root.Reflect === "undefined") {
        root.Reflect = Reflect3;
      } else {
        exporter = makeExporter(root.Reflect, exporter);
      }
      factory(exporter);
      function makeExporter(target, previous) {
        return function(key, value) {
          if (typeof target[key] !== "function") {
            Object.defineProperty(target, key, { configurable: true, writable: true, value });
          }
          if (previous)
            previous(key, value);
        };
      }
    })(function(exporter) {
      var hasOwn = Object.prototype.hasOwnProperty;
      var supportsSymbol = typeof Symbol === "function";
      var toPrimitiveSymbol = supportsSymbol && typeof Symbol.toPrimitive !== "undefined" ? Symbol.toPrimitive : "@@toPrimitive";
      var iteratorSymbol = supportsSymbol && typeof Symbol.iterator !== "undefined" ? Symbol.iterator : "@@iterator";
      var supportsCreate = typeof Object.create === "function";
      var supportsProto = { __proto__: [] } instanceof Array;
      var downLevel = !supportsCreate && !supportsProto;
      var HashMap = {
        create: supportsCreate ? function() {
          return MakeDictionary(/* @__PURE__ */ Object.create(null));
        } : supportsProto ? function() {
          return MakeDictionary({ __proto__: null });
        } : function() {
          return MakeDictionary({});
        },
        has: downLevel ? function(map, key) {
          return hasOwn.call(map, key);
        } : function(map, key) {
          return key in map;
        },
        get: downLevel ? function(map, key) {
          return hasOwn.call(map, key) ? map[key] : void 0;
        } : function(map, key) {
          return map[key];
        }
      };
      var functionPrototype = Object.getPrototypeOf(Function);
      var usePolyfill = typeof process === "object" && process.env && process.env["REFLECT_METADATA_USE_MAP_POLYFILL"] === "true";
      var _Map = !usePolyfill && typeof Map === "function" && typeof Map.prototype.entries === "function" ? Map : CreateMapPolyfill();
      var _Set = !usePolyfill && typeof Set === "function" && typeof Set.prototype.entries === "function" ? Set : CreateSetPolyfill();
      var _WeakMap = !usePolyfill && typeof WeakMap === "function" ? WeakMap : CreateWeakMapPolyfill();
      var Metadata = new _WeakMap();
      function decorate(decorators, target, propertyKey, attributes) {
        if (!IsUndefined(propertyKey)) {
          if (!IsArray(decorators))
            throw new TypeError();
          if (!IsObject(target))
            throw new TypeError();
          if (!IsObject(attributes) && !IsUndefined(attributes) && !IsNull(attributes))
            throw new TypeError();
          if (IsNull(attributes))
            attributes = void 0;
          propertyKey = ToPropertyKey(propertyKey);
          return DecorateProperty(decorators, target, propertyKey, attributes);
        } else {
          if (!IsArray(decorators))
            throw new TypeError();
          if (!IsConstructor(target))
            throw new TypeError();
          return DecorateConstructor(decorators, target);
        }
      }
      exporter("decorate", decorate);
      function metadata(metadataKey, metadataValue) {
        function decorator(target, propertyKey) {
          if (!IsObject(target))
            throw new TypeError();
          if (!IsUndefined(propertyKey) && !IsPropertyKey(propertyKey))
            throw new TypeError();
          OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
        }
        return decorator;
      }
      exporter("metadata", metadata);
      function defineMetadata(metadataKey, metadataValue, target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryDefineOwnMetadata(metadataKey, metadataValue, target, propertyKey);
      }
      exporter("defineMetadata", defineMetadata);
      function hasMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryHasMetadata(metadataKey, target, propertyKey);
      }
      exporter("hasMetadata", hasMetadata);
      function hasOwnMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryHasOwnMetadata(metadataKey, target, propertyKey);
      }
      exporter("hasOwnMetadata", hasOwnMetadata);
      function getMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryGetMetadata(metadataKey, target, propertyKey);
      }
      exporter("getMetadata", getMetadata);
      function getOwnMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryGetOwnMetadata(metadataKey, target, propertyKey);
      }
      exporter("getOwnMetadata", getOwnMetadata);
      function getMetadataKeys(target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryMetadataKeys(target, propertyKey);
      }
      exporter("getMetadataKeys", getMetadataKeys);
      function getOwnMetadataKeys(target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        return OrdinaryOwnMetadataKeys(target, propertyKey);
      }
      exporter("getOwnMetadataKeys", getOwnMetadataKeys);
      function deleteMetadata(metadataKey, target, propertyKey) {
        if (!IsObject(target))
          throw new TypeError();
        if (!IsUndefined(propertyKey))
          propertyKey = ToPropertyKey(propertyKey);
        var metadataMap = GetOrCreateMetadataMap(target, propertyKey, false);
        if (IsUndefined(metadataMap))
          return false;
        if (!metadataMap.delete(metadataKey))
          return false;
        if (metadataMap.size > 0)
          return true;
        var targetMetadata = Metadata.get(target);
        targetMetadata.delete(propertyKey);
        if (targetMetadata.size > 0)
          return true;
        Metadata.delete(target);
        return true;
      }
      exporter("deleteMetadata", deleteMetadata);
      function DecorateConstructor(decorators, target) {
        for (var i = decorators.length - 1; i >= 0; --i) {
          var decorator = decorators[i];
          var decorated = decorator(target);
          if (!IsUndefined(decorated) && !IsNull(decorated)) {
            if (!IsConstructor(decorated))
              throw new TypeError();
            target = decorated;
          }
        }
        return target;
      }
      function DecorateProperty(decorators, target, propertyKey, descriptor) {
        for (var i = decorators.length - 1; i >= 0; --i) {
          var decorator = decorators[i];
          var decorated = decorator(target, propertyKey, descriptor);
          if (!IsUndefined(decorated) && !IsNull(decorated)) {
            if (!IsObject(decorated))
              throw new TypeError();
            descriptor = decorated;
          }
        }
        return descriptor;
      }
      function GetOrCreateMetadataMap(O, P, Create) {
        var targetMetadata = Metadata.get(O);
        if (IsUndefined(targetMetadata)) {
          if (!Create)
            return void 0;
          targetMetadata = new _Map();
          Metadata.set(O, targetMetadata);
        }
        var metadataMap = targetMetadata.get(P);
        if (IsUndefined(metadataMap)) {
          if (!Create)
            return void 0;
          metadataMap = new _Map();
          targetMetadata.set(P, metadataMap);
        }
        return metadataMap;
      }
      function OrdinaryHasMetadata(MetadataKey, O, P) {
        var hasOwn2 = OrdinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn2)
          return true;
        var parent = OrdinaryGetPrototypeOf(O);
        if (!IsNull(parent))
          return OrdinaryHasMetadata(MetadataKey, parent, P);
        return false;
      }
      function OrdinaryHasOwnMetadata(MetadataKey, O, P) {
        var metadataMap = GetOrCreateMetadataMap(O, P, false);
        if (IsUndefined(metadataMap))
          return false;
        return ToBoolean(metadataMap.has(MetadataKey));
      }
      function OrdinaryGetMetadata(MetadataKey, O, P) {
        var hasOwn2 = OrdinaryHasOwnMetadata(MetadataKey, O, P);
        if (hasOwn2)
          return OrdinaryGetOwnMetadata(MetadataKey, O, P);
        var parent = OrdinaryGetPrototypeOf(O);
        if (!IsNull(parent))
          return OrdinaryGetMetadata(MetadataKey, parent, P);
        return void 0;
      }
      function OrdinaryGetOwnMetadata(MetadataKey, O, P) {
        var metadataMap = GetOrCreateMetadataMap(O, P, false);
        if (IsUndefined(metadataMap))
          return void 0;
        return metadataMap.get(MetadataKey);
      }
      function OrdinaryDefineOwnMetadata(MetadataKey, MetadataValue, O, P) {
        var metadataMap = GetOrCreateMetadataMap(O, P, true);
        metadataMap.set(MetadataKey, MetadataValue);
      }
      function OrdinaryMetadataKeys(O, P) {
        var ownKeys = OrdinaryOwnMetadataKeys(O, P);
        var parent = OrdinaryGetPrototypeOf(O);
        if (parent === null)
          return ownKeys;
        var parentKeys = OrdinaryMetadataKeys(parent, P);
        if (parentKeys.length <= 0)
          return ownKeys;
        if (ownKeys.length <= 0)
          return parentKeys;
        var set = new _Set();
        var keys = [];
        for (var _i = 0, ownKeys_1 = ownKeys; _i < ownKeys_1.length; _i++) {
          var key = ownKeys_1[_i];
          var hasKey = set.has(key);
          if (!hasKey) {
            set.add(key);
            keys.push(key);
          }
        }
        for (var _a = 0, parentKeys_1 = parentKeys; _a < parentKeys_1.length; _a++) {
          var key = parentKeys_1[_a];
          var hasKey = set.has(key);
          if (!hasKey) {
            set.add(key);
            keys.push(key);
          }
        }
        return keys;
      }
      function OrdinaryOwnMetadataKeys(O, P) {
        var keys = [];
        var metadataMap = GetOrCreateMetadataMap(O, P, false);
        if (IsUndefined(metadataMap))
          return keys;
        var keysObj = metadataMap.keys();
        var iterator = GetIterator(keysObj);
        var k = 0;
        while (true) {
          var next = IteratorStep(iterator);
          if (!next) {
            keys.length = k;
            return keys;
          }
          var nextValue = IteratorValue(next);
          try {
            keys[k] = nextValue;
          } catch (e) {
            try {
              IteratorClose(iterator);
            } finally {
              throw e;
            }
          }
          k++;
        }
      }
      function Type(x) {
        if (x === null)
          return 1;
        switch (typeof x) {
          case "undefined":
            return 0;
          case "boolean":
            return 2;
          case "string":
            return 3;
          case "symbol":
            return 4;
          case "number":
            return 5;
          case "object":
            return x === null ? 1 : 6;
          default:
            return 6;
        }
      }
      function IsUndefined(x) {
        return x === void 0;
      }
      function IsNull(x) {
        return x === null;
      }
      function IsSymbol(x) {
        return typeof x === "symbol";
      }
      function IsObject(x) {
        return typeof x === "object" ? x !== null : typeof x === "function";
      }
      function ToPrimitive(input, PreferredType) {
        switch (Type(input)) {
          case 0:
            return input;
          case 1:
            return input;
          case 2:
            return input;
          case 3:
            return input;
          case 4:
            return input;
          case 5:
            return input;
        }
        var hint = PreferredType === 3 ? "string" : PreferredType === 5 ? "number" : "default";
        var exoticToPrim = GetMethod(input, toPrimitiveSymbol);
        if (exoticToPrim !== void 0) {
          var result = exoticToPrim.call(input, hint);
          if (IsObject(result))
            throw new TypeError();
          return result;
        }
        return OrdinaryToPrimitive(input, hint === "default" ? "number" : hint);
      }
      function OrdinaryToPrimitive(O, hint) {
        if (hint === "string") {
          var toString_1 = O.toString;
          if (IsCallable(toString_1)) {
            var result = toString_1.call(O);
            if (!IsObject(result))
              return result;
          }
          var valueOf = O.valueOf;
          if (IsCallable(valueOf)) {
            var result = valueOf.call(O);
            if (!IsObject(result))
              return result;
          }
        } else {
          var valueOf = O.valueOf;
          if (IsCallable(valueOf)) {
            var result = valueOf.call(O);
            if (!IsObject(result))
              return result;
          }
          var toString_2 = O.toString;
          if (IsCallable(toString_2)) {
            var result = toString_2.call(O);
            if (!IsObject(result))
              return result;
          }
        }
        throw new TypeError();
      }
      function ToBoolean(argument) {
        return !!argument;
      }
      function ToString(argument) {
        return "" + argument;
      }
      function ToPropertyKey(argument) {
        var key = ToPrimitive(argument, 3);
        if (IsSymbol(key))
          return key;
        return ToString(key);
      }
      function IsArray(argument) {
        return Array.isArray ? Array.isArray(argument) : argument instanceof Object ? argument instanceof Array : Object.prototype.toString.call(argument) === "[object Array]";
      }
      function IsCallable(argument) {
        return typeof argument === "function";
      }
      function IsConstructor(argument) {
        return typeof argument === "function";
      }
      function IsPropertyKey(argument) {
        switch (Type(argument)) {
          case 3:
            return true;
          case 4:
            return true;
          default:
            return false;
        }
      }
      function GetMethod(V, P) {
        var func = V[P];
        if (func === void 0 || func === null)
          return void 0;
        if (!IsCallable(func))
          throw new TypeError();
        return func;
      }
      function GetIterator(obj) {
        var method = GetMethod(obj, iteratorSymbol);
        if (!IsCallable(method))
          throw new TypeError();
        var iterator = method.call(obj);
        if (!IsObject(iterator))
          throw new TypeError();
        return iterator;
      }
      function IteratorValue(iterResult) {
        return iterResult.value;
      }
      function IteratorStep(iterator) {
        var result = iterator.next();
        return result.done ? false : result;
      }
      function IteratorClose(iterator) {
        var f = iterator["return"];
        if (f)
          f.call(iterator);
      }
      function OrdinaryGetPrototypeOf(O) {
        var proto = Object.getPrototypeOf(O);
        if (typeof O !== "function" || O === functionPrototype)
          return proto;
        if (proto !== functionPrototype)
          return proto;
        var prototype = O.prototype;
        var prototypeProto = prototype && Object.getPrototypeOf(prototype);
        if (prototypeProto == null || prototypeProto === Object.prototype)
          return proto;
        var constructor = prototypeProto.constructor;
        if (typeof constructor !== "function")
          return proto;
        if (constructor === O)
          return proto;
        return constructor;
      }
      function CreateMapPolyfill() {
        var cacheSentinel = {};
        var arraySentinel = [];
        var MapIterator = function() {
          function MapIterator2(keys, values, selector) {
            this._index = 0;
            this._keys = keys;
            this._values = values;
            this._selector = selector;
          }
          MapIterator2.prototype["@@iterator"] = function() {
            return this;
          };
          MapIterator2.prototype[iteratorSymbol] = function() {
            return this;
          };
          MapIterator2.prototype.next = function() {
            var index = this._index;
            if (index >= 0 && index < this._keys.length) {
              var result = this._selector(this._keys[index], this._values[index]);
              if (index + 1 >= this._keys.length) {
                this._index = -1;
                this._keys = arraySentinel;
                this._values = arraySentinel;
              } else {
                this._index++;
              }
              return { value: result, done: false };
            }
            return { value: void 0, done: true };
          };
          MapIterator2.prototype.throw = function(error) {
            if (this._index >= 0) {
              this._index = -1;
              this._keys = arraySentinel;
              this._values = arraySentinel;
            }
            throw error;
          };
          MapIterator2.prototype.return = function(value) {
            if (this._index >= 0) {
              this._index = -1;
              this._keys = arraySentinel;
              this._values = arraySentinel;
            }
            return { value, done: true };
          };
          return MapIterator2;
        }();
        return function() {
          function Map2() {
            this._keys = [];
            this._values = [];
            this._cacheKey = cacheSentinel;
            this._cacheIndex = -2;
          }
          Object.defineProperty(Map2.prototype, "size", {
            get: function() {
              return this._keys.length;
            },
            enumerable: true,
            configurable: true
          });
          Map2.prototype.has = function(key) {
            return this._find(key, false) >= 0;
          };
          Map2.prototype.get = function(key) {
            var index = this._find(key, false);
            return index >= 0 ? this._values[index] : void 0;
          };
          Map2.prototype.set = function(key, value) {
            var index = this._find(key, true);
            this._values[index] = value;
            return this;
          };
          Map2.prototype.delete = function(key) {
            var index = this._find(key, false);
            if (index >= 0) {
              var size = this._keys.length;
              for (var i = index + 1; i < size; i++) {
                this._keys[i - 1] = this._keys[i];
                this._values[i - 1] = this._values[i];
              }
              this._keys.length--;
              this._values.length--;
              if (key === this._cacheKey) {
                this._cacheKey = cacheSentinel;
                this._cacheIndex = -2;
              }
              return true;
            }
            return false;
          };
          Map2.prototype.clear = function() {
            this._keys.length = 0;
            this._values.length = 0;
            this._cacheKey = cacheSentinel;
            this._cacheIndex = -2;
          };
          Map2.prototype.keys = function() {
            return new MapIterator(this._keys, this._values, getKey);
          };
          Map2.prototype.values = function() {
            return new MapIterator(this._keys, this._values, getValue);
          };
          Map2.prototype.entries = function() {
            return new MapIterator(this._keys, this._values, getEntry);
          };
          Map2.prototype["@@iterator"] = function() {
            return this.entries();
          };
          Map2.prototype[iteratorSymbol] = function() {
            return this.entries();
          };
          Map2.prototype._find = function(key, insert) {
            if (this._cacheKey !== key) {
              this._cacheIndex = this._keys.indexOf(this._cacheKey = key);
            }
            if (this._cacheIndex < 0 && insert) {
              this._cacheIndex = this._keys.length;
              this._keys.push(key);
              this._values.push(void 0);
            }
            return this._cacheIndex;
          };
          return Map2;
        }();
        function getKey(key, _) {
          return key;
        }
        function getValue(_, value) {
          return value;
        }
        function getEntry(key, value) {
          return [key, value];
        }
      }
      function CreateSetPolyfill() {
        return function() {
          function Set2() {
            this._map = new _Map();
          }
          Object.defineProperty(Set2.prototype, "size", {
            get: function() {
              return this._map.size;
            },
            enumerable: true,
            configurable: true
          });
          Set2.prototype.has = function(value) {
            return this._map.has(value);
          };
          Set2.prototype.add = function(value) {
            return this._map.set(value, value), this;
          };
          Set2.prototype.delete = function(value) {
            return this._map.delete(value);
          };
          Set2.prototype.clear = function() {
            this._map.clear();
          };
          Set2.prototype.keys = function() {
            return this._map.keys();
          };
          Set2.prototype.values = function() {
            return this._map.values();
          };
          Set2.prototype.entries = function() {
            return this._map.entries();
          };
          Set2.prototype["@@iterator"] = function() {
            return this.keys();
          };
          Set2.prototype[iteratorSymbol] = function() {
            return this.keys();
          };
          return Set2;
        }();
      }
      function CreateWeakMapPolyfill() {
        var UUID_SIZE = 16;
        var keys = HashMap.create();
        var rootKey = CreateUniqueKey();
        return function() {
          function WeakMap2() {
            this._key = CreateUniqueKey();
          }
          WeakMap2.prototype.has = function(target) {
            var table = GetOrCreateWeakMapTable(target, false);
            return table !== void 0 ? HashMap.has(table, this._key) : false;
          };
          WeakMap2.prototype.get = function(target) {
            var table = GetOrCreateWeakMapTable(target, false);
            return table !== void 0 ? HashMap.get(table, this._key) : void 0;
          };
          WeakMap2.prototype.set = function(target, value) {
            var table = GetOrCreateWeakMapTable(target, true);
            table[this._key] = value;
            return this;
          };
          WeakMap2.prototype.delete = function(target) {
            var table = GetOrCreateWeakMapTable(target, false);
            return table !== void 0 ? delete table[this._key] : false;
          };
          WeakMap2.prototype.clear = function() {
            this._key = CreateUniqueKey();
          };
          return WeakMap2;
        }();
        function CreateUniqueKey() {
          var key;
          do
            key = "@@WeakMap@@" + CreateUUID();
          while (HashMap.has(keys, key));
          keys[key] = true;
          return key;
        }
        function GetOrCreateWeakMapTable(target, create) {
          if (!hasOwn.call(target, rootKey)) {
            if (!create)
              return void 0;
            Object.defineProperty(target, rootKey, { value: HashMap.create() });
          }
          return target[rootKey];
        }
        function FillRandomBytes(buffer, size) {
          for (var i = 0; i < size; ++i)
            buffer[i] = Math.random() * 255 | 0;
          return buffer;
        }
        function GenRandomBytes(size) {
          if (typeof Uint8Array === "function") {
            if (typeof crypto !== "undefined")
              return crypto.getRandomValues(new Uint8Array(size));
            if (typeof msCrypto !== "undefined")
              return msCrypto.getRandomValues(new Uint8Array(size));
            return FillRandomBytes(new Uint8Array(size), size);
          }
          return FillRandomBytes(new Array(size), size);
        }
        function CreateUUID() {
          var data = GenRandomBytes(UUID_SIZE);
          data[6] = data[6] & 79 | 64;
          data[8] = data[8] & 191 | 128;
          var result = "";
          for (var offset = 0; offset < UUID_SIZE; ++offset) {
            var byte = data[offset];
            if (offset === 4 || offset === 6 || offset === 8)
              result += "-";
            if (byte < 16)
              result += "0";
            result += byte.toString(16).toLowerCase();
          }
          return result;
        }
      }
      function MakeDictionary(obj) {
        obj.__ = void 0;
        delete obj.__;
        return obj;
      }
    });
  })(Reflect2 || (Reflect2 = {}));

  // src/core/command/Command.ts
  var Command = class {
  };

  // node_modules/tsyringe/dist/esm5/types/lifecycle.js
  var Lifecycle;
  (function(Lifecycle2) {
    Lifecycle2[Lifecycle2["Transient"] = 0] = "Transient";
    Lifecycle2[Lifecycle2["Singleton"] = 1] = "Singleton";
    Lifecycle2[Lifecycle2["ResolutionScoped"] = 2] = "ResolutionScoped";
    Lifecycle2[Lifecycle2["ContainerScoped"] = 3] = "ContainerScoped";
  })(Lifecycle || (Lifecycle = {}));
  var lifecycle_default = Lifecycle;

  // node_modules/tslib/modules/index.js
  var import_tslib = __toESM(require_tslib(), 1);
  var {
    __extends,
    __assign,
    __rest,
    __decorate,
    __param,
    __metadata,
    __awaiter,
    __generator,
    __exportStar,
    __createBinding,
    __values,
    __read,
    __spread,
    __spreadArrays,
    __await,
    __asyncGenerator,
    __asyncDelegator,
    __asyncValues,
    __makeTemplateObject,
    __importStar,
    __importDefault,
    __classPrivateFieldGet,
    __classPrivateFieldSet
  } = import_tslib.default;

  // node_modules/tsyringe/dist/esm5/providers/class-provider.js
  function isClassProvider(provider) {
    return !!provider.useClass;
  }

  // node_modules/tsyringe/dist/esm5/providers/factory-provider.js
  function isFactoryProvider(provider) {
    return !!provider.useFactory;
  }

  // node_modules/tsyringe/dist/esm5/lazy-helpers.js
  var DelayedConstructor = function() {
    function DelayedConstructor2(wrap) {
      this.wrap = wrap;
      this.reflectMethods = [
        "get",
        "getPrototypeOf",
        "setPrototypeOf",
        "getOwnPropertyDescriptor",
        "defineProperty",
        "has",
        "set",
        "deleteProperty",
        "apply",
        "construct",
        "ownKeys"
      ];
    }
    DelayedConstructor2.prototype.createProxy = function(createObject) {
      var _this = this;
      var target = {};
      var init = false;
      var value;
      var delayedObject = function() {
        if (!init) {
          value = createObject(_this.wrap());
          init = true;
        }
        return value;
      };
      return new Proxy(target, this.createHandler(delayedObject));
    };
    DelayedConstructor2.prototype.createHandler = function(delayedObject) {
      var handler = {};
      var install = function(name) {
        handler[name] = function() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          args[0] = delayedObject();
          var method = Reflect[name];
          return method.apply(void 0, __spread(args));
        };
      };
      this.reflectMethods.forEach(install);
      return handler;
    };
    return DelayedConstructor2;
  }();

  // node_modules/tsyringe/dist/esm5/providers/injection-token.js
  function isNormalToken(token) {
    return typeof token === "string" || typeof token === "symbol";
  }
  function isTokenDescriptor(descriptor) {
    return typeof descriptor === "object" && "token" in descriptor && "multiple" in descriptor;
  }
  function isTransformDescriptor(descriptor) {
    return typeof descriptor === "object" && "token" in descriptor && "transform" in descriptor;
  }
  function isConstructorToken(token) {
    return typeof token === "function" || token instanceof DelayedConstructor;
  }

  // node_modules/tsyringe/dist/esm5/providers/token-provider.js
  function isTokenProvider(provider) {
    return !!provider.useToken;
  }

  // node_modules/tsyringe/dist/esm5/providers/value-provider.js
  function isValueProvider(provider) {
    return provider.useValue != void 0;
  }

  // node_modules/tsyringe/dist/esm5/providers/provider.js
  function isProvider(provider) {
    return isClassProvider(provider) || isValueProvider(provider) || isTokenProvider(provider) || isFactoryProvider(provider);
  }

  // node_modules/tsyringe/dist/esm5/registry-base.js
  var RegistryBase = function() {
    function RegistryBase2() {
      this._registryMap = /* @__PURE__ */ new Map();
    }
    RegistryBase2.prototype.entries = function() {
      return this._registryMap.entries();
    };
    RegistryBase2.prototype.getAll = function(key) {
      this.ensure(key);
      return this._registryMap.get(key);
    };
    RegistryBase2.prototype.get = function(key) {
      this.ensure(key);
      var value = this._registryMap.get(key);
      return value[value.length - 1] || null;
    };
    RegistryBase2.prototype.set = function(key, value) {
      this.ensure(key);
      this._registryMap.get(key).push(value);
    };
    RegistryBase2.prototype.setAll = function(key, value) {
      this._registryMap.set(key, value);
    };
    RegistryBase2.prototype.has = function(key) {
      this.ensure(key);
      return this._registryMap.get(key).length > 0;
    };
    RegistryBase2.prototype.clear = function() {
      this._registryMap.clear();
    };
    RegistryBase2.prototype.ensure = function(key) {
      if (!this._registryMap.has(key)) {
        this._registryMap.set(key, []);
      }
    };
    return RegistryBase2;
  }();
  var registry_base_default = RegistryBase;

  // node_modules/tsyringe/dist/esm5/registry.js
  var Registry = function(_super) {
    __extends(Registry2, _super);
    function Registry2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return Registry2;
  }(registry_base_default);
  var registry_default = Registry;

  // node_modules/tsyringe/dist/esm5/resolution-context.js
  var ResolutionContext = function() {
    function ResolutionContext2() {
      this.scopedResolutions = /* @__PURE__ */ new Map();
    }
    return ResolutionContext2;
  }();
  var resolution_context_default = ResolutionContext;

  // node_modules/tsyringe/dist/esm5/error-helpers.js
  function formatDependency(params, idx) {
    if (params === null) {
      return "at position #" + idx;
    }
    var argName = params.split(",")[idx].trim();
    return '"' + argName + '" at position #' + idx;
  }
  function composeErrorMessage(msg, e, indent) {
    if (indent === void 0) {
      indent = "    ";
    }
    return __spread([msg], e.message.split("\n").map(function(l) {
      return indent + l;
    })).join("\n");
  }
  function formatErrorCtor(ctor, paramIdx, error) {
    var _a = __read(ctor.toString().match(/constructor\(([\w, ]+)\)/) || [], 2), _b = _a[1], params = _b === void 0 ? null : _b;
    var dep = formatDependency(params, paramIdx);
    return composeErrorMessage("Cannot inject the dependency " + dep + ' of "' + ctor.name + '" constructor. Reason:', error);
  }

  // node_modules/tsyringe/dist/esm5/types/disposable.js
  function isDisposable(value) {
    if (typeof value.dispose !== "function")
      return false;
    var disposeFun = value.dispose;
    if (disposeFun.length > 0) {
      return false;
    }
    return true;
  }

  // node_modules/tsyringe/dist/esm5/interceptors.js
  var PreResolutionInterceptors = function(_super) {
    __extends(PreResolutionInterceptors2, _super);
    function PreResolutionInterceptors2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return PreResolutionInterceptors2;
  }(registry_base_default);
  var PostResolutionInterceptors = function(_super) {
    __extends(PostResolutionInterceptors2, _super);
    function PostResolutionInterceptors2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    return PostResolutionInterceptors2;
  }(registry_base_default);
  var Interceptors = function() {
    function Interceptors2() {
      this.preResolution = new PreResolutionInterceptors();
      this.postResolution = new PostResolutionInterceptors();
    }
    return Interceptors2;
  }();
  var interceptors_default = Interceptors;

  // node_modules/tsyringe/dist/esm5/dependency-container.js
  var typeInfo = /* @__PURE__ */ new Map();
  var InternalDependencyContainer = function() {
    function InternalDependencyContainer2(parent) {
      this.parent = parent;
      this._registry = new registry_default();
      this.interceptors = new interceptors_default();
      this.disposed = false;
      this.disposables = /* @__PURE__ */ new Set();
    }
    InternalDependencyContainer2.prototype.register = function(token, providerOrConstructor, options) {
      if (options === void 0) {
        options = { lifecycle: lifecycle_default.Transient };
      }
      this.ensureNotDisposed();
      var provider;
      if (!isProvider(providerOrConstructor)) {
        provider = { useClass: providerOrConstructor };
      } else {
        provider = providerOrConstructor;
      }
      if (isTokenProvider(provider)) {
        var path = [token];
        var tokenProvider = provider;
        while (tokenProvider != null) {
          var currentToken = tokenProvider.useToken;
          if (path.includes(currentToken)) {
            throw new Error("Token registration cycle detected! " + __spread(path, [currentToken]).join(" -> "));
          }
          path.push(currentToken);
          var registration = this._registry.get(currentToken);
          if (registration && isTokenProvider(registration.provider)) {
            tokenProvider = registration.provider;
          } else {
            tokenProvider = null;
          }
        }
      }
      if (options.lifecycle === lifecycle_default.Singleton || options.lifecycle == lifecycle_default.ContainerScoped || options.lifecycle == lifecycle_default.ResolutionScoped) {
        if (isValueProvider(provider) || isFactoryProvider(provider)) {
          throw new Error('Cannot use lifecycle "' + lifecycle_default[options.lifecycle] + '" with ValueProviders or FactoryProviders');
        }
      }
      this._registry.set(token, { provider, options });
      return this;
    };
    InternalDependencyContainer2.prototype.registerType = function(from, to) {
      this.ensureNotDisposed();
      if (isNormalToken(to)) {
        return this.register(from, {
          useToken: to
        });
      }
      return this.register(from, {
        useClass: to
      });
    };
    InternalDependencyContainer2.prototype.registerInstance = function(token, instance2) {
      this.ensureNotDisposed();
      return this.register(token, {
        useValue: instance2
      });
    };
    InternalDependencyContainer2.prototype.registerSingleton = function(from, to) {
      this.ensureNotDisposed();
      if (isNormalToken(from)) {
        if (isNormalToken(to)) {
          return this.register(from, {
            useToken: to
          }, { lifecycle: lifecycle_default.Singleton });
        } else if (to) {
          return this.register(from, {
            useClass: to
          }, { lifecycle: lifecycle_default.Singleton });
        }
        throw new Error('Cannot register a type name as a singleton without a "to" token');
      }
      var useClass = from;
      if (to && !isNormalToken(to)) {
        useClass = to;
      }
      return this.register(from, {
        useClass
      }, { lifecycle: lifecycle_default.Singleton });
    };
    InternalDependencyContainer2.prototype.resolve = function(token, context) {
      if (context === void 0) {
        context = new resolution_context_default();
      }
      this.ensureNotDisposed();
      var registration = this.getRegistration(token);
      if (!registration && isNormalToken(token)) {
        throw new Error('Attempted to resolve unregistered dependency token: "' + token.toString() + '"');
      }
      this.executePreResolutionInterceptor(token, "Single");
      if (registration) {
        var result = this.resolveRegistration(registration, context);
        this.executePostResolutionInterceptor(token, result, "Single");
        return result;
      }
      if (isConstructorToken(token)) {
        var result = this.construct(token, context);
        this.executePostResolutionInterceptor(token, result, "Single");
        return result;
      }
      throw new Error("Attempted to construct an undefined constructor. Could mean a circular dependency problem. Try using `delay` function.");
    };
    InternalDependencyContainer2.prototype.executePreResolutionInterceptor = function(token, resolutionType) {
      var e_1, _a;
      if (this.interceptors.preResolution.has(token)) {
        var remainingInterceptors = [];
        try {
          for (var _b = __values(this.interceptors.preResolution.getAll(token)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var interceptor = _c.value;
            if (interceptor.options.frequency != "Once") {
              remainingInterceptors.push(interceptor);
            }
            interceptor.callback(token, resolutionType);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        this.interceptors.preResolution.setAll(token, remainingInterceptors);
      }
    };
    InternalDependencyContainer2.prototype.executePostResolutionInterceptor = function(token, result, resolutionType) {
      var e_2, _a;
      if (this.interceptors.postResolution.has(token)) {
        var remainingInterceptors = [];
        try {
          for (var _b = __values(this.interceptors.postResolution.getAll(token)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var interceptor = _c.value;
            if (interceptor.options.frequency != "Once") {
              remainingInterceptors.push(interceptor);
            }
            interceptor.callback(token, result, resolutionType);
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
        this.interceptors.postResolution.setAll(token, remainingInterceptors);
      }
    };
    InternalDependencyContainer2.prototype.resolveRegistration = function(registration, context) {
      this.ensureNotDisposed();
      if (registration.options.lifecycle === lifecycle_default.ResolutionScoped && context.scopedResolutions.has(registration)) {
        return context.scopedResolutions.get(registration);
      }
      var isSingleton = registration.options.lifecycle === lifecycle_default.Singleton;
      var isContainerScoped = registration.options.lifecycle === lifecycle_default.ContainerScoped;
      var returnInstance = isSingleton || isContainerScoped;
      var resolved;
      if (isValueProvider(registration.provider)) {
        resolved = registration.provider.useValue;
      } else if (isTokenProvider(registration.provider)) {
        resolved = returnInstance ? registration.instance || (registration.instance = this.resolve(registration.provider.useToken, context)) : this.resolve(registration.provider.useToken, context);
      } else if (isClassProvider(registration.provider)) {
        resolved = returnInstance ? registration.instance || (registration.instance = this.construct(registration.provider.useClass, context)) : this.construct(registration.provider.useClass, context);
      } else if (isFactoryProvider(registration.provider)) {
        resolved = registration.provider.useFactory(this);
      } else {
        resolved = this.construct(registration.provider, context);
      }
      if (registration.options.lifecycle === lifecycle_default.ResolutionScoped) {
        context.scopedResolutions.set(registration, resolved);
      }
      return resolved;
    };
    InternalDependencyContainer2.prototype.resolveAll = function(token, context) {
      var _this = this;
      if (context === void 0) {
        context = new resolution_context_default();
      }
      this.ensureNotDisposed();
      var registrations = this.getAllRegistrations(token);
      if (!registrations && isNormalToken(token)) {
        throw new Error('Attempted to resolve unregistered dependency token: "' + token.toString() + '"');
      }
      this.executePreResolutionInterceptor(token, "All");
      if (registrations) {
        var result_1 = registrations.map(function(item) {
          return _this.resolveRegistration(item, context);
        });
        this.executePostResolutionInterceptor(token, result_1, "All");
        return result_1;
      }
      var result = [this.construct(token, context)];
      this.executePostResolutionInterceptor(token, result, "All");
      return result;
    };
    InternalDependencyContainer2.prototype.isRegistered = function(token, recursive) {
      if (recursive === void 0) {
        recursive = false;
      }
      this.ensureNotDisposed();
      return this._registry.has(token) || recursive && (this.parent || false) && this.parent.isRegistered(token, true);
    };
    InternalDependencyContainer2.prototype.reset = function() {
      this.ensureNotDisposed();
      this._registry.clear();
      this.interceptors.preResolution.clear();
      this.interceptors.postResolution.clear();
    };
    InternalDependencyContainer2.prototype.clearInstances = function() {
      var e_3, _a;
      this.ensureNotDisposed();
      try {
        for (var _b = __values(this._registry.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var _d = __read(_c.value, 2), token = _d[0], registrations = _d[1];
          this._registry.setAll(token, registrations.filter(function(registration) {
            return !isValueProvider(registration.provider);
          }).map(function(registration) {
            registration.instance = void 0;
            return registration;
          }));
        }
      } catch (e_3_1) {
        e_3 = { error: e_3_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_3)
            throw e_3.error;
        }
      }
    };
    InternalDependencyContainer2.prototype.createChildContainer = function() {
      var e_4, _a;
      this.ensureNotDisposed();
      var childContainer = new InternalDependencyContainer2(this);
      try {
        for (var _b = __values(this._registry.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var _d = __read(_c.value, 2), token = _d[0], registrations = _d[1];
          if (registrations.some(function(_a2) {
            var options = _a2.options;
            return options.lifecycle === lifecycle_default.ContainerScoped;
          })) {
            childContainer._registry.setAll(token, registrations.map(function(registration) {
              if (registration.options.lifecycle === lifecycle_default.ContainerScoped) {
                return {
                  provider: registration.provider,
                  options: registration.options
                };
              }
              return registration;
            }));
          }
        }
      } catch (e_4_1) {
        e_4 = { error: e_4_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a = _b.return))
            _a.call(_b);
        } finally {
          if (e_4)
            throw e_4.error;
        }
      }
      return childContainer;
    };
    InternalDependencyContainer2.prototype.beforeResolution = function(token, callback, options) {
      if (options === void 0) {
        options = { frequency: "Always" };
      }
      this.interceptors.preResolution.set(token, {
        callback,
        options
      });
    };
    InternalDependencyContainer2.prototype.afterResolution = function(token, callback, options) {
      if (options === void 0) {
        options = { frequency: "Always" };
      }
      this.interceptors.postResolution.set(token, {
        callback,
        options
      });
    };
    InternalDependencyContainer2.prototype.dispose = function() {
      return __awaiter(this, void 0, void 0, function() {
        var promises;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              this.disposed = true;
              promises = [];
              this.disposables.forEach(function(disposable) {
                var maybePromise = disposable.dispose();
                if (maybePromise) {
                  promises.push(maybePromise);
                }
              });
              return [4, Promise.all(promises)];
            case 1:
              _a.sent();
              return [2];
          }
        });
      });
    };
    InternalDependencyContainer2.prototype.getRegistration = function(token) {
      if (this.isRegistered(token)) {
        return this._registry.get(token);
      }
      if (this.parent) {
        return this.parent.getRegistration(token);
      }
      return null;
    };
    InternalDependencyContainer2.prototype.getAllRegistrations = function(token) {
      if (this.isRegistered(token)) {
        return this._registry.getAll(token);
      }
      if (this.parent) {
        return this.parent.getAllRegistrations(token);
      }
      return null;
    };
    InternalDependencyContainer2.prototype.construct = function(ctor, context) {
      var _this = this;
      if (ctor instanceof DelayedConstructor) {
        return ctor.createProxy(function(target) {
          return _this.resolve(target, context);
        });
      }
      var instance2 = function() {
        var paramInfo = typeInfo.get(ctor);
        if (!paramInfo || paramInfo.length === 0) {
          if (ctor.length === 0) {
            return new ctor();
          } else {
            throw new Error('TypeInfo not known for "' + ctor.name + '"');
          }
        }
        var params = paramInfo.map(_this.resolveParams(context, ctor));
        return new (ctor.bind.apply(ctor, __spread([void 0], params)))();
      }();
      if (isDisposable(instance2)) {
        this.disposables.add(instance2);
      }
      return instance2;
    };
    InternalDependencyContainer2.prototype.resolveParams = function(context, ctor) {
      var _this = this;
      return function(param, idx) {
        var _a, _b, _c;
        try {
          if (isTokenDescriptor(param)) {
            if (isTransformDescriptor(param)) {
              return param.multiple ? (_a = _this.resolve(param.transform)).transform.apply(_a, __spread([_this.resolveAll(param.token)], param.transformArgs)) : (_b = _this.resolve(param.transform)).transform.apply(_b, __spread([_this.resolve(param.token, context)], param.transformArgs));
            } else {
              return param.multiple ? _this.resolveAll(param.token) : _this.resolve(param.token, context);
            }
          } else if (isTransformDescriptor(param)) {
            return (_c = _this.resolve(param.transform, context)).transform.apply(_c, __spread([_this.resolve(param.token, context)], param.transformArgs));
          }
          return _this.resolve(param, context);
        } catch (e) {
          throw new Error(formatErrorCtor(ctor, idx, e));
        }
      };
    };
    InternalDependencyContainer2.prototype.ensureNotDisposed = function() {
      if (this.disposed) {
        throw new Error("This container has been disposed, you cannot interact with a disposed container");
      }
    };
    return InternalDependencyContainer2;
  }();
  var instance = new InternalDependencyContainer();

  // node_modules/tsyringe/dist/esm5/index.js
  if (typeof Reflect === "undefined" || !Reflect.getMetadata) {
    throw new Error(`tsyringe requires a reflect polyfill. Please add 'import "reflect-metadata"' to the top of your entry point.`);
  }

  // src/modules/base/command/RegisterContainerModuleCommand.ts
  var RegisterContainerModuleCommand = class extends Command {
    constructor(moduleKey, moduleFactory) {
      super();
      this.moduleKey = moduleKey;
      this.moduleFactory = moduleFactory;
    }
    execute() {
      return __async(this, null, function* () {
        const module2 = yield this.moduleFactory();
        instance.register(this.moduleKey, { useValue: module2 });
        return Promise.resolve();
      });
    }
  };

  // src/background/startup/command/RegisterKeyModulesCommand.ts
  var RegisterKeyModulesCommand = class extends Command {
    constructor() {
      super(...arguments);
      this.config = instance.resolve("ModulesConfig" /* MODULES_CONFIG */);
    }
    execute() {
      return __async(this, null, function* () {
        for (let i = 0; i < this.config.coreModules.length; i++) {
          const { containerKey, factory } = this.config.coreModules[i];
          yield new RegisterContainerModuleCommand(containerKey, factory).execute();
        }
        return Promise.resolve();
      });
    }
  };

  // src/modules/base/feature/FeatureModule.ts
  var FeatureModule = class {
    constructor(featureFactory) {
      this.featureFactory = featureFactory;
    }
    static buildModule(featureToggle, featureFactory) {
      return __async(this, null, function* () {
        const module2 = new FeatureModule(featureFactory);
        yield module2.createFeature(featureToggle);
        return module2;
      });
    }
    updateToggle(featureToggle) {
      return __async(this, null, function* () {
        if (featureToggle === "disabled" /* DISABLED */)
          return this.disposeFeature();
        yield this.createFeature(featureToggle);
      });
    }
    disposeFeature() {
      if (!this.feature)
        return;
      this.feature.dispose();
      this.feature = void 0;
    }
    createFeature(featureToggle) {
      return __async(this, null, function* () {
        if (this.feature || featureToggle === "disabled" /* DISABLED */)
          return;
        this.feature = yield this.featureFactory();
      });
    }
  };

  // src/core/observable/observer/Observer.ts
  var Observer = class {
    constructor(callback, observable) {
      this.callback = callback;
      this.observable = observable;
    }
    subscribe() {
      this.observable.subscribe(this);
    }
    unsubscribe() {
      this.observable.unsubscribe(this);
    }
  };

  // src/background/shepherd/observable/observer/ShepherdObserver.ts
  var ShepherdObserver = class extends Observer {
    constructor(callback, key) {
      super(callback, instance.resolve("Shepherd" /* SHEPHERD */).observable);
      this.callback = callback;
      this.key = key;
    }
  };

  // src/modules/base/feature/FeatureModulesHandler.ts
  var FeatureModulesHandler = class {
    constructor() {
      this.shepherdObserver = new ShepherdObserver(this.onFeatureToggleChanged.bind(this), "featureToggles");
      this.modules = [];
      this.setInitialData();
      this.shepherdObserver.subscribe();
    }
    registerModules() {
      return __async(this, null, function* () {
        const config = instance.resolve("ModulesConfig" /* MODULES_CONFIG */);
        const promises = config.featureModules.map((module2) => this.buildModule(module2.toggleKey, module2.factory));
        this.modules = yield Promise.all(promises);
      });
    }
    setInitialData() {
      const shepherd = instance.resolve("Shepherd" /* SHEPHERD */);
      this.featureToggles = shepherd.getData().featureToggles;
    }
    onFeatureToggleChanged(data) {
      return __async(this, null, function* () {
        this.featureToggles = data;
        yield this.updateModules();
      });
    }
    updateModules() {
      return __async(this, null, function* () {
        for (let i = 0; i < this.modules.length; i++) {
          const { toggleKey, featureModule } = this.modules[i];
          yield featureModule.updateToggle(this.featureToggles[toggleKey]);
        }
      });
    }
    buildModule(featureToggle, factory) {
      return __async(this, null, function* () {
        return new Promise((resolve, reject) => __async(this, null, function* () {
          const featureName = featureToggle.toString();
          const state = this.featureToggles[featureToggle] !== "disabled" /* DISABLED */;
          console.log(`${featureName}: ${state}`);
          const featureModule = yield FeatureModule.buildModule(this.featureToggles[featureToggle], factory);
          resolve({ featureModule, toggleKey: featureToggle });
        }));
      });
    }
  };

  // src/background/startup/command/RegisterCommonModulesCommand.ts
  var RegisterCommonModulesCommand = class extends Command {
    constructor() {
      super(...arguments);
      this.config = instance.resolve("ModulesConfig" /* MODULES_CONFIG */);
    }
    execute() {
      return __async(this, null, function* () {
        const modules = this.config.commonModules.map((module2) => {
          const { containerKey, factory } = module2;
          return new RegisterContainerModuleCommand(containerKey, factory).execute();
        });
        return yield Promise.all(modules);
      });
    }
  };

  // src/background/startup/command/StartupCommand.ts
  var StartupCommand = class extends Command {
    execute() {
      return __async(this, null, function* () {
        try {
          yield new RegisterKeyModulesCommand().execute();
          yield new RegisterCommonModulesCommand().execute();
          yield new FeatureModulesHandler().registerModules();
        } catch (e) {
          console.log(e);
        }
      });
    }
  };

  // src/modules/antitrack/types.ts
  var AntiTrackCategoryName = /* @__PURE__ */ ((AntiTrackCategoryName2) => {
    AntiTrackCategoryName2["AdTracking"] = "AdTracking";
    AntiTrackCategoryName2["WebAnalytics"] = "WebAnalytics";
    AntiTrackCategoryName2["Social"] = "Social";
    AntiTrackCategoryName2["Others"] = "Others";
    AntiTrackCategoryName2["AdTracking_Allowed"] = "AdTracking_Allowed";
    AntiTrackCategoryName2["WebAnalytics_Allowed"] = "WebAnalytics_Allowed";
    AntiTrackCategoryName2["Social_Allowed"] = "Social_Allowed";
    AntiTrackCategoryName2["Others_Allowed"] = "Others_Allowed";
    return AntiTrackCategoryName2;
  })(AntiTrackCategoryName || {});

  // src/background/config/Config.ts
  var Config = class {
    constructor() {
      this.advertisers = {
        defaultState: {
          state: "INITIALIZED" /* INITIALIZED */,
          scenarios: [],
          settings: {
            autoOptOut: true,
            brokersOptOut: {},
            optedOutBrokers: []
          }
        }
      };
      this.burger = {
        id: 146,
        callerId: 1100,
        batchTimeout: 30 * 60 * 1e3,
        production: "https://analytics.ff.avast.com/v4/receive/gpb",
        stage: "https://analytics-stage.ff.avast.com/v4/receive/gpb",
        defaultState: {
          trackingEnabled: true
        }
      };
      this.antiTrack = {
        defaultState: {
          categories: [
            {
              name: "Social" /* Social */,
              enabled: false
            },
            {
              name: "AdTracking" /* AdTracking */,
              enabled: false
            },
            {
              name: "WebAnalytics" /* WebAnalytics */,
              enabled: false
            },
            {
              name: "Others" /* Others */,
              enabled: false
            }
          ],
          stats: {
            globalBlocked: 0,
            timeStamp: 0
          },
          countOnBadge: {
            enabled: true
          }
        },
        mockRules: [
          { pattern: "google-analytics\\.com\\/(ga\\.js)", mock: "ga.js" },
          { pattern: "\\/(omniture|mbox|hbx|omniunih)(.*)?\\.js", mock: "omniture.js" },
          { pattern: "adnxs\\.com", mock: "empty.js" },
          { pattern: "gpt.js$", mock: "gpt.js" }
        ]
      };
      this.privacyAdvisor = {
        defaultState: {
          triggerNotification: true,
          completed: [],
          stopped: []
        }
      };
      this.globalPrivacyControl = {
        defaultState: {
          gpcEnabled: true
        }
      };
      this.searchResults = {
        defaultState: {
          enabled: true
        }
      };
      this.shepherd = {
        id: 46,
        production: "https://shepherd.ff.avast.com/",
        stage: "https://shepherd-preview.ff.avast.com/",
        test: "https://shepherd-test-mobile.ff.avast.com/",
        failRefreshDelay: 5 * 60 * 1e3,
        defaultRefreshDelay: 24 * 60 * 60 * 1e3
      };
      this.urlInfo = {
        throttle: 250,
        phishingRedirect: "https://www.avast.com?utm_source=OnlineSecurity&utm_medium=redirect&utm_campaign=avast",
        production: "https://urlite.ff.avast.com/v1/urlinfo"
      };
      this.ignoredTabs = [
        "^secure://",
        "^chrome:\\/\\/",
        "^edge:\\/\\/",
        "^chrome-extension:",
        "^moz-extension:",
        "^ms-browser-extension:",
        "^chrome-devtools:\\/\\/",
        "^https:\\/\\/chrome\\.google\\.com\\/webstore",
        "^about:",
        "^view-source:",
        "^file:\\/\\/",
        "^http(s)?:\\/\\/([\\w|\\d]+:[\\w|\\d]+@)?localhost",
        "^data:text\\/html"
      ];
      this.emptyTabUrls = [
        "chrome://newtab/",
        "about:newtab",
        "edge://newtab/"
      ];
      this.appConnector = {
        checkIntervalInMinutes: 2,
        localPorts: [27275, 18821, 7754],
        productTTL: 60 * 60 * 1e3
      };
      this.geoLocation = { production: "https://www.avast.com/geo-a1-data" };
      this.localization = {
        production: "https://s-install.avcdn.net/aos/assets/prod/translations",
        stage: "https://s-install.avcdn.net/aos/assets/stage/translations",
        repeatFailedTimes: 3,
        failRefreshDelay: 10 * 60 * 1e3,
        supportedLanguages: [
          "cs",
          "da",
          "en",
          "es",
          "fi",
          "fr",
          "hu",
          "it",
          "ja",
          "ko",
          "nb",
          "nl",
          "pl",
          "pt",
          "ru",
          "sk",
          "sv",
          "tr",
          "zh-CN",
          "zh-TW"
        ]
      };
      this.client = {
        defaultState: {
          extensionGUID: null,
          identifiers: {
            localAppGUID: null,
            localAppHWID: null,
            localAppPluginGUID: null,
            localAppVersion: null,
            localAppType: null,
            successTimestamp: 0
          },
          localEnabled: true,
          a1GeoAvailable: false,
          language: "en" /* English */,
          installDate: 0,
          callerID: 1e4,
          version: "22.11.177",
          extVersion: "0",
          os: "",
          osVersion: "0",
          osBuild: null,
          browserType: "CHROMIUMEDGE"
        }
      };
      this.cookieConsent = {
        defaultState: {
          state: "disabled" /* DISABLED */,
          preferences: "rejectAll" /* REJECT_ALL */,
          allowedWebsites: [],
          stats: { dismissedPopups: 0, savedTime: 0 },
          enabled: true,
          notification: { state: "show" /* SHOW */, alreadyDisplayed: false },
          scenarios: {},
          detectionRules: [],
          cookieParams: [],
          cookieBannerSelectors: { default: "" }
        }
      };
    }
  };

  // src/core/observable/Observable.ts
  var Observable = class {
    constructor() {
      this.observers = [];
    }
    subscribe(observer) {
      if (this.observers.includes(observer))
        return;
      this.observers.push(observer);
    }
    unsubscribe(observer) {
      this.observers = this.observers.filter((o) => o !== observer);
    }
    notify(...args) {
      this.observers.forEach((observer) => this.notifyObserver(observer, ...args));
    }
  };

  // src/core/messages/observable/MessageObservable.ts
  var MessageObservable = class extends Observable {
    constructor() {
      super();
      chrome.runtime.onMessage.addListener(this.notify.bind(this));
    }
    notify(message, sender, sendResponse) {
      return this.observers.some((observer) => this.notifyObserver(observer, message, sender, sendResponse));
    }
    notifyObserver(observer, message, sender, sendResponse) {
      if (observer.messageName !== message.name)
        return false;
      return observer.callback(message.body, sendResponse, sender) === true;
    }
  };

  // src/background/tabs/command/GetActiveTabCommand.ts
  var GetActiveTabCommand = class extends Command {
    execute() {
      return __async(this, null, function* () {
        try {
          const tabs = yield chrome.tabs.query({ active: true, currentWindow: true });
          return tabs && tabs.length > 0 ? tabs[0] : void 0;
        } catch (e) {
          console.log(e.message);
          return;
        }
      });
    }
  };

  // src/core/messages/error/MessageNotSentError.ts
  var MessageNotSentError = class {
    constructor(message, messageName, error) {
      this.message = message;
      this.messageName = messageName;
      this.error = error;
      this.name = "MessageNotSentError";
    }
  };

  // src/core/messages/command/MessageQueryBase.ts
  var MessageQueryBase = class extends Command {
    constructor(name, body, target) {
      super();
      this.message = { name, body, target };
    }
    execute() {
      return __async(this, null, function* () {
        try {
          return yield this.sendMessage();
        } catch (e) {
          return Promise.reject(new MessageNotSentError(e.message, this.message.name));
        }
      });
    }
  };

  // src/background/messages/command/BackgroundMessageQuery.ts
  var BackgroundMessageQuery = class extends MessageQueryBase {
    constructor(name, body, tabId) {
      super(name, body, "CLIENT" /* CLIENT */);
      this.tabId = tabId;
    }
    sendMessage() {
      return __async(this, null, function* () {
        if (this.tabId)
          return this.send(this.tabId);
        const activeTab = yield new GetActiveTabCommand().execute();
        if (!activeTab) {
          console.log("Failed to find an Active Tab");
          return;
        }
        return this.send(activeTab.id);
      });
    }
    sendMessageToAllTabs() {
      return __async(this, null, function* () {
        const tabs = yield chrome.tabs.query({});
        tabs.forEach((tab) => {
          chrome.tabs.sendMessage(tab.id, this.message);
        });
      });
    }
    send(tabId) {
      return chrome.tabs.sendMessage(tabId, this.message);
    }
  };

  // src/background/messages/observable/BackgroundMessageObservable.ts
  var BackgroundMessageObservable = class extends MessageObservable {
    notifyObserver(observer, message, sender, sendResponse) {
      if (message.target === "CLIENT" /* CLIENT */)
        return this.proxyMessageToClient(message, sendResponse, sender.tab.id);
      super.notifyObserver(observer, message, sender, sendResponse);
    }
    proxyMessageToClient(message, sendResponse, tabId) {
      new BackgroundMessageQuery(message.name, message.body, tabId).execute();
      sendResponse("MESSAGE_SENT");
    }
  };

  // src/background/panel/observable/ExtensionIconClickedObservable.ts
  var ExtensionIconClickedObservable = class extends Observable {
    constructor() {
      super();
      chrome.action.onClicked.addListener(this.onExtensionIconClicked.bind(this));
    }
    onExtensionIconClicked(tab) {
      this.notify(tab);
    }
    notifyObserver(observer, tab) {
      observer.callback(tab);
    }
    subscribe(observer) {
      if (this.observers.includes(observer))
        return;
      this.observers.push(observer);
      if (ExtensionIconClickedObservable.clickedTab) {
        this.notifyObserver(observer, ExtensionIconClickedObservable.clickedTab);
        ExtensionIconClickedObservable.clickedTab = null;
      }
    }
  };
  chrome.action.onClicked.addListener((tab) => {
    ExtensionIconClickedObservable.clickedTab = tab;
  });

  // src/background/tabs/observable/TabsObservable.ts
  var TabsObservable = class extends Observable {
    constructor() {
      super();
      chrome.tabs.onUpdated.addListener(this.onTabUpdated.bind(this));
    }
    onTabUpdated(tabId, changeInfo, tab) {
      if (changeInfo.status !== "complete")
        return;
      this.notify(tabId, changeInfo, tab);
    }
    notifyObserver(observer, tabId, changeInfo, tab) {
      if (observer.type === "ACTIVE" /* ACTIVE */ && !tab.active)
        return;
      observer.callback(tabId, changeInfo, tab);
    }
  };

  // src/core/storage/observable/StorageObservable.ts
  var StorageObservable = class extends Observable {
    constructor() {
      super();
      chrome.storage.onChanged.addListener(this.notify.bind(this));
    }
    notifyObserver(observer, changes, areaName) {
      if (observer.areaName !== areaName)
        return;
      if (changes && !changes.hasOwnProperty(observer.storageKey))
        return;
      observer.callback(changes[observer.storageKey].newValue);
    }
  };

  // src/modules/base/feature/Feature.ts
  var Feature = class {
    constructor() {
    }
  };

  // src/background/scripting/error/GlobalPrivacyControlHeaderInjectionError.ts
  var GlobalPrivacyControlHeaderInjectionError = class {
    constructor(message) {
      this.message = message;
      this.name = "GlobalPrivacyControlHeaderInjectionError";
    }
  };

  // src/background/scripting/command/InjectGlobalPrivacyControlHeaderCommand.ts
  var InjectGlobalPrivacyControlHeaderCommand = class extends Command {
    constructor() {
      super(...arguments);
      this.gpcHeader = {
        header: "Sec-GPC",
        value: "1"
      };
    }
    execute() {
      return __async(this, null, function* () {
        try {
          return yield this.injectGpcHeader();
        } catch (e) {
          return Promise.reject(new GlobalPrivacyControlHeaderInjectionError(e.message));
        }
      });
    }
    injectGpcHeader() {
      return chrome.declarativeNetRequest.updateDynamicRules({
        removeRuleIds: [1],
        addRules: [
          {
            id: 1,
            priority: 1,
            action: {
              type: chrome.declarativeNetRequest.RuleActionType.MODIFY_HEADERS,
              requestHeaders: [
                __spreadValues({
                  operation: chrome.declarativeNetRequest.HeaderOperation.SET
                }, this.gpcHeader)
              ]
            },
            condition: {
              resourceTypes: [
                chrome.declarativeNetRequest.ResourceType.MAIN_FRAME,
                chrome.declarativeNetRequest.ResourceType.SUB_FRAME,
                chrome.declarativeNetRequest.ResourceType.XMLHTTPREQUEST,
                chrome.declarativeNetRequest.ResourceType.IMAGE,
                chrome.declarativeNetRequest.ResourceType.SCRIPT
              ]
            }
          }
        ]
      });
    }
  };

  // src/core/storage/error/StorageGetError.ts
  var StorageGetError = class {
    constructor(error) {
      this.name = "StorageGetError";
      this.message = error.message;
    }
  };

  // src/core/storage/command/GetStorageDataQuery.ts
  var GetStorageDataQuery = class extends Command {
    constructor(key, areaKey = "local" /* LOCAL */) {
      super();
      this.key = key;
      this.areaKey = areaKey;
    }
    execute() {
      return __async(this, null, function* () {
        try {
          const result = yield chrome.storage[this.areaKey].get([this.key]);
          return result[this.key];
        } catch (e) {
          return Promise.reject(new StorageGetError(e));
        }
      });
    }
  };

  // src/core/storage/error/StorageSetError.ts
  var StorageSetError = class {
    constructor(error) {
      this.name = "StorageSetError";
      this.message = error.message;
    }
  };

  // src/core/storage/command/SetStorageDataCommand.ts
  var SetStorageDataCommand = class extends Command {
    constructor(key, value, areaKey = "local" /* LOCAL */) {
      super();
      this.key = key;
      this.value = value;
      this.areaKey = areaKey;
    }
    execute() {
      return __async(this, null, function* () {
        try {
          return yield chrome.storage[this.areaKey].set({ [this.key]: this.value });
        } catch (e) {
          return Promise.reject(new StorageSetError(e));
        }
      });
    }
  };

  // src/modules/gpc/background/command/InitiateGlobalPrivacyControlDataCommand.ts
  var InitiateGlobalPrivacyControlDataCommand = class extends Command {
    execute() {
      return __async(this, null, function* () {
        const state = yield this.handleStorageData();
        return Promise.resolve(__spreadValues({}, state));
      });
    }
    handleStorageData() {
      return __async(this, null, function* () {
        const storageData = yield new GetStorageDataQuery("globalPrivacyControl" /* GLOBAL_PRIVACY_CONTROL */, "local" /* LOCAL */).execute();
        if (storageData && Object.keys(storageData).length)
          return Promise.resolve(storageData);
        const defaultState = instance.resolve("Config" /* CONFIG */).globalPrivacyControl.defaultState;
        yield new SetStorageDataCommand("globalPrivacyControl" /* GLOBAL_PRIVACY_CONTROL */, defaultState, "local" /* LOCAL */).execute();
        return Promise.resolve(defaultState);
      });
    }
  };

  // src/core/messages/observable/observer/MessageObserver.ts
  var MessageObserver = class extends Observer {
    constructor(messageName, callback, observable = new MessageObservable()) {
      super(callback, observable);
      this.messageName = messageName;
    }
  };

  // src/core/storage/observable/observer/StorageObserver.ts
  var StorageObserver = class extends Observer {
    constructor(storageKey, callback, areaName = "local" /* LOCAL */, observable = new StorageObservable()) {
      super(callback, observable);
      this.storageKey = storageKey;
      this.callback = callback;
      this.areaName = areaName;
      this.observable = observable;
    }
  };

  // src/background/storage/observer/BackgroundStorageObserver.ts
  var BackgroundStorageObserver = class extends StorageObserver {
    constructor(storageKey, callback, areaName = "local" /* LOCAL */) {
      super(storageKey, callback, areaName, instance.resolve("StorageObservable" /* STORAGE_OBSERVABLE */));
      this.storageKey = storageKey;
      this.callback = callback;
      this.areaName = areaName;
    }
  };

  // src/modules/gpc/background/model/GlobalPrivacyControlModel.ts
  var GlobalPrivacyControlModel = class {
    constructor(feature) {
      this.feature = feature;
    }
    init() {
      return __async(this, null, function* () {
        this.storageObserver = new BackgroundStorageObserver("globalPrivacyControl" /* GLOBAL_PRIVACY_CONTROL */, this.onStorageUpdated.bind(this), "local" /* LOCAL */);
        this.settingsObserver = new MessageObserver("globalPrivacyControl.setEnabled" /* SET_ENABLED */, this.onSetEnabled.bind(this));
        this.modelObserver = new MessageObserver("globalPrivacyControl.getModel" /* GET_MODEL */, this.onGetModel.bind(this));
        this.storageObserver.subscribe();
        this.settingsObserver.subscribe();
        this.modelObserver.subscribe();
        this.data = yield new InitiateGlobalPrivacyControlDataCommand().execute();
      });
    }
    getData() {
      return this.data;
    }
    dispose() {
      this.data = void 0;
      this.feature = void 0;
      this.storageObserver.unsubscribe();
      this.settingsObserver.unsubscribe();
      this.modelObserver.unsubscribe();
      this.storageObserver = void 0;
      this.settingsObserver = void 0;
      this.modelObserver = void 0;
    }
    updateData(data) {
      const prevData = __spreadValues({}, this.data);
      this.data = data;
      this.feature.onDataChanged(this.data, prevData);
      new BackgroundMessageQuery("globalPrivacyControl.modelUpdated" /* MODEL_UPDATED */, this.data).execute();
    }
    onSetEnabled(enabled) {
      new SetStorageDataCommand("globalPrivacyControl" /* GLOBAL_PRIVACY_CONTROL */, { gpcEnabled: enabled }).execute();
      ;
    }
    onStorageUpdated(data) {
      this.updateData(__spreadValues(__spreadValues({}, this.data), data));
    }
    onGetModel(body, sendResponse, sender) {
      sendResponse(this.getData());
    }
  };

  // src/background/scripting/error/GlobalPrivacyControlHeaderRemovingError.ts
  var GlobalPrivacyControlHeaderRemovingError = class {
    constructor(message) {
      this.message = message;
      this.name = "GlobalPrivacyControlHeaderRemovingError";
    }
  };

  // src/background/scripting/command/RemoveGlobalPrivacyControlHeaderCommand.ts
  var RemoveGlobalPrivacyControlHeaderCommand = class {
    execute() {
      return __async(this, null, function* () {
        try {
          return yield this.removeDynamicRule();
        } catch (e) {
          return Promise.reject(new GlobalPrivacyControlHeaderRemovingError(e.message));
        }
      });
    }
    removeDynamicRule() {
      return chrome.declarativeNetRequest.updateDynamicRules({ removeRuleIds: [1] });
    }
  };

  // src/modules/gpc/background/GlobalPrivacyControl.ts
  var GlobalPrivacyControl = class extends Feature {
    constructor() {
      super(...arguments);
      this.messageObserver = new MessageObserver("globalPrivacyControl.getState" /* GET_STATE */, this.onGetStateMessage.bind(this));
    }
    static buildFeature() {
      return __async(this, null, function* () {
        const feature = new GlobalPrivacyControl();
        yield feature.init();
        return feature;
      });
    }
    init() {
      return __async(this, null, function* () {
        this.model = new GlobalPrivacyControlModel(this);
        this.messageObserver.subscribe();
        yield this.model.init();
      });
    }
    onDataChanged(data) {
      if (data.gpcEnabled)
        return new InjectGlobalPrivacyControlHeaderCommand().execute();
      return new RemoveGlobalPrivacyControlHeaderCommand().execute();
    }
    dispose() {
      this.disposeModel();
      this.messageObserver.unsubscribe();
    }
    disposeModel() {
      if (!this.model)
        return;
      this.model.dispose();
      this.model = void 0;
    }
    onGetStateMessage(request, sendResponse) {
      sendResponse(this.model.getData().gpcEnabled);
    }
  };

  // src/background/shepherd/error/GetShepherdDataError.ts
  var GetShepherdDataError = class {
    constructor() {
      this.message = "Failed to get ShepherdData";
      this.name = "ShepherdGetDataError";
    }
  };

  // src/core/loader/errors/LoaderTimeoutError.ts
  var LoaderTimeoutError = class {
    constructor(url) {
      this.url = url;
      this.name = "LoaderTimeoutError";
      this.message = `The request to "${url}" has timed out`;
    }
  };

  // src/core/loader/errors/LoaderDisposedError.ts
  var LoaderDisposedError = class {
    constructor(url) {
      this.url = url;
      this.name = "LoaderDisposedError";
      this.message = `The request to "${url}" had already been disposed`;
    }
  };

  // src/core/loader/errors/LoaderError.ts
  var LoaderError = class {
    constructor(reason) {
      this.name = "LoaderError";
      this.message = reason.message;
    }
  };

  // src/core/loader/Loader.ts
  var InvalidParamsLoaderError = class {
    constructor() {
      this.message = "Provided loader params are not valid";
      this.name = "InvalidParamsLoaderError";
    }
  };
  var Loader = class {
    constructor() {
      this.method = LoaderMethod.GET;
      this.timeout = 6e4;
      this.controller = new AbortController();
      this.state = LoaderState.INITIALIZED;
    }
    get queryParams() {
      return void 0;
    }
    send() {
      return __async(this, null, function* () {
        return new Promise((resolve, reject) => {
          this.resolve = resolve;
          this.reject = reject;
          if (this.state === LoaderState.DISPOSED)
            return this.reject(new LoaderDisposedError(this.url));
          this.setTimer();
          this.handleRequest();
        });
      });
    }
    dispose() {
      if (this.state === LoaderState.DISPOSED)
        return;
      this.clearTimer();
      this.clearController();
      this.state = LoaderState.DISPOSED;
    }
    get body() {
      return void 0;
    }
    get headers() {
      return { "Content-Type": "application/json" };
    }
    handleRequest() {
      return __async(this, null, function* () {
        this.validateUrl();
        try {
          const response = yield fetch(this.getResolvedUrl(), this.getOptions());
          yield this.onCompleted(response);
        } catch (e) {
          this.reject(new LoaderError(e));
        }
      });
    }
    onCompleted(result) {
      return __async(this, null, function* () {
        this.state = LoaderState.COMPLETED;
        this.dispose();
        yield this.handleResponse(result);
      });
    }
    handleResponse(result) {
      return __async(this, null, function* () {
        this.resolve(yield result.json());
      });
    }
    getResolvedUrl() {
      const params = this.queryParams;
      if (!params)
        return this.url;
      return `${this.url}?${params.toString()}`;
    }
    validateUrl() {
      try {
        new URL(this.url);
      } catch (e) {
        this.reject(new InvalidParamsLoaderError());
      }
    }
    getOptions() {
      const options = {
        headers: this.headers,
        method: this.method,
        signal: this.controller.signal
      };
      if (this.body)
        options.body = this.body;
      return options;
    }
    setTimer() {
      if (this.timer)
        this.clearTimer();
      this.timer = setTimeout(() => this.onTimeout(), this.timeout);
    }
    clearTimer() {
      if (!this.timer)
        return;
      clearTimeout(this.timer);
      this.timer = void 0;
    }
    clearController() {
      if (!this.controller)
        return;
      if (this.state !== LoaderState.COMPLETED && !this.controller.signal.aborted)
        this.controller.abort();
      this.controller = void 0;
    }
    onTimeout() {
      this.controller.abort();
      this.dispose();
      this.reject(new LoaderTimeoutError(this.url));
    }
  };
  var LoaderState = /* @__PURE__ */ ((LoaderState2) => {
    LoaderState2["INITIALIZED"] = "initialized";
    LoaderState2["COMPLETED"] = "completed";
    LoaderState2["DISPOSED"] = "disposed";
    return LoaderState2;
  })(LoaderState || {});
  var LoaderMethod = /* @__PURE__ */ ((LoaderMethod2) => {
    LoaderMethod2["POST"] = "POST";
    LoaderMethod2["GET"] = "GET";
    return LoaderMethod2;
  })(LoaderMethod || {});

  // src/background/shepherd/development/RawData.json
  var RawData_default = {
    shepherd: {
      cookieConsent: {
        data: {
          scenarios: {
            ebay: {
              default: {
                acceptAll: {
                  name: "Ebay - Accept",
                  pages: [
                    {
                      target: {
                        url: "/ebay\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "//button[@id='gdpr-banner-accept']"
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Ebay - Reject",
                  pages: [
                    {
                      target: {
                        url: "/ebay\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "//button[@id='gdpr-banner-decline']"
                        }
                      ]
                    }
                  ]
                }
              }
            },
            mail: {
              default: {
                acceptAll: {
                  name: "Mail - Accept",
                  pages: [
                    {
                      target: {
                        url: "/mail\\.ru"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "//span[@id='cmpwelcomebtnyes']//a"
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Mail - Reject",
                  pages: [
                    {
                      target: {
                        url: "/mail\\.ru"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "//span[@id='cmpwelcomebtnno']//a"
                        }
                      ]
                    }
                  ]
                }
              }
            },
            canva: {
              default: {
                acceptAll: {
                  name: "Canva - Accept",
                  pages: [
                    {
                      target: {
                        url: "/canva\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "(//div[@class='NqU4Yg']//button)[1]"
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Canva - Reject",
                  pages: [
                    {
                      target: {
                        url: "/canva\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "(//div[@class='NqU4Yg']//button)[2]"
                        },
                        {
                          event: "click",
                          xpath: "(//div[@class='NqU4Yg']//button)[10]"
                        }
                      ]
                    }
                  ]
                }
              }
            },
            ezoic: {
              default: {
                acceptAll: {
                  name: "Ezoic - Accept",
                  pages: [
                    {
                      target: "*",
                      actions: [
                        {
                          event: "click",
                          xpath: "//*[@id='ez-accept-all']"
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Ezoic - Reject",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "click",
                              xpath: "//*[@id='ez-accept-necessary']",
                              rejectGroup: "reject-manual"
                            }
                          ]
                        },
                        {
                          id: "reject-manual",
                          actions: [
                            {
                              event: "click",
                              xpath: "//*[@id='ez-manage-settings']",
                              rejectGroup: "reject-vendor"
                            },
                            {
                              event: "bulkClick",
                              querySelector: "#ez-cookie-dialog input[type='checkbox']:checked"
                            },
                            {
                              event: "click",
                              xpath: "//*[@id='ez-save-settings']"
                            }
                          ]
                        },
                        {
                          id: "reject-vendor",
                          actions: [
                            {
                              event: "click",
                              xpath: "//*[@id='ez-vendors']"
                            },
                            {
                              event: "click",
                              xpath: "//*[@id='ez-manage-settings']"
                            },
                            {
                              event: "bulkClick",
                              querySelector: "#ez-cookie-dialog input[type='checkbox']:checked"
                            },
                            {
                              event: "clickOneOf",
                              xpaths: ["//*[@id='ez-save-settings']", "//*[@id='ez-manage-settings']"]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            moove: {
              default: {
                acceptAll: {
                  name: "Moove - Accept",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "clickOneOf",
                              xpaths: ["(//*[contains(@class, 'moove-gdpr-infobar-allow-all')])[1]"],
                              timeout: 2e3,
                              rejectGroup: "accept-default-fallback"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Moove - Reject",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "clickWhenVisible",
                              xpath: "//*[contains(@class, 'moove-gdpr-infobar-reject-btn')]",
                              timeout: 2e3,
                              rejectGroup: "reject-manual"
                            }
                          ]
                        },
                        {
                          id: "reject-manual",
                          actions: [
                            {
                              event: "clickOneOf",
                              xpaths: ["//*[contains(@class, 'moove-gdpr-infobar-settings-btn')]"],
                              timeout: 2e3,
                              rejectGroup: "accept-fallback"
                            },
                            {
                              event: "waitUntilVisible",
                              xpath: "//div[@id='moove_gdpr_cookie_modal']",
                              timeout: 2500
                            },
                            {
                              event: "bulkClick",
                              querySelector: "#moove_gdpr_cookie_modal input[type='checkbox']:checked"
                            },
                            {
                              event: "click",
                              xpath: "///*[contains(@class, 'moove-gdpr-modal-save-settings')]"
                            }
                          ]
                        },
                        {
                          id: "accept-fallback",
                          actions: [
                            {
                              event: "click",
                              xpath: "(//*[contains(@class, 'moove-gdpr-infobar-allow-all')])[1]"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            osano: {
              default: {
                acceptAll: {
                  name: "Osano - Accept",
                  pages: [
                    {
                      target: "*",
                      actions: [
                        {
                          event: "clickOneOf",
                          xpaths: ["//div[contains(@class, 'cky-consent-container')]//button[contains(@class, 'cky-btn-accept')]", "//*[contains(@class, 'cc-allow')]", "//*[contains(@class, 'osano-cm-accept-all')]", "//*[contains(@class, 'cc-accept-all')]"],
                          timeout: 2e3
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Osano - Reject",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "clickOneOf",
                              xpaths: ["//*[contains(@class, 'osano-cm-denyAll')]", "//*[contains(@class, 'cc-deny')]"],
                              timeout: 2e3,
                              rejectGroup: "sdk-reject-manual"
                            }
                          ]
                        },
                        {
                          id: "sdk-reject-manual",
                          actions: [
                            {
                              event: "bulkClick",
                              xpath: "//input[contains(@class, 'osano-cm-input--checked')]",
                              rejectGroup: "confirm-choices",
                              resolveGroup: "confirm-choices"
                            }
                          ]
                        },
                        {
                          id: "confirm-choices",
                          actions: [
                            {
                              event: "click",
                              xpath: "//*[contains(@class, 'osano-cm-save')]"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "confirm-only": {
                acceptAll: {
                  name: "Osano - Accept",
                  pages: [
                    {
                      target: "*",
                      actions: [
                        {
                          event: "clickOneOf",
                          xpaths: ["//*[contains(@class, 'cc-dismiss')]", "//*[contains(@class, 'cc_btn_accept_all')]", "//*[contains(@class, 'cc-allow')]", "//*[contains(@class, 'cc-accept-all')]"],
                          timeout: 2e3
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Osano - Reject",
                  pages: [
                    {
                      target: "*",
                      actions: [
                        {
                          event: "clickOneOf",
                          xpaths: ["//*[contains(@class, 'cc-dismiss')]", "//*[contains(@class, 'cc_btn_accept_all')]", "//*[contains(@class, 'cc-allow')]", "//*[contains(@class, 'cc-accept-all')]"],
                          timeout: 2e3
                        }
                      ]
                    }
                  ]
                }
              }
            },
            adRoll: {
              default: {
                acceptAll: {
                  name: "Adroll - Accept",
                  pages: [
                    {
                      target: "*",
                      actions: [
                        {
                          event: "click",
                          xpath: "//*[@id='adroll_allow_all']"
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Adroll - Reject",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "click",
                              xpath: "//*[@id='adroll_reject']",
                              rejectGroup: "reject-manual"
                            }
                          ]
                        },
                        {
                          id: "reject-manual",
                          actions: [
                            {
                              event: "click",
                              xpath: "//*[@id='adroll_settings']",
                              rejectGroup: "reject-vendor"
                            },
                            {
                              event: "bulkClick",
                              querySelector: "#adroll_consent_container input[type='checkbox']:checked"
                            },
                            {
                              event: "click",
                              xpath: "//*[@id='adroll_consent_reject_all']"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            didomi: {
              default: {
                acceptAll: {
                  name: "Didomi - Accept",
                  pages: [
                    {
                      target: "*",
                      actions: [
                        {
                          event: "click",
                          xpath: "//*[@id='didomi-notice-agree-button']"
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Didomi - Reject",
                  pages: [
                    {
                      target: "*",
                      actions: [
                        {
                          event: "click",
                          xpath: "//*[@id='didomi-notice-learn-more-button']"
                        },
                        {
                          event: "click",
                          xpath: "(//div[contains(@class, 'didomi-consent-popup-footer')]//button)[1]",
                          timeout: 2e3
                        }
                      ]
                    }
                  ]
                }
              }
            },
            google: {
              default: {
                acceptAll: {
                  name: "Google - Accept",
                  pages: [
                    {
                      target: {
                        url: "/google\\.com"
                      },
                      actions: [
                        {
                          event: "clickOneOf",
                          xpaths: ["//button[@id='L2AGLb']", "//button[@data-ved]//div[contains(text(),'Reject all')]"],
                          timeout: 5e3
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Google - Reject",
                  pages: [
                    {
                      target: {
                        url: "/google\\.com"
                      },
                      actions: [
                        {
                          event: "clickOneOf",
                          xpaths: ["//button[@id='W0wltc']", "//button[@data-ved]//div[contains(text(),'Accept all')]"],
                          timeout: 5e3
                        }
                      ]
                    }
                  ]
                }
              }
            },
            office: {
              default: {
                acceptAll: {
                  name: "Office - Accept",
                  pages: [
                    {
                      target: {
                        url: "/office\\.com"
                      },
                      actions: [
                        {
                          event: "waitUntilVisible",
                          xpath: "(//div[@id='wcpConsentBannerCtrl']//div//button)[1]",
                          timeout: 5e3
                        },
                        {
                          event: "click",
                          xpath: "(//div[@id='wcpConsentBannerCtrl']//div//button)[1]"
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Office - Reject",
                  pages: [
                    {
                      target: {
                        url: "/office\\.com"
                      },
                      actions: [
                        {
                          event: "waitUntilVisible",
                          xpath: "(//div[@id='wcpConsentBannerCtrl']//div//button)[2]",
                          timeout: 5e3
                        },
                        {
                          event: "click",
                          xpath: "(//div[@id='wcpConsentBannerCtrl']//div//button)[2]"
                        }
                      ]
                    }
                  ]
                }
              }
            },
            paypal: {
              default: {
                acceptAll: {
                  name: "Paypal - Accept",
                  pages: [
                    {
                      target: {
                        url: "/paypal\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "//button[@id='acceptAllButton']"
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Paypal - Reject",
                  pages: [
                    {
                      target: {
                        url: "/paypal\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "//button[@id='bannerDeclineButton']"
                        }
                      ]
                    }
                  ]
                }
              }
            },
            reddit: {
              default: {
                acceptAll: {
                  name: "Reddit - Accept",
                  pages: [
                    {
                      target: {
                        url: "/reddit\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "//section//form//button[contains(., 'Accept')]"
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Reddit - Reject",
                  pages: [
                    {
                      target: {
                        url: "/reddit\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "//section//form//button[contains(., 'Reject')]"
                        }
                      ]
                    }
                  ]
                }
              }
            },
            termly: {
              default: {
                acceptAll: {
                  name: "Termly - Accept",
                  pages: [
                    {
                      target: "*",
                      actions: [
                        {
                          event: "clickWhenVisible",
                          xpath: "//button[contains(@class, 't-acceptAllButton')]",
                          timeout: 2e3
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Termly - Reject",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "clickWhenVisible",
                              xpath: "//button[contains(@class, 't-declineButton')]",
                              timeout: 2e3,
                              rejectGroup: "reject-manual"
                            }
                          ]
                        },
                        {
                          id: "reject-manual",
                          actions: [
                            {
                              event: "clickWhenVisible",
                              xpath: "//button[contains(@class, 't-preference-button')]",
                              timeout: 2e3
                            },
                            {
                              event: "waitUntilVisible",
                              xpath: "//div[contains(@class, 'termly-style-modal-md')]",
                              timeout: 5e3
                            },
                            {
                              event: "clickWhenVisible",
                              xpath: "//button[contains(@class, 't-declineAllButton')]",
                              timeout: 2e3,
                              rejectGroup: "reject-manual-alternative"
                            }
                          ]
                        },
                        {
                          id: "reject-manual-alternative",
                          actions: [
                            {
                              event: "bulkClick",
                              querySelector: "#termly-code-snippet-support input[type='checkbox']:checked"
                            },
                            {
                              event: "click",
                              xpath: "//div[contains(@class, 't-saveButton')]"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            yandex: {
              default: {
                acceptAll: {
                  name: "Yandex - Accept",
                  pages: [
                    {
                      target: {
                        url: "/yandex\\.ru"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "//button[@data-id='button-all']"
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Yandex - Reject",
                  pages: [
                    {
                      target: {
                        url: "/yandex\\.ru"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "//button[@data-id='button-tech']"
                        },
                        {
                          event: "click",
                          xpath: "//button[@data-id='button-tech']",
                          timeout: 2e3
                        }
                      ]
                    }
                  ]
                }
              }
            },
            borlabs: {
              default: {
                acceptAll: {
                  name: "Borlabs - Accept",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "clickOneOf",
                              xpaths: ["(//*[contains(@class, '_brlbs-btn-accept-all')])[1]"],
                              timeout: 2e3,
                              rejectGroup: "accept-default-fallback"
                            }
                          ]
                        },
                        {
                          id: "accept-default-fallback",
                          actions: [
                            {
                              event: "clickOneOf",
                              xpaths: ["//*[@id='CookieBoxSaveButton']"],
                              timeout: 2e3
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Borlabs - Reject",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "clickWhenVisible",
                              xpath: "//*[contains(@class, '_brlbs-refuse-btn')]",
                              timeout: 2e3,
                              rejectGroup: "reject-manual"
                            }
                          ]
                        },
                        {
                          id: "reject-manual",
                          actions: [
                            {
                              event: "clickOneOf",
                              xpaths: ["//*[contains(@class, '_brlbs-manage-btn')]", "(//*[@data-cookie-individual])[1]"],
                              timeout: 2e3
                            },
                            {
                              event: "bulkClick",
                              querySelector: "#BorlabsCookieBox input[type='checkbox']:checked"
                            },
                            {
                              event: "click",
                              xpath: "//*[@id='CookiePrefSave']"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            iubenda: {
              default: {
                acceptAll: {
                  name: "Iubenda - Accept",
                  pages: [
                    {
                      target: "*",
                      actions: [
                        {
                          event: "clickWhenVisible",
                          xpath: "//*[contains(@class, 'iubenda-cs-accept-btn')]",
                          timeout: 2e3
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Iubenda - Reject",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "clickWhenVisible",
                              xpath: "//*[contains(@class, 'iubenda-cs-reject-btn')]",
                              timeout: 2e3,
                              rejectGroup: "reject-manual"
                            }
                          ]
                        },
                        {
                          id: "reject-manual",
                          actions: [
                            {
                              event: "click",
                              xpath: "//*[contains(@class, 'iubenda-cs-customize-btn')]"
                            },
                            {
                              event: "bulkClick",
                              querySelector: "#iubenda-iframe-content input[type='checkbox']:checked"
                            },
                            {
                              event: "click",
                              xpath: "//*[@id='iubFooterBtn']"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            netflix: {
              default: {
                acceptAll: {
                  name: "Netflix - Accept",
                  pages: [
                    {
                      target: {
                        url: "/netflix\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "//button[@data-uia='cookie-disclosure-button-accept']"
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Netflix - Reject",
                  pages: [
                    {
                      target: {
                        url: "/netflix\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "//button[@data-uia='cookie-disclosure-button-reject']"
                        }
                      ]
                    }
                  ]
                }
              }
            },
            shopify: {
              "confirm-only": {
                acceptAll: {
                  name: "Shopify - Accept",
                  pages: [
                    {
                      target: {
                        url: "/shopify\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "//button[contains(@id, 'dismiss')]"
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Shopify - Reject",
                  pages: [
                    {
                      target: {
                        url: "/shopify\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "//button[contains(@id, 'dismiss')]"
                        }
                      ]
                    }
                  ]
                }
              }
            },
            twitter: {
              default: {
                acceptAll: {
                  name: "Twitter - Accept",
                  pages: [
                    {
                      target: {
                        url: "/twitter\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: '//div[@data-testid="BottomBar"]//div[@role="button"][1]'
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Twitter - Reject",
                  pages: [
                    {
                      target: {
                        url: "/twitter\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: '//div[@data-testid="BottomBar"]//div[@role="button"][2]'
                        }
                      ]
                    }
                  ]
                }
              }
            },
            youtube: {
              default: {
                acceptAll: {
                  name: "Youtube - Accept",
                  pages: [
                    {
                      target: {
                        url: "/youtube\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "(//tp-yt-paper-button[contains(@class,'style-primary')])[2]"
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Youtube - Reject",
                  pages: [
                    {
                      target: {
                        url: "/youtube\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "(//tp-yt-paper-button[contains(@class,'style-primary')])[1]"
                        }
                      ]
                    }
                  ]
                }
              }
            },
            facebook: {
              default: {
                acceptAll: {
                  name: "Facebook - Accept",
                  pages: [
                    {
                      target: {
                        url: "/facebook\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "//button[@data-cookiebanner='accept_button']"
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Facebook - Reject",
                  pages: [
                    {
                      target: {
                        url: "/facebook\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "//button[@data-cookiebanner='accept_only_essential_button']"
                        }
                      ]
                    }
                  ]
                }
              }
            },
            linkedin: {
              default: {
                acceptAll: {
                  name: "Linkedin - Accept",
                  pages: [
                    {
                      target: {
                        url: "/linkedin\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "//button[@action-type='ACCEPT']"
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Linkedin - Reject",
                  pages: [
                    {
                      target: {
                        url: "/linkedin\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "//button[@action-type='DENY']"
                        }
                      ]
                    }
                  ]
                }
              }
            },
            liveRamp: {
              iframe: {
                "iframe-accept": {
                  name: "LiveRamp - IFrame Accept",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "clickWhenVisible",
                              xpath: "//button[@id='save']",
                              timeout: 5e3
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "iframe-reject": {
                  name: "LiveRamp - IFrame Reject",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "clickWhenVisible",
                              xpath: "//button[@id='denyAll']",
                              timeout: 5e3,
                              rejectGroup: "iframe-reject-manual"
                            },
                            {
                              event: "clickWhenVisible",
                              xpath: "//*[contains(@class, 'okButton')]",
                              timeout: 5e3
                            }
                          ]
                        },
                        {
                          id: "iframe-reject-manual",
                          actions: [
                            {
                              event: "click",
                              xpath: "//button[@id='manageSettings']",
                              timeout: 2e3
                            },
                            {
                              event: "bulkClick",
                              xpath: "//*[contains(@class, 'state-true')]",
                              rejectGroup: "confirm-choices",
                              resolveGroup: "confirm-choices"
                            }
                          ]
                        },
                        {
                          id: "confirm-choices",
                          actions: [
                            {
                              event: "clickWhenVisible",
                              xpath: "//*[@id='saveAndExit']",
                              timeout: 2e3
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              default: {
                acceptAll: {
                  name: "LiveRamp - Accept",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "waitUntilVisible",
                              xpath: "//iframe[@id='gdpr-consent-notice']",
                              timeout: 5e3
                            },
                            {
                              type: "liveRamp",
                              event: "cookie-iframe-message",
                              timeout: 2e4,
                              variant: "iframe",
                              rejectGroup: "validate-cookie",
                              "detection-rules": [
                                {
                                  type: "liveRamp",
                                  detectors: [
                                    {
                                      variant: "iframe-accept",
                                      selectors: ["app-root[ng-version]"]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          id: "validate-cookie",
                          actions: [
                            {
                              event: "validate-cookie-action",
                              cookie: "cconsent-v2"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "LiveRamp - Reject",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "waitUntilVisible",
                              xpath: "//iframe[@id='gdpr-consent-notice']",
                              timeout: 5e3
                            },
                            {
                              type: "liveRamp",
                              event: "cookie-iframe-message",
                              timeout: 2e4,
                              variant: "iframe",
                              rejectGroup: "validate-cookie",
                              "detection-rules": [
                                {
                                  type: "liveRamp",
                                  detectors: [
                                    {
                                      variant: "iframe-reject",
                                      selectors: ["app-root[ng-version]"]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          id: "validate-cookie",
                          actions: [
                            {
                              event: "validate-cookie-action",
                              cookie: "cconsent-v2"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            oneTrust: {
              default: {
                acceptAll: {
                  name: "One Trust - Accept",
                  pages: [
                    {
                      target: "*",
                      actions: [
                        {
                          event: "clickOneOf",
                          xpaths: ["//button[@id='onetrust-accept-btn-handler']", "//div[contains(@class, 'js-consent-banner')]//button[contains(@class, 'js-accept-cookies')]", "//button[@id='accept-recommended-btn-handler']"]
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "One Trust - Reject",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "clickOneOf",
                              xpaths: ["//div[@id='onetrust-reject-all-handler']", "//button[@class='ot-pc-refuse-all-handler']"],
                              rejectGroup: "sdk-reject-all"
                            }
                          ]
                        },
                        {
                          id: "sdk-reject-all",
                          actions: [
                            {
                              event: "clickOneOf",
                              xpaths: ["//button[@id='onetrust-pc-btn-handler']", "//a[contains(@class, 'optanon-show-settings')]", "//div[contains(@class, 'js-consent-banner')]//button[contains(@class, 'js-cookie-settings')]"]
                            },
                            {
                              event: "waitUntilVisible",
                              xpath: "//div[@id='onetrust-pc-sdk']",
                              timeout: 5e3
                            },
                            {
                              event: "click",
                              xpath: "//button[contains(@class, 'ot-pc-refuse-all-handler')]",
                              rejectGroup: "sdk-reject-manual"
                            }
                          ]
                        },
                        {
                          id: "sdk-reject-manual",
                          actions: [
                            {
                              event: "waitUntilOneVisible",
                              xpaths: ["//div[@id='ot-pc-content']", "//div[@id='onetrust-pc-sdk']//ul[contains(@class, 'category-group')]", "(//div[@id='onetrust-pc-sdk']//input[@class='category-switch-handler'])[1]"],
                              timeout: 5e3
                            },
                            {
                              event: "bulkClick",
                              xpath: "//div[@id='ot-pc-content']//input[@type='checkbox' and @aria-checked='true']",
                              rejectGroup: "sdk-confirm-manual",
                              resolveGroup: "sdk-confirm-manual"
                            }
                          ]
                        },
                        {
                          id: "sdk-confirm-manual",
                          actions: [
                            {
                              event: "click",
                              xpath: "//div[@id='onetrust-consent-sdk']//button[contains(@class, 'save-preference-btn-handler')]"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            trustArc: {
              "full-iframe": {
                acceptAll: {
                  name: "Trust Arc - Accept",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "waitUntilVisible",
                              xpath: "//iframe[@class='truste_popframe']",
                              timeout: 5e3
                            },
                            {
                              type: "trustArc",
                              event: "cookie-iframe-message",
                              timeout: 2e4,
                              variant: "full-iframe",
                              rejectGroup: "validate-cookie",
                              "detection-rules": [
                                {
                                  type: "trustArc",
                                  detectors: [
                                    {
                                      variant: "iframe-accept",
                                      selectors: [".mainContent"]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          id: "validate-cookie",
                          actions: [
                            {
                              event: "validate-cookie-action",
                              cookie: "cmapi_cookie_privacy"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Trust Arc - Reject",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "waitUntilVisible",
                              xpath: "//iframe[@class='truste_popframe']",
                              timeout: 5e3
                            },
                            {
                              type: "trustArc",
                              event: "cookie-iframe-message",
                              timeout: 6e4,
                              variant: "full-iframe",
                              "reject-group": "validate-cookie",
                              "detection-rules": [
                                {
                                  type: "trustArc",
                                  detectors: [
                                    {
                                      variant: "iframe-reject",
                                      selectors: [".mainContent"]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          id: "validate-cookie",
                          actions: [
                            {
                              event: "validate-cookie-action",
                              cookie: "cmapi_cookie_privacy"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "iframe-accept": {
                  name: "Trust Arc - Accept IFrame",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "clickOneOf",
                              xpaths: ["//div[contains(@class, 'pdynamicbutton')]//a[contains(@class, 'call')]", "//div[contains(@class, 'pdynamicbutton')]//a[contains(@class, 'acceptAllButtonLower')]", "//div[contains(@class, 'bottom')]//a[contains(@class, 'acceptAll')]"],
                              timeout: 5e3
                            },
                            {
                              event: "clickWhenVisible",
                              xpath: "//a[@class='close']",
                              timeout: 5e3,
                              "reject-group": "no-close-button"
                            }
                          ]
                        },
                        {
                          id: "no-close-button",
                          actions: [
                            {
                              event: "waitUntilVisible",
                              xpath: "//div[contains(@class, 'pdynamicbutton')]",
                              timeout: 5e3
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "iframe-reject": {
                  name: "Trust Arc - Reject IFrame",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "clickOneOf",
                              xpaths: ["//div[contains(@class, 'pdynamicbutton')]//a[contains(@class, 'required')]", "//div[contains(@class, 'pdynamicbutton')]//a[contains(@class, 'declineAllButtonLower')]", "//div[contains(@class, 'bottom')]//a[contains(@class, 'rejectAll')]"],
                              timeout: 5e3
                            },
                            {
                              event: "clickWhenVisible",
                              xpath: "//a[@class='close']",
                              timeout: 5e3,
                              rejectGroup: "progress-bar"
                            }
                          ]
                        },
                        {
                          id: "progress-bar",
                          actions: [
                            {
                              event: "waitUntilVisible",
                              xpath: "//div[@role='progressbar']",
                              timeout: 1e4
                            },
                            {
                              event: "clickWhenVisible",
                              xpath: "//a[@class='close']",
                              timeout: 6e4
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              },
              "consent-track-iframe": {
                acceptAll: {
                  name: "Trust Arc - Accept",
                  pages: [
                    {
                      target: "*",
                      actions: [
                        {
                          event: "click",
                          xpath: "//button[@id='truste-consent-button']"
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Trust Arc - Reject",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "click",
                              xpath: "//button[@id='truste-consent-required']",
                              rejectGroup: "sdk-reject-all"
                            }
                          ]
                        },
                        {
                          id: "sdk-reject-all",
                          actions: [
                            {
                              event: "clickOneOf",
                              xpaths: ["//button[@id='truste-show-consent']", "//a[@id='truste-show-consent']", "//div[@id='truste-consent-text']//a[contains(@onclick, 'truste.eu && truste.eu.clickListener()')]"]
                            },
                            {
                              event: "waitUntilVisible",
                              xpath: "//iframe[contains(@class, 'truste_popframe')]",
                              timeout: 5e3
                            },
                            {
                              event: "delay",
                              timeout: 5e3
                            },
                            {
                              type: "trustArc",
                              event: "cookie-iframe-message",
                              timeout: 2e4,
                              variant: "consent-track-iframe",
                              "reject-group": "validate-cookie",
                              "detection-rules": [
                                {
                                  type: "trustArc",
                                  detectors: [
                                    {
                                      variant: "iframe-reject",
                                      selectors: [".iab_managePanel", ".mainContent"]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          id: "validate-cookie",
                          actions: [
                            {
                              event: "validate-cookie-action",
                              cookie: "cmapi_cookie_privacy"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "iframe-reject": {
                  name: "Trust Arc - Reject IFrame",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "waitUntilVisible",
                              xpath: "//div[contains(@class, 'mainContent')]//a[contains(@class, 'shp')]",
                              timeout: 1e4,
                              rejectGroup: "classic-iframe",
                              resolveGroup: "2-step-iframe"
                            }
                          ]
                        },
                        {
                          id: "2-step-iframe",
                          actions: [
                            {
                              event: "click",
                              xpath: "//div[contains(@class, 'mainContent')]//a[contains(@class, 'shp')]"
                            },
                            {
                              event: "clickWhenVisible",
                              xpath: "//div[contains(@class, 'mainContent')]//div[contains(@class, 'ui-slider-handle')]",
                              timeout: 2e3
                            },
                            {
                              event: "click",
                              xpath: "//div[contains(@class, 'mainContent')]//a[contains(@class, 'submit')]"
                            },
                            {
                              event: "waitUntilVisible",
                              xpath: "//div[contains(@class, 'mainContent')]//a[contains(@class, 'close')]",
                              timeout: 6e4
                            },
                            {
                              event: "click",
                              xpath: "//div[contains(@class, 'mainContent')]//a[contains(@class, 'close')]"
                            }
                          ]
                        },
                        {
                          id: "classic-iframe",
                          actions: [
                            {
                              event: "waitUntilOneVisible",
                              xpaths: ["//div[contains(@class, 'deckContainer')]", "(//span[@role='option' and contains(@class, 'gwt-InlineHTML on')])[1]"],
                              timeout: 1e4
                            },
                            {
                              event: "bulkClick",
                              xpath: "//span[@role='option' and contains(@class, 'gwt-InlineHTML on')]|//span[@role='option' and @class='consentno']"
                            },
                            {
                              event: "clickOneOf",
                              xpaths: ["//a[contains(@class, 'saveAndExit')]", "//a[contains(@class, 'submit')]"],
                              timeout: 5e3
                            },
                            {
                              event: "clickWhenVisible",
                              xpath: "//a[@class='close']",
                              timeout: 2e3,
                              "reject-group": "no-close-button"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            whatsapp: {
              default: {
                acceptAll: {
                  name: "Whatsapp - Accept",
                  pages: [
                    {
                      target: {
                        url: "/whatsapp\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "//button[@data-testid='cookie_banner_accept_button']"
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Whatsapp - Reject",
                  pages: [
                    {
                      target: {
                        url: "/whatsapp\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "//button[@data-testid='cookie_banner_manage_button']"
                        },
                        {
                          event: "delay",
                          timeout: 1e3
                        },
                        {
                          event: "click",
                          xpath: "//button[@data-testid='cookie_banner_learn_more_agree_button']"
                        }
                      ]
                    }
                  ]
                }
              }
            },
            xhamster: {
              default: {
                acceptAll: {
                  name: "Xhamster - Accept",
                  pages: [
                    {
                      target: {
                        url: "/xhamster\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "//button[contains(@class, 'cmd-button-accept-all')]"
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Xhamster - Reject",
                  pages: [
                    {
                      target: {
                        url: "/xhamster\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "//button[contains(@class, 'cmd-button-reject-all')]"
                        }
                      ]
                    }
                  ]
                }
              }
            },
            complianz: {
              default: {
                acceptAll: {
                  name: "Complianz - Accept",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "clickWhenVisible",
                              xpath: "//div[contains(@class, 'cmplz-show')]//*[contains(@class, 'cmplz-accept')]",
                              timeout: 2e3,
                              rejectGroup: "accept-fallback"
                            }
                          ]
                        },
                        {
                          id: "accept-fallback",
                          actions: [
                            {
                              event: "clickWhenVisible",
                              xpath: "//*[contains(@class, 'cmplz-accept')]",
                              timeout: 2e3,
                              rejectGroup: "accept-fallback"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Complianz - Reject",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "clickWhenVisible",
                              xpath: "//div[contains(@class, 'cmplz-show')]//*[contains(@class, 'cmplz-deny')]",
                              timeout: 2e3,
                              rejectGroup: "reject-manual"
                            }
                          ]
                        },
                        {
                          id: "reject-manual",
                          actions: [
                            {
                              event: "click",
                              xpath: "//*[contains(@class, 'cmplz-view-preferences')]"
                            },
                            {
                              event: "bulkClick",
                              querySelector: "#cmplz-cookiebanner-container input[type='checkbox']:checked"
                            },
                            {
                              event: "click",
                              xpath: "//*[contains(@class, 'cmplz-save-preferences')]"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            cookieLaw: {
              default: {
                acceptAll: {
                  name: "CookieLaw - Accept",
                  pages: [
                    {
                      target: "*",
                      actions: [
                        {
                          event: "delay",
                          timeout: 2e3
                        },
                        {
                          event: "clickOneOf",
                          xpaths: ["//a[@id='wt-cli-accept-btn']", "//a[@id='wt-cli-accept-all-btn']", "//a[@data-cli_action='accept']", "//a[@data-cli_action='accept_all']"],
                          timeout: 2e3
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "CookieLaw - Reject",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "delay",
                              timeout: 2e3
                            },
                            {
                              event: "clickOneOf",
                              xpaths: ["//a[contains(@class, 'cli_settings_button')]"],
                              timeout: 2e3,
                              rejectGroup: "no-settings-fallback"
                            },
                            {
                              event: "bulkClick",
                              querySelector: ".cli-tab-section input[type='checkbox']:checked"
                            },
                            {
                              event: "click",
                              xpath: "//a[@id='wt-cli-privacy-save-btn']"
                            }
                          ]
                        },
                        {
                          id: "no-settings-fallback",
                          actions: [
                            {
                              event: "clickOneOf",
                              xpaths: ["//a[@id='wt-cli-accept-btn']", "//a[@id='wt-cli-accept-all-btn']", "//a[@data-cli_action='accept']", "//a[@data-cli_action='accept_all']"],
                              timeout: 2e3
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            cookieYes: {
              default: {
                acceptAll: {
                  name: "CookieYes - Accept",
                  pages: [
                    {
                      target: "*",
                      actions: [
                        {
                          event: "clickOneOf",
                          xpaths: ["//div[contains(@class, 'cky-consent-container')]//button[contains(@class, 'cky-btn-accept')]", "//div[contains(@class, 'cky-consent-bar')]//button[contains(@class, 'cky-btn-accept')]", "//div[contains(@class, 'cky-banner')]//button[contains(@class, 'cky-btn-accept')]"],
                          timeout: 2e3
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "CookieYes - Reject",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "clickOneOf",
                              xpaths: ["//div[contains(@class, 'cky-consent-container')]//button[contains(@class, 'cky-btn-reject')]", "//div[contains(@class, 'cky-consent-bar')]//button[contains(@class, 'cky-btn-reject')]", "//div[contains(@class, 'cky-banner')]//button[contains(@class, 'cky-btn-reject')]"],
                              timeout: 2e3,
                              rejectGroup: "sdk-reject-manual"
                            }
                          ]
                        },
                        {
                          id: "sdk-reject-manual",
                          actions: [
                            {
                              event: "clickOneOf",
                              xpaths: ["//div[contains(@class, 'cky-consent-bar')]//button[contains(@class, 'cky-btn-settings')]"],
                              timeout: 2e3
                            },
                            {
                              event: "bulkClick",
                              querySelector: ".cky-tab-content-item input[type='checkbox']:checked"
                            },
                            {
                              event: "click",
                              xpath: "//button[@id='cky-btn-custom-accept']"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            cookiebot: {
              default: {
                acceptAll: {
                  name: "Cookiebot - Accept",
                  pages: [
                    {
                      target: "*",
                      actions: [
                        {
                          event: "waitUntilVisible",
                          xpath: "//div[@id='CybotCookiebotDialog']",
                          timeout: 5e3
                        },
                        {
                          event: "clickOneOf",
                          xpaths: ["//*[@id='CybotCookiebotDialogBodyLevelButtonLevelOptinAllowAll']", "//*[@id='btnBannerAcceptAll']"]
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Cookiebot - Reject",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "waitUntilVisible",
                              xpath: "//div[@id='CybotCookiebotDialog']",
                              timeout: 5e3
                            },
                            {
                              event: "click",
                              xpath: "//*[@id='CybotCookiebotDialogBodyButtonDecline']",
                              rejectGroup: "reject-manual"
                            }
                          ]
                        },
                        {
                          id: "reject-manual",
                          actions: [
                            {
                              event: "click",
                              xpath: "//*[@id='btnCookieSettings']"
                            },
                            {
                              event: "bulkClick",
                              querySelector: "#cb-tab-content input[type='checkbox']:checked"
                            },
                            {
                              event: "click",
                              xpath: "//*[@id='CybotCookiebotDialogBodyLevelButtonLevelOptinAllowallSelection']"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            instagram: {
              default: {
                acceptAll: {
                  name: "Instagram - Accept",
                  pages: [
                    {
                      target: {
                        url: "/instagram\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "(//div[@role='dialog']//button[@tabindex='0'])[2]"
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Instagram - Reject",
                  pages: [
                    {
                      target: {
                        url: "/instagram\\.com"
                      },
                      actions: [
                        {
                          event: "click",
                          xpath: "(//div[@role='dialog']//button[@tabindex='0'])[1]"
                        }
                      ]
                    }
                  ]
                }
              }
            },
            quantcast: {
              default: {
                acceptAll: {
                  name: "Quantcast - Accept",
                  pages: [
                    {
                      target: "*",
                      actions: [
                        {
                          event: "waitUntilVisible",
                          xpath: "//div[contains(@class, 'qc-cmp2-summary-buttons')]",
                          timeout: 5e3
                        },
                        {
                          event: "clickOneOf",
                          xpaths: ["//div[@id='qc-cmp2-ui']//button[@mode='primary']", "(//div[@id='qc-cmp2-ui']//button[@mode='secondary']//span[contains(string(), 'AGREE')])[2]", "(//div[@id='qc-cmp2-ui']//button[@mode='secondary']//span[contains(string(), 'AGREE')])[1]", "//div[@id='qc-cmp2-ui']//button[@mode='secondary']//span[contains(string(), 'ACCEPT')]"]
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Quantcast - Reject",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "waitUntilVisible",
                              xpath: "//div[contains(@class, 'qc-cmp2-summary-buttons')]",
                              timeout: 5e3
                            },
                            {
                              event: "clickOneOf",
                              xpaths: ["(//div[@id='qc-cmp2-ui']//button[@mode='secondary'])[2]", "//div[@id='qc-cmp2-ui']//button[@mode='secondary']"],
                              resolveGroup: "sdk-reject-all"
                            }
                          ]
                        },
                        {
                          id: "sdk-reject-all",
                          actions: [
                            {
                              event: "waitUntilVisible",
                              xpath: "(//li[contains(@class, 'qc-cmp2-list-item')]/button)[1]",
                              timeout: 5e3
                            },
                            {
                              event: "bulkClick",
                              xpath: "//li[contains(@class, 'qc-cmp2-list-item')]/button"
                            },
                            {
                              event: "bulkClick",
                              xpath: "//li[contains(@class, 'qc-cmp2-list-item')]//button[@role='switch' and @aria-checked='true']",
                              rejectGroup: "sdk-confirm-manual",
                              resolveGroup: "sdk-confirm-manual"
                            }
                          ]
                        },
                        {
                          id: "sdk-confirm-manual",
                          actions: [
                            {
                              event: "click",
                              xpath: "(//div[contains(@class, 'qc-cmp2-footer')]//button[@mode='secondary'])[1]",
                              rejectGroup: "sdk-save-and-exit"
                            }
                          ]
                        },
                        {
                          id: "sdk-save-and-exit",
                          actions: [
                            {
                              event: "click",
                              xpath: "(//div[contains(@class, 'qc-cmp2-footer')]//button[@mode='primary'])[1]"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            cookieNotice: {
              default: {
                acceptAll: {
                  name: "Cookie Notice - Accept",
                  pages: [
                    {
                      target: "*",
                      actions: [
                        {
                          event: "clickWhenVisible",
                          xpath: "//*[@id='cn-accept-cookie']",
                          timeout: 2e3
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Cookie Notice - Reject",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "clickWhenVisible",
                              xpath: "//*[@id='cn-refuse-cookie']",
                              timeout: 2e3,
                              rejectGroup: "accept-fallback"
                            }
                          ]
                        },
                        {
                          id: "accept-fallback",
                          actions: [
                            {
                              event: "clickOneOf",
                              xpaths: ["//*[@id='cn-accept-cookie']", "//*[contains(@onclick,'acceptCookie()')]"],
                              timeout: 2e3
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            },
            cookieScript: {
              default: {
                acceptAll: {
                  name: "Cookie Script - Accept",
                  pages: [
                    {
                      target: "*",
                      actions: [
                        {
                          event: "waitUntilVisible",
                          xpath: "//div[@id='cookiescript_injected']",
                          timeout: 5e3
                        },
                        {
                          event: "click",
                          xpath: "//*[@id='cookiescript_accept']"
                        }
                      ]
                    }
                  ]
                },
                rejectAll: {
                  name: "Cookie Script - Reject",
                  pages: [
                    {
                      target: "*",
                      groupedActions: [
                        {
                          id: "initial",
                          actions: [
                            {
                              event: "waitUntilVisible",
                              xpath: "//div[@id='cookiescript_injected']",
                              timeout: 5e3
                            },
                            {
                              event: "click",
                              xpath: "//*[@id='cookiescript_reject']",
                              rejectGroup: "reject-manual"
                            }
                          ]
                        },
                        {
                          id: "reject-manual",
                          actions: [
                            {
                              event: "click",
                              xpath: "//*[@id='cookiescript_manage']",
                              rejectGroup: "reject-manual-alternative"
                            },
                            {
                              event: "waitUntilVisible",
                              xpath: "//div[@id='cookiescript_fsd_wrapper']",
                              timeout: 5e3
                            },
                            {
                              event: "bulkClick",
                              xpath: "//button[contains(@class, 'mdc-switch--selected')]"
                            },
                            {
                              event: "click",
                              xpath: "//*[@id='cookiescript_save']"
                            }
                          ]
                        },
                        {
                          id: "reject-manual-alternative",
                          actions: [
                            {
                              event: "bulkClick",
                              querySelector: "#cookiescript_checkbox_input:checked"
                            },
                            {
                              event: "click",
                              xpath: "//*[@id='cookiescript_accept']"
                            }
                          ]
                        }
                      ]
                    }
                  ]
                }
              }
            }
          },
          cookieParams: [
            {
              name: "OptanonConsent"
            },
            {
              name: "OptanonAlertBoxClosed"
            },
            {
              name: "euconsent-v2"
            },
            {
              name: "cmapi_cookie_privacy"
            },
            {
              name: "CookieConsent",
              ignoreValue: "-2"
            },
            {
              name: "osano_consentmanager"
            },
            {
              name: "cookieconsent_dismissed"
            },
            {
              name: "ezCMPCookieConsent"
            },
            {
              name: "cky-action"
            },
            {
              name: "CookieLawInfoConsent"
            },
            {
              name: "CookieScriptConsent",
              setValue: "action"
            },
            {
              name: "__adroll_consent"
            },
            {
              name: "cconsent-v2"
            },
            {
              name: "cookie_notice_accepted"
            },
            {
              name: "cmplz_banner-status"
            },
            {
              name: "cmplz_rt_banner-status"
            },
            {
              name: "borlabs-cookie"
            },
            {
              name: "moove_gdpr_popup"
            },
            {
              name: "cookieaccepted"
            },
            {
              name: "euconsent-v2"
            },
            {
              name: "cookieconsent_status",
              setValue: "dismiss"
            },
            {
              name: "d_prefs",
              urls: ["twitter.com"]
            },
            {
              name: "dattr",
              urls: ["facebook.com"]
            },
            {
              name: "SOCS",
              urls: ["google.com", "youtube.com"]
            },
            {
              name: "csrftoken",
              urls: ["instagram.com"]
            },
            {
              name: "wa_lang_pref",
              urls: ["whatsapp.com"]
            },
            {
              name: "g_state",
              urls: ["linkedin.com"]
            },
            {
              name: "eu_cookie",
              urls: ["reddit.com"]
            },
            {
              name: "MSCC",
              urls: ["office.com"]
            },
            {
              name: "hasSeenCookieDisclosure",
              urls: ["netflix.com"]
            },
            {
              name: "ymex",
              urls: ["yandex.ru"]
            },
            {
              name: "CTC",
              urls: ["canva.com"]
            },
            {
              name: "cto_bundle",
              urls: ["mail.ru"]
            },
            {
              name: "cookie_prefs",
              urls: ["paypal.com"]
            },
            {
              name: "cookie_accept",
              urls: ["xhamster.com"]
            },
            {
              name: "ds2",
              urls: ["ebay.com"]
            },
            {
              name: "_shopify_s",
              urls: ["shopify.com"]
            }
          ],
          detectionRules: [
            {
              type: "oneTrust",
              detectors: [
                {
                  variant: "default",
                  selectors: ["#onetrust-banner-sdk", "#onetrust-consent-sdk"]
                }
              ]
            },
            {
              type: "quantcast",
              detectors: [
                {
                  variant: "default",
                  selectors: [".qc-cmp2-container"]
                }
              ]
            },
            {
              type: "trustArc",
              detectors: [
                {
                  variant: "consent-track-iframe",
                  selectors: ["#truste-consent-track", "#truste-consent-content"]
                },
                {
                  variant: "full-iframe",
                  selectors: [".truste_box_overlay"]
                }
              ]
            },
            {
              type: "cookiebot",
              detectors: [
                {
                  variant: "default",
                  selectors: ["#CybotCookiebotDialog"]
                }
              ]
            },
            {
              type: "osano",
              detectors: [
                {
                  variant: "default",
                  selectors: [".osano-cm-window__dialog"]
                },
                {
                  variant: "confirm-only",
                  selectors: ["#cc-window", ".cc-window", ".cc_banner-wrapper"]
                }
              ]
            },
            {
              type: "cookieYes",
              detectors: [
                {
                  variant: "default",
                  selectors: [".cky-consent-container", ".cky-consent-bar"]
                }
              ]
            },
            {
              type: "cookieLaw",
              detectors: [
                {
                  variant: "default",
                  selectors: ["#cookie-law-info-bar"]
                }
              ]
            },
            {
              type: "cookieScript",
              detectors: [
                {
                  variant: "default",
                  selectors: ["#cookiescript_injected"]
                }
              ]
            },
            {
              type: "termly",
              detectors: [
                {
                  variant: "default",
                  selectors: [".t-consentPrompt"]
                }
              ]
            },
            {
              type: "ezoic",
              detectors: [
                {
                  variant: "default",
                  selectors: ["#ez-cookie-dialog-wrapper"]
                }
              ]
            },
            {
              type: "adRoll",
              detectors: [
                {
                  variant: "default",
                  selectors: ["#adroll_consent_container"]
                }
              ]
            },
            {
              type: "liveRamp",
              detectors: [
                {
                  variant: "default",
                  selectors: ["#gdpr-consent-tool-wrapper"]
                }
              ]
            },
            {
              type: "iubenda",
              detectors: [
                {
                  variant: "default",
                  selectors: ["#iubenda-cs-banner"]
                }
              ]
            },
            {
              type: "cookieNotice",
              detectors: [
                {
                  variant: "default",
                  selectors: ["#cookie-notice"]
                }
              ]
            },
            {
              type: "complianz",
              detectors: [
                {
                  variant: "default",
                  selectors: ["#cmplz-cookiebanner-container"]
                }
              ]
            },
            {
              type: "borlabs",
              detectors: [
                {
                  variant: "default",
                  selectors: ["#BorlabsCookieBox"]
                }
              ]
            },
            {
              type: "twitter",
              urls: ["twitter.com"],
              detectors: [
                {
                  variant: "default",
                  selectors: ["div[data-testid='BottomBar']"]
                }
              ]
            },
            {
              type: "facebook",
              urls: ["facebook.com"],
              detectors: [
                {
                  variant: "default",
                  selectors: ["div[data-testid='cookie-policy-manage-dialog']"]
                }
              ]
            },
            {
              type: "google",
              urls: ["google.com"],
              detectors: [
                {
                  variant: "default",
                  selectors: ["#CXQnmb"]
                }
              ]
            },
            {
              type: "instagram",
              urls: ["instagram.com"],
              detectors: [
                {
                  variant: "default",
                  selectors: [".RnEpo"]
                }
              ]
            },
            {
              type: "youtube",
              urls: ["youtube.com"],
              detectors: [
                {
                  variant: "default",
                  selectors: ["ytd-consent-bump-v2-lightbox[id='lightbox']"]
                }
              ]
            },
            {
              type: "whatsapp",
              urls: ["whatsapp.com"],
              detectors: [
                {
                  variant: "default",
                  selectors: ["div[data-testid='wa_cookies_banner_modal']"]
                }
              ]
            },
            {
              type: "linkedin",
              urls: ["linkedin.com"],
              detectors: [
                {
                  variant: "default",
                  selectors: ["#artdeco-global-alert-container"]
                }
              ]
            },
            {
              type: "reddit",
              urls: ["reddit.com"],
              detectors: [
                {
                  variant: "default",
                  selectors: [".trdUvQxqQHHqQKOUBcgnr"]
                }
              ]
            },
            {
              type: "office",
              urls: ["office.com"],
              detectors: [
                {
                  variant: "default",
                  selectors: ["#uhfCookieAlert"]
                }
              ]
            },
            {
              type: "netflix",
              urls: ["netflix.com"],
              detectors: [
                {
                  variant: "default",
                  selectors: ["#disclosures"]
                }
              ]
            },
            {
              type: "yandex",
              urls: ["yandex.ru"],
              detectors: [
                {
                  variant: "default",
                  selectors: [".sc-bdnylx"]
                }
              ]
            },
            {
              type: "canva",
              urls: ["canva.com"],
              detectors: [
                {
                  variant: "default",
                  selectors: [".NqU4Yg"]
                }
              ]
            },
            {
              type: "mail",
              urls: ["mail.ru"],
              detectors: [
                {
                  variant: "default",
                  selectors: ["#cmpbox"]
                }
              ]
            },
            {
              type: "didomi",
              detectors: [
                {
                  variant: "default",
                  selectors: ["#didomi-host"]
                }
              ]
            },
            {
              type: "paypal",
              urls: ["paypal.com"],
              detectors: [
                {
                  variant: "default",
                  selectors: ["#gdprCookieBanner"]
                }
              ]
            },
            {
              type: "xhamster",
              urls: ["xhamster.com"],
              detectors: [
                {
                  variant: "default",
                  selectors: [".cookies-modal"]
                }
              ]
            },
            {
              type: "ebay",
              urls: ["ebay.com"],
              detectors: [
                {
                  variant: "default",
                  selectors: ["#gdpr-banner"]
                }
              ]
            },
            {
              type: "shopify",
              urls: ["shopify.com"],
              detectors: [
                {
                  variant: "confirm-only",
                  selectors: ["#cookies-notice"]
                }
              ]
            }
          ],
          cookieBannerSelectors: {
            default: "body[aosp-cookie=hidden] #onetrust-consent-sdk,body[aosp-cookie=hidden] #didomi-host,body[aosp-cookie=hidden] .js-consent-banner,body[aosp-cookie=hidden] #cmpwrapper,body[aosp-cookie=hidden] #qc-cmp2-container,body[aosp-cookie=hidden] #consent_blackbar,body[aosp-cookie=hidden] .truste_box,body[aosp-cookie=hidden] .truste_box_overlay,body[aosp-cookie=hidden] .truste_overlay,body[aosp-cookie=hidden] #CybotCookiebotDialog,body[aosp-cookie=hidden] #CybotCookiebotDialogBodyUnderlay,body[aosp-cookie=hidden] #CybotCookiebotDialog.CybotCookiebotDialogOpen::after,body[aosp-cookie=hidden] .cc-window,body[aosp-cookie=hidden] .cc_banner-wrapper,body[aosp-cookie=hidden] .osano-cm-window,body[aosp-cookie=hidden] .fc-consent-root,body[aosp-cookie=hidden] .cky-consent-container,body[aosp-cookie=hidden] .cky-overlay,body[aosp-cookie=hidden] .cky-modal,body[aosp-cookie=hidden] .cky-consent-bar,body[aosp-cookie=hidden] .cky-modal-backdrop,body[aosp-cookie=hidden] .cli-modal-backdrop,body[aosp-cookie=hidden] .cli-modal,body[aosp-cookie=hidden] #cookie-law-info-bar,body[aosp-cookie=hidden] #cookiescript_injected,body[aosp-cookie=hidden] #cookiescript_injected_fsd,body[aosp-cookie=hidden] #cookie-bar,body[aosp-cookie=hidden] #cookiescript_badge,body[aosp-cookie=hidden] #termly-code-snippet-support,body[aosp-cookie=hidden] #ez-cookie-dialog-wrapper,body[aosp-cookie=hidden] #adroll_consent_container,body[aosp-cookie=hidden] #gdpr-consent-tool-wrapper,body[aosp-cookie=hidden] #gdpr-consent-manager-parent,body[aosp-cookie=hidden] .m-footer,body[aosp-cookie=hidden] #iubenda-cs-banner,body[aosp-cookie=hidden] #iubenda-iframe,body[aosp-cookie=hidden] #cookie-notice,body[aosp-cookie=hidden] #cmplz-cookiebanner-container,body[aosp-cookie=hidden] #hs-eu-cookie-confirmation,body[aosp-cookie=hidden] #BorlabsCookieBox,body[aosp-cookie=hidden] .gdpr_lightbox,body[aosp-cookie=hidden] #moove_gdpr_cookie_info_bar {display: none !important;}",
            "mail.ru": "body[aosp-cookie=hidden] #cmpbox { display: none !important; }",
            "yandex.ru": "body[aosp-cookie=hidden] .sc-bdnylx { display: none !important; }",
            "twitter.com": "body[aosp-cookie=hidden] div[data-testid='BottomBar'] { display: none !important; }",
            "www.ebay.com": "body[aosp-cookie=hidden] #gdpr-banner { display: none !important; }",
            "xhamster.com": "body[aosp-cookie=hidden] .cookies-modal,body[aosp-cookie=hidden] .parental-bg,body[aosp-cookie=hidden] .parental-control { display: none !important; }",
            "www.canva.com": "body[aosp-cookie=hidden] .NqU4Yg { display: none !important; }",
            "www.office.com": "body[aosp-cookie=hidden] #uhfCookieAlert { display: none !important; }",
            "www.paypal.com": "body[aosp-cookie=hidden] #gdprCookieBanner { display: none !important; }",
            "www.reddit.com": "body[aosp-cookie=hidden] .trdUvQxqQHHqQKOUBcgnr { display: none !important; }",
            "www.netflix.com": "body[aosp-cookie=hidden] #disclosures { display: none !important; }",
            "www.shopify.com": "body[aosp-cookie=hidden] #cookies-notice { display: none !important; }",
            "www.youtube.com": "body[aosp-cookie=hidden] tp-yt-iron-overlay-backdrop[class='opened'],body[aosp-cookie=hidden] ytd-consent-bump-v2-lightbox[class='style-scope ytd-consent-bump-v2-renderer']  { display: none !important; }",
            "www.facebook.com": "body[aosp-cookie=hidden] div[data-testid='cookie-policy-manage-dialog'] { display: none !important; }",
            "www.linkedin.com": "body[aosp-cookie=hidden] #artdeco-global-alert-container { display: none !important; }",
            "www.whatsapp.com": "body[aosp-cookie=hidden] div[data-testid='wa_cookies_banner_modal'] { display: none !important; }",
            "www.instagram.com": "body[aosp-cookie=hidden] div[role='presentation'] { display: none !important; }"
          }
        }
      },
      searchResults: {
        rules: [
          {
            url: "^http(s)?://((www|encrypted)\\.)?google\\.(com?\\.[a-z]{2}|[a-z]{2,})/.*",
            selector: "div.yuRUbf a:first-child, div.v5yQqb a:first-child",
            style: ".r .yWc32e, .r .eFM0qc, .ads-visurl, .rc .iUh30, .g .iUh30 { margin-left: 21px; }",
            domain: "^http[s]?://(www|encrypted).?google.(com?.[a-z]{2}|[a-z]{2,})(/.*)*",
            container: "#botstuff"
          },
          {
            url: "^http(s)?://(search|suche|www)\\.aol\\.(com|de|ca|co\\.uk)/.+",
            selector: ".ads h3.title a, div#web h3.title a, .bingnews h4 a",
            urlExtractor: "=(http(s)?:.*)"
          },
          {
            url: "^http(s)?://(www|\\w{2})\\.ask\\.com/.+",
            style: ".result-url-section a, a.p_.si27 { margin-left: 21px; margin-top: -25px;}",
            selector: ".result-url-section a, a.p_.si27, .m_.n_.v_.a"
          },
          {
            url: "^http(s)?://busca\\.uol\\.com\\.br/?.+",
            selector: ".result-list .gsc-results .gsc-result .gs-title a",
            container: ".gsc-results"
          },
          {
            url: "^http(s)?://search\\.centrum\\.cz/(.)*",
            selector: ".gsc-webResult .gsc-thumbnail-inside a"
          },
          {
            url: "^http(s)?://(www\\.)?dogpile\\.com/serp.+",
            selector: ".web-bing__title, .ads-bing-top__title a"
          },
          {
            url: "^http(s)?://duckduckgo\\.com/.+",
            selector: ".eVNpHGjtxRBq_gLOfGDr.LQNqh2U1kzYxREs65IJu",
            style: ".LnpumSThxEWMIsDdAT17.CXMyPcQ6nDv47DKFeywM { display: flex; }",
            container: ".react-results--main"
          },
          {
            url: "^http(s)?://(www\\.)?ecosia\\.org/.+",
            selector: "div[data-test-id='mainline-result-web'] div.result__body > div.result__header > div.result__info a"
          },
          {
            url: "^http(s)?://search\\.goo\\.ne\\.jp/web(.)+",
            selector: ".result > p.title a",
            style: "#main .sec4 .title a { display: inline !important; }"
          },
          {
            url: "^http(s)?://(www\\.)?szukaj\\.interia\\.pl/.+",
            selector: ".gsc-webResult .gsc-thumbnail-inside a"
          },
          {
            url: "^http(s)?://search\\.myway\\.com/web?.+",
            selector: ".PartialSearchResults-item-title > .WRCN { display: inline-block; top: 1px; }"
          },
          {
            url: "^http(s)?://search\\.naver\\.com/?.+",
            selector: "a.lnk_tit, a.lnk_head, a.link_tit, a.total_tit, a.name_link"
          },
          {
            url: "^http(s)?://nova\\.rambler\\.ru/.+",
            selector: ".Serp__title--3i6Ro a",
            isIconRight: true
          },
          {
            url: "^http(s)?://www\\.sapo\\.pt/pesquisa?.+",
            selector: ".gsc-webResult .gsc-thumbnail-inside a",
            container: ".gsc-results"
          },
          {
            url: "^http(s)?://search\\.daum\\.net/search.*",
            selector: "#siteColl .wrap_tit > a, #newsColl a.tit_main, #twaColl a.tit_main, .item-title a",
            style: ".item-title a { margin-left: 21px; margin-top: -25px;}",
            container: "#siteColl .list_info, #webdocColl .list_info, .c-list-basic"
          },
          {
            url: "^http(s)?://search\\.seznam\\.cz/(.)*",
            selector: ".tfc672d38af",
            style: ".aosp-serp-icon { margin-left: 10px; }",
            isIconRight: true
          },
          {
            url: "^http(s)?://(www\\.)?startpage\\.com/sp/search",
            style: ".w-gl__result-url-container a, .article-left a { margin-left: 21px; margin-top: -25px;}",
            selector: ".w-gl__result-url-container a, .article-left a"
          },
          {
            url: "^http(s)?://szukaj\\.gazeta\\.pl/.+",
            selector: "header > h3 > a"
          },
          {
            url: "^http(s)://(szukaj|katalog)\\.wp\\.pl/.+",
            selector: ".gsc-webResult .gsc-thumbnail-inside a",
            container: ".search-results"
          },
          {
            url: "^http(s)?://((.)+\\.)?search\\.yahoo\\.com/(.)*",
            selector: "div.relsrch h3 > a, .searchCenterTopAds a.va-bot, .layoutMiddle a.va-bot",
            style: ".compTitle { display: flex;}",
            urlExtractor: "=(http(s)?:.*)"
          },
          {
            url: "^http(s)?://(www\\.)?yandex\\.(ru|com)/search/.+",
            selector: "a.OrganicTitle-Link"
          }
        ]
      },
      privacyAdvisor: {
        promotedGuide: "Google - Stop Google from using your data for ads",
        scenarios: {
          Google: [
            {
              logo: "https://s-install.avcdn.net/aos/assets/prod/images/guides/Google.svg",
              name: "Google - Security Checkup",
              hooks: {
                onStop: {
                  actions: [
                    {
                      event: "aos-notification",
                      className: "close-notification",
                      showOverlay: false,
                      componentData: {
                        body: "guides.notification.onStop",
                        label: "aos",
                        button: {
                          text: "guides.button.gotIt",
                          isClose: true
                        }
                      },
                      resolveConditions: [
                        {
                          elements: ["//aside[@class='aos-notification']//button[@class='close-icon']"]
                        }
                      ]
                    }
                  ]
                },
                onFailed: {
                  actions: [
                    {
                      event: "aos-notification",
                      className: "bottom-notification",
                      showOverlay: false,
                      componentData: {
                        body: "guides.notification.onFailed",
                        label: "aos"
                      },
                      resolveConditions: [
                        {
                          elements: ["//aside[@class='aos-notification']//button[@class='close-icon']"]
                        }
                      ]
                    }
                  ]
                }
              },
              pages: [
                {
                  target: {
                    url: "/www\\.google\\.com/*"
                  },
                  optional: true,
                  groupedActions: [
                    {
                      id: "initial",
                      actions: [
                        {
                          event: "aos-notification",
                          className: "trigger-notification",
                          componentData: {
                            body: "google.securityCheckup.triggerNotification.body",
                            label: "aos",
                            button: {
                              text: "guides.button.start"
                            },
                            heading: "google.securityCheckup.description",
                            minutes: 4
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-init-guide']"]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "scenario-closed",
                      actions: [
                        {
                          event: "stopScenario"
                        }
                      ]
                    }
                  ]
                },
                {
                  target: {
                    url: "/myaccount\\.google\\.com\\/(.*\\/)?security-checkup(\\/.*)?"
                  },
                  optional: true,
                  groupedActions: [
                    {
                      id: "initial",
                      actions: [
                        {
                          event: "aos-tooltip",
                          xpath: "//div[@role='tablist']/div[1]//div[3]/div",
                          options: {
                            position: "rightBottom",
                            className: "success"
                          },
                          componentData: {
                            body: "google.securityCheckup.tooltip1",
                            step: 1,
                            label: "guides.header.step",
                            button: {
                              text: "guides.button.next"
                            }
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-next-step']"]
                            }
                          ]
                        },
                        {
                          event: "verifyOk",
                          xpath: "(//c-wiz[@data-status=1 or @data-status=2]//div[@role='tab'])[1]",
                          rejectGroup: "done",
                          resolveGroup: "security-checkup"
                        }
                      ]
                    },
                    {
                      id: "security-checkup",
                      actions: [
                        {
                          event: "verifyOk",
                          xpath: "(//c-wiz[@data-status=1]//div[@role='tab'])[1]",
                          rejectGroup: "yellow-issues",
                          resolveGroup: "red-issues"
                        }
                      ]
                    },
                    {
                      id: "red-issues",
                      actions: [
                        {
                          event: "aos-tooltip",
                          xpath: "(//c-wiz[@data-status=1]//div[@role='tab'])[1]",
                          options: {
                            position: "leftBottom",
                            className: "success"
                          },
                          componentData: {
                            body: "google.securityCheckup.tooltip2",
                            step: 2,
                            label: "guides.header.step",
                            button: {
                              text: "guides.button.next"
                            }
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-next-step']"]
                            }
                          ]
                        },
                        {
                          event: "verifyOk",
                          xpath: "(//c-wiz[@data-status=2]//div[@role='tab'])[1]",
                          rejectGroup: "done",
                          resolveGroup: "yellow-issues"
                        }
                      ]
                    },
                    {
                      id: "yellow-issues",
                      actions: [
                        {
                          event: "aos-tooltip",
                          xpath: "(//c-wiz[@data-status=2]//div[@role='tab'])[1]",
                          options: {
                            position: "leftBottom",
                            className: "success"
                          },
                          componentData: {
                            body: "google.securityCheckup.tooltip3",
                            step: 3,
                            label: "guides.header.step",
                            button: {
                              text: "guides.button.next"
                            }
                          },
                          resolveConditions: [
                            {
                              groupId: "done",
                              elements: ["//a[@id='aos-next-step']"]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "done",
                      actions: [
                        {
                          event: "aos-notification",
                          options: {
                            position: "rightBottom",
                            className: "z-layer-top"
                          },
                          className: "guide-completed",
                          componentData: {
                            body: "google.securityCheckup.tooltip4",
                            label: "aos",
                            button: {
                              text: "guides.button.showMore"
                            },
                            heading: "guides.header.completed"
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-init-guide']"]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "scenario-closed",
                      actions: [
                        {
                          event: "stopScenario"
                        }
                      ]
                    }
                  ]
                }
              ],
              minutes: 4,
              website: "Google",
              startUrl: "https://myaccount.google.com/security-checkup",
              triggerUrl: "https://www.google.com/",
              description: "google.securityCheckup.description"
            },
            {
              logo: "https://s-install.avcdn.net/aos/assets/prod/images/guides/Google.svg",
              name: "Google - Stop Google from using your data for ads",
              hooks: {
                onStop: {
                  actions: [
                    {
                      event: "aos-notification",
                      className: "close-notification",
                      showOverlay: false,
                      componentData: {
                        body: "guides.notification.onStop",
                        label: "aos",
                        button: {
                          text: "guides.button.gotIt",
                          isClose: true
                        }
                      },
                      resolveConditions: [
                        {
                          elements: ["//aside[@class='aos-notification']//button[@class='close-icon']"]
                        }
                      ]
                    }
                  ]
                },
                onFailed: {
                  actions: [
                    {
                      event: "aos-notification",
                      className: "bottom-notification",
                      showOverlay: false,
                      componentData: {
                        body: "guides.notification.onFailed",
                        label: "aos"
                      },
                      resolveConditions: [
                        {
                          elements: ["//aside[@class='aos-notification']//button[@class='close-icon']"]
                        }
                      ]
                    }
                  ]
                }
              },
              pages: [
                {
                  target: {
                    url: "/www\\.google\\.com/*"
                  },
                  optional: true,
                  groupedActions: [
                    {
                      id: "initial",
                      actions: [
                        {
                          event: "aos-notification",
                          className: "trigger-notification",
                          componentData: {
                            body: "google.adsSettings.triggerNotification.body",
                            label: "aos",
                            button: {
                              text: "guides.button.start"
                            },
                            heading: "google.adsSettings.description",
                            minutes: 2
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-init-guide']"]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "scenario-closed",
                      actions: [
                        {
                          event: "stopScenario"
                        }
                      ]
                    }
                  ]
                },
                {
                  target: {
                    url: "https://adssettings.google.com/authenticated"
                  },
                  optional: true,
                  groupedActions: [
                    {
                      id: "initial",
                      actions: [
                        {
                          event: "waitUntilVisible",
                          xpath: "//body/div/c-wiz//c-wiz/div/div/div/c-wiz/div/span/div/div[2]",
                          timeout: 5e3
                        },
                        {
                          event: "aos-tooltip",
                          xpath: "//c-wiz/div/div/div/c-wiz/div/span/div/div[2]",
                          parent: "//body/div/c-wiz",
                          options: {
                            position: "rightBottom",
                            spaceBetween: -40
                          },
                          componentData: {
                            body: "google.adsSettings.tooltip1",
                            step: 1,
                            label: "guides.header.step",
                            button: {
                              text: "guides.button.next"
                            }
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-next-step']"]
                            }
                          ]
                        },
                        {
                          event: "verifyOk",
                          xpath: "//div[@role='switch'][@aria-checked='true']",
                          rejectGroup: "personalization-off",
                          resolveGroup: "disable-ad-personalization"
                        }
                      ]
                    },
                    {
                      id: "disable-ad-personalization",
                      actions: [
                        {
                          event: "aos-tooltip",
                          xpath: "//div[@role='switch'][@aria-checked='true']",
                          parent: "//body/div/c-wiz",
                          options: {
                            position: "rightBottom"
                          },
                          componentData: {
                            body: "google.adsSettings.tooltip2",
                            step: 2,
                            label: "guides.header.step"
                          },
                          resolveConditions: [
                            {
                              elements: ["//div[@role='switch'][@aria-checked='true']"]
                            }
                          ]
                        },
                        {
                          event: "waitUntilVisible",
                          xpath: "//div[@role='dialog']//div/div[2]/div[2]/span/span",
                          timeout: 5e3
                        },
                        {
                          event: "aos-tooltip",
                          xpath: "//div[@role='dialog']//div/div[2]/div[2]/span/span",
                          options: {
                            position: "rightBottom",
                            className: "z-layer-top"
                          },
                          componentData: {
                            body: "google.adsSettings.tooltip3",
                            step: 3,
                            label: "guides.header.step"
                          },
                          resolveConditions: [
                            {
                              elements: ["//div[@role='dialog']//div/div[2]/div[2]/span/span"]
                            },
                            {
                              groupId: "scenario-closed",
                              elements: ["//div[@role='dialog']//div/div[2]/div[1]/span/span"]
                            }
                          ]
                        },
                        {
                          event: "waitUntilVisible",
                          xpath: "//div[@role='dialog']//div/div[2]/div/span/span",
                          timeout: 5e3
                        },
                        {
                          event: "aos-tooltip",
                          xpath: "//div[@role='dialog']//div/div[2]/div/span/span",
                          options: {
                            position: "rightBottom",
                            className: "z-layer-top"
                          },
                          componentData: {
                            body: "google.adsSettings.tooltip4",
                            step: 4,
                            label: "guides.header.step"
                          },
                          resolveConditions: [
                            {
                              elements: ["//div[@role='dialog']//div/div[2]/div/span/span"]
                            }
                          ]
                        },
                        {
                          event: "aos-notification",
                          options: {
                            position: "rightBottom",
                            className: "z-layer-top"
                          },
                          className: "guide-completed",
                          componentData: {
                            body: "google.adsSettings.tooltip5",
                            label: "aos",
                            button: {
                              text: "guides.button.showMore"
                            },
                            heading: "guides.header.completed"
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-init-guide']"]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "personalization-off",
                      actions: [
                        {
                          event: "aos-tooltip",
                          xpath: "//div[@role='switch'][@aria-checked='false']",
                          parent: "//body/div/c-wiz",
                          options: {
                            position: "rightBottom"
                          },
                          componentData: {
                            body: "google.adsSettings.tooltip6",
                            label: "guides.header.alreadySet",
                            button: {
                              text: "guides.button.showMore"
                            }
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-next-step']"]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "scenario-closed",
                      actions: [
                        {
                          event: "stopScenario"
                        }
                      ]
                    }
                  ]
                }
              ],
              minutes: 2,
              website: "Google",
              startUrl: "https://adssettings.google.com/authenticated",
              triggerUrl: "https://www.google.com/",
              description: "google.adsSettings.description"
            }
          ],
          LinkedIn: [
            {
              logo: "https://s-install.avcdn.net/aos/assets/prod/images/guides/LinkedIn.svg",
              name: "LinkedIn - Data Privacy",
              hooks: {
                onStop: {
                  actions: [
                    {
                      event: "aos-notification",
                      className: "close-notification",
                      showOverlay: false,
                      componentData: {
                        body: "guides.notification.onStop",
                        label: "aos",
                        button: {
                          text: "guides.button.gotIt",
                          isClose: true
                        }
                      },
                      resolveConditions: [
                        {
                          elements: ["//aside[@class='aos-notification']//button[@class='close-icon']"]
                        }
                      ]
                    }
                  ]
                },
                onFailed: {
                  actions: [
                    {
                      event: "aos-notification",
                      className: "bottom-notification",
                      showOverlay: false,
                      componentData: {
                        body: "guides.notification.onFailed",
                        label: "aos"
                      },
                      resolveConditions: [
                        {
                          elements: ["//aside[@class='aos-notification']//button[@class='close-icon']"]
                        }
                      ]
                    }
                  ]
                }
              },
              pages: [
                {
                  target: {
                    url: "/www\\.linkedin\\.com/feed"
                  },
                  optional: true,
                  groupedActions: [
                    {
                      id: "initial",
                      actions: [
                        {
                          event: "aos-notification",
                          className: "trigger-notification",
                          componentData: {
                            body: "linkedin.dataPrivacy.triggerNotification.body",
                            label: "aos",
                            button: {
                              text: "guides.button.start"
                            },
                            heading: "linkedin.dataPrivacy.description",
                            minutes: 1
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-init-guide']"]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "scenario-closed",
                      actions: [
                        {
                          event: "stopScenario"
                        }
                      ]
                    }
                  ]
                },
                {
                  target: {
                    url: "https://www.linkedin.com/psettings/data-research"
                  },
                  optional: true,
                  groupedActions: [
                    {
                      id: "initial",
                      actions: [
                        {
                          event: "aos-tooltip",
                          xpath: "//a[@id='how-linkedin-uses-your-data-link']",
                          options: {
                            position: "rightBottom",
                            className: "success"
                          },
                          componentData: {
                            body: "linkedin.dataPrivacy.tooltip1",
                            step: 1,
                            label: "guides.header.step",
                            button: {
                              text: "guides.button.next"
                            }
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-next-step']"]
                            },
                            {
                              groupId: "scenario-closed",
                              elements: [
                                {
                                  xpath: "//a[not(@id='aos-next-step')]",
                                  multipleMatch: true
                                }
                              ]
                            }
                          ]
                        },
                        {
                          event: "verifyOk",
                          xpath: "//input[@id='option-allow-anonymized-data-research'][@type='checkbox'][@checked]",
                          rejectGroup: "already-resolved",
                          resolveGroup: "data-privacy"
                        }
                      ]
                    },
                    {
                      id: "data-privacy",
                      actions: [
                        {
                          event: "waitUntilVisible",
                          xpath: "//input[@id='option-allow-anonymized-data-research'][@type='checkbox'][@checked]",
                          timeout: 3e3
                        },
                        {
                          event: "aos-tooltip",
                          xpath: "//div[@id='setting-data-research-content']/form/div[2]/div",
                          options: {
                            position: "rightBottom",
                            className: "success"
                          },
                          componentData: {
                            body: "linkedin.dataPrivacy.tooltip2",
                            step: 2,
                            label: "guides.header.step"
                          },
                          resolveConditions: [
                            {
                              elements: ["//input[@id='option-allow-anonymized-data-research'][@type='checkbox'][@checked]"]
                            },
                            {
                              groupId: "scenario-closed",
                              elements: [
                                {
                                  xpath: "//a[not(@id='aos-next-step')]",
                                  multipleMatch: true
                                }
                              ]
                            }
                          ]
                        },
                        {
                          event: "aos-notification",
                          options: {
                            position: "rightBottom",
                            className: "z-layer-top"
                          },
                          className: "guide-completed",
                          componentData: {
                            body: "linkedin.dataPrivacy.tooltip3",
                            label: "aos",
                            button: {
                              text: "guides.button.showMore"
                            },
                            heading: "guides.header.completed"
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-init-guide']"]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "already-resolved",
                      actions: [
                        {
                          event: "aos-tooltip",
                          xpath: "//div[@id='setting-data-research-content']/form/div[2]/div",
                          options: {
                            position: "rightBottom",
                            className: "success"
                          },
                          componentData: {
                            body: "linkedin.dataPrivacy.tooltip4",
                            label: "guides.header.alreadySet",
                            button: {
                              text: "guides.button.showMore"
                            }
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-next-step']"]
                            },
                            {
                              groupId: "scenario-revoked",
                              elements: ["//input[@id='option-allow-anonymized-data-research'][@type='checkbox'][not(@checked)]"]
                            },
                            {
                              groupId: "scenario-closed",
                              elements: [
                                {
                                  xpath: "//a[not(@id='aos-next-step')]",
                                  multipleMatch: true
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "scenario-revoked",
                      actions: [
                        {
                          event: "waitUntilVisible",
                          xpath: "//input[@id='option-allow-anonymized-data-research'][@type='checkbox'][@checked]",
                          timeout: 3e3,
                          rejectGroup: "already-resolved",
                          resolveGroup: "data-privacy"
                        }
                      ]
                    },
                    {
                      id: "scenario-closed",
                      actions: [
                        {
                          event: "stopScenario"
                        }
                      ]
                    }
                  ]
                }
              ],
              minutes: 1,
              website: "LinkedIn",
              startUrl: "https://www.linkedin.com/psettings/data-research",
              triggerUrl: "https://www.linkedin.com/feed/",
              description: "linkedin.dataPrivacy.description"
            }
          ],
          Twitter: [
            {
              logo: "https://s-install.avcdn.net/aos/assets/prod/images/guides/Twitter.svg",
              name: "Twitter - Limit who can see your tweets",
              hooks: {
                onStop: {
                  actions: [
                    {
                      event: "aos-notification",
                      className: "close-notification",
                      showOverlay: false,
                      componentData: {
                        body: "guides.notification.onStop",
                        label: "aos",
                        button: {
                          text: "guides.button.gotIt",
                          isClose: true
                        }
                      },
                      resolveConditions: [
                        {
                          elements: ["//aside[@class='aos-notification']//button[@class='close-icon']"]
                        }
                      ]
                    }
                  ]
                },
                onFailed: {
                  actions: [
                    {
                      event: "aos-notification",
                      className: "bottom-notification",
                      showOverlay: false,
                      componentData: {
                        body: "guides.notification.onFailed",
                        label: "aos"
                      },
                      resolveConditions: [
                        {
                          elements: ["//aside[@class='aos-notification']//button[@class='close-icon']"]
                        }
                      ]
                    }
                  ]
                }
              },
              pages: [
                {
                  target: {
                    url: "/twitter\\.com/home"
                  },
                  optional: true,
                  groupedActions: [
                    {
                      id: "initial",
                      actions: [
                        {
                          event: "aos-notification",
                          className: "trigger-notification",
                          componentData: {
                            body: "twitter.tweetsVisibility.triggerNotification.body",
                            label: "aos",
                            button: {
                              text: "guides.button.start"
                            },
                            heading: "twitter.tweetsVisibility.description",
                            minutes: 1
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-init-guide']"]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "scenario-closed",
                      actions: [
                        {
                          event: "stopScenario"
                        }
                      ]
                    }
                  ]
                },
                {
                  target: {
                    url: "https://twitter.com/settings/audience_and_tagging"
                  },
                  optional: true,
                  groupedActions: [
                    {
                      id: "initial",
                      actions: [
                        {
                          event: "waitUntilVisible",
                          xpath: "//main//h2[../../..//div[@aria-label='Back']]",
                          timeout: 3e3
                        },
                        {
                          event: "aos-tooltip",
                          xpath: "//main//h2[../../..//div[@aria-label='Back']]",
                          options: {
                            position: "bottomRight",
                            className: "success"
                          },
                          componentData: {
                            body: "twitter.tweetsVisibility.tooltip1",
                            step: 1,
                            label: "guides.header.step",
                            button: {
                              text: "guides.button.next"
                            }
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-next-step']"]
                            },
                            {
                              groupId: "scenario-closed",
                              elements: [
                                {
                                  xpath: "//a[not(@id='aos-next-step')]",
                                  multipleMatch: true
                                }
                              ]
                            }
                          ]
                        },
                        {
                          event: "verifyOk",
                          xpath: "//main//input[@type='checkbox'][@checked]",
                          rejectGroup: "protect-tweets",
                          resolveGroup: "already-resolved"
                        }
                      ]
                    },
                    {
                      id: "protect-tweets",
                      actions: [
                        {
                          event: "aos-tooltip",
                          xpath: "//main//input[@type='checkbox']",
                          options: {
                            position: "leftBottom",
                            className: "success"
                          },
                          componentData: {
                            body: "twitter.tweetsVisibility.tooltip2",
                            step: 2,
                            label: "guides.header.step"
                          },
                          resolveConditions: [
                            {
                              elements: ["//main//input[@type='checkbox']"]
                            },
                            {
                              groupId: "scenario-closed",
                              elements: [
                                {
                                  xpath: "//a[not(@id='aos-next-step')]",
                                  multipleMatch: true
                                }
                              ]
                            }
                          ]
                        },
                        {
                          event: "waitUntilVisible",
                          xpath: "//div[@role='button'][@data-testid='confirmationSheetConfirm']",
                          timeout: 5e3
                        },
                        {
                          event: "aos-tooltip",
                          xpath: "//div[@role='button'][@data-testid='confirmationSheetConfirm']",
                          options: {
                            position: "rightBottom",
                            className: "success"
                          },
                          componentData: {
                            body: "twitter.tweetsVisibility.tooltip3",
                            step: 3,
                            label: "guides.header.step"
                          },
                          resolveConditions: [
                            {
                              elements: ["//div[@role='button'][@data-testid='confirmationSheetConfirm']"]
                            },
                            {
                              groupId: "scenario-closed",
                              elements: [
                                {
                                  xpath: "//a[not(@id='aos-next-step')]",
                                  multipleMatch: true
                                }
                              ]
                            }
                          ]
                        },
                        {
                          event: "aos-notification",
                          className: "guide-completed",
                          componentData: {
                            body: "twitter.tweetsVisibility.tooltip4",
                            label: "aos",
                            button: {
                              text: "guides.button.showMore"
                            },
                            heading: "guides.header.completed"
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-init-guide']"]
                            },
                            {
                              groupId: "scenario-closed",
                              elements: [
                                {
                                  xpath: "//a[not(@id='aos-next-step')]",
                                  multipleMatch: true
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "already-resolved",
                      actions: [
                        {
                          event: "aos-tooltip",
                          xpath: "//main//input[@type='checkbox'][@checked]",
                          options: {
                            position: "leftBottom",
                            className: "success"
                          },
                          componentData: {
                            body: "twitter.tweetsVisibility.tooltip5",
                            label: "guides.header.alreadySet",
                            button: {
                              text: "guides.button.showMore"
                            }
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-next-step']"]
                            },
                            {
                              groupId: "scenario-closed",
                              elements: [
                                {
                                  xpath: "//a[not(@id='aos-next-step')]",
                                  multipleMatch: true
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "scenario-closed",
                      actions: [
                        {
                          event: "stopScenario"
                        }
                      ]
                    }
                  ]
                }
              ],
              minutes: 1,
              website: "Twitter",
              startUrl: "https://twitter.com/settings/audience_and_tagging",
              triggerUrl: "https://twitter.com/home",
              description: "twitter.tweetsVisibility.description"
            },
            {
              logo: "https://s-install.avcdn.net/aos/assets/prod/images/guides/Twitter.svg",
              name: "Twitter - Disable the photo tagging option",
              hooks: {
                onStop: {
                  actions: [
                    {
                      event: "aos-notification",
                      className: "close-notification",
                      showOverlay: false,
                      componentData: {
                        body: "guides.notification.onStop",
                        label: "aos",
                        button: {
                          text: "guides.button.gotIt",
                          isClose: true
                        }
                      },
                      resolveConditions: [
                        {
                          elements: ["//aside[@class='aos-notification']//button[@class='close-icon']"]
                        }
                      ]
                    }
                  ]
                },
                onFailed: {
                  actions: [
                    {
                      event: "aos-notification",
                      className: "bottom-notification",
                      showOverlay: false,
                      componentData: {
                        body: "guides.notification.onFailed",
                        label: "aos"
                      },
                      resolveConditions: [
                        {
                          elements: ["//aside[@class='aos-notification']//button[@class='close-icon']"]
                        }
                      ]
                    }
                  ]
                }
              },
              pages: [
                {
                  target: {
                    url: "/twitter\\.com/home"
                  },
                  optional: true,
                  groupedActions: [
                    {
                      id: "initial",
                      actions: [
                        {
                          event: "aos-notification",
                          className: "trigger-notification",
                          componentData: {
                            body: "twitter.tagging.triggerNotification.body",
                            label: "aos",
                            button: {
                              text: "guides.button.start"
                            },
                            heading: "twitter.tagging.description",
                            minutes: 1
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-init-guide']"]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "scenario-closed",
                      actions: [
                        {
                          event: "stopScenario"
                        }
                      ]
                    }
                  ]
                },
                {
                  target: {
                    url: "https://twitter.com/settings/tagging"
                  },
                  optional: true,
                  groupedActions: [
                    {
                      id: "initial",
                      actions: [
                        {
                          event: "waitUntilVisible",
                          xpath: "//main//h2[../../..//div[@aria-label='Back']]",
                          timeout: 3e3
                        },
                        {
                          event: "aos-tooltip",
                          xpath: "//main//h2[../../..//div[@aria-label='Back']]",
                          options: {
                            position: "bottomRight",
                            className: "success"
                          },
                          componentData: {
                            body: "twitter.tagging.tooltip1",
                            step: 1,
                            label: "guides.header.step",
                            button: {
                              text: "guides.button.next"
                            }
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-next-step']"]
                            },
                            {
                              groupId: "scenario-closed",
                              elements: [
                                {
                                  xpath: "//a[not(@id='aos-next-step')]",
                                  multipleMatch: true
                                }
                              ]
                            }
                          ]
                        },
                        {
                          event: "verifyOk",
                          xpath: "//main//input[@type='checkbox'][@checked]",
                          rejectGroup: "already-resolved",
                          resolveGroup: "prevent-tagging"
                        }
                      ]
                    },
                    {
                      id: "prevent-tagging",
                      actions: [
                        {
                          event: "aos-tooltip",
                          xpath: "//main//input[@type='checkbox'][@checked]",
                          options: {
                            position: "bottomLeft",
                            className: "success"
                          },
                          componentData: {
                            body: "twitter.tagging.tooltip2",
                            step: 2,
                            label: "guides.header.step"
                          },
                          resolveConditions: [
                            {
                              elements: ["//main//input[@type='checkbox'][@checked]"]
                            },
                            {
                              groupId: "scenario-closed",
                              elements: [
                                {
                                  xpath: "//a[not(@id='aos-next-step')]",
                                  multipleMatch: true
                                }
                              ]
                            }
                          ]
                        },
                        {
                          event: "aos-notification",
                          className: "guide-completed",
                          componentData: {
                            body: "twitter.tagging.tooltip3",
                            label: "aos",
                            button: {
                              text: "guides.button.showMore"
                            },
                            heading: "guides.header.completed"
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-init-guide']"]
                            },
                            {
                              groupId: "scenario-closed",
                              elements: [
                                {
                                  xpath: "//a[not(@id='aos-next-step')]",
                                  multipleMatch: true
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "already-resolved",
                      actions: [
                        {
                          event: "aos-tooltip",
                          xpath: "//main//input[@type='checkbox']",
                          options: {
                            position: "bottomLeft",
                            className: "success"
                          },
                          componentData: {
                            body: "twitter.tagging.tooltip4",
                            label: "guides.header.alreadySet",
                            button: {
                              text: "guides.button.showMore"
                            }
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-next-step']"]
                            },
                            {
                              groupId: "scenario-closed",
                              elements: [
                                {
                                  xpath: "//a[not(@id='aos-next-step')]",
                                  multipleMatch: true
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "scenario-closed",
                      actions: [
                        {
                          event: "stopScenario"
                        }
                      ]
                    }
                  ]
                }
              ],
              minutes: 1,
              website: "Twitter",
              startUrl: "https://twitter.com/settings/tagging",
              triggerUrl: "https://twitter.com/home",
              description: "twitter.tagging.description"
            }
          ],
          Amazon: [
            {
              logo: "https://s-install.avcdn.net/aos/assets/prod/images/guides/Amazon.svg",
              name: "Amazon - Delete your Amazon browsing history",
              hooks: {
                onStop: {
                  actions: [
                    {
                      event: "aos-notification",
                      className: "close-notification",
                      showOverlay: false,
                      componentData: {
                        body: "guides.notification.onStop",
                        label: "aos",
                        button: {
                          text: "guides.button.gotIt",
                          isClose: true
                        }
                      },
                      resolveConditions: [
                        {
                          elements: ["//aside[@class='aos-notification']//button[@class='close-icon']"]
                        }
                      ]
                    }
                  ]
                },
                onFailed: {
                  actions: [
                    {
                      event: "aos-notification",
                      className: "bottom-notification",
                      showOverlay: false,
                      componentData: {
                        body: "guides.notification.onFailed",
                        label: "aos"
                      },
                      resolveConditions: [
                        {
                          elements: ["//aside[@class='aos-notification']//button[@class='close-icon']"]
                        }
                      ]
                    }
                  ]
                }
              },
              pages: [
                {
                  target: {
                    url: "https://www.amazon.com/"
                  },
                  optional: true,
                  groupedActions: [
                    {
                      id: "initial",
                      actions: [
                        {
                          event: "aos-notification",
                          className: "trigger-notification",
                          componentData: {
                            body: "amazon.browsingHistory.triggerNotification.body",
                            label: "aos",
                            button: {
                              text: "guides.button.start"
                            },
                            heading: "amazon.browsingHistory.description",
                            minutes: 2
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-init-guide']"]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "scenario-closed",
                      actions: [
                        {
                          event: "stopScenario"
                        }
                      ]
                    }
                  ]
                },
                {
                  target: {
                    url: "https://www.amazon.com/gp/history/"
                  },
                  optional: true,
                  groupedActions: [
                    {
                      id: "initial",
                      actions: [
                        {
                          event: "verifyOk",
                          xpath: "//div[contains(@class, 'a-expander-container')]//i[contains(@class, 'a-icon-section-collapse')]",
                          rejectGroup: "click-expander",
                          resolveGroup: "initial-tooltip"
                        }
                      ]
                    },
                    {
                      id: "click-expander",
                      actions: [
                        {
                          event: "click",
                          xpath: "//a[@data-action='a-expander-toggle']",
                          resolveGroup: "initial-tooltip"
                        }
                      ]
                    },
                    {
                      id: "initial-tooltip",
                      actions: [
                        {
                          event: "aos-tooltip",
                          xpath: "//a[@data-action='a-expander-toggle']//span[contains(@class, 'a-size-medium')]",
                          options: {
                            position: "leftBottom"
                          },
                          componentData: {
                            body: "amazon.browsingHistory.tooltip1",
                            step: 1,
                            label: "guides.header.step",
                            button: {
                              text: "guides.button.next"
                            }
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-next-step']"]
                            }
                          ]
                        },
                        {
                          event: "verifyOk",
                          xpath: "//div[@id='asin_list']/div[1]/div[2]",
                          rejectGroup: "check-toggle",
                          resolveGroup: "remove-history-items"
                        }
                      ]
                    },
                    {
                      id: "remove-history-items",
                      actions: [
                        {
                          event: "aos-tooltip",
                          xpath: "//span[@id='btn_clear']/span/input",
                          options: {
                            position: "rightBottom"
                          },
                          componentData: {
                            body: "amazon.browsingHistory.tooltip2",
                            step: 2,
                            label: "guides.header.step"
                          },
                          resolveConditions: [
                            {
                              elements: ["//span[@id='btn_clear']/span/input"]
                            }
                          ]
                        },
                        {
                          event: "waitUntilVisible",
                          xpath: "//div[@id='a-popover-content-1']/div/span[2]/span/span",
                          timeout: 5e3
                        },
                        {
                          event: "aos-tooltip",
                          xpath: "//div[@id='a-popover-content-1']/div/span[2]/span/span",
                          options: {
                            position: "rightBottom",
                            className: "z-layer-top"
                          },
                          componentData: {
                            body: "amazon.browsingHistory.tooltip3",
                            step: 3,
                            label: "guides.header.step"
                          },
                          resolveConditions: [
                            {
                              elements: ["//div[@id='a-popover-content-1']/div/span[2]/span/span"]
                            }
                          ]
                        },
                        {
                          event: "verifyOk",
                          xpath: "(//div[@id='clickstream_switch']/input[@checked='checked'] | //input[@id='toggleClickstreamSwitch' and @checked='checked'])",
                          rejectGroup: "browsing-disabled",
                          resolveGroup: "disable-browsing-history"
                        }
                      ]
                    },
                    {
                      id: "check-toggle",
                      actions: [
                        {
                          event: "verifyOk",
                          xpath: "(//div[@id='clickstream_switch']/input[@checked='checked'] | //input[@id='toggleClickstreamSwitch' and @checked='checked'])",
                          rejectGroup: "browsing-disabled",
                          resolveGroup: "disable-browsing-history"
                        }
                      ]
                    },
                    {
                      id: "disable-browsing-history",
                      actions: [
                        {
                          event: "aos-tooltip",
                          xpath: "(//div[@id='clickstream_switch']/label/div | //input[@id='toggleClickstreamSwitch']/following-sibling::label/div)",
                          options: {
                            position: "rightBottom"
                          },
                          componentData: {
                            body: "amazon.browsingHistory.tooltip4",
                            step: 4,
                            label: "guides.header.step"
                          },
                          resolveConditions: [
                            {
                              elements: ["(//div[@id='clickstream_switch']/label/div | //input[@id='toggleClickstreamSwitch']/following-sibling::label/div)"]
                            }
                          ]
                        },
                        {
                          event: "aos-notification",
                          options: {
                            position: "rightBottom",
                            className: "z-layer-top"
                          },
                          className: "guide-completed",
                          componentData: {
                            body: "amazon.browsingHistory.tooltip5",
                            label: "aos",
                            button: {
                              text: "guides.button.showMore"
                            },
                            heading: "guides.header.completed"
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-init-guide']"]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "browsing-disabled",
                      actions: [
                        {
                          event: "aos-tooltip",
                          xpath: "(//div[@id='clickstream_switch']/label/div | //input[@id='toggleClickstreamSwitch']/following-sibling::label/div)",
                          options: {
                            position: "rightBottom"
                          },
                          componentData: {
                            body: "amazon.browsingHistory.tooltip6",
                            label: "guides.header.alreadySet",
                            button: {
                              text: "guides.button.showMore"
                            }
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-next-step']"]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "scenario-closed",
                      actions: [
                        {
                          event: "stopScenario"
                        }
                      ]
                    }
                  ]
                }
              ],
              minutes: 2,
              website: "Amazon",
              startUrl: "https://www.amazon.com/gp/history/",
              triggerUrl: "https://www.amazon.com/",
              description: "amazon.browsingHistory.description"
            }
          ],
          Facebook: [
            {
              logo: "https://s-install.avcdn.net/aos/assets/prod/images/guides/Facebook.svg",
              name: "Facebook - Control who can see your Facebook profile",
              hooks: {
                onStop: {
                  actions: [
                    {
                      event: "aos-notification",
                      className: "close-notification",
                      showOverlay: false,
                      componentData: {
                        body: "guides.notification.onStop",
                        label: "aos",
                        button: {
                          text: "guides.button.gotIt",
                          isClose: true
                        }
                      },
                      resolveConditions: [
                        {
                          elements: ["//aside[@class='aos-notification']//button[@class='close-icon']"]
                        }
                      ]
                    }
                  ]
                },
                onFailed: {
                  actions: [
                    {
                      event: "aos-notification",
                      className: "bottom-notification",
                      showOverlay: false,
                      componentData: {
                        body: "guides.notification.onFailed",
                        label: "aos"
                      },
                      resolveConditions: [
                        {
                          elements: ["//aside[@class='aos-notification']//button[@class='close-icon']"]
                        }
                      ]
                    }
                  ]
                }
              },
              pages: [
                {
                  target: {
                    url: "https://www.facebook.com/"
                  },
                  optional: true,
                  groupedActions: [
                    {
                      id: "initial",
                      actions: [
                        {
                          event: "aos-notification",
                          className: "trigger-notification",
                          showOverlay: true,
                          componentData: {
                            body: "facebook.profileVisibility.triggerNotification.body",
                            label: "aos",
                            button: {
                              text: "guides.button.start"
                            },
                            heading: "facebook.profileVisibility.description",
                            minutes: 5
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-init-guide']"]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "scenario-closed",
                      actions: [
                        {
                          event: "stopScenario"
                        }
                      ]
                    }
                  ]
                },
                {
                  target: {
                    url: "https://www.facebook.com/settings",
                    query: ["tab=privacy"]
                  },
                  optional: true,
                  groupedActions: [
                    {
                      id: "initial",
                      actions: [
                        {
                          event: "waitUntilVisible",
                          xpath: "//div[@role='navigation']//a[@href='https://www.facebook.com/settings?tab=privacy']",
                          timeout: 5e3
                        },
                        {
                          event: "aos-tooltip",
                          xpath: "//div[@role='navigation']//a[@href='https://www.facebook.com/settings?tab=privacy']",
                          options: {
                            position: "rightBottom"
                          },
                          componentData: {
                            body: "facebook.profileVisibility.tooltip1",
                            step: 1,
                            label: "guides.header.step",
                            button: {
                              text: "guides.button.next"
                            }
                          },
                          resolveConditions: [
                            {
                              groupId: "future-posts",
                              elements: ["//a[@id='aos-next-step']"]
                            },
                            {
                              groupId: "scenario-closed",
                              elements: [
                                {
                                  xpath: "//a[not(@id='aos-next-step')]",
                                  parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]",
                                  multipleMatch: true
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "future-posts",
                      actions: [
                        {
                          event: "aos-tooltip",
                          xpath: "(//a[@href='/settings?tab=privacy&section=composer']//span[contains(@class, 'fbSettingsListItemEdit')])[2]",
                          parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]",
                          options: {
                            position: "topLeft"
                          },
                          componentData: {
                            body: "facebook.profileVisibility.tooltip2",
                            step: 2,
                            label: "guides.header.step",
                            button: {
                              text: "guides.button.skip",
                              className: "aos-skip-button"
                            }
                          },
                          resolveConditions: [
                            {
                              groupId: "past-posts",
                              elements: ["//a[@id='aos-next-step']"]
                            },
                            {
                              groupId: "future-posts-expanded",
                              elements: [
                                {
                                  xpath: "//a[@href='/settings?tab=privacy&section=composer']",
                                  parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]"
                                }
                              ]
                            },
                            {
                              groupId: "scenario-closed",
                              elements: [
                                {
                                  xpath: "//a[not(@id='aos-next-step')]",
                                  multipleMatch: true
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "future-posts-expanded",
                      actions: [
                        {
                          event: "waitUntilVisible",
                          xpath: "//li[contains(@class, 'fbSettingsListItem')][contains(@class, 'openPanel')]//div[contains(@class, 'uiPopover')]//a",
                          parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]",
                          timeout: 5e3
                        },
                        {
                          event: "aos-tooltip",
                          xpath: "//li[contains(@class, 'fbSettingsListItem')][contains(@class, 'openPanel')]//div[contains(@class, 'uiPopover')]//a",
                          parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]",
                          options: {
                            position: "rightTop"
                          },
                          componentData: {
                            body: "facebook.profileVisibility.tooltip3",
                            step: 3,
                            label: "guides.header.step",
                            button: {
                              text: "guides.button.next"
                            }
                          },
                          resolveConditions: [
                            {
                              groupId: "past-posts",
                              elements: ["//a[@id='aos-next-step']"]
                            },
                            {
                              groupId: "future-posts",
                              elements: [
                                {
                                  xpath: "//li[contains(@class, 'fbSettingsListItem')][contains(@class, 'openPanel')]//a[@href='#'][@aria-expanded='true']",
                                  parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]"
                                }
                              ]
                            },
                            {
                              groupId: "scenario-closed",
                              elements: [
                                {
                                  xpath: "//a[not(@id='aos-next-step')]",
                                  multipleMatch: true
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "past-posts",
                      actions: [
                        {
                          event: "aos-tooltip",
                          xpath: "(//a[@href='/settings?tab=privacy&section=masher']//span[contains(@class, 'fbSettingsListItemEdit')])[2]",
                          parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]",
                          options: {
                            position: "topLeft"
                          },
                          componentData: {
                            body: "facebook.profileVisibility.tooltip4",
                            step: 4,
                            label: "guides.header.step",
                            button: {
                              text: "guides.button.skip",
                              className: "aos-skip-button"
                            }
                          },
                          resolveConditions: [
                            {
                              groupId: "friend-requests",
                              elements: ["//a[@id='aos-next-step']"]
                            },
                            {
                              groupId: "past-posts-expanded",
                              elements: [
                                {
                                  xpath: "//a[@href='/settings?tab=privacy&section=masher']",
                                  parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]"
                                }
                              ]
                            },
                            {
                              groupId: "scenario-closed",
                              elements: [
                                {
                                  xpath: "//a[not(@id='aos-next-step')]",
                                  multipleMatch: true
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "past-posts-expanded",
                      actions: [
                        {
                          event: "waitUntilVisible",
                          xpath: "//a[contains(@href, '/settings/privacy/masher_confirm.php')]",
                          parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]",
                          timeout: 5e3
                        },
                        {
                          event: "aos-tooltip",
                          xpath: "//a[@href='/ajax/settings/privacy/masher_confirm.php']",
                          parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]",
                          options: {
                            position: "bottomLeft"
                          },
                          componentData: {
                            body: "facebook.profileVisibility.tooltip5",
                            step: 5,
                            label: "guides.header.step"
                          },
                          resolveConditions: [
                            {
                              elements: [
                                {
                                  xpath: "//a[@href='/ajax/settings/privacy/masher_confirm.php']",
                                  parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]"
                                }
                              ]
                            },
                            {
                              groupId: "past-posts",
                              elements: [
                                {
                                  xpath: "//li[contains(@class, 'fbSettingsListItem')][contains(@class, 'openPanel')]//a[@href='#'][@aria-expanded='true']",
                                  parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]"
                                }
                              ]
                            },
                            {
                              groupId: "scenario-closed",
                              elements: [
                                {
                                  xpath: "//a[not(@href='/ajax/settings/privacy/masher_confirm.php')]",
                                  multipleMatch: true
                                }
                              ]
                            }
                          ]
                        },
                        {
                          event: "waitUntilVisible",
                          xpath: "//div[@id='pop_content']//input[@type='button'][@name='yes']",
                          parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]",
                          timeout: 5e3
                        },
                        {
                          event: "aos-tooltip",
                          xpath: "//div[@id='pop_content']//input[@type='button'][@name='yes']",
                          parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]",
                          options: {
                            position: "bottomLeft"
                          },
                          componentData: {
                            body: "facebook.profileVisibility.tooltip6",
                            step: 6,
                            label: "guides.header.step"
                          },
                          resolveConditions: [
                            {
                              elements: [
                                {
                                  xpath: "//div[@id='pop_content']//input[@type='button'][@name='yes']",
                                  parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]"
                                }
                              ]
                            },
                            {
                              groupId: "scenario-closed",
                              elements: [
                                {
                                  xpath: "//button[not(@name='yes')]",
                                  parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]",
                                  multipleMatch: true
                                }
                              ]
                            }
                          ]
                        },
                        {
                          event: "waitUntilVisible",
                          xpath: "//div[@id='pop_content']//label[contains(@class, 'uiButtonConfirm')]//input[@type='button'][@name='cancel']",
                          parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]",
                          timeout: 5e3
                        },
                        {
                          event: "aos-tooltip",
                          xpath: "//div[@id='pop_content']//label[contains(@class, 'uiButtonConfirm')]//input[@type='button'][@name='cancel']",
                          parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]",
                          options: {
                            position: "bottomLeft"
                          },
                          componentData: {
                            body: "facebook.profileVisibility.tooltip7",
                            step: 7,
                            label: "guides.header.step"
                          },
                          resolveConditions: [
                            {
                              groupId: "friend-requests",
                              elements: [
                                {
                                  xpath: "//div[@id='pop_content']//input[@type='button'][@name='cancel']",
                                  parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "friend-requests",
                      actions: [
                        {
                          event: "aos-tooltip",
                          xpath: "(//a[@href='/settings?tab=privacy&section=canfriend']//span[contains(@class, 'fbSettingsListItemEdit')])[2]",
                          parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]",
                          options: {
                            position: "topLeft"
                          },
                          componentData: {
                            body: "facebook.profileVisibility.tooltip8",
                            step: 8,
                            label: "guides.header.step",
                            button: {
                              text: "guides.button.next"
                            }
                          },
                          resolveConditions: [
                            {
                              groupId: "done",
                              elements: ["//a[@id='aos-next-step']"]
                            },
                            {
                              groupId: "friend-requests-expanded",
                              elements: [
                                {
                                  xpath: "//a[@href='/settings?tab=privacy&section=canfriend']",
                                  parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]"
                                }
                              ]
                            },
                            {
                              groupId: "scenario-closed",
                              elements: [
                                {
                                  xpath: "//a[not(@id='aos-next-step')]",
                                  multipleMatch: true
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "friend-requests-expanded",
                      actions: [
                        {
                          event: "waitUntilVisible",
                          xpath: "//li[contains(@class, 'fbSettingsListItem')][contains(@class, 'openPanel')]//a[@href='#'][@aria-expanded='true']",
                          parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]",
                          timeout: 5e3
                        },
                        {
                          event: "aos-tooltip",
                          xpath: "//li[contains(@class, 'fbSettingsListItem')][contains(@class, 'openPanel')]//a[@href='#'][@aria-expanded='true']",
                          parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]",
                          options: {
                            position: "topLeft",
                            className: "fb-body-vertical-correction"
                          },
                          componentData: {
                            body: "facebook.profileVisibility.tooltip8",
                            step: 9,
                            label: "guides.header.step",
                            button: {
                              text: "guides.button.next"
                            }
                          },
                          resolveConditions: [
                            {
                              groupId: "done",
                              elements: ["//a[@id='aos-next-step']"]
                            },
                            {
                              groupId: "friend-requests",
                              elements: [
                                {
                                  xpath: "//li[contains(@class, 'fbSettingsListItem')][contains(@class, 'openPanel')]//a[@href='#'][@aria-expanded='true']",
                                  parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]"
                                }
                              ]
                            },
                            {
                              groupId: "scenario-closed",
                              elements: [
                                {
                                  xpath: "//a[not(@id='aos-next-step')]",
                                  multipleMatch: true
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "done",
                      actions: [
                        {
                          event: "aos-notification",
                          xpath: "(//a[@href='/settings?tab=privacy&section=canfriend']//span[contains(@class, 'fbSettingsListItemEdit')])[2]",
                          parent: "//iframe[starts-with(@src, 'https://www.facebook.com/settings')]",
                          className: "guide-completed",
                          showOverlay: false,
                          componentData: {
                            body: "facebook.profileVisibility.tooltip9",
                            label: "aos",
                            button: {
                              text: "guides.button.showMore"
                            },
                            heading: "guides.header.completed"
                          },
                          resolveConditions: [
                            {
                              elements: ["//a[@id='aos-init-guide']"]
                            },
                            {
                              groupId: "scenario-closed",
                              elements: [
                                {
                                  xpath: "//a[not(@id='aos-next-step')]",
                                  multipleMatch: true
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      id: "scenario-closed",
                      actions: [
                        {
                          event: "stopScenario"
                        }
                      ]
                    }
                  ]
                }
              ],
              minutes: 5,
              website: "Facebook",
              startUrl: "https://www.facebook.com/settings?tab=privacy",
              triggerUrl: "https://www.facebook.com/",
              description: "facebook.profileVisibility.description"
            }
          ]
        }
      },
      advertisers: {
        scenarios: [
          {
            link: "https://optout.33across.com/",
            logo: "https://s-install.avcdn.net/aos/assets/prod/images/optout/33Across.svg",
            name: "33Across",
            scenario: {
              actions: {
                "/": []
              },
              metadata: {
                start_url: "https://optout.33across.com/api/?cmd=optout",
                isDoNotWaitForResponse: true
              }
            },
            description: "advertisers.33across.description"
          },
          {
            link: "https://site.adform.com/privacy-center/platform-privacy/opt-out",
            logo: "https://s-install.avcdn.net/aos/assets/prod/images/optout/Adform.svg",
            name: "Adform",
            scenario: {
              actions: {
                "/privacy-center/platform-privacy/opt-out/": [
                  {
                    event: "waitUntilVisible",
                    xpath: "//input[@id='justWaitALittleDarling']",
                    timeout: 5e3
                  },
                  {
                    event: "quitifnotexists",
                    xpath: "//div[contains(@class, 'block-bucket')]//button"
                  },
                  {
                    event: "click",
                    xpath: "//div[contains(@class, 'block-bucket')]//button",
                    timeout: 2e3
                  },
                  {
                    event: "verifyok",
                    xpath: "//div[contains(@class, 'block-bucket')]//img[contains(@src,'Success.gif')]",
                    timeout: 5e3
                  }
                ]
              },
              metadata: {
                start_url: "https://site.adform.com/privacy-center/platform-privacy/opt-out/"
              }
            },
            description: "advertisers.adform.description"
          },
          {
            link: "https://www.amazon.com/adprefs/",
            logo: "https://s-install.avcdn.net/aos/assets/prod/images/optout/Amazon.svg",
            name: "Amazon",
            scenario: {
              actions: {
                "/adprefs": [
                  {
                    event: "waitUntilVisible",
                    xpath: "//input[@id='justWaitALittleDarling']",
                    timeout: 2e3
                  },
                  {
                    event: "waitUntilVisible",
                    xpath: "//span[@id='optOutControl']//input[@type='submit']",
                    timeout: 5e3
                  },
                  {
                    event: "quitok",
                    xpath: "//input[@id='optout' and @checked]"
                  },
                  {
                    event: "click",
                    xpath: "//input[@id='optout']"
                  },
                  {
                    event: "clickAndQuit",
                    xpath: "//span[@id='optOutControl']"
                  }
                ]
              },
              metadata: {
                start_url: "https://www.amazon.com/adprefs"
              }
            },
            description: "advertisers.amazon.description"
          },
          {
            link: "https://optout.liveramp.com/opt_out_cookies",
            logo: "https://s-install.avcdn.net/aos/assets/prod/images/optout/Liveramp.svg",
            name: "LiveRamp",
            scenario: {
              actions: {
                "/opt_out_cookies": [
                  {
                    event: "waitUntilVisible",
                    xpath: "//form[@id='opt-out']/input[contains(@type, 'submit') and contains(@style, 'display: none;')]",
                    timeout: 3e3
                  },
                  {
                    event: "quitok",
                    xpath: "//form[@id='opt-out']/input[contains(@type, 'submit') and contains(@style, 'display: none;')]"
                  },
                  {
                    event: "clickAndQuit",
                    xpath: "//form[@id='opt-out']/input[contains(@type, 'submit')]"
                  }
                ]
              },
              metadata: {
                start_url: "https://optout.liveramp.com/opt_out_cookies"
              }
            },
            description: "advertisers.liveramp.description"
          },
          {
            link: "https://privacy.tapad.com/optout.html",
            logo: "https://s-install.avcdn.net/aos/assets/prod/images/optout/Tapad.svg",
            name: "Tapad",
            scenario: {
              actions: {
                "/optout.html": [
                  {
                    event: "waitUntilVisible",
                    xpath: "//div[@id='opted_out_pane' and contains(@class, 'u-show')]//div[contains(@class, 'alert--success')]",
                    timeout: 5e3
                  },
                  {
                    event: "quitok",
                    xpath: "//div[@id='opted_out_pane' and contains(@class, 'u-show')]//div[contains(@class, 'alert--success')]"
                  },
                  {
                    event: "clickAndQuit",
                    xpath: "//button[@id='optout_action']"
                  }
                ]
              },
              metadata: {
                start_url: "https://privacy.tapad.com/optout.html"
              }
            },
            description: "advertisers.tapad.description"
          },
          {
            link: "https://platform.xandr.com/privacy-center/opt_out",
            logo: "https://s-install.avcdn.net/aos/assets/prod/images/optout/Xandr.svg",
            name: "Xandr",
            scenario: {
              actions: {
                "/privacy-center/opt_out": [
                  {
                    event: "waitUntilVisible",
                    xpath: "//div[@id='opt-in-form'] and contains(@style, 'display: block;')]",
                    timeout: 5e3
                  },
                  {
                    event: "quitok",
                    xpath: "//div[@id='opt-in-form'] and contains(@style, 'display: block;')]"
                  },
                  {
                    event: "clickAndQuit",
                    xpath: "//button[@id='opt-out-button']"
                  }
                ]
              },
              metadata: {
                start_url: "https://platform.xandr.com/privacy-center/opt_out"
              }
            },
            description: "advertisers.xandr.description"
          },
          {
            link: "https://artsai.com/privacy/",
            logo: "https://s-install.avcdn.net/aos/assets/prod/images/optout/Artsai.svg",
            name: "Artsai",
            scenario: {
              actions: {
                "/privacy/": [
                  {
                    event: "waitUntilVisible",
                    xpath: "//input[@id='justWaitALittleDarling']",
                    timeout: 5e3
                  },
                  {
                    event: "quitok",
                    xpath: "//th[@id='optoutstatus' and contains(@class, 'opted-out')]"
                  },
                  {
                    event: "click",
                    xpath: "//a[contains(@onclick, 'gaOptout(event);')]"
                  },
                  {
                    event: "verifyok",
                    xpath: "//th[@id='optoutstatus' and contains(@class, 'opted-out')]",
                    timeout: 2e3
                  }
                ]
              },
              metadata: {
                start_url: "https://artsai.com/privacy/"
              }
            },
            description: "advertisers.artsai.description"
          },
          {
            link: "https://apolloprogram.io/optout?opt=1",
            logo: "https://s-install.avcdn.net/aos/assets/prod/images/optout/Apollo.svg",
            name: "Apollo program",
            scenario: {
              actions: {
                "/optout-confirmation": []
              },
              metadata: {
                start_url: "https://apolloprogram.io/optout?opt=1",
                isDoNotWaitForResponse: true
              }
            },
            description: "advertisers.apolloprogram.description"
          },
          {
            link: "https://adara.com/opt-out/",
            logo: "https://s-install.avcdn.net/aos/assets/prod/images/optout/Adara.svg",
            name: "Adara",
            scenario: {
              actions: {
                "/opt-out/": [
                  {
                    event: "waitUntilVisible",
                    xpath: "//button[contains(@class, 'waitALittle')]",
                    timeout: 5e3
                  },
                  {
                    event: "clickAndQuit",
                    xpath: "//input[@id='opt-button']"
                  }
                ]
              },
              metadata: {
                start_url: "https://adara.com/opt-out/"
              }
            },
            description: "advertisers.adara.description"
          },
          {
            link: "https://www.criteo.com/privacy/disable-criteo-services-on-internet-browsers/",
            logo: "https://s-install.avcdn.net/aos/assets/prod/images/optout/Criteo.svg",
            name: "Criteo",
            scenario: {
              actions: {
                "/privacy/disable-criteo-services-on-internet-browsers/": [
                  {
                    event: "waitUntilVisible",
                    xpath: "//button[contains(@class, 'waitALittle')]",
                    timeout: 2e3
                  },
                  {
                    event: "click",
                    xpath: "(//a[contains(@class, 'opt-out')])[1]"
                  },
                  {
                    event: "waitUntilVisible",
                    xpath: "//div[@id='success' and contains(@class, 'modal') and contains(@class, 'show')]",
                    timeout: 1e4
                  },
                  {
                    event: "verifyok",
                    xpath: "//body"
                  }
                ]
              },
              metadata: {
                start_url: "https://www.criteo.com/privacy/disable-criteo-services-on-internet-browsers/"
              }
            },
            description: "advertisers.criteo.description"
          },
          {
            link: "https://datacloudoptout.oracle.com/optout",
            logo: "https://s-install.avcdn.net/aos/assets/prod/images/optout/Oracle.svg",
            name: "Oracle Advertising",
            scenario: {
              actions: {
                "/optout": [
                  {
                    event: "waitUntilVisible",
                    xpath: "//a[@id='opt-out-btn']/div[contains(@class, 'btn-success')]",
                    timeout: 5e3
                  },
                  {
                    event: "quitok",
                    xpath: "//a[@id='opt-out-btn']/div[contains(@class, 'btn-success')]"
                  },
                  {
                    event: "clickAndQuit",
                    xpath: "//a[@id='opt-out-btn']/div"
                  }
                ]
              },
              metadata: {
                start_url: "https://datacloudoptout.oracle.com/optout"
              }
            },
            description: "advertisers.oracle.description"
          },
          {
            link: "https://account.microsoft.com/privacy/ad-settings/",
            logo: "https://s-install.avcdn.net/aos/assets/prod/images/optout/Microsoft.svg",
            name: "Microsoft",
            scenario: {
              actions: {
                "/privacy/ad-settings/": [
                  {
                    event: "waitUntilVisible",
                    xpath: "//button[@id='ad-settings-toggle'][@aria-checked='true']",
                    timeout: 6e3
                  },
                  {
                    event: "quitok",
                    xpath: "//button[@id='ad-settings-toggle'][@aria-checked='false']"
                  },
                  {
                    event: "click",
                    xpath: "//button[@id='ad-settings-toggle'][@aria-checked='true']"
                  },
                  {
                    event: "waitUntilVisible",
                    xpath: "//button[contains(@class, 'waitALittle')]",
                    timeout: 5e3
                  },
                  {
                    event: "verifyok",
                    xpath: "//button[@id='ad-settings-toggle'][@aria-checked='false']"
                  }
                ],
                "/privacy/ad-settings/signedout": [
                  {
                    event: "waitUntilVisible",
                    xpath: "//button[@id='ad-settings-toggle'][@aria-checked='true']",
                    timeout: 1e4
                  },
                  {
                    event: "quitok",
                    xpath: "//button[@id='ad-settings-toggle'][@aria-checked='false']"
                  },
                  {
                    event: "click",
                    xpath: "//button[@id='ad-settings-toggle'][@aria-checked='true']"
                  },
                  {
                    event: "waitUntilVisible",
                    xpath: "//button[contains(@class, 'waitALittle')]",
                    timeout: 5e3
                  },
                  {
                    event: "verifyok",
                    xpath: "//button[@id='ad-settings-toggle'][@aria-checked='false']"
                  }
                ]
              },
              metadata: {
                start_url: "https://account.microsoft.com/privacy/ad-settings/"
              }
            },
            description: "advertisers.microsoft.description"
          }
        ]
      },
      featureToggles: {
        privacyAdvisor: "enabled",
        cookieConsent: "enabled",
        globalPrivacyControl: "enabled",
        antiTrack: "enabled",
        searchResults: "enabled",
        compNotification: "enabled"
      },
      surveys: {
        uninstall: {
          "en-US": "https://forms.gle/6YKqCysJ8DNG8qDw6"
        }
      },
      burger: {
        heartbeat: {
          isHbOn: true,
          checkInHours: 1,
          intervalInHours: 8
        }
      }
    },
    ttl: "31536000"
  };

  // src/background/shepherd/development/GetShepherdData.ts
  var shepherdData = __spreadProps(__spreadValues({}, RawData_default.shepherd), { expireTime: parseInt(RawData_default.ttl) });

  // src/background/shepherd/loader/ShepherdLoader.ts
  var ShepherdLoader = class extends Loader {
    constructor() {
      super(...arguments);
      this.config = instance.resolve("Config" /* CONFIG */);
      this.client = instance.resolve("Client" /* CLIENT */);
      this.url = this.config.shepherd.test;
    }
    get headers() {
      return void 0;
    }
    handleResponse(response) {
      return __async(this, null, function* () {
        this.resolve({ data: shepherdData, ttl: String(shepherdData.expireTime) });
      });
    }
    handleRequest() {
      return __async(this, null, function* () {
        try {
          yield this.onCompleted(null);
        } catch (e) {
        }
      });
    }
    get queryParams() {
      const clientData = this.client.getData();
      const guid = clientData.identifiers.localAppGUID || clientData.extensionGUID;
      const version = clientData.version;
      const [majorVersion, minorVersion, patchVersion] = version.split(".");
      const params = {
        "p_pro": this.config.shepherd.id.toString(),
        "p_vep": majorVersion,
        "p_ves": minorVersion,
        "p_vbd": patchVersion
      };
      if (guid)
        params["p_hid"] = guid;
      return new URLSearchParams(params);
    }
  };

  // src/core/command/RetryFailedCommand.ts
  var RetryFailedCommand = class extends Command {
    execute() {
      return __async(this, null, function* () {
        this.triedTimes = 0;
        return yield this.executeCommand();
      });
    }
    executeCommand() {
      return __async(this, null, function* () {
        this.triedTimes++;
        try {
          return yield this.runAttempt();
        } catch (e) {
          if (this.triedTimes >= this.repeatTimesLimit)
            return this.onFailed();
          return yield this.executeCommand();
        }
      });
    }
  };

  // src/background/shepherd/command/GetShepherdDataQuery.ts
  var GetShepherdDataQuery = class extends RetryFailedCommand {
    constructor(repeatTimesLimit = 3) {
      super();
      this.repeatTimesLimit = repeatTimesLimit;
    }
    runAttempt() {
      return __async(this, null, function* () {
        const response = yield new ShepherdLoader().send();
        return this.formatResponse(response);
      });
    }
    onFailed() {
      return Promise.reject(new GetShepherdDataError());
    }
    formatResponse(response) {
      return __spreadProps(__spreadValues({}, response.data), {
        expireTime: this.parseExpireTime(response.ttl)
      });
    }
    parseExpireTime(ttl) {
      if (!isNaN(ttl))
        return Date.now() + parseInt(ttl) * 1e3;
      const expireTime = instance.resolve("Config" /* CONFIG */).shepherd.defaultRefreshDelay;
      return Date.now() + expireTime;
    }
  };

  // src/background/shepherd/data/ShepherdFallbackData.ts
  var ShepherdFallbackData = {
    advertisers: void 0,
    burger: void 0,
    cookieConsent: void 0,
    featureToggles: {
      ["cookieConsent" /* COOKIE_CONSENT */]: "disabled" /* DISABLED */,
      ["privacyAdvisor" /* PRIVACY_ADVISOR */]: "disabled" /* DISABLED */,
      ["globalPrivacyControl" /* GLOBAL_PRIVACY_CONTROL */]: "disabled" /* DISABLED */,
      ["maliciousPage" /* MALICIOUS_PAGE */]: "disabled" /* DISABLED */,
      ["antiTrack" /* ANTI_TRACK */]: "disabled" /* DISABLED */,
      ["searchResults" /* SEARCH_RESULTS */]: "disabled" /* DISABLED */,
      ["advertisers" /* ADVERTISER */]: "disabled" /* DISABLED */,
      ["compNotification" /* COMPLIANCE */]: "disabled" /* DISABLED */,
      ["PostInstallHandler" /* POST_INSTALL_HANDLER */]: "disabled" /* DISABLED */
    },
    privacyAdvisor: void 0,
    searchResults: [],
    surveys: void 0
  };

  // src/background/shepherd/command/GetInitialShepherdDataQuery.ts
  var GetInitialShepherdDataQuery = class extends Command {
    constructor() {
      super(...arguments);
      this.config = instance.resolve("Config" /* CONFIG */);
    }
    execute() {
      return __async(this, null, function* () {
        const storageData = yield this.getStorageData();
        let fetchedData;
        if (this.shouldRefreshData(storageData))
          fetchedData = yield this.fetchShepherdData();
        if (!fetchedData && !storageData)
          return this.handleFallbackData();
        return fetchedData != null ? fetchedData : this.updateExpireTimeData(storageData);
      });
    }
    getStorageData() {
      return __async(this, null, function* () {
        try {
          return yield new GetStorageDataQuery("shepherd" /* SHEPHERD */).execute();
        } catch (e) {
          return void 0;
        }
      });
    }
    fetchShepherdData() {
      return __async(this, null, function* () {
        try {
          return yield new GetShepherdDataQuery().execute();
        } catch (e) {
          return void 0;
        }
      });
    }
    handleFallbackData() {
      return this.updateExpireTimeData(ShepherdFallbackData);
    }
    shouldRefreshData(data) {
      if (!data || !Object.keys(data).length)
        return true;
      const expireTime = data.expireTime || 0;
      return expireTime <= Date.now();
    }
    updateExpireTimeData(data, expireTime = this.config.shepherd.failRefreshDelay) {
      return __spreadProps(__spreadValues({}, data), { expireTime: Date.now() + this.config.shepherd.failRefreshDelay });
    }
  };

  // src/utils/DecodeUtil.ts
  var BASE64_REGEX = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$/;
  var SHA256_REGEX = /[A-Fa-f0-9]{64}/;
  var DecodeUtil = class {
    static encodeBase64(value) {
      return btoa(value);
    }
    static decodeBase64(value) {
      return DecodeUtil.isBase64Encoded(value) ? atob(value) : value;
    }
    static isBase64Encoded(value) {
      return !!(value && !SHA256_REGEX.test(value) && BASE64_REGEX.test(value));
    }
    static getRandomString() {
      return Math.random().toString(36).substring(2);
    }
  };

  // src/background/timer/error/TimestampTimerError.ts
  var TimestampTimerError = class {
    constructor() {
      this.name = "TimerError";
      this.message = "Timestamp is older than the current time.";
    }
  };

  // src/background/timer/Timer.ts
  var Timer = class {
    constructor(callback, name = void 0) {
      this.callback = callback;
      this.onAlarm = (alarm) => __async(this, null, function* () {
        if (alarm.name !== this.name)
          return Promise.resolve();
        yield this.callback();
        yield this.dispose();
      });
      this.name = name ? name : DecodeUtil.getRandomString();
    }
    start(timestamp) {
      return __async(this, null, function* () {
        const alarmInstance = yield chrome.alarms.get(this.name);
        if (alarmInstance) {
          return Promise.resolve();
        }
        if (Date.now() >= timestamp)
          return Promise.reject(new TimestampTimerError());
        chrome.alarms.create(this.name, { when: timestamp });
        chrome.alarms.onAlarm.addListener(this.onAlarm);
        return Promise.resolve();
      });
    }
    dispose() {
      return __async(this, null, function* () {
        yield chrome.alarms.clear(this.name);
        chrome.alarms.onAlarm.removeListener(this.onAlarm);
      });
    }
  };

  // src/modules/base/CoreModule.ts
  var CoreModule = class {
    constructor() {
    }
    init() {
      return __async(this, null, function* () {
        return Promise.resolve();
      });
    }
    static buildModule() {
      return __async(this, null, function* () {
        const module2 = new CoreModule();
        yield module2.init();
        return module2;
      });
    }
  };

  // src/background/shepherd/observable/ShepherdObservable.ts
  var ShepherdObservable = class extends Observable {
    notifyObserver(observer, data) {
      observer.callback(data[observer.key]);
    }
  };

  // src/background/shepherd/Shepherd.ts
  var Shepherd = class extends CoreModule {
    constructor() {
      super();
      this.storageObserver = new StorageObserver("shepherd" /* SHEPHERD */, this.storageChanged.bind(this));
      this.refreshObserver = new MessageObserver("shepherd.refresh" /* REFRESH */, this.refreshData.bind(this));
      this.config = instance.resolve("Config" /* CONFIG */);
      this.observable = new ShepherdObservable();
    }
    init() {
      return __async(this, null, function* () {
        this.data = yield new GetInitialShepherdDataQuery().execute();
        yield new SetStorageDataCommand("shepherd" /* SHEPHERD */, this.data).execute();
        yield this.startRefreshTimer();
        this.storageObserver.subscribe();
        this.refreshObserver.subscribe();
        return Promise.resolve();
      });
    }
    getData() {
      return this.data;
    }
    static buildModule() {
      return __async(this, null, function* () {
        const shepherd = new Shepherd();
        yield shepherd.init();
        return shepherd;
      });
    }
    storageChanged(data) {
      if (!data || !Object.keys(data).length)
        return;
      this.data = data;
      this.observable.notify(this.data);
    }
    refreshData() {
      return __async(this, null, function* () {
        try {
          const data = yield new GetShepherdDataQuery().execute();
          yield new SetStorageDataCommand("shepherd" /* SHEPHERD */, data).execute();
          yield this.timer.start(data.expireTime);
          this.data = data;
        } catch (e) {
          yield this.timer.start(Date.now() + this.config.shepherd.failRefreshDelay);
        }
      });
    }
    startRefreshTimer() {
      return __async(this, null, function* () {
        this.timer = new Timer(this.refreshData.bind(this), "ShepherdAlarm");
        yield this.timer.start(this.data.expireTime);
      });
    }
  };

  // src/modules/advisor/background/command/InitiatePrivacyAdvisorDataCommand.ts
  var InitiatePrivacyAdvisorDataCommand = class extends Command {
    execute() {
      return __async(this, null, function* () {
        const shepherd = this.getShepherdData();
        const state = yield this.handleStorageData();
        return Promise.resolve(__spreadValues(__spreadValues({}, shepherd.privacyAdvisor), state));
      });
    }
    getShepherdData() {
      return instance.resolve("Shepherd" /* SHEPHERD */).getData();
    }
    handleStorageData() {
      return __async(this, null, function* () {
        const storageData = yield new GetStorageDataQuery("privacyAdvisor" /* PRIVACY_ADVISOR */, "sync" /* SYNC */).execute();
        if (storageData && Object.keys(storageData).length)
          return Promise.resolve(storageData);
        const defaultState = instance.resolve("Config" /* CONFIG */).privacyAdvisor.defaultState;
        yield new SetStorageDataCommand("privacyAdvisor" /* PRIVACY_ADVISOR */, defaultState, "sync" /* SYNC */).execute();
        return Promise.resolve(defaultState);
      });
    }
  };

  // src/core/observable/observer/BulkObserver.ts
  var BulkObserver = class {
    constructor(observers) {
      this.observers = observers;
    }
    subscribe() {
      this.observers.forEach((observer) => observer.subscribe());
    }
    unsubscribe() {
      this.observers.forEach((observer) => observer.unsubscribe());
    }
  };

  // src/modules/advisor/background/model/PrivacyAdvisorModel.ts
  var PrivacyAdvisorModel = class {
    constructor(feature) {
      this.feature = feature;
    }
    init() {
      return __async(this, null, function* () {
        this.data = yield new InitiatePrivacyAdvisorDataCommand().execute();
        const privacyAdvisorNotificationState = yield new GetStorageDataQuery("privacyAdvisorNotification" /* SET_PRIVACY_ADVISOR_NOTIFICATION */).execute();
        this.data.triggerNotification = privacyAdvisorNotificationState ? privacyAdvisorNotificationState.enabled : true;
        this.observer = new BulkObserver([
          new ShepherdObserver(this.onShepherdUpdated.bind(this), "privacyAdvisor"),
          new BackgroundStorageObserver("privacyAdvisor" /* PRIVACY_ADVISOR */, this.onStorageUpdated.bind(this), "sync" /* SYNC */),
          new BackgroundStorageObserver("privacyAdvisorNotification" /* SET_PRIVACY_ADVISOR_NOTIFICATION */, this.onSettingsStorageUpdated.bind(this), "local" /* LOCAL */),
          new MessageObserver("advisor.model.get" /* GET_MODEL */, this.onGetModel.bind(this)),
          new MessageObserver("advisor.set.notification" /* SET_ADVISOR_NOTIFICATION */, this.onSetAdvisorNotification.bind(this))
        ]);
        this.observer.subscribe();
      });
    }
    getData() {
      return this.data;
    }
    dispose() {
      var _a;
      (_a = this.observer) == null ? void 0 : _a.unsubscribe();
      this.observer = void 0;
      this.data = void 0;
      this.feature = void 0;
    }
    updateData(data) {
      const prevData = __spreadValues({}, this.data);
      this.data = data;
      this.feature.onDataChanged(this.data, prevData);
    }
    onShepherdUpdated(data) {
      this.updateData(__spreadValues(__spreadValues({}, this.data), data));
    }
    onStorageUpdated(data) {
      this.updateData(__spreadValues(__spreadValues({}, this.data), data));
    }
    onGetModel(body, sendResponse, sender) {
      sendResponse(this.getData());
    }
    onSettingsStorageUpdated(state) {
      this.updateData(__spreadValues(__spreadValues({}, this.data), { triggerNotification: state.enabled }));
    }
    onSetAdvisorNotification(enabled) {
      return __async(this, null, function* () {
        yield new SetStorageDataCommand("privacyAdvisorNotification" /* SET_PRIVACY_ADVISOR_NOTIFICATION */, { enabled }).execute();
      });
    }
  };

  // src/background/tabs/observable/observer/TabObserver.ts
  var TabObserver = class extends Observer {
    constructor(type, callback) {
      super(callback, instance.resolve("TabsObservable" /* TABS_OBSERVABLE */));
      this.type = type;
      this.callback = callback;
      this.tabs = instance.resolve("TabsObservable" /* TABS_OBSERVABLE */);
    }
    subscribe() {
      this.tabs.subscribe(this);
    }
    unsubscribe() {
      this.tabs.unsubscribe(this);
    }
  };

  // src/modules/advisor/background/command/AdvisorUnseenNotificationsQuery.ts
  var AdvisorUnseenNotificationsQuery = class extends Command {
    constructor(seenGuides, scenarios) {
      super();
      this.seenGuides = seenGuides;
      this.scenarios = scenarios;
      this.notifications = [];
    }
    execute() {
      if (!this.scenarios)
        return [];
      this.notifications = [];
      Object.keys(this.scenarios).forEach((key) => this.processScenarios(key));
      return this.notifications;
    }
    processScenarios(category) {
      this.scenarios[category].forEach((scenario) => {
        if (!this.seenGuides.includes(scenario.name))
          this.pushNotificationData(scenario, category);
      });
    }
    pushNotificationData(scenario, category) {
      this.notifications.push({ name: scenario.name, category, triggerUrl: scenario.triggerUrl });
    }
  };

  // src/modules/advisor/util/AdvisorUtil.ts
  var AdvisorUtil = class {
    static getScenario(scenarios, scenarioName, category) {
      return this.findScenario(scenarios[category], scenarioName);
    }
    static getScenarioByName(scenarios, scenarioName) {
      for (const key of Object.keys(scenarios)) {
        const scenario = this.findScenario(scenarios[key], scenarioName);
        if (scenario)
          return scenario;
      }
      return void 0;
    }
    static findScenario(scenarios, scenarioName) {
      if (!scenarios || !scenarios.length)
        return void 0;
      return scenarios.find((scenario) => scenario.name === scenarioName);
    }
    static isRegex(string) {
      return string.length > 0 && string[0] === "/";
    }
    static testRegex(regex, string) {
      const re = new RegExp(regex.slice(1));
      return re.test(string);
    }
    static pathnameMatches(currentUrl, url) {
      return typeof url === "string" && AdvisorUtil.isRegex(url) ? AdvisorUtil.testRegex(url, currentUrl) : currentUrl.includes(url);
    }
  };

  // node_modules/@avast/scenarios-runner/lib/index.es.js
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  function __extends2(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  }
  var __assign2 = function() {
    __assign2 = Object.assign || function __assign3(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
      }
      return t;
    };
    return __assign2.apply(this, arguments);
  };
  function __awaiter2(thisArg, _arguments, P, generator) {
    function adopt(value) {
      return value instanceof P ? value : new P(function(resolve) {
        resolve(value);
      });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
      function fulfilled(value) {
        try {
          step(generator.next(value));
        } catch (e) {
          reject(e);
        }
      }
      function rejected(value) {
        try {
          step(generator["throw"](value));
        } catch (e) {
          reject(e);
        }
      }
      function step(result) {
        result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
      }
      step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
  }
  function __generator2(thisArg, body) {
    var _ = { label: 0, sent: function() {
      if (t[0] & 1)
        throw t[1];
      return t[1];
    }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
      return this;
    }), g;
    function verb(n) {
      return function(v) {
        return step([n, v]);
      };
    }
    function step(op) {
      if (f)
        throw new TypeError("Generator is already executing.");
      while (_)
        try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
            return t;
          if (y = 0, t)
            op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2])
                _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
      if (op[0] & 5)
        throw op[1];
      return { value: op[0] ? op[1] : void 0, done: true };
    }
  }
  function __values2(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m)
      return m.call(o);
    if (o && typeof o.length === "number")
      return {
        next: function() {
          if (o && i >= o.length)
            o = void 0;
          return { value: o && o[i++], done: !o };
        }
      };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
  }
  function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2)
      for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
          if (!ar)
            ar = Array.prototype.slice.call(from, 0, i);
          ar[i] = from[i];
        }
      }
    return to.concat(ar || Array.prototype.slice.call(from));
  }
  function __asyncValues2(o) {
    if (!Symbol.asyncIterator)
      throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
      return this;
    }, i);
    function verb(n) {
      i[n] = o[n] && function(v) {
        return new Promise(function(resolve, reject) {
          v = o[n](v), settle(resolve, reject, v.done, v.value);
        });
      };
    }
    function settle(resolve, reject, d, v) {
      Promise.resolve(v).then(function(v2) {
        resolve({ value: v2, done: d });
      }, reject);
    }
  }
  var PrivacyScenarioKeys;
  (function(PrivacyScenarioKeys2) {
    PrivacyScenarioKeys2["name"] = "name";
    PrivacyScenarioKeys2["pages"] = "pages";
  })(PrivacyScenarioKeys || (PrivacyScenarioKeys = {}));
  var PrivacyPageKeys;
  (function(PrivacyPageKeys2) {
    PrivacyPageKeys2["target"] = "target";
    PrivacyPageKeys2["actions"] = "actions";
    PrivacyPageKeys2["groupedActions"] = "groupedActions";
    PrivacyPageKeys2["hooks"] = "hooks";
  })(PrivacyPageKeys || (PrivacyPageKeys = {}));
  var HandledError = function(_super) {
    __extends2(HandledError2, _super);
    function HandledError2() {
      var _newTarget = this.constructor;
      var _this = _super.call(this) || this;
      _this.name = _newTarget.name;
      _this.message = "Unexpected error occurred.";
      Object.setPrototypeOf(_this, _newTarget.prototype);
      return _this;
    }
    Object.defineProperty(HandledError2.prototype, "errorDetails", {
      get: function() {
        return void 0;
      },
      enumerable: false,
      configurable: true
    });
    return HandledError2;
  }(Error);
  var ParseActionsFormatError = function(_super) {
    __extends2(ParseActionsFormatError2, _super);
    function ParseActionsFormatError2() {
      var _this = _super.call(this) || this;
      _this.message = 'Unable to parse the page - "actions" or "groupedActions" field is either missing or the value is not valid.';
      return _this;
    }
    return ParseActionsFormatError2;
  }(HandledError);
  var ParserInvalidActionsError = function(_super) {
    __extends2(ParserInvalidActionsError2, _super);
    function ParserInvalidActionsError2(invalidActions) {
      var _this = _super.call(this) || this;
      _this.invalidActions = invalidActions;
      _this.message = 'Unable to parse following page actions: "'.concat(invalidActions.join(", "), '".');
      return _this;
    }
    return ParserInvalidActionsError2;
  }(HandledError);
  var ParserInvalidHooksError = function(_super) {
    __extends2(ParserInvalidHooksError2, _super);
    function ParserInvalidHooksError2(invalidHooks) {
      var _this = _super.call(this) || this;
      _this.invalidHooks = invalidHooks;
      _this.message = 'Unable to parse following page actions: "'.concat(invalidHooks.join(", "), '".');
      return _this;
    }
    return ParserInvalidHooksError2;
  }(HandledError);
  var ParserInvalidPageTargetError = function(_super) {
    __extends2(ParserInvalidPageTargetError2, _super);
    function ParserInvalidPageTargetError2() {
      var _this = _super.call(this) || this;
      _this.message = 'Unable to parse the page - "target" field is either missing or the value is not valid.';
      return _this;
    }
    return ParserInvalidPageTargetError2;
  }(HandledError);
  var HookType;
  (function(HookType2) {
    HookType2["onSuccess"] = "onSuccess";
    HookType2["onStop"] = "onStop";
    HookType2["onDisposed"] = "onDisposed";
    HookType2["onFailed"] = "onFailed";
  })(HookType || (HookType = {}));
  var ActionEvents;
  (function(ActionEvents2) {
    ActionEvents2["bulkClick"] = "bulkClick";
    ActionEvents2["clickOneOf"] = "clickOneOf";
    ActionEvents2["click"] = "click";
    ActionEvents2["clickWhenVisible"] = "clickWhenVisible";
    ActionEvents2["executeScript"] = "executeScript";
    ActionEvents2["injectStyles"] = "injectStyles";
    ActionEvents2["notification"] = "notification";
    ActionEvents2["scroll"] = "scroll";
    ActionEvents2["stopScenario"] = "stopScenario";
    ActionEvents2["tooltip"] = "tooltip";
    ActionEvents2["unknown"] = "unknown";
    ActionEvents2["verifyOk"] = "verifyOk";
    ActionEvents2["waitUntilVisible"] = "waitUntilVisible";
    ActionEvents2["waitUntilOneVisible"] = "waitUntilOneVisible";
    ActionEvents2["delay"] = "delay";
  })(ActionEvents || (ActionEvents = {}));
  var ActionExecutionError = function(_super) {
    __extends2(ActionExecutionError2, _super);
    function ActionExecutionError2(event, failReason) {
      var _this = _super.call(this) || this;
      _this.event = event;
      _this.failReason = failReason;
      _this.message = 'Action "'.concat(_this.event, '" execution failed.');
      return _this;
    }
    Object.defineProperty(ActionExecutionError2.prototype, "errorDetails", {
      get: function() {
        return [{
          key: this.event,
          description: this.failReason.message,
          failReason: this.failReason
        }];
      },
      enumerable: false,
      configurable: true
    });
    return ActionExecutionError2;
  }(HandledError);
  var ActionResult = function() {
    function ActionResult2(resolution, nextGroup) {
      this.resolution = resolution;
      this.nextGroup = nextGroup;
    }
    return ActionResult2;
  }();
  var ParserError = function(_super) {
    __extends2(ParserError2, _super);
    function ParserError2(scenarioName, invalidValues) {
      var _this = _super.call(this) || this;
      _this.scenarioName = scenarioName;
      _this.invalidValues = invalidValues;
      _this.message = "Parsing the ".concat(scenarioName, ' failed - "').concat(_this.getInvalidKeysString(), '" entries are invalid.');
      return _this;
    }
    Object.defineProperty(ParserError2.prototype, "errorDetails", {
      get: function() {
        return this.invalidValues;
      },
      enumerable: false,
      configurable: true
    });
    ParserError2.prototype.getInvalidKeysString = function() {
      return this.invalidValues.map(function(value) {
        return value.key;
      }).join(", ");
    };
    return ParserError2;
  }(HandledError);
  var ScenarioResult = function() {
    function ScenarioResult2(scenarioName, resolution, stack, error) {
      this.scenarioName = scenarioName;
      this.resolution = resolution;
      this.stack = stack;
      this.error = error;
    }
    ScenarioResult2.buildFailedResult = function(scenario, error, executionStack) {
      return new ScenarioResult2(this.resolveScenarioName(scenario, error), Resolution.failed, executionStack, this.getScenarioError(error));
    };
    ScenarioResult2.resolveScenarioName = function(scenario, error) {
      if (error instanceof ParserError)
        return error.scenarioName;
      return (scenario === null || scenario === void 0 ? void 0 : scenario.name) ? scenario.name : "Unknown";
    };
    ScenarioResult2.getScenarioError = function(error) {
      return {
        name: error.name,
        message: error.message,
        details: error.errorDetails
      };
    };
    return ScenarioResult2;
  }();
  var Resolution;
  (function(Resolution2) {
    Resolution2["failed"] = "failed";
    Resolution2["succeeded"] = "succeeded";
    Resolution2["stopped"] = "stopped";
    Resolution2["terminated"] = "terminated";
  })(Resolution || (Resolution = {}));
  var ActionBase = function() {
    function ActionBase2() {
    }
    ActionBase2.prototype.dispose = function() {
      for (var key in this)
        if (this.hasOwnProperty(key))
          delete this[key];
    };
    ActionBase2.prototype.getEvent = function() {
      return this.constructor.event;
    };
    ActionBase2.prototype.handleSuccess = function(resolution, nextGroup) {
      if (resolution === void 0) {
        resolution = Resolution.succeeded;
      }
      return Promise.resolve(new ActionResult(resolution, nextGroup));
    };
    ActionBase2.prototype.handleFail = function(event, failReason) {
      return Promise.reject(new ActionExecutionError(event, failReason));
    };
    return ActionBase2;
  }();
  var ElementNotFoundError = function(_super) {
    __extends2(ElementNotFoundError2, _super);
    function ElementNotFoundError2(xpath, parent) {
      if (parent === void 0) {
        parent = document;
      }
      var _this = _super.call(this) || this;
      _this.message = `Couldn't find "`.concat(xpath, '" element in "').concat(parent.nodeName, '" parent.');
      return _this;
    }
    return ElementNotFoundError2;
  }(HandledError);
  var MultipleElementsError = function(_super) {
    __extends2(MultipleElementsError2, _super);
    function MultipleElementsError2(xpath, parent) {
      if (parent === void 0) {
        parent = document;
      }
      var _this = _super.call(this) || this;
      _this.message = "Multiple elements matches ".concat(xpath, " selector in ").concat(parent.nodeName, " parent.");
      return _this;
    }
    return MultipleElementsError2;
  }(HandledError);
  var XPathUtil = function() {
    function XPathUtil2() {
    }
    XPathUtil2.getSingleElementByXPath = function(xpath, parent) {
      var elements = XPathUtil2.getAllElementsByXpath(xpath, parent);
      if (elements.length > 1)
        throw new MultipleElementsError(xpath, parent);
      return elements.shift();
    };
    XPathUtil2.getAllElementsByXpath = function(xpath, parent) {
      var elements = [];
      var parentDocument = XPathUtil2.getNodeDocument(parent);
      var query = parentDocument.evaluate(xpath, parentDocument, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);
      var element = query.iterateNext();
      while (element) {
        elements.push(element);
        element = query.iterateNext();
      }
      if (elements.length === 0)
        throw new ElementNotFoundError(xpath, parentDocument);
      return elements;
    };
    XPathUtil2.isIFrame = function(node) {
      return node instanceof HTMLIFrameElement;
    };
    XPathUtil2.getNodeDocument = function(node) {
      if (!node)
        return document;
      return this.isIFrame(node) ? node.contentWindow.document : document;
    };
    return XPathUtil2;
  }();
  var NodeActionBase = function(_super) {
    __extends2(NodeActionBase2, _super);
    function NodeActionBase2(xpath, parent) {
      var _this = _super.call(this) || this;
      _this.xpath = xpath;
      _this.parent = parent;
      return _this;
    }
    NodeActionBase2.prototype.getNode = function(xpath, parent) {
      var parentNode = parent ? this.getNode(parent) : void 0;
      return XPathUtil.getSingleElementByXPath(xpath, parentNode);
    };
    return NodeActionBase2;
  }(ActionBase);
  var ClickAction = function(_super) {
    __extends2(ClickAction2, _super);
    function ClickAction2(xpath, parent) {
      return _super.call(this, xpath, parent) || this;
    }
    ClickAction2.prototype.execute = function() {
      return __awaiter2(this, void 0, void 0, function() {
        var element;
        return __generator2(this, function(_a) {
          try {
            element = this.getNode(this.xpath, this.parent);
            this.invokeClick(element);
            return [2, this.handleSuccess()];
          } catch (error) {
            return [2, this.handleFail(ClickAction2.event, error)];
          }
          return [2];
        });
      });
    };
    ClickAction2.prototype.invokeClick = function(element) {
      element.click();
    };
    ClickAction2.event = ActionEvents.click;
    return ClickAction2;
  }(NodeActionBase);
  var ActionTimeoutError = function(_super) {
    __extends2(ActionTimeoutError2, _super);
    function ActionTimeoutError2(xpath, timeout) {
      var _this = _super.call(this) || this;
      _this.message = `Couldn't find "`.concat(xpath, '" element within ').concat(timeout, "ms.");
      return _this;
    }
    return ActionTimeoutError2;
  }(HandledError);
  var DomObserverBase = function() {
    function DomObserverBase2(timeout, parent, interval) {
      if (interval === void 0) {
        interval = 500;
      }
      this.timeout = timeout;
      this.parent = parent;
      this.interval = interval;
    }
    Object.defineProperty(DomObserverBase2.prototype, "isTimedOut", {
      get: function() {
        return !this.timeoutTime || Date.now() > this.timeoutTime;
      },
      enumerable: false,
      configurable: true
    });
    DomObserverBase2.prototype.onElementVisible = function() {
      return __awaiter2(this, void 0, void 0, function() {
        var promise;
        var _this = this;
        return __generator2(this, function(_a) {
          promise = new Promise(function(resolve, reject) {
            _this.promiseResolve = resolve;
            _this.promiseReject = reject;
          });
          this.timeoutTime = Date.now() + this.timeout;
          this.createTimeout();
          return [2, promise];
        });
      });
    };
    DomObserverBase2.prototype.dispose = function() {
      var _this = this;
      clearTimeout(this.timeoutInstance);
      Object.keys(this).forEach(function(key) {
        return delete _this[key];
      });
    };
    DomObserverBase2.prototype.createTimeout = function() {
      var _this = this;
      this.timeoutInstance = window.setTimeout(function() {
        return _this.onTimeout();
      }, this.interval);
    };
    DomObserverBase2.prototype.onTimeout = function() {
      var _a, _b, _c;
      try {
        return (_a = this.promiseResolve) === null || _a === void 0 ? void 0 : _a.call(this, this.getTargetElement());
      } catch (error) {
        if (!(error instanceof ElementNotFoundError))
          return (_b = this.promiseReject) === null || _b === void 0 ? void 0 : _b.call(this, error);
        if (this.isTimedOut)
          return (_c = this.promiseReject) === null || _c === void 0 ? void 0 : _c.call(this, this.getActionTimeoutError());
      }
      this.createTimeout();
    };
    DomObserverBase2.prototype.getNode = function(xpath, parent) {
      return xpath ? XPathUtil.getSingleElementByXPath(xpath, parent) : void 0;
    };
    return DomObserverBase2;
  }();
  var SingleDomObserver = function(_super) {
    __extends2(SingleDomObserver2, _super);
    function SingleDomObserver2(xpath, timeout, parent, interval) {
      if (interval === void 0) {
        interval = 500;
      }
      var _this = _super.call(this, timeout, parent, interval) || this;
      _this.xpath = xpath;
      _this.parent = parent;
      _this.interval = interval;
      return _this;
    }
    SingleDomObserver2.prototype.getTargetElement = function() {
      var parentNode = this.getNode(this.parent);
      return this.getNode(this.xpath, parentNode);
    };
    SingleDomObserver2.prototype.getActionTimeoutError = function() {
      return new ActionTimeoutError(this.xpath, this.timeout);
    };
    return SingleDomObserver2;
  }(DomObserverBase);
  var ClickWhenVisibleAction = function(_super) {
    __extends2(ClickWhenVisibleAction2, _super);
    function ClickWhenVisibleAction2(xpath, timeout, parent) {
      var _this = _super.call(this, xpath, parent) || this;
      _this.timeout = timeout;
      return _this;
    }
    ClickWhenVisibleAction2.prototype.execute = function() {
      return __awaiter2(this, void 0, void 0, function() {
        var element, error_1;
        return __generator2(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 3]);
              this.domObserver = new SingleDomObserver(this.xpath, this.timeout, this.parent);
              return [4, this.domObserver.onElementVisible()];
            case 1:
              element = _a.sent();
              this.invokeClick(element);
              return [2, this.handleSuccess()];
            case 2:
              error_1 = _a.sent();
              return [2, this.handleFail(ActionEvents.clickWhenVisible, error_1)];
            case 3:
              return [2];
          }
        });
      });
    };
    ClickWhenVisibleAction2.prototype.dispose = function() {
      var _a;
      (_a = this.domObserver) === null || _a === void 0 ? void 0 : _a.dispose();
      _super.prototype.dispose.call(this);
    };
    ClickWhenVisibleAction2.event = ActionEvents.clickWhenVisible;
    return ClickWhenVisibleAction2;
  }(ClickAction);
  var ParseActionError = function(_super) {
    __extends2(ParseActionError2, _super);
    function ParseActionError2(event) {
      var _this = _super.call(this) || this;
      _this.event = event;
      _this.message = 'Unable to parse the "'.concat(event, '" action.');
      return _this;
    }
    return ParseActionError2;
  }(HandledError);
  var Validator = function() {
    function Validator2() {
    }
    Validator2.isObjectWithKeys = function(object) {
      return !!object && !this.isNumber(object) && !this.isString(object) && !this.isArray(object) && this.notEmptyObjectKeys(object);
    };
    Validator2.isNumber = function(number) {
      return typeof number === "number";
    };
    Validator2.nonEmptyString = function(string) {
      return this.isString(string) && string.length > 0;
    };
    Validator2.isString = function(string) {
      return typeof string === "string";
    };
    Validator2.isEmptyArray = function(array) {
      return this.isArray(array) && array.length === 0;
    };
    Validator2.nonEmptyArray = function(array) {
      return this.isArray(array) && !!array.length;
    };
    Validator2.isArray = function(array) {
      return Array.isArray(array);
    };
    Validator2.isQueryString = function(query) {
      if (!this.nonEmptyString(query))
        return false;
      var querySplit = query.split("=");
      if (querySplit.length !== 2)
        return false;
      for (var _i = 0, querySplit_1 = querySplit; _i < querySplit_1.length; _i++) {
        var value = querySplit_1[_i];
        if (!this.nonEmptyString(value))
          return false;
      }
      return true;
    };
    Validator2.isValidUrl = function(url) {
      try {
        new URL(url);
        return true;
      } catch (_a) {
        return false;
      }
    };
    Validator2.isRegex = function(regex) {
      return this.nonEmptyString(regex) && regex[0] === "/";
    };
    Validator2.isEnumValue = function(value, enumType) {
      return !!(enumType === null || enumType === void 0 ? void 0 : enumType[value]);
    };
    Validator2.notEmptyObjectKeys = function(object) {
      return Object.keys(object).length > 0;
    };
    Validator2.isBoolean = function(value) {
      return typeof value === "boolean";
    };
    return Validator2;
  }();
  var GenericActionParserBase = function() {
    function GenericActionParserBase2() {
    }
    GenericActionParserBase2.prototype.validateXpath = function(xpath) {
      return Validator.nonEmptyString(xpath);
    };
    GenericActionParserBase2.prototype.validateTimeout = function(timeout) {
      return Validator.isNumber(timeout);
    };
    GenericActionParserBase2.prototype.validateUrl = function(url) {
      return Validator.isValidUrl(url);
    };
    GenericActionParserBase2.prototype.validateClassName = function(className) {
      return Validator.nonEmptyString(className);
    };
    GenericActionParserBase2.prototype.validatePosition = function(position) {
      return Validator.nonEmptyString(position);
    };
    GenericActionParserBase2.prototype.throwParseError = function(event) {
      throw new ParseActionError(event);
    };
    return GenericActionParserBase2;
  }();
  var ClickWhenVisibleActionParser = function(_super) {
    __extends2(ClickWhenVisibleActionParser2, _super);
    function ClickWhenVisibleActionParser2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ClickWhenVisibleActionParser2.prototype.parse = function(action) {
      if (!this.validateXpath(action.xpath) || !this.validateTimeout(action.timeout))
        this.throwParseError(ClickWhenVisibleAction.event);
      return new ClickWhenVisibleAction(action.xpath, action.timeout, action.parent);
    };
    return ClickWhenVisibleActionParser2;
  }(GenericActionParserBase);
  var DelayAction = function(_super) {
    __extends2(DelayAction2, _super);
    function DelayAction2(timeout) {
      var _this = _super.call(this) || this;
      _this.timeout = timeout;
      _this.timer = void 0;
      return _this;
    }
    DelayAction2.prototype.execute = function() {
      return __awaiter2(this, void 0, void 0, function() {
        var _this = this;
        return __generator2(this, function(_a) {
          return [2, new Promise(function(resolve) {
            _this.timer = window.setTimeout(function() {
              return resolve(_this.handleSuccess(Resolution.succeeded));
            }, _this.timeout);
          })];
        });
      });
    };
    DelayAction2.prototype.disposeTimer = function() {
      if (!this.timer)
        return;
      clearTimeout(this.timer);
      this.timer = void 0;
    };
    DelayAction2.prototype.dispose = function() {
      this.disposeTimer();
      _super.prototype.dispose.call(this);
    };
    DelayAction2.event = ActionEvents.delay;
    return DelayAction2;
  }(ActionBase);
  var DelayActionParser = function(_super) {
    __extends2(DelayActionParser2, _super);
    function DelayActionParser2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    DelayActionParser2.prototype.parse = function(action) {
      if (!this.validateTimeout(action.timeout))
        this.throwParseError(DelayAction.event);
      return new DelayAction(action.timeout);
    };
    return DelayActionParser2;
  }(GenericActionParserBase);
  var ExecuteScriptAction = function(_super) {
    __extends2(ExecuteScriptAction2, _super);
    function ExecuteScriptAction2(executionMethod) {
      var _this = _super.call(this) || this;
      _this.executionMethod = executionMethod;
      return _this;
    }
    ExecuteScriptAction2.prototype.execute = function() {
      return __awaiter2(this, void 0, void 0, function() {
        return __generator2(this, function(_a) {
          try {
            this.executionMethod();
            return [2, this.handleSuccess()];
          } catch (error) {
            return [2, this.handleFail(ActionEvents.executeScript, error)];
          }
          return [2];
        });
      });
    };
    ExecuteScriptAction2.event = ActionEvents.executeScript;
    return ExecuteScriptAction2;
  }(ActionBase);
  var ExecuteScriptActionParser = function(_super) {
    __extends2(ExecuteScriptActionParser2, _super);
    function ExecuteScriptActionParser2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ExecuteScriptActionParser2.prototype.parse = function(action) {
      try {
        var parsedMethod = this.parseExecutionMethod(action.script);
        return new ExecuteScriptAction(parsedMethod);
      } catch (error) {
        this.throwParseError(ExecuteScriptAction.event);
      }
    };
    ExecuteScriptActionParser2.prototype.parseExecutionMethod = function(script) {
      if (!this.validateScript(script))
        throw new Error();
      return Function(script);
    };
    ExecuteScriptActionParser2.prototype.validateScript = function(script) {
      return Validator.nonEmptyString(script);
    };
    return ExecuteScriptActionParser2;
  }(GenericActionParserBase);
  var InjectStylesAction = function(_super) {
    __extends2(InjectStylesAction2, _super);
    function InjectStylesAction2(stylesheetUrl) {
      var _this = _super.call(this) || this;
      _this.stylesheetUrl = stylesheetUrl;
      return _this;
    }
    InjectStylesAction2.prototype.dispose = function() {
      for (var key in this)
        if (this.hasOwnProperty(key))
          delete this[key];
    };
    InjectStylesAction2.prototype.execute = function() {
      try {
        this.injectStyles();
        return this.handleSuccess();
      } catch (error) {
        return this.handleFail(InjectStylesAction2.event, error);
      }
    };
    InjectStylesAction2.prototype.injectStyles = function() {
      var stylesheet = document.createElement("link");
      stylesheet.href = this.stylesheetUrl;
      stylesheet.type = "text/css";
      stylesheet.rel = "stylesheet";
      document.getElementsByTagName("head")[0].appendChild(stylesheet);
    };
    InjectStylesAction2.event = ActionEvents.injectStyles;
    return InjectStylesAction2;
  }(ActionBase);
  var InjectStylesActionParser = function(_super) {
    __extends2(InjectStylesActionParser2, _super);
    function InjectStylesActionParser2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    InjectStylesActionParser2.prototype.parse = function(action) {
      if (!this.validateUrl(action.stylesheetUrl))
        this.throwParseError(InjectStylesAction.event);
      return new InjectStylesAction(action.stylesheetUrl);
    };
    return InjectStylesActionParser2;
  }(GenericActionParserBase);
  var ComponentActionParserBase = function(_super) {
    __extends2(ComponentActionParserBase2, _super);
    function ComponentActionParserBase2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ComponentActionParserBase2.prototype.parseResolveConditions = function(conditions) {
      var _this = this;
      return conditions.map(function(condition) {
        var resolveCondition = { elements: _this.parseElements(condition.elements) };
        var groupId = _this.parseGroupId(condition);
        if (groupId)
          resolveCondition.groupId = condition.groupId;
        return resolveCondition;
      });
    };
    ComponentActionParserBase2.prototype.parseElements = function(elements) {
      var _this = this;
      return elements.map(function(el) {
        return typeof el === "string" ? _this.parseStringNodeComponent(el) : _this.parseObjectNodeComponent(el);
      });
    };
    ComponentActionParserBase2.prototype.parseStringNodeComponent = function(element) {
      if (!Validator.nonEmptyString(element))
        throw new Error();
      return { xpath: element, multipleMatch: false };
    };
    ComponentActionParserBase2.prototype.parseObjectNodeComponent = function(element) {
      var multipleMatch = element.hasOwnProperty("multipleMatch") ? element.multipleMatch : false;
      if (!this.validateElementWithParent(element) || !this.validateMultipleMatchFlag(multipleMatch))
        throw new Error();
      return __assign2(__assign2({}, element), { multipleMatch });
    };
    ComponentActionParserBase2.prototype.validateElementWithParent = function(element) {
      return Validator.nonEmptyString(element.xpath) && (!element.hasOwnProperty("parent") || Validator.nonEmptyString(element.parent));
    };
    ComponentActionParserBase2.prototype.validateMultipleMatchFlag = function(multipleMatch) {
      return Validator.isBoolean(multipleMatch);
    };
    ComponentActionParserBase2.prototype.parseGroupId = function(condition) {
      if (!condition.hasOwnProperty("groupId"))
        return void 0;
      if (!Validator.nonEmptyString(condition.groupId))
        throw Error();
      return condition.groupId;
    };
    ComponentActionParserBase2.prototype.validateHtmlContent = function(htmlContent) {
      return Validator.nonEmptyString(htmlContent);
    };
    return ComponentActionParserBase2;
  }(GenericActionParserBase);
  var EventEmitter = function() {
    function EventEmitter2() {
      this.events = {};
    }
    EventEmitter2.prototype.addListener = function(event, listener) {
      var _this = this;
      if (!this.events[event])
        this.events[event] = [];
      this.events[event].push(listener);
      return function() {
        return _this.removeListener(event, listener);
      };
    };
    EventEmitter2.prototype.removeListener = function(event, listener) {
      if (!this.events[event])
        return;
      var idx = this.events[event].indexOf(listener);
      if (idx > -1)
        this.events[event].splice(idx, 1);
    };
    EventEmitter2.prototype.removeAllListeners = function() {
      var _this = this;
      Object.keys(this.events).forEach(function(event) {
        return _this.events[event] = [];
      });
    };
    EventEmitter2.prototype.emit = function(event) {
      var _this = this;
      var args = [];
      for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
      }
      if (!this.events[event])
        return;
      __spreadArray([], this.events[event], true).forEach(function(listener) {
        return listener.apply(_this, args);
      });
    };
    EventEmitter2.prototype.once = function(event, listener) {
      var _this = this;
      var remove = this.addListener(event, function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        remove();
        listener.apply(_this, args);
      });
      return remove;
    };
    return EventEmitter2;
  }();
  var eventEmitter = new EventEmitter();
  var ScenarioEvent;
  (function(ScenarioEvent2) {
    ScenarioEvent2["onBeforeLastAction"] = "scenario.onBeforeLastAction";
    ScenarioEvent2["onError"] = "scenario.onError";
  })(ScenarioEvent || (ScenarioEvent = {}));
  var TrackEvent;
  (function(TrackEvent2) {
    TrackEvent2["TooltipResolved"] = "track.tooltipResolved";
    TrackEvent2["TooltipClosed"] = "track.tooltipClosed";
    TrackEvent2["NotificationResolved"] = "track.notificationResolved";
    TrackEvent2["NotificationClosed"] = "track.notificationClosed";
  })(TrackEvent || (TrackEvent = {}));
  var GroupId;
  (function(GroupId2) {
    GroupId2["ScenarioClosed"] = "scenario-closed";
    GroupId2["ScenarioRevoked"] = "scenario-revoked";
  })(GroupId || (GroupId = {}));
  var ComponentConditionsError = function(_super) {
    __extends2(ComponentConditionsError2, _super);
    function ComponentConditionsError2(element, failReason) {
      var _this = _super.call(this) || this;
      _this.element = element;
      _this.failReason = failReason;
      _this.message = "Resolve Condition Failed: ".concat(_this.failReason.message);
      return _this;
    }
    Object.defineProperty(ComponentConditionsError2.prototype, "errorDetails", {
      get: function() {
        var _a;
        return [{
          key: "".concat(this.element.xpath, " ").concat((_a = this.element.parent) !== null && _a !== void 0 ? _a : ""),
          description: this.failReason.message,
          failReason: this.failReason
        }];
      },
      enumerable: false,
      configurable: true
    });
    return ComponentConditionsError2;
  }(HandledError);
  var ComponentDuplicateElementError = function(_super) {
    __extends2(ComponentDuplicateElementError2, _super);
    function ComponentDuplicateElementError2(uniqueId) {
      var _this = _super.call(this) || this;
      _this.uniqueId = uniqueId;
      _this.message = "Element is not unique: ".concat(_this.uniqueId, " id already exists in DOM.");
      return _this;
    }
    return ComponentDuplicateElementError2;
  }(HandledError);
  var UniqueId = function() {
    function UniqueId2() {
    }
    UniqueId2.generate = function() {
      return Math.random().toString(36).substr(2, 9);
    };
    return UniqueId2;
  }();
  var ComponentBase = function() {
    function ComponentBase2(content) {
      this.content = content;
      this.domListeners = [];
      this.uniqueId = UniqueId.generate();
    }
    ComponentBase2.prototype.renderComponent = function(resolveConditions, onResolve, onError) {
      try {
        this.onResolve = onResolve;
        this.render();
        this.registerConditionListeners(resolveConditions);
      } catch (error) {
        onError(error);
      }
    };
    ComponentBase2.prototype.dispose = function() {
      var _a;
      this.removeDomListeners();
      (_a = this.element) === null || _a === void 0 ? void 0 : _a.remove();
      for (var key in this)
        if (this.hasOwnProperty(key))
          delete this[key];
    };
    ComponentBase2.prototype.render = function() {
      if (document.getElementById(this.uniqueId))
        throw new ComponentDuplicateElementError(this.uniqueId);
      this.element = this.buildElement();
      this.appendComponentElement();
    };
    ComponentBase2.prototype.appendComponentElement = function() {
      document.body.appendChild(this.element);
    };
    ComponentBase2.prototype.registerConditionListeners = function(resolveConditions) {
      var _this = this;
      resolveConditions.forEach(function(condition) {
        var elements = _this.getConditionElements(condition.elements);
        elements.forEach(function(element) {
          return _this.addDomListener(element, "click", function() {
            return _this.onResolve(condition);
          });
        });
      });
    };
    ComponentBase2.prototype.getConditionElements = function(components) {
      var _this = this;
      var elements = [];
      components.forEach(function(component) {
        try {
          elements = elements.concat(_this.getElement(component));
        } catch (error) {
          throw new ComponentConditionsError(component, error);
        }
      });
      return elements;
    };
    ComponentBase2.prototype.getElement = function(component) {
      var resolveElementsMethod = component.multipleMatch ? XPathUtil.getAllElementsByXpath : XPathUtil.getSingleElementByXPath;
      return resolveElementsMethod(component.xpath, this.getParentNode(component.parent));
    };
    ComponentBase2.prototype.getParentNode = function(parent) {
      return parent ? XPathUtil.getSingleElementByXPath(parent) : void 0;
    };
    ComponentBase2.prototype.addDomListener = function(target, type, callback) {
      this.domListeners.push({ target, type, callback });
      target.addEventListener(type, callback);
    };
    ComponentBase2.prototype.removeDomListeners = function() {
      this.domListeners.forEach(function(listener) {
        return listener.target.removeEventListener(listener.type, listener.callback);
      });
    };
    return ComponentBase2;
  }();
  var NotificationComponent = function(_super) {
    __extends2(NotificationComponent2, _super);
    function NotificationComponent2(content, className) {
      var _this = _super.call(this, content) || this;
      _this.content = content;
      _this.className = className;
      return _this;
    }
    NotificationComponent2.prototype.buildElement = function() {
      var notification = document.createElement("div");
      notification.id = this.uniqueId;
      notification.className = this.className;
      notification.innerHTML = this.content;
      return notification;
    };
    return NotificationComponent2;
  }(ComponentBase);
  var RenderComponentActionBase = function(_super) {
    __extends2(RenderComponentActionBase2, _super);
    function RenderComponentActionBase2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.resolveConditions = [];
      _this.resolve = function() {
        return void 0;
      };
      _this.reject = function() {
        return void 0;
      };
      return _this;
    }
    RenderComponentActionBase2.prototype.execute = function() {
      var _this = this;
      return new Promise(function(resolve, reject) {
        _this.resolve = resolve;
        _this.reject = reject;
        _this.setComponent();
      });
    };
    RenderComponentActionBase2.prototype.dispose = function() {
      this.disposeComponent();
      _super.prototype.dispose.call(this);
    };
    RenderComponentActionBase2.prototype.getResolveConditionsGroupIds = function() {
      return this.resolveConditions.map(function(condition) {
        return condition.groupId;
      });
    };
    RenderComponentActionBase2.prototype.disposeComponent = function() {
      var _a;
      (_a = this.component) === null || _a === void 0 ? void 0 : _a.dispose();
      this.component = void 0;
    };
    RenderComponentActionBase2.prototype.setComponent = function() {
      var _this = this;
      this.component = this.buildComponent();
      this.component.renderComponent(this.resolveConditions, function(condition) {
        return _this.onResolve(condition);
      }, function(error) {
        return _this.reject(error);
      });
    };
    RenderComponentActionBase2.prototype.onResolve = function(condition) {
      this.disposeComponent();
      this.resolve(new ActionResult(Resolution.succeeded, condition.groupId));
    };
    return RenderComponentActionBase2;
  }(NodeActionBase);
  var NotificationAction = function(_super) {
    __extends2(NotificationAction2, _super);
    function NotificationAction2(content, className, resolveConditions, trackableContent) {
      var _this = _super.call(this, "", className) || this;
      _this.content = content;
      _this.className = className;
      _this.resolveConditions = resolveConditions;
      _this.trackableContent = trackableContent;
      return _this;
    }
    NotificationAction2.prototype.onResolve = function(condition) {
      eventEmitter.emit(this.getTrackEventFromCondition(condition), { content: this.trackableContent });
      _super.prototype.onResolve.call(this, condition);
    };
    NotificationAction2.prototype.getTrackEventFromCondition = function(condition) {
      if (condition.groupId === GroupId.ScenarioClosed)
        return TrackEvent.NotificationClosed;
      return TrackEvent.NotificationResolved;
    };
    NotificationAction2.prototype.buildComponent = function() {
      return new NotificationComponent(this.content, this.className);
    };
    NotificationAction2.event = ActionEvents.notification;
    return NotificationAction2;
  }(RenderComponentActionBase);
  var NotificationActionParser = function(_super) {
    __extends2(NotificationActionParser2, _super);
    function NotificationActionParser2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    NotificationActionParser2.prototype.parse = function(action) {
      if (!this.validateNotificationData(action))
        this.throwParseError(action.event);
      return this.getParsedNotificationAction(action);
    };
    NotificationActionParser2.prototype.validateNotificationData = function(action) {
      return this.validateHtmlContent(action.htmlContent) && this.validateActionClassName(action);
    };
    NotificationActionParser2.prototype.getParsedNotificationAction = function(action) {
      try {
        var htmlContent = action.htmlContent, className = action.className, resolveConditions = action.resolveConditions;
        var parsedConditions = this.parseResolveConditions(resolveConditions);
        return new NotificationAction(htmlContent, className !== null && className !== void 0 ? className : "", parsedConditions);
      } catch (e) {
        this.throwParseError(action.event);
      }
    };
    NotificationActionParser2.prototype.validateActionClassName = function(action) {
      return !action.hasOwnProperty("className") || this.validateClassName(action["className"]);
    };
    return NotificationActionParser2;
  }(ComponentActionParserBase);
  var ScrollAction = function(_super) {
    __extends2(ScrollAction2, _super);
    function ScrollAction2(xpath, timeout, scrollToOptions, parent) {
      var _this = _super.call(this, xpath, parent) || this;
      _this.timeout = timeout;
      _this.scrollToOptions = scrollToOptions;
      _this.domObserver = new SingleDomObserver(xpath, timeout, parent);
      return _this;
    }
    ScrollAction2.prototype.execute = function() {
      return __awaiter2(this, void 0, void 0, function() {
        var element, scrollOptions, error_1;
        return __generator2(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 3]);
              this.domObserver = new SingleDomObserver(this.xpath, this.timeout, this.parent);
              return [4, this.domObserver.onElementVisible()];
            case 1:
              element = _a.sent();
              scrollOptions = this.scrollToOptions ? this.scrollToOptions : { left: element.scrollWidth, top: element.scrollHeight };
              element.scrollBy(scrollOptions);
              return [2, this.handleSuccess()];
            case 2:
              error_1 = _a.sent();
              return [2, this.handleFail(ActionEvents.scroll, error_1)];
            case 3:
              return [2];
          }
        });
      });
    };
    ScrollAction2.event = ActionEvents.scroll;
    return ScrollAction2;
  }(NodeActionBase);
  var ScrollActionParser = function(_super) {
    __extends2(ScrollActionParser2, _super);
    function ScrollActionParser2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ScrollActionParser2.prototype.parse = function(action) {
      if (!this.validateXpath(action.xpath) || !this.validateTimeout(action.timeout) || !this.validateScrollToOptionsGrouped(action))
        this.throwParseError(ScrollAction.event);
      return new ScrollAction(action.xpath, action.timeout, action.scrollToOptions, action.parent);
    };
    ScrollActionParser2.prototype.validateScrollToOptionsGrouped = function(action) {
      return !action.hasOwnProperty("scrollToOptions") || this.validateScrollToOptions(action.scrollToOptions);
    };
    ScrollActionParser2.prototype.validateScrollToOptions = function(value) {
      var scrollToOptions = value;
      return Validator.isObjectWithKeys(value) && Validator.isNumber(scrollToOptions.left) && Validator.isNumber(scrollToOptions.top);
    };
    return ScrollActionParser2;
  }(GenericActionParserBase);
  var TooltipPosition;
  (function(TooltipPosition2) {
    TooltipPosition2["topLeft"] = "topLeft";
    TooltipPosition2["topRight"] = "topRight";
    TooltipPosition2["bottomLeft"] = "bottomLeft";
    TooltipPosition2["bottomRight"] = "bottomRight";
    TooltipPosition2["leftTop"] = "leftTop";
    TooltipPosition2["leftBottom"] = "leftBottom";
    TooltipPosition2["rightTop"] = "rightTop";
    TooltipPosition2["rightBottom"] = "rightBottom";
  })(TooltipPosition || (TooltipPosition = {}));
  var debounce = function(func, delay2) {
    var inDebounce;
    var debouncedFunction = function() {
      var _this = this;
      var args = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
      }
      clearTimeout(inDebounce);
      inDebounce = setTimeout(function() {
        return func.apply(_this, args);
      }, delay2);
    };
    debouncedFunction.cancel = function() {
      clearTimeout(inDebounce);
    };
    return debouncedFunction;
  };
  var DEBOUNCE_RESIZE_WAIT_TIME = 100;
  var DEFAULT_BOUNDING_RECT = { x: 0, y: 0 };
  var TooltipComponent = function(_super) {
    __extends2(TooltipComponent2, _super);
    function TooltipComponent2(targetNode, targetParent, content, options) {
      var _this = _super.call(this, content) || this;
      _this.targetNode = targetNode;
      _this.targetParent = targetParent;
      _this.content = content;
      _this.options = options;
      _this.debouncedSetPosition = debounce(_this.setPosition.bind(_this), DEBOUNCE_RESIZE_WAIT_TIME);
      return _this;
    }
    TooltipComponent2.prototype.render = function() {
      _super.prototype.render.call(this);
      this.registerPositionListeners();
      this.setPosition();
    };
    TooltipComponent2.prototype.dispose = function() {
      var _a;
      (_a = this.debouncedSetPosition) === null || _a === void 0 ? void 0 : _a.cancel();
      _super.prototype.dispose.call(this);
    };
    TooltipComponent2.prototype.buildElement = function() {
      var tooltip = document.createElement("div");
      tooltip.id = this.uniqueId;
      tooltip.className = "".concat(this.options.className, " position-").concat(this.options.position);
      tooltip.innerHTML = this.content;
      return tooltip;
    };
    TooltipComponent2.prototype.registerPositionListeners = function() {
      var _this = this;
      this.addDomListener(window, "resize", function() {
        return _this.debouncedSetPosition();
      });
      this.addDomListener(this.resolveScrollElement(), "scroll", function() {
        return _this.setPosition();
      });
    };
    Object.defineProperty(TooltipComponent2.prototype, "isParentIFrame", {
      get: function() {
        return XPathUtil.isIFrame(this.targetParent);
      },
      enumerable: false,
      configurable: true
    });
    TooltipComponent2.prototype.resolveScrollElement = function() {
      var _a;
      if (this.isParentIFrame)
        return this.targetNode.ownerDocument;
      return (_a = this.targetParent) !== null && _a !== void 0 ? _a : document;
    };
    TooltipComponent2.prototype.getParentsBoundingRect = function() {
      return this.isParentIFrame ? this.targetParent.getBoundingClientRect() : DEFAULT_BOUNDING_RECT;
    };
    TooltipComponent2.prototype.setPosition = function() {
      if (!this.targetNode)
        return;
      var targetRect = this.targetNode.getBoundingClientRect();
      var parentRect = this.getParentsBoundingRect();
      var spaceBetween = this.options.spaceBetween;
      switch (this.options.position) {
        case TooltipPosition.topLeft:
          this.alignHorizontally(parentRect.x + targetRect.right - this.element.offsetWidth - targetRect.width / 2);
          this.alignVertically(parentRect.y + targetRect.top - this.element.offsetHeight - spaceBetween);
          break;
        case TooltipPosition.topRight:
          this.alignHorizontally(parentRect.x + targetRect.right - targetRect.width / 2);
          this.alignVertically(parentRect.y + targetRect.top - this.element.offsetHeight - spaceBetween);
          break;
        case TooltipPosition.bottomLeft:
          this.alignHorizontally(parentRect.x + targetRect.right - this.element.offsetWidth - targetRect.width / 2);
          this.alignVertically(parentRect.y + targetRect.bottom + spaceBetween);
          break;
        case TooltipPosition.bottomRight:
          this.alignHorizontally(parentRect.x + targetRect.right - targetRect.width / 2);
          this.alignVertically(parentRect.y + targetRect.bottom + spaceBetween);
          break;
        case TooltipPosition.leftTop:
          this.alignHorizontally(parentRect.x + targetRect.left - this.element.offsetWidth - spaceBetween);
          this.alignVertically(parentRect.y + targetRect.bottom - this.element.offsetHeight - targetRect.height / 2);
          break;
        case TooltipPosition.leftBottom:
          this.alignHorizontally(parentRect.x + targetRect.left - this.element.offsetWidth - spaceBetween);
          this.alignVertically(parentRect.y + targetRect.bottom - targetRect.height / 2);
          break;
        case TooltipPosition.rightTop:
          this.alignHorizontally(parentRect.x + targetRect.right + spaceBetween);
          this.alignVertically(parentRect.y + targetRect.bottom - this.element.offsetHeight - targetRect.height / 2);
          break;
        case TooltipPosition.rightBottom:
          this.alignHorizontally(parentRect.x + targetRect.right + spaceBetween);
          this.alignVertically(parentRect.y + targetRect.bottom - targetRect.height / 2);
          break;
      }
    };
    TooltipComponent2.prototype.alignHorizontally = function(left) {
      this.element.style.left = "".concat(left, "px");
    };
    TooltipComponent2.prototype.alignVertically = function(top) {
      this.element.style.top = "".concat(top, "px");
    };
    return TooltipComponent2;
  }(ComponentBase);
  var TooltipAction = function(_super) {
    __extends2(TooltipAction2, _super);
    function TooltipAction2(xpath, htmlContent, options, resolveConditions, parent, trackableContent) {
      var _this = _super.call(this, xpath, parent) || this;
      _this.xpath = xpath;
      _this.htmlContent = htmlContent;
      _this.options = options;
      _this.resolveConditions = resolveConditions;
      _this.trackableContent = trackableContent;
      return _this;
    }
    TooltipAction2.prototype.onResolve = function(condition) {
      eventEmitter.emit(this.getTrackEventFromCondition(condition), { content: this.trackableContent });
      _super.prototype.onResolve.call(this, condition);
    };
    TooltipAction2.prototype.getTrackEventFromCondition = function(condition) {
      if (condition.groupId === GroupId.ScenarioClosed)
        return TrackEvent.TooltipClosed;
      return TrackEvent.TooltipResolved;
    };
    TooltipAction2.prototype.buildComponent = function() {
      return new TooltipComponent(this.getNode(this.xpath, this.parent), this.parent ? this.getNode(this.parent) : void 0, this.htmlContent, this.options);
    };
    TooltipAction2.event = ActionEvents.tooltip;
    return TooltipAction2;
  }(RenderComponentActionBase);
  var TooltipActionParser = function(_super) {
    __extends2(TooltipActionParser2, _super);
    function TooltipActionParser2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.DEFAULT_ARROW_HEIGHT = 12;
      return _this;
    }
    TooltipActionParser2.prototype.parse = function(action) {
      if (!this.validateTooltipActionData(action))
        this.throwParseError(action.event);
      return this.getParsedTooltipAction(action);
    };
    TooltipActionParser2.prototype.validateTooltipActionData = function(action) {
      return this.validateXpath(action.xpath) && this.validateHtmlContent(action.htmlContent) && this.validateParent(action);
    };
    TooltipActionParser2.prototype.getParsedTooltipAction = function(action) {
      try {
        var xpath = action.xpath, parent_1 = action.parent, htmlContent = action.htmlContent;
        var parsedOptions = this.parseOptions(action.options);
        var parsedConditions = this.parseResolveConditions(action.resolveConditions);
        return new TooltipAction(xpath, htmlContent, parsedOptions, parsedConditions, parent_1);
      } catch (e) {
        this.throwParseError(action.event);
      }
    };
    TooltipActionParser2.prototype.validateParent = function(action) {
      return !action.hasOwnProperty("parent") || this.validateXpath(action.parent);
    };
    TooltipActionParser2.prototype.parseOptions = function(options) {
      var _a;
      if (!this.validateTooltipOptions(options))
        this.throwParseError(TooltipAction.event);
      return {
        position: options.position,
        className: (_a = options.className) !== null && _a !== void 0 ? _a : "",
        spaceBetween: options.spaceBetween
      };
    };
    TooltipActionParser2.prototype.validateTooltipOptions = function(options) {
      var position = options.position;
      return Validator.isObjectWithKeys(options) && this.validatePosition(position) && Validator.isEnumValue(position, TooltipPosition) && this.validateTooltipClassName(options) && this.validateSpaceBetween(options);
    };
    TooltipActionParser2.prototype.validateTooltipClassName = function(options) {
      return !options.hasOwnProperty("className") || Validator.isString(options.className);
    };
    TooltipActionParser2.prototype.validateSpaceBetween = function(options) {
      if (!options.hasOwnProperty("spaceBetween"))
        options.spaceBetween = this.DEFAULT_ARROW_HEIGHT;
      return Validator.isNumber(options.spaceBetween);
    };
    return TooltipActionParser2;
  }(ComponentActionParserBase);
  var MultipleDomObserver = function(_super) {
    __extends2(MultipleDomObserver2, _super);
    function MultipleDomObserver2(xpaths, timeout, parent, interval) {
      if (interval === void 0) {
        interval = 500;
      }
      var _this = _super.call(this, timeout, parent, interval) || this;
      _this.xpaths = xpaths;
      _this.parent = parent;
      _this.interval = interval;
      return _this;
    }
    MultipleDomObserver2.prototype.getTargetElement = function() {
      var parentNode = this.getNode(this.parent);
      for (var _i = 0, _a = this.xpaths; _i < _a.length; _i++) {
        var xpath = _a[_i];
        var node = this.getNode(xpath, parentNode);
        if (node)
          return node;
      }
      throw new ElementNotFoundError(this.xpaths.join());
    };
    MultipleDomObserver2.prototype.getNode = function(xpath, parent) {
      try {
        return _super.prototype.getNode.call(this, xpath, parent);
      } catch (e) {
        return void 0;
      }
    };
    MultipleDomObserver2.prototype.getActionTimeoutError = function() {
      return new ActionTimeoutError(this.xpaths.join(), this.timeout);
    };
    return MultipleDomObserver2;
  }(DomObserverBase);
  var WaitUntilOneVisibleAction = function(_super) {
    __extends2(WaitUntilOneVisibleAction2, _super);
    function WaitUntilOneVisibleAction2(xpaths, timeout, parent) {
      var _this = _super.call(this) || this;
      _this.xpaths = xpaths;
      _this.timeout = timeout;
      _this.parent = parent;
      return _this;
    }
    WaitUntilOneVisibleAction2.prototype.execute = function() {
      return __awaiter2(this, void 0, void 0, function() {
        var error_1;
        return __generator2(this, function(_a) {
          switch (_a.label) {
            case 0:
              this.setObserver();
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [4, this.domObserver.onElementVisible()];
            case 2:
              _a.sent();
              return [2, this.handleSuccess()];
            case 3:
              error_1 = _a.sent();
              return [2, Promise.reject(error_1)];
            case 4:
              return [2];
          }
        });
      });
    };
    WaitUntilOneVisibleAction2.prototype.setObserver = function() {
      this.disposeObserver();
      this.domObserver = new MultipleDomObserver(this.xpaths, this.timeout, this.parent);
    };
    WaitUntilOneVisibleAction2.prototype.disposeObserver = function() {
      var _a;
      (_a = this.domObserver) === null || _a === void 0 ? void 0 : _a.dispose();
    };
    WaitUntilOneVisibleAction2.prototype.dispose = function() {
      this.disposeObserver();
      _super.prototype.dispose.call(this);
    };
    WaitUntilOneVisibleAction2.event = ActionEvents.waitUntilOneVisible;
    return WaitUntilOneVisibleAction2;
  }(ActionBase);
  var WaitUntilOneVisibleActionParser = function(_super) {
    __extends2(WaitUntilOneVisibleActionParser2, _super);
    function WaitUntilOneVisibleActionParser2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    WaitUntilOneVisibleActionParser2.prototype.parse = function(action) {
      if (!Validator.isArray(action.xpaths) || !this.validateXpaths(action.xpaths) || !this.validateTimeout(action.timeout))
        this.throwParseError(WaitUntilOneVisibleAction.event);
      return new WaitUntilOneVisibleAction(action.xpaths, action.timeout, action.parent);
    };
    WaitUntilOneVisibleActionParser2.prototype.validateXpaths = function(xpaths) {
      for (var _i = 0, xpaths_1 = xpaths; _i < xpaths_1.length; _i++) {
        var xpath = xpaths_1[_i];
        if (!this.validateXpath(xpath))
          return false;
      }
      return true;
    };
    return WaitUntilOneVisibleActionParser2;
  }(GenericActionParserBase);
  var WaitUntilVisibleAction = function(_super) {
    __extends2(WaitUntilVisibleAction2, _super);
    function WaitUntilVisibleAction2(xpath, timeout, parent) {
      var _this = _super.call(this, xpath, parent) || this;
      _this.timeout = timeout;
      return _this;
    }
    WaitUntilVisibleAction2.prototype.execute = function() {
      return __awaiter2(this, void 0, void 0, function() {
        var error_1;
        return __generator2(this, function(_a) {
          switch (_a.label) {
            case 0:
              this.setObserver();
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [4, this.domObserver.onElementVisible()];
            case 2:
              _a.sent();
              return [2, this.handleSuccess()];
            case 3:
              error_1 = _a.sent();
              return [2, Promise.reject(error_1)];
            case 4:
              return [2];
          }
        });
      });
    };
    WaitUntilVisibleAction2.prototype.setObserver = function() {
      this.disposeObserver();
      this.domObserver = new SingleDomObserver(this.xpath, this.timeout, this.parent);
    };
    WaitUntilVisibleAction2.prototype.disposeObserver = function() {
      var _a;
      (_a = this.domObserver) === null || _a === void 0 ? void 0 : _a.dispose();
    };
    WaitUntilVisibleAction2.prototype.dispose = function() {
      this.disposeObserver();
      _super.prototype.dispose.call(this);
    };
    WaitUntilVisibleAction2.event = ActionEvents.waitUntilVisible;
    return WaitUntilVisibleAction2;
  }(NodeActionBase);
  var WaitUntilVisibleActionParser = function(_super) {
    __extends2(WaitUntilVisibleActionParser2, _super);
    function WaitUntilVisibleActionParser2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    WaitUntilVisibleActionParser2.prototype.parse = function(action) {
      if (!this.validateXpath(action.xpath) || !this.validateTimeout(action.timeout))
        this.throwParseError(WaitUntilVisibleAction.event);
      return new WaitUntilVisibleAction(action.xpath, action.timeout, action.parent);
    };
    return WaitUntilVisibleActionParser2;
  }(GenericActionParserBase);
  var BulkClickAction = function(_super) {
    __extends2(BulkClickAction2, _super);
    function BulkClickAction2(xpath, parent) {
      var _this = _super.call(this, xpath, parent) || this;
      _this.CLICK_DELAY = 50;
      return _this;
    }
    BulkClickAction2.prototype.execute = function() {
      var e_1, _a;
      return __awaiter2(this, void 0, void 0, function() {
        var elements, elements_1, elements_1_1, element, e_1_1, error_1;
        return __generator2(this, function(_b) {
          switch (_b.label) {
            case 0:
              _b.trys.push([0, 14, , 15]);
              elements = this.getNodes(this.xpath, this.parent);
              _b.label = 1;
            case 1:
              _b.trys.push([1, 7, 8, 13]);
              elements_1 = __asyncValues2(elements);
              _b.label = 2;
            case 2:
              return [4, elements_1.next()];
            case 3:
              if (!(elements_1_1 = _b.sent(), !elements_1_1.done))
                return [3, 6];
              element = elements_1_1.value;
              return [4, this.delayedBatchClick(element)];
            case 4:
              _b.sent();
              _b.label = 5;
            case 5:
              return [3, 2];
            case 6:
              return [3, 13];
            case 7:
              e_1_1 = _b.sent();
              e_1 = { error: e_1_1 };
              return [3, 13];
            case 8:
              _b.trys.push([8, , 11, 12]);
              if (!(elements_1_1 && !elements_1_1.done && (_a = elements_1.return)))
                return [3, 10];
              return [4, _a.call(elements_1)];
            case 9:
              _b.sent();
              _b.label = 10;
            case 10:
              return [3, 12];
            case 11:
              if (e_1)
                throw e_1.error;
              return [7];
            case 12:
              return [7];
            case 13:
              return [2, this.handleSuccess()];
            case 14:
              error_1 = _b.sent();
              return [2, this.handleFail(BulkClickAction2.event, error_1)];
            case 15:
              return [2];
          }
        });
      });
    };
    BulkClickAction2.prototype.dispose = function() {
      clearTimeout(this.delayTimeout);
      this.delayTimeout = void 0;
      _super.prototype.dispose.call(this);
    };
    BulkClickAction2.prototype.delayedBatchClick = function(element) {
      return __awaiter2(this, void 0, void 0, function() {
        var _this = this;
        return __generator2(this, function(_a) {
          return [2, new Promise(function(resolve) {
            _this.invokeClick(element);
            _this.delayTimeout = window.setTimeout(resolve, _this.CLICK_DELAY);
          })];
        });
      });
    };
    BulkClickAction2.prototype.getNodes = function(xpath, parent) {
      var parentNode = parent ? this.getNode(parent) : void 0;
      return XPathUtil.getAllElementsByXpath(xpath, parentNode);
    };
    BulkClickAction2.event = ActionEvents.bulkClick;
    return BulkClickAction2;
  }(ClickAction);
  var BulkClickActionParser = function(_super) {
    __extends2(BulkClickActionParser2, _super);
    function BulkClickActionParser2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    BulkClickActionParser2.prototype.parse = function(action) {
      if (!this.validateXpath(action.xpath))
        this.throwParseError(BulkClickAction.event);
      return new BulkClickAction(action.xpath, action.parent);
    };
    return BulkClickActionParser2;
  }(GenericActionParserBase);
  var ClickActionParser = function(_super) {
    __extends2(ClickActionParser2, _super);
    function ClickActionParser2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ClickActionParser2.prototype.parse = function(action) {
      if (!this.validateXpath(action.xpath))
        this.throwParseError(ClickAction.event);
      return new ClickAction(action.xpath, action.parent);
    };
    return ClickActionParser2;
  }(GenericActionParserBase);
  var ClickOneOfAction = function(_super) {
    __extends2(ClickOneOfAction2, _super);
    function ClickOneOfAction2(xpaths, timeout, parent) {
      if (timeout === void 0) {
        timeout = 0;
      }
      var _this = _super.call(this) || this;
      _this.xpaths = xpaths;
      _this.timeout = timeout;
      _this.parent = parent;
      return _this;
    }
    ClickOneOfAction2.prototype.execute = function() {
      return __awaiter2(this, void 0, void 0, function() {
        var action, error_1;
        return __generator2(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!this.timeout)
                return [2, this.click()];
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              action = new WaitUntilOneVisibleAction(this.xpaths, this.timeout, this.parent);
              return [4, action.execute()];
            case 2:
              _a.sent();
              return [2, this.click()];
            case 3:
              error_1 = _a.sent();
              return [2, this.handleFail(ClickOneOfAction2.event, error_1)];
            case 4:
              return [2];
          }
        });
      });
    };
    ClickOneOfAction2.prototype.click = function() {
      return __awaiter2(this, void 0, void 0, function() {
        var parentNode, firstElement;
        return __generator2(this, function(_a) {
          try {
            parentNode = this.parent ? this.getNode(this.parent) : void 0;
            firstElement = this.findFirstNode(parentNode);
            if (!firstElement)
              return [2, this.handleFail(ClickOneOfAction2.event, new ElementNotFoundError(this.xpaths.join(), parentNode))];
            firstElement.click();
            return [2, this.handleSuccess()];
          } catch (error) {
            return [2, this.handleFail(ClickOneOfAction2.event, error)];
          }
          return [2];
        });
      });
    };
    ClickOneOfAction2.prototype.findFirstNode = function(parentNode) {
      for (var _i = 0, _a = this.xpaths; _i < _a.length; _i++) {
        var xpath = _a[_i];
        var node = this.getNode(xpath, parentNode);
        if (node)
          return node;
      }
      return null;
    };
    ClickOneOfAction2.prototype.getNode = function(xpath, parentNode) {
      try {
        return XPathUtil.getSingleElementByXPath(xpath, parentNode);
      } catch (e) {
        return void 0;
      }
    };
    ClickOneOfAction2.event = ActionEvents.clickOneOf;
    return ClickOneOfAction2;
  }(ActionBase);
  var ClickOneOfActionParser = function(_super) {
    __extends2(ClickOneOfActionParser2, _super);
    function ClickOneOfActionParser2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    ClickOneOfActionParser2.prototype.parse = function(action) {
      if (!Validator.nonEmptyArray(action.xpaths))
        this.throwParseError(ClickOneOfAction.event);
      for (var _i = 0, _a = action.xpaths; _i < _a.length; _i++) {
        var xpath = _a[_i];
        if (!this.validateXpath(xpath))
          this.throwParseError(ClickOneOfAction.event);
      }
      return new ClickOneOfAction(action.xpaths, action.timeout, action.parent);
    };
    return ClickOneOfActionParser2;
  }(GenericActionParserBase);
  var StopScenarioAction = function(_super) {
    __extends2(StopScenarioAction2, _super);
    function StopScenarioAction2() {
      return _super.call(this) || this;
    }
    StopScenarioAction2.prototype.execute = function() {
      return __awaiter2(this, void 0, void 0, function() {
        return __generator2(this, function(_a) {
          return [2, this.handleSuccess(Resolution.stopped)];
        });
      });
    };
    StopScenarioAction2.event = ActionEvents.stopScenario;
    return StopScenarioAction2;
  }(ActionBase);
  var VerifyOkAction = function(_super) {
    __extends2(VerifyOkAction2, _super);
    function VerifyOkAction2(xpath, parent) {
      return _super.call(this, xpath, parent) || this;
    }
    VerifyOkAction2.prototype.execute = function() {
      return __awaiter2(this, void 0, void 0, function() {
        return __generator2(this, function(_a) {
          try {
            this.getNode(this.xpath, this.parent);
            return [2, this.handleSuccess()];
          } catch (error) {
            return [2, this.handleFail(ActionEvents.verifyOk, error)];
          }
          return [2];
        });
      });
    };
    VerifyOkAction2.event = ActionEvents.verifyOk;
    return VerifyOkAction2;
  }(NodeActionBase);
  var VerifyOkActionParser = function(_super) {
    __extends2(VerifyOkActionParser2, _super);
    function VerifyOkActionParser2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    VerifyOkActionParser2.prototype.parse = function(action) {
      if (!this.validateXpath(action.xpath))
        this.throwParseError(VerifyOkAction.event);
      return new VerifyOkAction(action.xpath, action.parent);
    };
    return VerifyOkActionParser2;
  }(GenericActionParserBase);
  var PrivacyActionParser = function() {
    function PrivacyActionParser2() {
      this.invalidActions = [];
    }
    PrivacyActionParser2.prototype.parse = function(actions) {
      var _this = this;
      this.invalidActions = [];
      if (!Validator.nonEmptyArray(actions))
        throw new ParseActionsFormatError();
      var parsedActions = [];
      actions.forEach(function(action) {
        try {
          var parsedAction = _this.parseAction(action);
          parsedActions.push(parsedAction);
        } catch (error) {
          _this.handleActionError(error);
        }
      });
      if (this.invalidActions.length)
        throw new ParserInvalidActionsError(this.invalidActions);
      return parsedActions;
    };
    PrivacyActionParser2.prototype.parseAction = function(action) {
      if (!action.event)
        this.throwActionError("unspecified");
      switch (action.event) {
        case ClickAction.event:
          return new ClickActionParser().parse(action);
        case ClickOneOfAction.event:
          return new ClickOneOfActionParser().parse(action);
        case BulkClickAction.event:
          return new BulkClickActionParser().parse(action);
        case ClickWhenVisibleAction.event:
          return new ClickWhenVisibleActionParser().parse(action);
        case DelayAction.event:
          return new DelayActionParser().parse(action);
        case ExecuteScriptAction.event:
          return new ExecuteScriptActionParser().parse(action);
        case InjectStylesAction.event:
          return new InjectStylesActionParser().parse(action);
        case NotificationAction.event:
          return new NotificationActionParser().parse(action);
        case ScrollAction.event:
          return new ScrollActionParser().parse(action);
        case StopScenarioAction.event:
          return new StopScenarioAction();
        case TooltipAction.event:
          return new TooltipActionParser().parse(action);
        case VerifyOkAction.event:
          return new VerifyOkActionParser().parse(action);
        case WaitUntilVisibleAction.event:
          return new WaitUntilVisibleActionParser().parse(action);
        case WaitUntilOneVisibleAction.event:
          return new WaitUntilOneVisibleActionParser().parse(action);
        default:
          this.throwActionError(action.event);
      }
    };
    PrivacyActionParser2.prototype.handleActionError = function(error) {
      if (error instanceof ParseActionError)
        this.invalidActions.push(error.event);
    };
    PrivacyActionParser2.prototype.throwActionError = function(event) {
      throw new ParseActionError(event);
    };
    return PrivacyActionParser2;
  }();
  var PrivacyHooksParser = function() {
    function PrivacyHooksParser2() {
      var _this = this;
      this.invalidHooks = [];
      this.parseHooks = function(parsedHooks, currentKey) {
        var _a;
        var hookType = currentKey;
        var hook = (_a = _this.hooks) === null || _a === void 0 ? void 0 : _a[hookType];
        if (hook && !hook.actions)
          _this.invalidHooks.push(hookType);
        if (hook && !_this.invalidHooks.length)
          parsedHooks[hookType] = { actions: _this.parseHookActions(hook) };
        return parsedHooks;
      };
    }
    PrivacyHooksParser2.prototype.parse = function(hooks) {
      this.hooks = hooks;
      var parsedHooks = Object.keys(HookType).reduce(this.parseHooks, {});
      if (this.invalidHooks.length)
        throw new ParserInvalidHooksError(this.invalidHooks);
      return parsedHooks;
    };
    PrivacyHooksParser2.prototype.parseHookActions = function(hook) {
      return new PrivacyActionParser().parse(hook === null || hook === void 0 ? void 0 : hook.actions);
    };
    return PrivacyHooksParser2;
  }();
  var ExecutionStackBase = function() {
    function ExecutionStackBase2() {
      this.stack = [];
    }
    ExecutionStackBase2.prototype.getStack = function() {
      return this.stack;
    };
    ExecutionStackBase2.prototype.addActionStack = function(actionStack) {
      this.stack.push(actionStack);
    };
    ExecutionStackBase2.prototype.addPageStack = function(pageStack) {
      this.stack.push(pageStack);
    };
    ExecutionStackBase2.prototype.clearStack = function() {
      this.stack = [];
    };
    return ExecutionStackBase2;
  }();
  var ExecutionStack = new ExecutionStackBase();
  var PageActionGroupError = function(_super) {
    __extends2(PageActionGroupError2, _super);
    function PageActionGroupError2(groupId) {
      var _this = _super.call(this) || this;
      _this.groupId = groupId;
      _this.message = 'Page group actions could not be executed due to missing "'.concat(_this.groupId, '" group.');
      return _this;
    }
    return PageActionGroupError2;
  }(HandledError);
  var PagePreconditionError = function(_super) {
    __extends2(PagePreconditionError2, _super);
    function PagePreconditionError2(target) {
      var _this = _super.call(this) || this;
      _this.target = target;
      _this.message = "Page actions could not be executed due to preconditions are not met.";
      return _this;
    }
    Object.defineProperty(PagePreconditionError2.prototype, "errorDetails", {
      get: function() {
        return [{
          key: "Preconditions",
          description: this.getDetailsDescription()
        }];
      },
      enumerable: false,
      configurable: true
    });
    PagePreconditionError2.prototype.getDetailsDescription = function() {
      return this.target.query ? `Current url and queries doesn't match target "`.concat(this.target.url, '" and [').concat(this.target.query.join(", "), "] queries.") : `Current url doesn't match target "`.concat(this.target.url, '"');
    };
    return PagePreconditionError2;
  }(HandledError);
  var PageResult = function() {
    function PageResult2(resolution) {
      this.resolution = resolution;
    }
    return PageResult2;
  }();
  var PageBase = function() {
    function PageBase2(target, actions, optional) {
      if (optional === void 0) {
        optional = false;
      }
      this.target = target;
      this.actions = actions;
      this.optional = optional;
    }
    PageBase2.prototype.execute = function() {
      return __awaiter2(this, void 0, void 0, function() {
        return __generator2(this, function(_a) {
          if (!this.verifyPreconditions())
            return [2, this.optional ? this.handleSuccess() : this.handleError(new PagePreconditionError(this.target))];
          ExecutionStack.addPageStack({ target: this.target });
          return [2, this.executeActions()];
        });
      });
    };
    PageBase2.prototype.verifyPreconditions = function() {
      return this.pathnameMatches() && this.queryMatches();
    };
    PageBase2.prototype.dispose = function() {
      this.disposeActions();
      for (var key in this)
        if (this.hasOwnProperty(key))
          delete this[key];
    };
    PageBase2.prototype.pathnameMatches = function() {
      var currentUrl = window.location.origin + window.location.pathname;
      var url = this.target.url;
      if (Validator.isRegex(url)) {
        var re = new RegExp(url.slice(1));
        return re.test(currentUrl);
      } else {
        return url === "*" || url === currentUrl;
      }
    };
    PageBase2.prototype.queryMatches = function() {
      if (this.target.query === void 0 || Validator.isEmptyArray(this.target.query))
        return true;
      for (var _i = 0, _a = this.target.query; _i < _a.length; _i++) {
        var targetQuery = _a[_i];
        if (window.location.search.indexOf(targetQuery) >= 0)
          return true;
      }
      return false;
    };
    PageBase2.prototype.handleSuccess = function(resolution) {
      if (resolution === void 0) {
        resolution = Resolution.succeeded;
      }
      return Promise.resolve(new PageResult(resolution));
    };
    PageBase2.prototype.handleError = function(error) {
      return Promise.reject(error);
    };
    return PageBase2;
  }();
  var ResultUtil = function() {
    function ResultUtil2() {
    }
    ResultUtil2.getActionStack = function(actionResult, action) {
      var stack = {
        event: action.getEvent(),
        nextGroup: actionResult.nextGroup,
        resolution: actionResult.resolution
      };
      return action instanceof NodeActionBase ? __assign2(__assign2({}, stack), { xpath: action.xpath }) : stack;
    };
    ResultUtil2.getGroupedActionStack = function(actionResult, action, groupId) {
      var stack = this.getActionStack(actionResult, action);
      return __assign2(__assign2({}, stack), { groupId });
    };
    return ResultUtil2;
  }();
  var GroupedPage = function(_super) {
    __extends2(GroupedPage2, _super);
    function GroupedPage2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    GroupedPage2.prototype.executeActions = function() {
      return __awaiter2(this, void 0, void 0, function() {
        var groupedActionsResult, error_1;
        return __generator2(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 3]);
              return [4, this.executeGroupActions("initial")];
            case 1:
              groupedActionsResult = _a.sent();
              return [3, 3];
            case 2:
              error_1 = _a.sent();
              return [2, this.handleError(error_1)];
            case 3:
              return [2, this.handleSuccess(groupedActionsResult.resolution)];
          }
        });
      });
    };
    GroupedPage2.prototype.disposeActions = function() {
      var _this = this;
      this.actions.forEach(function(group) {
        return _this.disposeGroupAction(group);
      });
    };
    GroupedPage2.prototype.executeGroupActions = function(groupId) {
      var e_1, _a;
      return __awaiter2(this, void 0, void 0, function() {
        var group, actionResult, _b, _c, _d, index, action, e_1_1;
        return __generator2(this, function(_e) {
          switch (_e.label) {
            case 0:
              group = this.getGroupById(groupId);
              if (!group)
                throw new PageActionGroupError(groupId);
              _e.label = 1;
            case 1:
              _e.trys.push([1, 7, 8, 13]);
              _b = __asyncValues2(group.actions.entries());
              _e.label = 2;
            case 2:
              return [4, _b.next()];
            case 3:
              if (!(_c = _e.sent(), !_c.done))
                return [3, 6];
              _d = _c.value, index = _d[0], action = _d[1];
              if (this.isLastAction(action, index, group))
                eventEmitter.emit(ScenarioEvent.onBeforeLastAction, action.getEvent());
              return [4, this.executeAction(action, groupId)];
            case 4:
              actionResult = _e.sent();
              if (actionResult.nextGroup)
                return [2, this.executeGroupActions(actionResult.nextGroup)];
              if (actionResult.resolution !== Resolution.succeeded)
                return [3, 6];
              _e.label = 5;
            case 5:
              return [3, 2];
            case 6:
              return [3, 13];
            case 7:
              e_1_1 = _e.sent();
              e_1 = { error: e_1_1 };
              return [3, 13];
            case 8:
              _e.trys.push([8, , 11, 12]);
              if (!(_c && !_c.done && (_a = _b.return)))
                return [3, 10];
              return [4, _a.call(_b)];
            case 9:
              _e.sent();
              _e.label = 10;
            case 10:
              return [3, 12];
            case 11:
              if (e_1)
                throw e_1.error;
              return [7];
            case 12:
              return [7];
            case 13:
              return [2, actionResult];
          }
        });
      });
    };
    GroupedPage2.prototype.getGroupById = function(groupId) {
      return this.actions.filter(function(group) {
        return group.id === groupId;
      })[0];
    };
    GroupedPage2.prototype.isLastAction = function(groupedAction, index, group) {
      var groupIds = groupedAction.action instanceof RenderComponentActionBase ? groupedAction.action.getResolveConditionsGroupIds() : null;
      var hasNextGroupId = groupIds === null || groupIds === void 0 ? void 0 : groupIds.find(function(groupId) {
        return groupId && groupId != GroupId.ScenarioClosed && groupId != GroupId.ScenarioRevoked;
      });
      return groupedAction.resolveGroup === void 0 && index === group.actions.length - 1 && groupedAction.getEvent() != ActionEvents.stopScenario && !hasNextGroupId;
    };
    GroupedPage2.prototype.disposeGroupAction = function(actionGroup) {
      actionGroup.actions.forEach(function(action) {
        return action.dispose();
      });
    };
    GroupedPage2.prototype.executeAction = function(action, groupId) {
      return __awaiter2(this, void 0, void 0, function() {
        var actionResult;
        return __generator2(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, action.execute()];
            case 1:
              actionResult = _a.sent();
              ExecutionStack.addActionStack(ResultUtil.getGroupedActionStack(actionResult, action, groupId));
              return [2, actionResult];
          }
        });
      });
    };
    return GroupedPage2;
  }(PageBase);
  var Page = function(_super) {
    __extends2(Page2, _super);
    function Page2() {
      return _super !== null && _super.apply(this, arguments) || this;
    }
    Page2.prototype.executeActions = function() {
      var e_1, _a;
      var _b;
      return __awaiter2(this, void 0, void 0, function() {
        var actionResult, _c, _d, _e, index, action, error_1, e_1_1;
        return __generator2(this, function(_f) {
          switch (_f.label) {
            case 0:
              if (this.actions.length === 0)
                return [2, this.handleSuccess(Resolution.succeeded)];
              _f.label = 1;
            case 1:
              _f.trys.push([1, 10, 11, 16]);
              _c = __asyncValues2(this.actions.entries());
              _f.label = 2;
            case 2:
              return [4, _c.next()];
            case 3:
              if (!(_d = _f.sent(), !_d.done))
                return [3, 9];
              _e = _d.value, index = _e[0], action = _e[1];
              if (this.isLastAction(index))
                eventEmitter.emit(ScenarioEvent.onBeforeLastAction, action.getEvent());
              _f.label = 4;
            case 4:
              _f.trys.push([4, 6, , 7]);
              return [4, this.executeAction(action)];
            case 5:
              actionResult = _f.sent();
              return [3, 7];
            case 6:
              error_1 = _f.sent();
              return [2, this.handleError(error_1)];
            case 7:
              if (actionResult.resolution !== Resolution.succeeded)
                return [3, 9];
              _f.label = 8;
            case 8:
              return [3, 2];
            case 9:
              return [3, 16];
            case 10:
              e_1_1 = _f.sent();
              e_1 = { error: e_1_1 };
              return [3, 16];
            case 11:
              _f.trys.push([11, , 14, 15]);
              if (!(_d && !_d.done && (_a = _c.return)))
                return [3, 13];
              return [4, _a.call(_c)];
            case 12:
              _f.sent();
              _f.label = 13;
            case 13:
              return [3, 15];
            case 14:
              if (e_1)
                throw e_1.error;
              return [7];
            case 15:
              return [7];
            case 16:
              return [2, this.handleSuccess((_b = actionResult.resolution) !== null && _b !== void 0 ? _b : Resolution.succeeded)];
          }
        });
      });
    };
    Page2.prototype.disposeActions = function() {
      this.actions.forEach(function(action) {
        return action.dispose();
      });
    };
    Page2.prototype.executeAction = function(action) {
      return __awaiter2(this, void 0, void 0, function() {
        var actionResult;
        return __generator2(this, function(_a) {
          switch (_a.label) {
            case 0:
              return [4, action.execute()];
            case 1:
              actionResult = _a.sent();
              ExecutionStack.addActionStack(ResultUtil.getActionStack(actionResult, action));
              return [2, actionResult];
          }
        });
      });
    };
    Page2.prototype.isLastAction = function(index) {
      return index === this.actions.length - 1;
    };
    return Page2;
  }(PageBase);
  var ParsePageActionsMismatchError = function(_super) {
    __extends2(ParsePageActionsMismatchError2, _super);
    function ParsePageActionsMismatchError2() {
      var _this = _super.call(this) || this;
      _this.message = 'Unable to parse the page - either define "actions" or "groupedActions" both of them are not supported in single page.';
      return _this;
    }
    return ParsePageActionsMismatchError2;
  }(HandledError);
  var GroupedAction = function() {
    function GroupedAction2(action, resolveGroup, rejectGroup) {
      this.action = action;
      this.resolveGroup = resolveGroup;
      this.rejectGroup = rejectGroup;
    }
    GroupedAction2.prototype.getEvent = function() {
      return this.action.getEvent();
    };
    GroupedAction2.prototype.execute = function() {
      return __awaiter2(this, void 0, void 0, function() {
        var result, actionResult, error_1;
        return __generator2(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 3]);
              return [4, this.action.execute()];
            case 1:
              result = _a.sent();
              actionResult = result.nextGroup ? result : new ActionResult(result.resolution, this.resolveGroup);
              return [2, this.handleSuccess(actionResult)];
            case 2:
              error_1 = _a.sent();
              if (this.rejectGroup)
                return [2, this.handleSuccess(new ActionResult(Resolution.succeeded, this.rejectGroup))];
              return [2, this.handleError(error_1)];
            case 3:
              return [2];
          }
        });
      });
    };
    GroupedAction2.prototype.dispose = function() {
      var _a;
      (_a = this.action) === null || _a === void 0 ? void 0 : _a.dispose();
      for (var key in this)
        if (this.hasOwnProperty(key))
          delete this[key];
    };
    GroupedAction2.prototype.handleSuccess = function(result) {
      return Promise.resolve(result);
    };
    GroupedAction2.prototype.handleError = function(error) {
      return Promise.reject(new ActionExecutionError(this.getEvent(), error));
    };
    return GroupedAction2;
  }();
  var PrivacyGroupedActionParser = function(_super) {
    __extends2(PrivacyGroupedActionParser2, _super);
    function PrivacyGroupedActionParser2(actionParser) {
      if (actionParser === void 0) {
        actionParser = new PrivacyActionParser();
      }
      var _this = _super.call(this) || this;
      _this.actionParser = actionParser;
      return _this;
    }
    PrivacyGroupedActionParser2.prototype.parse = function(actionGroups) {
      if (!Validator.nonEmptyArray(actionGroups))
        throw new ParseActionsFormatError();
      return this.parseGroupedActions(actionGroups);
    };
    PrivacyGroupedActionParser2.prototype.parseGroupedActions = function(actionGroups) {
      var _this = this;
      return actionGroups.map(function(group) {
        var parsedActions = _this.actionParser.parse(group.actions);
        var decoratedActions = _this.decorateGroupActions(parsedActions, group.actions);
        return { id: group.id, actions: decoratedActions };
      });
    };
    PrivacyGroupedActionParser2.prototype.decorateGroupActions = function(actions, groupedActions) {
      return actions.map(function(action, index) {
        var _a = groupedActions[index], resolveGroup = _a.resolveGroup, rejectGroup = _a.rejectGroup;
        return new GroupedAction(action, resolveGroup, rejectGroup);
      });
    };
    return PrivacyGroupedActionParser2;
  }(GenericActionParserBase);
  var PrivacyPageParser = function() {
    function PrivacyPageParser2(actionParser) {
      if (actionParser === void 0) {
        actionParser = new PrivacyActionParser();
      }
      this.actionParser = actionParser;
    }
    PrivacyPageParser2.prototype.parse = function(page) {
      var target = this.getParsedPageTarget(page.target);
      if (!this.validateIsOptional(page))
        throw new ParserInvalidPageTargetError();
      var hasSimpleActions = page.hasOwnProperty("actions");
      var hasGroupedActions = page.hasOwnProperty("groupedActions");
      if (hasSimpleActions && hasGroupedActions)
        throw new ParsePageActionsMismatchError();
      return hasSimpleActions ? new Page(target, this.parseActions(page.actions), page.optional) : new GroupedPage(target, this.parseGroupedActions(page.groupedActions), page.optional);
    };
    PrivacyPageParser2.prototype.getParsedPageTarget = function(target) {
      if (this.isValidUrlOrRegex(target))
        return { url: target };
      if (this.isValidPageTarget(target))
        return target;
      throw new ParserInvalidPageTargetError();
    };
    PrivacyPageParser2.prototype.isValidPageTarget = function(target) {
      return Validator.isObjectWithKeys(target) && this.isValidUrlOrRegex(target.url) && this.validatePageTargetQueries(target);
    };
    PrivacyPageParser2.prototype.isValidUrlOrRegex = function(value) {
      return value === "*" || Validator.isValidUrl(value) || Validator.isRegex(value);
    };
    PrivacyPageParser2.prototype.validatePageTargetQueries = function(target) {
      if (target.query === void 0)
        return true;
      if (!Validator.isArray(target.query))
        return false;
      for (var _i = 0, _a = target.query; _i < _a.length; _i++) {
        var query = _a[_i];
        if (!Validator.isQueryString(query))
          return false;
      }
      return true;
    };
    PrivacyPageParser2.prototype.validateIsOptional = function(page) {
      return !page.hasOwnProperty("optional") || Validator.isBoolean(page.optional);
    };
    PrivacyPageParser2.prototype.parseActions = function(actions) {
      return this.actionParser.parse(actions);
    };
    PrivacyPageParser2.prototype.parseGroupedActions = function(actions) {
      return new PrivacyGroupedActionParser(this.actionParser).parse(actions);
    };
    return PrivacyPageParser2;
  }();
  var ScenarioPageHookUnknownError = function(_super) {
    __extends2(ScenarioPageHookUnknownError2, _super);
    function ScenarioPageHookUnknownError2(resolution) {
      var _this = _super.call(this) || this;
      _this.resolution = resolution;
      _this.message = "Hook type is unknown.";
      return _this;
    }
    Object.defineProperty(ScenarioPageHookUnknownError2.prototype, "errorDetails", {
      get: function() {
        return [{
          key: "Hook",
          description: "Hook type for '".concat(this.resolution, "' resolution is unknown.")
        }];
      },
      enumerable: false,
      configurable: true
    });
    return ScenarioPageHookUnknownError2;
  }(HandledError);
  var Scenario = function() {
    function Scenario2(name, scenarioPages, hooks) {
      this.name = name;
      this.scenarioPages = scenarioPages;
      this.hooks = hooks;
    }
    Scenario2.prototype.run = function() {
      return __awaiter2(this, void 0, void 0, function() {
        return __generator2(this, function(_a) {
          return [2, this.executePages()];
        });
      });
    };
    Scenario2.prototype.getHookType = function(result) {
      switch (result.resolution) {
        case Resolution.succeeded:
          return HookType.onSuccess;
        case Resolution.stopped:
        case Resolution.terminated:
          return HookType.onStop;
        default:
          throw new ScenarioPageHookUnknownError(result.resolution);
      }
    };
    Scenario2.prototype.executeHook = function(hookType) {
      var _a;
      return __awaiter2(this, void 0, void 0, function() {
        var hook, _i, _b, action;
        return __generator2(this, function(_c) {
          switch (_c.label) {
            case 0:
              hook = (_a = this.hooks) === null || _a === void 0 ? void 0 : _a[hookType];
              if (!hook)
                return [2];
              _i = 0, _b = hook.actions;
              _c.label = 1;
            case 1:
              if (!(_i < _b.length))
                return [3, 4];
              action = _b[_i];
              return [4, action.execute()];
            case 2:
              _c.sent();
              _c.label = 3;
            case 3:
              _i++;
              return [3, 1];
            case 4:
              return [2];
          }
        });
      });
    };
    Scenario2.prototype.disposeActions = function() {
      this.scenarioPages.forEach(function(page) {
        return page.disposeActions();
      });
    };
    Scenario2.prototype.disposeHookActions = function(hook) {
      hook.actions.forEach(function(action) {
        return action.dispose();
      });
    };
    Scenario2.prototype.dispose = function() {
      this.scenarioPages.forEach(function(page) {
        return page.dispose();
      });
      if (this.hooks)
        Object.values(this.hooks).forEach(this.disposeHookActions);
      for (var key in this)
        if (this.hasOwnProperty(key))
          delete this[key];
    };
    Scenario2.prototype.executePages = function() {
      return __awaiter2(this, void 0, void 0, function() {
        var pageResult, _i, _a, page, error_1;
        return __generator2(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (this.scenarioPages.length === 0)
                return [2, this.handleSuccess(new ScenarioResult(this.name, Resolution.succeeded, ExecutionStack.getStack()))];
              _i = 0, _a = this.scenarioPages;
              _b.label = 1;
            case 1:
              if (!(_i < _a.length))
                return [3, 7];
              page = _a[_i];
              _b.label = 2;
            case 2:
              _b.trys.push([2, 4, , 5]);
              return [4, page.execute()];
            case 3:
              pageResult = _b.sent();
              return [3, 5];
            case 4:
              error_1 = _b.sent();
              return [2, this.handleError(error_1)];
            case 5:
              if (pageResult.resolution !== Resolution.succeeded)
                return [3, 7];
              _b.label = 6;
            case 6:
              _i++;
              return [3, 1];
            case 7:
              return [2, this.handleSuccess(new ScenarioResult(this.name, pageResult.resolution, ExecutionStack.getStack()))];
          }
        });
      });
    };
    Scenario2.prototype.handleSuccess = function(result) {
      return Promise.resolve(result);
    };
    Scenario2.prototype.handleError = function(error) {
      return Promise.reject(error);
    };
    return Scenario2;
  }();
  var ScenarioParser = function() {
    function ScenarioParser2() {
      this.invalidKeys = [];
    }
    ScenarioParser2.prototype.parse = function(scenarioData) {
      this.invalidKeys = [];
      this.sourceData = this.parseSourceData(scenarioData);
      if (!Validator.isObjectWithKeys(this.sourceData))
        this.throwInvalidSourceData();
      return this.parseScenario(this.sourceData);
    };
    ScenarioParser2.prototype.parseSourceData = function(data) {
      try {
        return Validator.isString(data) ? JSON.parse(data) : data;
      } catch (error) {
        this.throwInvalidSourceData();
      }
    };
    ScenarioParser2.prototype.pushInvalidKey = function(key, description) {
      this.invalidKeys.push({ key, description });
    };
    ScenarioParser2.prototype.throwInvalidSourceData = function() {
      this.pushInvalidKey("source-data", "The Scenario is not valid JSON or an Object.");
      this.throwHandledError();
    };
    ScenarioParser2.prototype.throwHandledError = function(scenarioName) {
      if (scenarioName === void 0) {
        scenarioName = "Unknown";
      }
      this.sourceData = void 0;
      throw new ParserError(scenarioName, this.invalidKeys);
    };
    return ScenarioParser2;
  }();
  var PrivacyScenarioParser = function(_super) {
    __extends2(PrivacyScenarioParser2, _super);
    function PrivacyScenarioParser2(pageParser, hooksParser) {
      if (pageParser === void 0) {
        pageParser = new PrivacyPageParser();
      }
      if (hooksParser === void 0) {
        hooksParser = new PrivacyHooksParser();
      }
      var _this = _super.call(this) || this;
      _this.pageParser = pageParser;
      _this.hooksParser = hooksParser;
      return _this;
    }
    PrivacyScenarioParser2.prototype.parseScenario = function(scenarioData) {
      var name = scenarioData.name, pages = scenarioData.pages, hooks = scenarioData.hooks;
      this.validateScenarioName(name);
      var parsedPages = this.getParsedPages(pages);
      var parsedHooks = this.hooksParser.parse(hooks);
      if (this.invalidKeys.length)
        this.throwHandledError(name);
      return new Scenario(name, parsedPages, parsedHooks);
    };
    PrivacyScenarioParser2.prototype.validateScenarioName = function(name) {
      if (!Validator.nonEmptyString(name))
        this.pushInvalidKey(PrivacyScenarioKeys.name, "The Scenario name was either not provided or the value is valid.");
    };
    PrivacyScenarioParser2.prototype.getParsedPages = function(pages) {
      var _this = this;
      if (!Validator.nonEmptyArray(pages)) {
        this.pushInvalidKey(PrivacyScenarioKeys.pages, "The Scenario pages are either not provided or the value is valid.");
        return [];
      }
      var parsedPages = [];
      pages.forEach(function(page) {
        try {
          parsedPages.push(_this.pageParser.parse(page));
        } catch (error) {
          _this.handleParsePageError(error);
        }
      });
      return parsedPages;
    };
    PrivacyScenarioParser2.prototype.handleParsePageError = function(error) {
      if (error instanceof ParserInvalidPageTargetError)
        return this.pushInvalidKey(PrivacyPageKeys.target, error.message);
      if (error instanceof ParseActionsFormatError || error instanceof ParserInvalidActionsError)
        return this.pushInvalidKey(PrivacyPageKeys.actions, error.message);
      if (error instanceof ParserInvalidHooksError)
        return this.pushInvalidKey(PrivacyPageKeys.hooks, error.message);
      this.pushInvalidKey(PrivacyScenarioKeys.pages, error.message);
    };
    return PrivacyScenarioParser2;
  }(ScenarioParser);
  var MissingScenarioError = function(_super) {
    __extends2(MissingScenarioError2, _super);
    function MissingScenarioError2(caller, methodName) {
      if (caller === void 0) {
        caller = "unknown";
      }
      if (methodName === void 0) {
        methodName = "unknown";
      }
      var _this = _super.call(this) || this;
      _this.caller = caller;
      _this.methodName = methodName;
      _this.message = "Scenario has not been initiated or it has been already disposed.";
      return _this;
    }
    Object.defineProperty(MissingScenarioError2.prototype, "errorDetails", {
      get: function() {
        return [{
          key: this.caller,
          description: 'Method "'.concat(this.methodName, `" couldn't be executed without the scenario`)
        }];
      },
      enumerable: false,
      configurable: true
    });
    return MissingScenarioError2;
  }(HandledError);
  var UncaughtExceptionError = function(_super) {
    __extends2(UncaughtExceptionError2, _super);
    function UncaughtExceptionError2(failReason) {
      var _this = _super.call(this) || this;
      _this.failReason = failReason;
      _this.message = "An unhandled exception occurred.";
      return _this;
    }
    Object.defineProperty(UncaughtExceptionError2.prototype, "errorDetails", {
      get: function() {
        return [{
          key: this.failReason.name,
          description: this.failReason.message,
          failReason: this.failReason
        }];
      },
      enumerable: false,
      configurable: true
    });
    return UncaughtExceptionError2;
  }(HandledError);
  var Runner = function() {
    function Runner2(parser) {
      this.parser = parser;
      this.eventEmitter = eventEmitter;
    }
    Runner2.prototype.initiateScenario = function(scenarioData) {
      return __awaiter2(this, void 0, void 0, function() {
        var error_1;
        return __generator2(this, function(_a) {
          switch (_a.label) {
            case 0:
              _a.trys.push([0, 2, , 4]);
              return [4, this.disposeScenario()];
            case 1:
              _a.sent();
              this.scenario = this.getParsedScenario(scenarioData);
              return [3, 4];
            case 2:
              error_1 = _a.sent();
              return [4, this.handleError(error_1)];
            case 3:
              _a.sent();
              return [3, 4];
            case 4:
              return [2];
          }
        });
      });
    };
    Runner2.prototype.start = function() {
      return __awaiter2(this, void 0, void 0, function() {
        var result, error_2;
        return __generator2(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!this.scenario)
                return [2, this.handleError(new MissingScenarioError(this.constructor.name, "start"))];
              _a.label = 1;
            case 1:
              _a.trys.push([1, 3, , 4]);
              return [4, this.scenario.run()];
            case 2:
              result = _a.sent();
              return [2, this.handleSuccess(result)];
            case 3:
              error_2 = _a.sent();
              return [2, this.handleError(error_2)];
            case 4:
              return [2];
          }
        });
      });
    };
    Runner2.prototype.stop = function() {
      return __awaiter2(this, void 0, void 0, function() {
        var result;
        return __generator2(this, function(_a) {
          if (!this.scenario)
            return [2, this.handleError(new MissingScenarioError(this.constructor.name, "stop"))];
          this.scenario.disposeActions();
          result = new ScenarioResult(this.scenario.name, Resolution.terminated, ExecutionStack.getStack());
          return [2, this.handleSuccess(result)];
        });
      });
    };
    Runner2.prototype.handleSuccess = function(result) {
      var _a, _b;
      return __awaiter2(this, void 0, void 0, function() {
        var error_3;
        return __generator2(this, function(_c) {
          switch (_c.label) {
            case 0:
              _c.trys.push([0, 2, 4, 6]);
              return [4, (_a = this.scenario) === null || _a === void 0 ? void 0 : _a.executeHook(this.scenario.getHookType(result))];
            case 1:
              _c.sent();
              return [3, 6];
            case 2:
              error_3 = _c.sent();
              return [4, this.handleError(error_3)];
            case 3:
              _c.sent();
              return [3, 6];
            case 4:
              return [4, (_b = this.scenario) === null || _b === void 0 ? void 0 : _b.executeHook(HookType.onDisposed)];
            case 5:
              _c.sent();
              return [7];
            case 6:
              return [4, this.disposeScenario()];
            case 7:
              _c.sent();
              return [2, Promise.resolve(result)];
          }
        });
      });
    };
    Runner2.prototype.handleError = function(error) {
      var _a;
      return __awaiter2(this, void 0, void 0, function() {
        var handledError, result;
        return __generator2(this, function(_b) {
          switch (_b.label) {
            case 0:
              handledError = error instanceof HandledError ? error : new UncaughtExceptionError(error);
              result = ScenarioResult.buildFailedResult(this.scenario, handledError, ExecutionStack.getStack());
              this.eventEmitter.emit(ScenarioEvent.onError, result);
              return [4, (_a = this.scenario) === null || _a === void 0 ? void 0 : _a.executeHook(HookType.onFailed)];
            case 1:
              _b.sent();
              return [2, Promise.reject(result)];
          }
        });
      });
    };
    Runner2.prototype.disposeScenario = function() {
      return __awaiter2(this, void 0, void 0, function() {
        return __generator2(this, function(_a) {
          switch (_a.label) {
            case 0:
              if (!this.scenario)
                return [2];
              return [4, this.scenario.dispose()];
            case 1:
              _a.sent();
              this.scenario = void 0;
              ExecutionStack.clearStack();
              return [2];
          }
        });
      });
    };
    Runner2.prototype.getParsedScenario = function(scenario) {
      return this.parser.parse(scenario);
    };
    return Runner2;
  }();
  var ScenarioLogger = function() {
    function ScenarioLogger2() {
    }
    ScenarioLogger2.logResult = function(result) {
      switch (result.resolution) {
        case Resolution.failed:
          return this.logFailedResult(result);
        default:
          console.log(result);
      }
    };
    ScenarioLogger2.logFailedResult = function(result) {
      var error = result.error, scenarioName = result.scenarioName;
      var label = "".concat(scenarioName, " - ").concat(error === null || error === void 0 ? void 0 : error.name, ": ").concat(error === null || error === void 0 ? void 0 : error.message);
      console.groupCollapsed("%c ! %c ".concat(label, " "), this.errorLabelStyle, this.errorBodyStyle);
      (error === null || error === void 0 ? void 0 : error.details) && this.logErrorDetails(error.details);
      console.groupEnd();
    };
    ScenarioLogger2.logErrorDetails = function(details) {
      var _this = this;
      details.forEach(function(detail) {
        return detail.failReason ? _this.logErrorFailReason(detail) : _this.logErrorMessage(detail.key, detail.description);
      });
    };
    ScenarioLogger2.logErrorFailReason = function(detail) {
      var _a;
      console.groupCollapsed("%c ".concat(detail.key, " %c ").concat(detail.description, " "), this.errorLabelStyle, this.errorBodyStyle);
      console.log("%c ".concat((_a = detail.failReason) === null || _a === void 0 ? void 0 : _a.stack, " "), this.errorBodyStyle);
      console.groupEnd();
    };
    ScenarioLogger2.logErrorMessage = function(label, body) {
      console.log("%c ".concat(label, " %c ").concat(body, " "), this.errorLabelStyle, this.errorBodyStyle);
    };
    ScenarioLogger2.errorLabelStyle = "background: #d5322a; color: #fff; padding: 2px; font-weight: bold";
    ScenarioLogger2.errorBodyStyle = "background: #fff0f0; color: #d5322a; padding: 2px;";
    return ScenarioLogger2;
  }();

  // src/modules/advisor/background/error/SetNotificationClosedError.ts
  var SetNotificationClosedError = class {
    constructor(message) {
      this.message = message;
      this.name = "SetNotificationClosedError";
    }
  };

  // src/modules/advisor/background/command/AdvisorNotificationClosedCommand.ts
  var AdvisorNotificationClosedCommand = class extends Command {
    constructor(scenarioName) {
      super();
      this.scenarioName = scenarioName;
    }
    execute() {
      return __async(this, null, function* () {
        try {
          const state = yield new GetStorageDataQuery("privacyAdvisor" /* PRIVACY_ADVISOR */, "sync" /* SYNC */).execute();
          if (!state)
            return Promise.reject(new SetNotificationClosedError("Failed getting Privacy Advisor Storage Data"));
          const newState = __spreadProps(__spreadValues({}, state), { stopped: [...state.stopped, this.scenarioName] });
          yield new SetStorageDataCommand("privacyAdvisor" /* PRIVACY_ADVISOR */, newState, "sync" /* SYNC */).execute();
        } catch (e) {
          return Promise.reject(new SetNotificationClosedError(e.message));
        }
      });
    }
  };

  // src/background/scripting/error/ContentScriptInjectionError.ts
  var ContentScriptInjectionError = class {
    constructor(message) {
      this.message = message;
      this.name = "ContentScriptInjectionError";
    }
  };

  // src/background/scripting/command/InjectContentScriptCommand.ts
  var InjectContentScriptCommand = class extends Command {
    constructor(tabId, files, frameIds) {
      super();
      this.tabId = tabId;
      this.files = files;
      this.frameIds = frameIds;
    }
    execute() {
      return __async(this, null, function* () {
        try {
          return yield chrome.scripting.executeScript({ target: { tabId: this.tabId, frameIds: this.frameIds }, files: this.files });
        } catch (e) {
          return Promise.reject(new ContentScriptInjectionError(e.message));
        }
      });
    }
  };

  // src/background/scripting/error/ContentStyleInjectionError.ts
  var ContentStyleInjectionError = class {
    constructor(message) {
      this.message = message;
      this.name = "ContentStyleInjectionError";
    }
  };

  // src/background/scripting/command/InjectContentStyleCommand.ts
  var InjectContentStyleCommand = class extends Command {
    constructor(tabId, files) {
      super();
      this.tabId = tabId;
      this.files = files;
    }
    execute() {
      return __async(this, null, function* () {
        try {
          return yield chrome.scripting.insertCSS({ target: { tabId: this.tabId }, files: this.files });
        } catch (e) {
          throw new ContentStyleInjectionError(e.message);
        }
      });
    }
  };

  // src/modules/advisor/background/command/scenario/AdvisorScenarioCommandBase.ts
  var AdvisorScenarioCommandBase = class extends Command {
    constructor(scenario, tabId) {
      super();
      this.scenario = scenario;
      this.tabId = tabId;
    }
    dispose() {
      this.scenario = void 0;
      this.tabId = void 0;
    }
    injectClientAssets() {
      return __async(this, null, function* () {
        return Promise.all([
          new InjectContentScriptCommand(this.tabId, ["client/advisor.js"]).execute(),
          new InjectContentStyleCommand(this.tabId, ["client/advisor.css", "client/runner-components.css"]).execute()
        ]);
      });
    }
  };

  // src/background/tabs/error/NavigateTabError.ts
  var NavigateTabError = class {
    constructor(message) {
      this.message = message;
      this.name = "NavigateTabError";
    }
  };

  // src/background/tabs/command/NavigateTabCommand.ts
  var NavigateTabCommand = class extends Command {
    constructor(url, tabId) {
      super();
      this.url = url;
      this.tabId = tabId;
      this.tabObserver = new TabObserver("ACTIVE" /* ACTIVE */, this.onTabUpdated.bind(this));
    }
    execute() {
      return __async(this, null, function* () {
        return new Promise((resolve, reject) => {
          this.resolve = resolve;
          this.reject = reject;
          this.tabObserver.subscribe();
          this.handleNavigation();
        });
      });
    }
    handleNavigation() {
      return __async(this, null, function* () {
        try {
          if (!this.tabId)
            this.tabId = yield this.getActiveTabId();
          yield chrome.tabs.update(this.tabId, { url: this.url, "active": true });
        } catch (e) {
          this.disposeTabObserver();
          this.reject(new NavigateTabError(e.message));
        }
      });
    }
    getActiveTabId() {
      return __async(this, null, function* () {
        const activeTab = yield new GetActiveTabCommand().execute();
        if (!activeTab)
          throw new Error("Failed to find an Active Tab");
        return activeTab.id;
      });
    }
    onTabUpdated(tabId, changeInfo, tab) {
      if (tabId !== this.tabId)
        return;
      this.disposeTabObserver();
      this.resolve(tab);
    }
    disposeTabObserver() {
      if (!this.tabObserver)
        return;
      this.tabObserver.unsubscribe();
      this.tabObserver = void 0;
    }
  };

  // src/modules/advisor/background/error/SetGuideFinishedError.ts
  var SetGuideFinishedError = class {
    constructor(message) {
      this.message = message;
      this.name = "SetGuideFinishedError";
    }
  };

  // src/modules/advisor/background/command/AdvisorGuideFinishedCommand.ts
  var AdvisorGuideFinishedCommand = class extends Command {
    constructor(scenarioName) {
      super();
      this.scenarioName = scenarioName;
    }
    execute() {
      return __async(this, null, function* () {
        try {
          const state = yield new GetStorageDataQuery("privacyAdvisor" /* PRIVACY_ADVISOR */, "sync" /* SYNC */).execute();
          if (!state)
            return Promise.reject(new SetGuideFinishedError("Failed getting Privacy Advisor Storage Data"));
          const newState = __spreadProps(__spreadValues({}, state), { completed: [...state.completed, this.scenarioName] });
          yield new SetStorageDataCommand("privacyAdvisor" /* PRIVACY_ADVISOR */, newState, "sync" /* SYNC */).execute();
        } catch (e) {
          return Promise.reject(new SetGuideFinishedError(e.message));
        }
      });
    }
  };

  // src/modules/advisor/background/error/AdvisorGuideScenarioError.ts
  var AdvisorGuideScenarioError = class {
    constructor(message) {
      this.message = message;
      this.name = "AdvisorGuideScenarioFailedError";
    }
  };

  // src/background/messages/observable/observer/BackgroundMessageObserver.ts
  var BackgroundMessageObserver = class extends MessageObserver {
    constructor(messageName, callback) {
      super(messageName, callback, instance.resolve("MessageObservable" /* MESSAGE_OBSERVABLE */));
      this.messageName = messageName;
    }
  };

  // src/modules/advisor/background/command/scenario/AwaitScenarioResultQuery.ts
  var AwaitScenarioResultQuery = class extends Command {
    constructor(tabId, scenarioName, scenarioType) {
      super();
      this.tabId = tabId;
      this.scenarioName = scenarioName;
      this.scenarioType = scenarioType;
      this.observer = new BackgroundMessageObserver("advisor.scenario.result" /* SCENARIO_RESULT */, this.onMessageHandler.bind(this));
    }
    execute() {
      return __async(this, null, function* () {
        return new Promise((resolve) => {
          this.resolve = resolve;
          this.observer.subscribe();
        });
      });
    }
    dispose() {
      this.disposeObserver();
      this.tabId = void 0;
      this.scenarioName = void 0;
      this.scenarioType = void 0;
    }
    onMessageHandler(message, sendResponse, sender) {
      if (!this.currentScenarioMessage(message, sender))
        return;
      this.dispose();
      this.resolve(message);
    }
    currentScenarioMessage(message, sender) {
      var _a;
      return this.tabMatch((_a = sender == null ? void 0 : sender.tab) == null ? void 0 : _a.id) && this.scenarioNameMatch(message) && this.typeMatch(message);
    }
    tabMatch(tabId) {
      return this.tabId === tabId;
    }
    scenarioNameMatch(message) {
      return this.scenarioName === message.result.scenarioName;
    }
    typeMatch(message) {
      return this.scenarioType === message.type;
    }
    disposeObserver() {
      if (!this.observer)
        return;
      this.observer.unsubscribe();
      this.observer = void 0;
    }
  };

  // src/modules/advisor/background/command/scenario/AdvisorGuideScenarioCommand.ts
  var AdvisorGuideScenarioCommand = class extends AdvisorScenarioCommandBase {
    execute() {
      return __async(this, null, function* () {
        try {
          yield new NavigateTabCommand(this.scenario.startUrl, this.tabId).execute();
          yield this.injectClientAssets();
          yield this.sendRunScenarioMessage();
          const result = yield new AwaitScenarioResultQuery(this.tabId, this.scenario.name, "advisor.scenario.type.guide" /* GUIDE */).execute();
          return yield this.onScenarioFinished(result);
        } catch (e) {
          return Promise.reject(new AdvisorGuideScenarioError(e.message));
        } finally {
          this.dispose();
        }
      });
    }
    sendRunScenarioMessage() {
      return __async(this, null, function* () {
        const body = { type: "advisor.scenario.type.guide" /* GUIDE */, scenario: this.scenario };
        yield new BackgroundMessageQuery("advisor.run.scenario" /* RUN_SCENARIO */, body, this.tabId).execute();
      });
    }
    onScenarioFinished(body) {
      return __async(this, null, function* () {
        var _a;
        if (!((_a = body == null ? void 0 : body.result) == null ? void 0 : _a.resolution))
          throw new Error("Invalid Advisor Scenario result");
        if (body.result.resolution !== Resolution.succeeded)
          throw new Error(`Advisor Scenario finished with ${body.result.resolution}`);
        return yield new AdvisorGuideFinishedCommand(this.scenario.name).execute();
      });
    }
  };

  // src/modules/advisor/background/error/AdvisorNotificationScenarioError.ts
  var AdvisorNotificationScenarioError = class {
    constructor(message) {
      this.message = message;
      this.name = "AdvisorNotificationScenarioError";
    }
  };

  // src/modules/advisor/background/command/scenario/AdvisorNotificationScenarioCommand.ts
  var AdvisorNotificationScenarioCommand = class extends AdvisorScenarioCommandBase {
    execute() {
      return __async(this, null, function* () {
        try {
          yield this.injectClientAssets();
          yield this.sendRunTriggerNotificationMessage();
          const response = yield new AwaitScenarioResultQuery(this.tabId, this.scenario.name, "advisor.scenario.type.notification" /* NOTIFICATION */).execute();
          return yield this.handleScenarioFinished(response);
        } catch (e) {
          return Promise.reject(new AdvisorNotificationScenarioError(e.message));
        } finally {
          this.dispose();
        }
      });
    }
    sendRunTriggerNotificationMessage() {
      return __async(this, null, function* () {
        const body = { type: "advisor.scenario.type.notification" /* NOTIFICATION */, scenario: this.scenario };
        yield new BackgroundMessageQuery("advisor.run.scenario" /* RUN_SCENARIO */, body, this.tabId).execute();
      });
    }
    handleScenarioFinished(body) {
      if (body.result.resolution === Resolution.succeeded)
        return new AdvisorGuideScenarioCommand(this.scenario, this.tabId).execute();
      else if (body.result.resolution === Resolution.stopped)
        return new AdvisorNotificationClosedCommand(this.scenario.name).execute();
      throw new Error(`Advisor Scenario finished with ${body.result.resolution}`);
    }
  };

  // src/modules/advisor/background/AdvisorNotificationHandler.ts
  var AdvisorNotificationHandler = class {
    constructor(data) {
      this.data = data;
      this.tabObserver = new TabObserver("ACTIVE" /* ACTIVE */, this.onTabUpdated.bind(this));
      this.notifications = [];
      this.triggeredTabs = [];
      this.stateUpdated(data);
    }
    stateUpdated(state) {
      this.data = state;
      this.notifications = this.getTriggerNotificationsData();
      if (!state.triggerNotification || !this.notifications.length)
        return this.tabObserver.unsubscribe();
      this.tabObserver.subscribe();
    }
    dispose() {
      if (this.tabObserver) {
        this.tabObserver.unsubscribe();
        this.tabObserver = void 0;
      }
      this.data = void 0;
    }
    getTriggerNotificationsData() {
      const seenGuides = [...this.data.completed, ...this.data.stopped];
      return new AdvisorUnseenNotificationsQuery(seenGuides, this.data.scenarios).execute();
    }
    onTabUpdated(tabId, changeInfo, tab) {
      return __async(this, null, function* () {
        if (this.triggeredTabs.includes(tabId))
          return;
        const notification = this.notifications.find((n) => n.triggerUrl === tab.url);
        if (notification)
          yield this.injectTriggerNotification(notification, tabId);
      });
    }
    injectTriggerNotification(notification, tabId) {
      return __async(this, null, function* () {
        this.triggeredTabs.push(tabId);
        const scenario = AdvisorUtil.getScenario(this.data.scenarios, notification.name, notification.category);
        yield new AdvisorNotificationScenarioCommand(scenario, tabId).execute();
      });
    }
  };

  // src/modules/advisor/background/AdvisorGuideHandler.ts
  var AdvisorGuideHandler = class {
    constructor() {
      this.shepherd = instance.resolve("Shepherd" /* SHEPHERD */);
      this.messageObserver = new BackgroundMessageObserver("advisor.start.guide" /* START_GUIDE */, this.onGuideRequested.bind(this));
      this.messageObserver.subscribe();
    }
    dispose() {
      this.shepherd = void 0;
      this.disposeMessageObserver();
    }
    onGuideRequested(scenarioName, sendResponse, sender) {
      return __async(this, null, function* () {
        const scenarios = this.shepherd.getData().privacyAdvisor.scenarios;
        const scenario = AdvisorUtil.getScenarioByName(scenarios, scenarioName);
        if (!scenario)
          return;
        yield new AdvisorGuideScenarioCommand(scenario, sender.tab.id).execute();
      });
    }
    disposeMessageObserver() {
      if (!this.messageObserver)
        return;
      this.messageObserver.unsubscribe();
      this.messageObserver = void 0;
    }
  };

  // src/modules/advisor/background/PrivacyAdvisor.ts
  var PrivacyAdvisor = class extends Feature {
    static buildFeature() {
      return __async(this, null, function* () {
        const feature = new PrivacyAdvisor();
        yield feature.init();
        return feature;
      });
    }
    init() {
      return __async(this, null, function* () {
        this.model = new PrivacyAdvisorModel(this);
        yield this.model.init();
        this.notificationHandler = new AdvisorNotificationHandler(this.model.getData());
        this.guideHandler = new AdvisorGuideHandler();
      });
    }
    onDataChanged(data) {
      this.notificationHandler.stateUpdated(data);
      new BackgroundMessageQuery("advisor.model.updated" /* MODEL_UPDATED */, data).execute();
    }
    dispose() {
      this.disposeModel();
      this.disposeNotificationHandler();
      this.disposeGuideHandler();
    }
    disposeModel() {
      if (!this.model)
        return;
      this.model.dispose();
      this.model = void 0;
    }
    disposeNotificationHandler() {
      if (!this.notificationHandler)
        return;
      this.notificationHandler.dispose();
      this.notificationHandler = void 0;
    }
    disposeGuideHandler() {
      if (!this.guideHandler)
        return;
      this.guideHandler.dispose();
      this.guideHandler = void 0;
    }
  };

  // src/background/localization/command/GetClientLanguageQuery.ts
  var GetClientLanguageQuery = class extends Command {
    constructor() {
      super(...arguments);
      this.config = instance.resolve("Config" /* CONFIG */);
    }
    get uiLanguage() {
      return chrome.i18n.getUILanguage();
    }
    execute() {
      return __async(this, null, function* () {
        const storedLanguage = yield new GetStorageDataQuery("language" /* LANGUAGE */).execute();
        const language = this.resolveLanguage(storedLanguage != null ? storedLanguage : this.uiLanguage);
        return Promise.resolve(language != null ? language : "en" /* English */);
      });
    }
    resolveLanguage(lang) {
      const supported = this.filterSupportedLanguage(lang);
      if (supported)
        return supported;
      const commonLanguage = lang.split("-")[0];
      return this.filterSupportedLanguage(commonLanguage);
    }
    filterSupportedLanguage(language) {
      return this.config.localization.supportedLanguages.find((l) => l.toUpperCase() === language.toUpperCase());
    }
  };

  // src/core/assets/command/GetAssetPathQuery.ts
  var GetAssetPathQuery = class extends Command {
    constructor(path) {
      super();
      this.path = path;
    }
    execute() {
      return chrome.runtime.getURL(this.path);
    }
  };

  // src/background/localization/loader/LocalizationLoader.ts
  var LocalizationLoader = class extends Loader {
    constructor(url) {
      super();
      this.url = url;
    }
    handleResponse(result) {
      return __async(this, null, function* () {
        if (result.status !== 200 /* OK */)
          return this.reject(new LoaderError(new Error(`Server responded with ${result.status} code`)));
        this.resolve(yield result.json());
      });
    }
  };

  // src/background/localization/error/LocalLocalizationError.ts
  var LocalLocalizationError = class {
    constructor(locale) {
      this.locale = locale;
      this.name = "LocalLocalizationError";
      this.message = `Failed to get localizations for ${this.locale} locale from local assets.`;
    }
  };

  // src/background/localization/error/StorageLocalizationError.ts
  var StorageLocalizationError = class {
    constructor(locale) {
      this.locale = locale;
      this.name = "StorageLocalizationError";
      this.message = `Failed to get localizations ${locale} locale from storage`;
    }
  };

  // src/background/localization/command/translations/GetStorageLocalizationQuery.ts
  var GetStorageLocalizationQuery = class extends Command {
    constructor(locale) {
      super();
      this.locale = locale;
    }
    execute() {
      return __async(this, null, function* () {
        try {
          const translations = yield new GetStorageDataQuery("translations" /* TRANSLATIONS */).execute();
          if (!translations[this.locale])
            return this.handleError();
          return Promise.resolve({ locale: this.locale, translations: translations[this.locale] });
        } catch (e) {
          return this.handleError();
        }
      });
    }
    handleError() {
      return Promise.reject(new StorageLocalizationError(this.locale));
    }
  };

  // src/background/localization/command/translations/GetLocalLocalizationQuery.ts
  var GetLocalLocalizationQuery = class extends Command {
    constructor(locale) {
      super();
      this.locale = locale;
    }
    get localizationUrl() {
      return new GetAssetPathQuery(`locales/Locale-${this.locale}.json`).execute();
    }
    execute() {
      return __async(this, null, function* () {
        try {
          return yield this.fetchTranslations();
        } catch (e) {
          return yield this.getStorageTranslations();
        }
      });
    }
    fetchTranslations() {
      return __async(this, null, function* () {
        const translations = yield new LocalizationLoader(this.localizationUrl).send();
        return { locale: this.locale, translations };
      });
    }
    getStorageTranslations() {
      return __async(this, null, function* () {
        try {
          return yield new GetStorageLocalizationQuery(this.locale).execute();
        } catch (e) {
          return Promise.reject(new LocalLocalizationError(this.locale));
        }
      });
    }
  };

  // src/background/localization/error/RemoteLocalizationError.ts
  var RemoteLocalizationError = class {
    constructor(locale) {
      this.locale = locale;
      this.name = "RemoteLocalizationError";
      this.message = `Failed to fetch localizations for ${this.locale} locale from remote address.`;
    }
  };

  // src/background/localization/command/translations/GetRemoteLocalizationQuery.ts
  var GetRemoteLocalizationQuery = class extends RetryFailedCommand {
    constructor(locale) {
      super();
      this.locale = locale;
      this.config = instance.resolve("Config" /* CONFIG */);
    }
    get repeatTimesLimit() {
      return this.config.localization.repeatFailedTimes;
    }
    get localizationUrl() {
      return `${this.config.localization.production}/Locale-${this.locale}.json`;
    }
    runAttempt() {
      return __async(this, null, function* () {
        const translations = yield new LocalizationLoader(this.localizationUrl).send();
        return Promise.resolve({ locale: this.locale, translations });
      });
    }
    onFailed() {
      return __async(this, null, function* () {
        return yield this.getStorageTranslations();
      });
    }
    getStorageTranslations() {
      return __async(this, null, function* () {
        try {
          return yield new GetStorageLocalizationQuery(this.locale).execute();
        } catch (e) {
          return Promise.reject(new RemoteLocalizationError(this.locale));
        }
      });
    }
  };

  // src/background/localization/command/GetLocalizationsQuery.ts
  var GetLocalizationsQuery = class extends Command {
    constructor(locales) {
      super();
      this.locales = locales;
    }
    execute() {
      return __async(this, null, function* () {
        const results = yield Promise.allSettled([
          ...this.getLocalTranslationsQueries(),
          ...this.getRemoteTranslationsQueries()
        ]);
        const queryResult = {
          failedLocales: { local: [], remote: [] },
          locales: {}
        };
        results.forEach((result) => {
          if (result.status === "fulfilled") {
            const { locale, translations } = result.value;
            return queryResult.locales[locale] = __spreadValues(__spreadValues({}, queryResult.locales[locale]), translations);
          }
          if (result.reason instanceof RemoteLocalizationError)
            return queryResult.failedLocales.remote.push(result.reason.locale);
          if (result.reason instanceof LocalLocalizationError)
            return queryResult.failedLocales.local.push(result.reason.locale);
        });
        return Promise.resolve(queryResult);
      });
    }
    getLocalTranslationsQueries() {
      return this.locales.map((locale) => new GetLocalLocalizationQuery(locale).execute());
    }
    getRemoteTranslationsQueries() {
      return this.locales.map((locale) => new GetRemoteLocalizationQuery(locale).execute());
    }
  };

  // src/background/localization/observable/LocalizationObservable.ts
  var LocalizationObservable = class extends Observable {
    notifyObserver(observer, data) {
      observer.callback(data);
    }
  };

  // src/background/localization/model/LocalizationModel.ts
  var LocalizationModel = class {
    constructor() {
      this.config = instance.resolve("Config" /* CONFIG */).localization;
      this.shepherdObserver = new ShepherdObserver(this.updateTranslations.bind(this), "privacyAdvisor");
      this.observable = new LocalizationObservable();
    }
    getClientLanguage() {
      return this.clientLanguage;
    }
    getTranslations() {
      return this.translations;
    }
    init() {
      return __async(this, null, function* () {
        this.clientLanguage = yield new GetClientLanguageQuery().execute();
        yield this.updateTranslations();
        this.shepherdObserver.subscribe();
      });
    }
    updateTranslations() {
      return __async(this, null, function* () {
        const translations = yield new GetLocalizationsQuery(this.clientLocales).execute();
        this.translations = translations.locales;
        yield this.handleFailedRefresh(translations.failedLocales);
        yield new SetStorageDataCommand("translations" /* TRANSLATIONS */, translations.locales).execute();
      });
    }
    get clientLocales() {
      return this.clientLanguage === "en" /* English */ ? ["en" /* English */] : ["en" /* English */, this.clientLanguage];
    }
    handleFailedRefresh(failedLocales) {
      return __async(this, null, function* () {
        if (failedLocales.local.length === 0 && failedLocales.remote.length === 0)
          return;
        yield this.createTimer();
      });
    }
    onTimer() {
      return __async(this, null, function* () {
        yield this.timer.dispose();
        this.timer = void 0;
        yield this.updateTranslations();
      });
    }
    createTimer() {
      return __async(this, null, function* () {
        if (this.timer)
          yield this.timer.dispose();
        this.timer = new Timer(this.onTimer, "LocalizationModelAlarm");
        yield this.timer.start(Date.now() + this.config.failRefreshDelay);
      });
    }
  };

  // src/background/localization/observable/observer/LocalizationObserver.ts
  var LocalizationObserver = class extends Observer {
    constructor(callback, observable) {
      super(callback, observable);
      this.callback = callback;
      this.observable = observable;
    }
  };

  // src/background/localization/command/translations/RegisterTranslationsCommand.ts
  var RegisterTranslationsCommand = class extends Command {
    constructor(translations, language) {
      super();
      this.translations = translations;
      this.language = language;
      this.localizationLibrary = instance.resolve("LocalizationLibrary" /* LOCALIZATION_LIBRARY */);
    }
    execute() {
      this.localizationLibrary.registerLocales(this.translations);
      this.localizationLibrary.setLanguage(this.language);
    }
  };

  // src/background/localization/Localization.ts
  var Localization = class extends CoreModule {
    constructor(model) {
      super();
      this.model = model;
      this.messageObserver = new BackgroundMessageObserver("localization.get.translations" /* GET_TRANSLATIONS */, this.onGetTranslations.bind(this));
      this.registerLocales();
      this.subscribeObserver();
      this.messageObserver.subscribe();
    }
    subscribeObserver() {
      this.localizationObserver = new LocalizationObserver(this.localizationsUpdated.bind(this), this.model.observable);
      this.localizationObserver.subscribe();
    }
    localizationsUpdated() {
      return __async(this, null, function* () {
        return this.registerLocales();
      });
    }
    registerLocales() {
      new RegisterTranslationsCommand(this.model.getTranslations(), this.model.getClientLanguage()).execute();
    }
    static buildModule() {
      return __async(this, null, function* () {
        const model = new LocalizationModel();
        yield model.init();
        return new Localization(model);
      });
    }
    onGetTranslations(body, sendResponse) {
      const data = { language: this.model.getClientLanguage(), translations: this.model.getTranslations() };
      sendResponse(data);
    }
  };

  // src/background/panel/observable/observer/ExtensionIconClickedObserver.ts
  var ExtensionIconClickedObserver = class extends Observer {
    constructor(callback) {
      super(callback, instance.resolve("ExtensionIconObservable" /* EXTENSION_ICON_OBSERVABLE */));
      this.callback = callback;
    }
  };

  // src/background/tabs/error/RemoveTabError.ts
  var RemoveTabError = class {
    constructor(message) {
      this.message = message;
      this.name = "RemoveTabError";
    }
  };

  // src/background/tabs/command/RemoveTabCommand.ts
  var RemoveTabCommand = class extends Command {
    constructor(tabId) {
      super();
      this.tabId = tabId;
    }
    execute() {
      return __async(this, null, function* () {
        try {
          yield chrome.tabs.remove(this.tabId);
        } catch (e) {
          return Promise.reject(new RemoveTabError(e.message));
        }
      });
    }
  };

  // src/background/panel/model/PanelModel.ts
  var PanelModel = class {
    constructor() {
      this.messageObserver = new BulkObserver([
        new BackgroundStorageObserver("panel" /* PANEL */, this.onStorageUpdated.bind(this)),
        new MessageObserver("panelModel.model.get" /* GET_MODEL */, this.getData.bind(this)),
        new MessageObserver("panelModel.setOnboarded" /* SET_ONBOARDED */, this.setOnboarded.bind(this))
      ]);
    }
    init() {
      return __async(this, null, function* () {
        this.messageObserver.subscribe();
        this.data = yield new GetStorageDataQuery("panel" /* PANEL */).execute();
        if (!this.data)
          this.data = this.getDefaultState();
      });
    }
    update(data) {
      this.data = __spreadValues(__spreadValues({}, this.data), data);
      new BackgroundMessageQuery("panelModel.updated" /* MODEL_UPDATED */, this.data).execute();
    }
    getData(_, sendResponse) {
      sendResponse(this.data);
    }
    onStorageUpdated(data) {
      this.update(__spreadValues(__spreadValues({}, this.data), data));
    }
    getDefaultState() {
      return {
        onboarded: false
      };
    }
    setOnboarded(data) {
      new SetStorageDataCommand("panel" /* PANEL */, __spreadProps(__spreadValues({}, this.data), { onboarded: data.onboarded })).execute();
    }
  };

  // src/modules/emptyTabPage/background/error/ShowEmptyTabPageError.ts
  var ShowEmptyTabPageError = class {
    constructor(message, stack) {
      this.message = message;
      this.stack = stack;
      this.name = "ShowEmptyTabPageError";
    }
  };

  // src/background/tabs/error/CreateTabError.ts
  var CreateTabError = class {
    constructor(message) {
      this.message = message;
      this.name = "CreateTabError";
    }
  };

  // src/background/tabs/command/CreateTabCommand.ts
  var CreateTabCommand = class extends Command {
    constructor(createProperties) {
      super();
      this.createProperties = createProperties;
      this.tabObserver = new TabObserver("ACTIVE" /* ACTIVE */, this.onTabUpdated.bind(this));
    }
    execute() {
      return new Promise((resolve, reject) => {
        this.resolve = resolve;
        this.reject = reject;
        this.tabObserver.subscribe();
        this.createTab();
      });
    }
    createTab() {
      return __async(this, null, function* () {
        try {
          const tab = yield chrome.tabs.create(this.createProperties);
          this.tabId = tab.id;
        } catch (e) {
          this.disposeTabObserver();
          this.reject(new CreateTabError(e.message));
        }
      });
    }
    onTabUpdated(tabId, changeInfo, tab) {
      if (tabId !== this.tabId)
        return;
      this.disposeTabObserver();
      this.resolve(tab);
    }
    disposeTabObserver() {
      var _a;
      (_a = this.tabObserver) == null ? void 0 : _a.unsubscribe();
      this.tabObserver = void 0;
    }
  };

  // src/utils/UrlUtil.ts
  var EXTENSION_PAGE_PROTOCOL = "chrome-extension://";
  var UrlUtil = class {
    static isIgnoredUrl(url, ignoredUrls) {
      return ignoredUrls.some((ignoredUrl) => url.match(new RegExp(ignoredUrl)));
    }
    static isExtensionPage(url) {
      return url.startsWith(EXTENSION_PAGE_PROTOCOL);
    }
    static isExtensionTab(url) {
      return url.startsWith(chrome.runtime.getURL(""));
    }
  };

  // src/modules/emptyTabPage/background/command/OpenEmptyTabPageCommand.ts
  var OpenEmptyTabPageCommand = class extends Command {
    constructor(currentTab) {
      super();
      this.currentTab = currentTab;
      this.config = instance.resolve("Config" /* CONFIG */);
    }
    execute() {
      return __async(this, null, function* () {
        try {
          const url = new GetAssetPathQuery("client/extensionPage.html").execute();
          const tab = yield this.createOrRedirectTab(url);
          yield new BackgroundMessageQuery("extensionPage.emptyTabPage.show" /* SHOW */, void 0, tab.id).execute();
          yield new BackgroundMessageQuery("panel.show" /* SHOW */, void 0, tab.id).execute();
        } catch (e) {
          return Promise.reject(new ShowEmptyTabPageError(e.message, e.stack));
        }
      });
    }
    getExtensionTab() {
      return __async(this, null, function* () {
        return new Promise((resolve) => {
          chrome.tabs.query({}, (tabs) => {
            const extTab = tabs.find((tab) => {
              if (UrlUtil.isExtensionTab(tab.url)) {
                return true;
              }
            });
            return resolve(extTab);
          });
        });
      });
    }
    createOrRedirectTab(url) {
      return __async(this, null, function* () {
        const isAlreadyNewTab = this.config.emptyTabUrls.includes(this.currentTab.url);
        if (isAlreadyNewTab) {
          return yield new NavigateTabCommand(url, this.currentTab.id).execute();
        }
        const extensionTab = yield this.getExtensionTab();
        if (extensionTab) {
          return yield new NavigateTabCommand(url, extensionTab.id).execute();
        }
        return yield new CreateTabCommand({ url, active: true }).execute();
      });
    }
  };

  // src/background/panel/PanelHandler.ts
  var PanelHandler = class extends CoreModule {
    constructor() {
      super(...arguments);
      this.model = new PanelModel();
      this.config = instance.resolve("Config" /* CONFIG */);
      this.extensionIconObserver = new ExtensionIconClickedObserver(this.onExtensionIconClicked.bind(this));
      this.leaveWebsiteObserver = new MessageObserver("panelModel.leaveWebsite" /* LEAVE_WEBSITE */, this.leaveWebsite.bind(this));
    }
    static buildModule() {
      return __async(this, null, function* () {
        const module2 = new PanelHandler();
        yield module2.init();
        return module2;
      });
    }
    init() {
      return __async(this, null, function* () {
        yield this.model.init();
        this.extensionIconObserver.subscribe();
        this.leaveWebsiteObserver.subscribe();
      });
    }
    onExtensionIconClicked(tab) {
      return __async(this, null, function* () {
        const isIgnoredUrl = UrlUtil.isIgnoredUrl(tab.url, this.config.ignoredTabs);
        const isExtensionUrl = UrlUtil.isExtensionPage(tab.url);
        if (isIgnoredUrl && !isExtensionUrl)
          return new OpenEmptyTabPageCommand(tab).execute();
        try {
          yield new BackgroundMessageQuery("action.onClicked" /* ON_CLICKED */, void 0, tab.id).execute();
        } catch (error) {
        }
      });
    }
    leaveWebsite(body, sendResponse, sender) {
      return __async(this, null, function* () {
        yield new RemoveTabCommand(sender.tab.id).execute();
      });
    }
  };

  // src/background/nativeApp/connectors/AppConnectorBase.ts
  var AppConnectorBase = class {
    constructor() {
      this.LOCAL_PORTS = [27275, 18821, 7754];
    }
    connect() {
      return __async(this, null, function* () {
        const connections = this.LOCAL_PORTS.map((port) => this.load(port));
        return Promise.any(connections);
      });
    }
    reconnect() {
      return this.load(this.lastActivePort);
    }
  };

  // src/background/nativeApp/loader/GetInfoLoader.ts
  var import_LocalServerProto = __toESM(require_LocalServerProto());

  // src/background/nativeApp/loader/error/NativeAppResponseError.ts
  var NativeAppResponseError = class {
    constructor() {
      this.message = "Invalid response recieved";
      this.name = "NativeAppResponseError";
    }
  };

  // src/background/nativeApp/loader/GetInfoLoader.ts
  var GetInfoLoader = class extends Loader {
    constructor(port) {
      super();
      this.port = port;
      this.config = instance.resolve("Config" /* CONFIG */);
      this.method = "POST" /* POST */;
      this.url = "";
      this.url = `http://localhost:${this.port}/get-info`;
    }
    get headers() {
      return { "Content-Type": "application/octet-stream" };
    }
    handleResponse(response) {
      return __async(this, null, function* () {
        if (!response.ok)
          return this.reject(new NativeAppResponseError());
        const buffer = yield response.arrayBuffer();
        const decoded = import_LocalServerProto.GetInfoResponse.decode(new Uint8Array(buffer));
        if (Object.keys(decoded).length === 0)
          return this.reject(new NativeAppResponseError());
        this.resolve(decoded);
      });
    }
    get body() {
      const clientData = this.config.client.defaultState;
      const request = import_LocalServerProto.GetInfoRequest.create({ browser: import_LocalServerProto.BrowserType[clientData.browserType], clientVersion: clientData.version });
      return import_LocalServerProto.GetInfoRequest.encode(request).finish();
    }
  };

  // src/background/nativeApp/connectors/AppConnector.ts
  var AppConnector = class extends AppConnectorBase {
    load(port) {
      return __async(this, null, function* () {
        const response = yield new GetInfoLoader(port).send();
        this.lastActivePort = port;
        this.identifiers = {
          localAppGUID: response.guid,
          localAppHWID: response.hwid,
          localAppVersion: response.productVersion,
          localAppType: this.parseProduct(response.product)
        };
      });
    }
    parseProduct(product) {
      switch (product) {
        case "one_free":
          return "one_free" /* ONE_FREE */;
        case "one_pro":
          return "one_pro" /* ONE_PRO */;
        case "free_av":
          return "free_av" /* AV_FREE */;
        case "pro_av":
          return "pro_av" /* AV_PRO */;
        case "avg_free":
          return "avg_free" /* AVG_FREE */;
        case "avg_paid":
          return "avg_paid" /* AVG_PAID */;
        case "avg_business":
          return "avg_business" /* AVG_BUSINESS */;
      }
      return "unknown" /* UNKNOWN */;
    }
  };

  // src/utils/UTF8Util.ts
  var UTF8Util = class {
    static encode(str) {
      const strlen = str.length;
      const u8 = [];
      let c, nextc;
      let x, y, z;
      for (let i = 0; i < strlen; i++) {
        c = str.charCodeAt(i);
        if ((c & 65408) == 0) {
          u8.push(c);
        } else {
          if ((c & 64512) == 55296) {
            nextc = str.charCodeAt(i + 1);
            if ((nextc & 64512) == 56320) {
              c = ((c & 1023) << 10 | nextc & 1023) + 65536;
              i++;
            }
          }
          x = c & 255;
          y = c & 65280;
          z = c & 16711680;
          if (c <= 2047) {
            u8.push(192 | y >> 6 | x >> 6);
            u8.push(128 | x & 63);
          } else if (c <= 65535) {
            u8.push(224 | y >> 12);
            u8.push(128 | y >> 6 & 63 | x >> 6);
            u8.push(128 | x & 63);
          } else if (c <= 1114111) {
            u8.push(240 | z >> 18);
            u8.push(128 | z >> 12 & 63 | y >> 12);
            u8.push(128 | y >> 6 & 63 | x >> 6);
            u8.push(128 | x & 63);
          } else {
            u8.push("?".charCodeAt(0));
          }
        }
      }
      return u8;
    }
    static decode(u8) {
      if (!u8)
        return "";
      const u8len = u8.length;
      let str = "";
      let c, b2, b3, b4;
      for (let i = 0; i < u8len; i++) {
        c = u8[i];
        if ((c & 128) == 0) {
        } else if ((c & 248) == 240) {
          b2 = u8[i + 1];
          b3 = u8[i + 2];
          b4 = u8[i + 3];
          if ((b2 & 192) == 128 && (b3 & 192) == 128 && (b4 & 192) == 128) {
            c = (c & 7) << 18 | (b2 & 63) << 12 | (b3 & 63) << 6 | b4 & 63;
            i += 3;
          } else {
            continue;
          }
        } else if ((c & 240) == 224) {
          b2 = u8[i + 1];
          b3 = u8[i + 2];
          if ((b2 & 192) == 128 && (b3 & 192) == 128) {
            c = (c & 15) << 12 | (b2 & 63) << 6 | b3 & 63;
            i += 2;
          } else {
            continue;
          }
        } else if ((c & 224) == 192) {
          b2 = u8[i + 1];
          if ((b2 & 192) == 128) {
            c = (c & 31) << 6 | b2 & 63;
            i += 1;
          } else {
            continue;
          }
        } else {
          continue;
        }
        if (c <= 65535) {
          str += String.fromCharCode(c);
        } else if (c > 65535 && c <= 1114111) {
          c -= 65536;
          str += String.fromCharCode(55296 | c >> 10) + String.fromCharCode(56320 | c & 1023);
        }
      }
      return str;
    }
  };

  // src/background/nativeApp/loader/legacy/LegacyLoaderBase.ts
  var import_LegacyLocalServerProto = __toESM(require_LegacyLocalServerProto());
  var LegacyLoaderBase = class extends Loader {
    constructor(port, appIdToken = "") {
      super();
      this.port = port;
      this.appIdToken = appIdToken;
      this.config = instance.resolve("Config" /* CONFIG */);
      this.method = "POST" /* POST */;
      this.url = `http://localhost:${this.port}/command`;
    }
    get headers() {
      return { "Content-Type": "application/octet-stream", "X-AVAST-APP-ID": this.appIdToken };
    }
    get body() {
      const params = this.createRequestParams();
      return import_LegacyLocalServerProto.default.LocalServerCommandRequest.encode(params).finish();
    }
    createRequestParams() {
      const request = import_LegacyLocalServerProto.default.LocalServerCommandRequest.create();
      request.type = import_LegacyLocalServerProto.default.CommandType[this.requestType];
      request.browser = import_LegacyLocalServerProto.default.BrowserType[this.config.client.defaultState.browserType];
      return request;
    }
    handleResponse(response) {
      return __async(this, null, function* () {
        if (!response.ok)
          return this.reject(new NativeAppResponseError());
        const buffer = yield response.arrayBuffer();
        const decoded = import_LegacyLocalServerProto.default.LocalServerCommandResponse.decode(new Uint8Array(buffer));
        const result = decoded.result.map((res) => UTF8Util.decode(res));
        if (!Array.isArray(result))
          return this.reject(new NativeAppResponseError());
        return this.parseResponse(result);
      });
    }
  };

  // src/background/nativeApp/loader/legacy/LegacyAcknowledgementLoader.ts
  var LegacyAcknowledgementLoader = class extends LegacyLoaderBase {
    constructor() {
      super(...arguments);
      this.requestType = "ACKNOWLEDGEMENT" /* ACKNOWLEDGEMENT */;
    }
    parseResponse(response) {
      return __async(this, null, function* () {
        const token = response[3];
        return token ? this.resolve(token) : this.reject(new NativeAppResponseError());
      });
    }
    createRequestParams() {
      const request = super.createRequestParams();
      request.params.push(UTF8Util.encode(this.config.client.defaultState.version));
      return request;
    }
  };

  // src/background/nativeApp/loader/legacy/LegacyGuidsLoader.ts
  var LegacyGuidsLoader = class extends LegacyLoaderBase {
    constructor() {
      super(...arguments);
      this.requestType = "GET_GUIDS" /* GET_GUIDS */;
    }
    parseResponse(response) {
      return __async(this, null, function* () {
        if (response.length < 3)
          return this.reject(new NativeAppResponseError());
        return this.resolve({
          localAppGUID: response[0],
          localAppHWID: response[2]
        });
      });
    }
  };

  // src/background/nativeApp/loader/legacy/LegacyVersionsLoader.ts
  var LegacyVersionsLoader = class extends LegacyLoaderBase {
    constructor() {
      super(...arguments);
      this.requestType = "GET_VERSIONS" /* GET_VERSIONS */;
    }
    parseResponse(response) {
      return __async(this, null, function* () {
        if (response.length === 0)
          return this.reject(new NativeAppResponseError());
        return this.resolve({ localAppVersion: response[0] });
      });
    }
  };

  // src/background/nativeApp/connectors/LegacyAppConnector.ts
  var LegacyAppConnector = class extends AppConnectorBase {
    load(port) {
      return __async(this, null, function* () {
        const appIdToken = yield new LegacyAcknowledgementLoader(port).send();
        const guidResponse = yield new LegacyGuidsLoader(port, appIdToken).send();
        const versionsResponse = yield new LegacyVersionsLoader(port, appIdToken).send();
        this.parseIdentifiers(guidResponse, versionsResponse);
        this.lastActivePort = port;
      });
    }
    parseIdentifiers(guidResponse, versionsResponse) {
      this.identifiers = __spreadValues(__spreadValues({}, guidResponse), versionsResponse);
      this.identifiers.localAppType = "av_legacy" /* AV_LEGACY */;
    }
  };

  // src/background/nativeApp/command/GetAppConnectorQuery.ts
  var GetAppConnectorQuery = class {
    execute() {
      return __async(this, null, function* () {
        try {
          return yield Promise.any([
            this.getHandledConnector(new AppConnector()),
            this.getHandledConnector(new LegacyAppConnector())
          ]);
        } catch (e) {
          return Promise.resolve(void 0);
        }
      });
    }
    getHandledConnector(connector) {
      return __async(this, null, function* () {
        yield connector.connect();
        return connector;
      });
    }
  };

  // src/background/interval/error/IntervalError.ts
  var IntervalError = class {
    constructor() {
      this.name = "IntervalError";
      this.message = "Interval should be at least 1 minute";
    }
  };

  // src/background/interval/Interval.ts
  var Interval = class extends Timer {
    constructor() {
      super(...arguments);
      this.onAlarm = (alarm) => __async(this, null, function* () {
        if (alarm.name !== this.name)
          return Promise.resolve();
        yield this.callback();
      });
    }
    start(interval) {
      return __async(this, null, function* () {
        if (interval < 0.5)
          return Promise.reject(new IntervalError());
        const alarmInstance = yield chrome.alarms.get(this.name);
        if (alarmInstance) {
          chrome.alarms.onAlarm.removeListener(this.onAlarm);
          chrome.alarms.onAlarm.addListener(this.onAlarm);
          return Promise.resolve();
        }
        chrome.alarms.create(this.name, {
          periodInMinutes: interval,
          delayInMinutes: interval
        });
        chrome.alarms.onAlarm.addListener(this.onAlarm);
        return Promise.resolve();
      });
    }
  };

  // src/background/nativeApp/AppConnectorHandler.ts
  var AppConnectorHandler = class {
    constructor() {
      this.config = instance.resolve("Config" /* CONFIG */);
    }
    getInitialData() {
      return __async(this, null, function* () {
        return this.getIdentifiersData();
      });
    }
    watch(onDataUpdated) {
      this.onDataUpdated = onDataUpdated;
      this.startWatchInterval();
    }
    getIdentifiersData() {
      return __async(this, null, function* () {
        var _a, _b;
        try {
          yield this.restoreConnection();
        } catch (e) {
          yield this.handleInitialConnection();
        } finally {
          return (_b = (_a = this.appConnector) == null ? void 0 : _a.identifiers) != null ? _b : this.config.client.defaultState.identifiers;
        }
      });
    }
    startWatchInterval() {
      this.interval = new Interval(this.onIntervalAlarm.bind(this), "WatchIntervalAlarm");
      this.interval.start(this.config.appConnector.checkIntervalInMinutes);
    }
    onIntervalAlarm() {
      return __async(this, null, function* () {
        console.debug("onIntervalAlarm", Date());
        const data = yield this.getIdentifiersData();
        this.onDataUpdated(data);
      });
    }
    restoreConnection() {
      return __async(this, null, function* () {
        return this.appConnector ? this.appConnector.reconnect() : Promise.reject();
      });
    }
    handleInitialConnection() {
      return __async(this, null, function* () {
        this.appConnector = yield new GetAppConnectorQuery().execute();
      });
    }
  };

  // src/utils/BrowserUtil.ts
  var platform = navigator.platform;
  var userAgent = navigator.userAgent;
  var BrowserUtil = class {
    static getBrowserType() {
      switch (true) {
        case userAgent.includes("Edge"):
          return "MS_EDGE" /* MS_EDGE */;
        case userAgent.includes("Edg/"):
          return "CHROMIUMEDGE" /* CHROMIUMEDGE */;
        case userAgent.includes("OPR"):
          return "OPERA" /* OPERA */;
        case userAgent.includes("Avast"):
          return "AVAST" /* AVAST */;
        case userAgent.includes("Chrome"):
          return "CHROME" /* CHROME */;
        case userAgent.includes("Firefox"):
          return "FIREFOX" /* FIREFOX */;
        default:
          return "UNKNOWN" /* UNKNOWN */;
      }
    }
    static getOsType() {
      switch (true) {
        case platform.includes("Win"):
          return "Windows" /* WINDOWS */;
        case platform.includes("Mac"):
          return "Mac" /* MAC */;
        case platform.includes("Linux"):
          return "Linux" /* LINUX */;
        default:
          return "" /* UNKNOWN */;
      }
    }
    static getOsBuild(osVersion) {
      const osVersionMatch = osVersion.match(/^(\d+\.)?(\d+\.)?(\*|\d+)/);
      return osVersionMatch ? osVersionMatch[3] : null;
    }
    static getOsVersion() {
      switch (true) {
        case userAgent.includes("Windows 10.0"):
          return "10.0 (Windows 10.0)";
        case userAgent.includes("Windows NT 10.0"):
          return "10.0 (Windows NT 10.0)";
        case userAgent.includes("Windows 8.1"):
          return "6.3 (Windows 8.1)";
        case userAgent.includes("Windows NT 6.3"):
          return "6.3 (Windows NT 6.3)";
        case userAgent.includes("Windows 8"):
          return "6.2 (Windows 8)";
        case userAgent.includes("Windows NT 6.2"):
          return "6.2 (Windows NT 6.2)";
        case userAgent.includes("Windows 7"):
          return "6.1 (Windows 7)";
        case userAgent.includes("Windows NT 6.1"):
          return "6.1 (Windows NT 6.1)";
        case userAgent.includes("Windows NT 6.0"):
          return "6.0 (Windows NT 6.0)";
        case userAgent.includes("Windows NT 5.2"):
          return "5.2 (Windows NT 5.2)";
        case userAgent.includes("Windows NT 5.1"):
          return "5.1 (Windows NT 5.1)";
        case userAgent.includes("Windows XP"):
          return "5.1 (Windows XP)";
        case userAgent.includes("Windows NT 5.0"):
          return "5.0 (Windows NT 5.0)";
        case userAgent.includes("Windows 2000"):
          return "5.0 (Windows 2000)";
        case userAgent.includes("Win 9x 4.90"):
          return "4.90 (Win 9x 4.90)";
        case userAgent.includes("Windows ME"):
          return "4.90 (Windows ME)";
        case userAgent.includes("Windows 98"):
          return "4.10 (Windows 98)";
        case userAgent.includes("Win98"):
          return "4.10 (Win98)";
        case userAgent.includes("Windows 95"):
          return "4.03 (Windows 95)";
        case userAgent.includes("Win95"):
          return "4.03 (Win95)";
        case userAgent.includes("Windows_95"):
          return "4.03 (Windows_95)";
        case userAgent.includes("Windows NT 4.0"):
          return "4.0 (Windows NT 4.0)";
        case userAgent.includes("WinNT4.0"):
          return "4.0 (WinNT4.0)";
        case userAgent.includes("WinNT"):
          return "4.0 (WinNT)";
        case userAgent.includes("Windows NT"):
          return "4.0 (Windows NT)";
        case userAgent.includes("Win16"):
          return "3.11 (Win16)";
        case userAgent.includes("Intel Mac OS X 10_15"):
          return "10.15 (macOS Monterey)";
        case userAgent.includes("Intel Mac OS X 10_14"):
          return "10.14 (macOS Mojave)";
        case userAgent.includes("Intel Mac OS X 10_13"):
          return "10.13 (macOS High Sierra)";
        case userAgent.includes("Intel Mac OS X 10_12"):
          return "10.12 (macOS Sierra)";
        case userAgent.includes("Intel Mac OS X 10_11"):
          return "10.11 (macOS El Capitan)";
        case userAgent.includes("Intel Mac OS X 10_10"):
          return "10.10 (macOS Yosemite)";
        case userAgent.includes("Intel Mac OS X 10_9"):
          return "10.9 (macOS Mavericks)";
        default:
          return "";
      }
    }
  };

  // src/background/client/command/GetInitialClientDataQuery.ts
  var GetInitialClientDataQuery = class extends Command {
    constructor() {
      super(...arguments);
      this.config = instance.resolve("Config" /* CONFIG */);
    }
    getMv2AvastConfig() {
      return __async(this, null, function* () {
        try {
          return yield new GetStorageDataQuery("AvastConfig" /* MV2_AVAST_CONFIG */).execute();
        } catch (e) {
          return null;
        }
      });
    }
    execute() {
      return __async(this, null, function* () {
        const systemData = this.getSystemData();
        let storageData = yield this.getStorageData();
        const defaultData = this.config.client.defaultState;
        if (!storageData) {
          storageData = defaultData;
          const mv2AvastConfig = yield this.getMv2AvastConfig();
          if (mv2AvastConfig) {
            storageData.identifiers.localAppPluginGUID = mv2AvastConfig == null ? void 0 : mv2AvastConfig.PluginGUID;
            storageData.identifiers.localAppHWID = mv2AvastConfig == null ? void 0 : mv2AvastConfig.HWID;
            storageData.identifiers.localAppGUID = mv2AvastConfig == null ? void 0 : mv2AvastConfig.GUID;
          }
          ;
          storageData.extensionGUID = this.createExtensionGuid();
        }
        const version = chrome.runtime.getManifest().version;
        return __spreadProps(__spreadValues(__spreadValues({}, storageData), systemData), {
          version
        });
      });
    }
    getStorageData() {
      return __async(this, null, function* () {
        try {
          return yield new GetStorageDataQuery("client" /* CLIENT */).execute();
        } catch (e) {
          return void 0;
        }
      });
    }
    getSystemData() {
      const os = BrowserUtil.getOsType();
      const osVersion = BrowserUtil.getOsVersion();
      const browserType = BrowserUtil.getBrowserType();
      const osBuild = BrowserUtil.getOsBuild(osVersion);
      return { os, osVersion, osBuild, browserType };
    }
    createExtensionGuid() {
      const pattern = "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";
      const hex = "0123456789abcdef";
      return [...pattern].map((char) => {
        if (char !== "x" && char !== "y")
          return char;
        let r = Math.random() * 16 | 0;
        if (char === "y") {
          r &= 3;
          r |= 8;
        }
        return hex[r];
      }).join("");
    }
  };

  // src/background/client/observable/ClientObservable.ts
  var ClientObservable = class extends Observable {
    notifyObserver(observer, data) {
      observer.callback(data);
    }
  };

  // src/background/client/loader/A1GeoLoader.ts
  var A1GeoLoader = class extends Loader {
    constructor() {
      super();
      this.method = "GET" /* GET */;
      const config = instance.resolve("Config" /* CONFIG */);
      this.url = config.geoLocation.production;
    }
    get headers() {
      return {
        "Accept": "application/json",
        "X-Requested-With": "XMLHttpRequest"
      };
    }
  };

  // src/background/client/command/GetA1GeoAvailabilityQuery.ts
  var GetA1GeoAvailabilityQuery = class extends Command {
    execute() {
      return __async(this, null, function* () {
        try {
          return yield new A1GeoLoader().send();
        } catch (e) {
          return Promise.resolve(false);
        }
      });
    }
  };

  // src/background/client/Client.ts
  var Client = class extends CoreModule {
    constructor() {
      super(...arguments);
      this.config = instance.resolve("Config" /* CONFIG */);
      this.appConnectorHandler = new AppConnectorHandler();
      this.observable = new ClientObservable();
      this.messageObserver = new BulkObserver([
        new MessageObserver("client.get.product" /* GET_PRODUCT */, this.onGetProduct.bind(this))
      ]);
    }
    getData() {
      return this.data;
    }
    static buildModule() {
      return __async(this, null, function* () {
        const module2 = new Client();
        yield module2.init();
        return module2;
      });
    }
    isAppCheckNotRequired() {
      return BrowserUtil.getOsType() === "Mac" /* MAC */;
    }
    init() {
      return __async(this, null, function* () {
        const initialData = yield new GetInitialClientDataQuery().execute();
        const language = yield new GetClientLanguageQuery().execute();
        const a1GeoAvailable = this.isAppCheckNotRequired() ? false : yield new GetA1GeoAvailabilityQuery().execute();
        yield this.updateData(__spreadProps(__spreadValues({}, initialData), { a1GeoAvailable, language }));
        this.messageObserver.subscribe();
        if (this.isAppCheckNotRequired()) {
          return;
        }
        yield this.startAppConnectorHandler();
      });
    }
    updateData(newData) {
      return __async(this, null, function* () {
        if (!this.data) {
          this.data = newData;
        } else {
          const prevIdentifiers = this.data.identifiers;
          this.data = newData;
          if (newData.identifiers.localAppType) {
            this.data.identifiers.successTimestamp = Date.now();
            if (!prevIdentifiers.localAppType) {
              console.debug("Product installed...");
              new BackgroundMessageQuery("client.update.product" /* UPDATE_PRODUCT */, this.data.identifiers.localAppType).execute();
            }
          } else {
            if (Date.now() - prevIdentifiers.successTimestamp > this.config.appConnector.productTTL) {
              this.data.identifiers.localAppType = "unavailable" /* UNAVAILABLE */;
              console.debug("Product uninstalled...");
              new BackgroundMessageQuery("client.update.product" /* UPDATE_PRODUCT */, this.data.identifiers.localAppType).execute();
            } else {
              this.data.identifiers = prevIdentifiers;
            }
          }
        }
        yield new SetStorageDataCommand("client" /* CLIENT */, this.data).execute();
        this.observable.notify(this.data);
      });
    }
    startAppConnectorHandler() {
      return __async(this, null, function* () {
        this.appConnectorHandler.watch(this.onIdentifiersUpdated.bind(this));
        const identifiers = yield this.appConnectorHandler.getInitialData();
        yield this.onIdentifiersUpdated(identifiers);
      });
    }
    onIdentifiersUpdated(identifiers) {
      return __async(this, null, function* () {
        const newData = __spreadProps(__spreadValues({}, this.data), { identifiers });
        newData.identifiers.localAppPluginGUID = newData.identifiers.localAppPluginGUID || this.data.identifiers.localAppPluginGUID;
        yield this.updateData(newData);
      });
    }
    onGetProduct(body, sendResponse, sender) {
      sendResponse(this.data.identifiers.localAppType);
    }
  };

  // src/background/analytics/model/AnalyticsModel.ts
  var AnalyticsModel = class {
    constructor() {
      this.config = instance.resolve("Config" /* CONFIG */);
    }
    init() {
      return __async(this, null, function* () {
        this.data = yield this.resolveState();
        this.observers = new BulkObserver([
          new MessageObserver("analytics.get.model" /* GET_MODEL */, this.onGetModel.bind(this))
        ]);
        this.observers.subscribe();
      });
    }
    getData() {
      return this.data;
    }
    dispose() {
      this.observers.unsubscribe();
      this.data = void 0;
    }
    changeState(state) {
      return __async(this, null, function* () {
        yield this.setStorageState(state);
        this.data = state;
      });
    }
    resolveState() {
      return __async(this, null, function* () {
        try {
          const data = yield new GetStorageDataQuery("analytics" /* ANALYTICS */).execute();
          return data != null ? data : yield this.handleDefaultState();
        } catch (e) {
          return this.handleDefaultState();
        }
      });
    }
    handleDefaultState() {
      return __async(this, null, function* () {
        const state = this.config.burger.defaultState;
        yield this.setStorageState(state);
        return state;
      });
    }
    setStorageState(state) {
      return __async(this, null, function* () {
        yield new SetStorageDataCommand("analytics" /* ANALYTICS */, state).execute();
      });
    }
    onGetModel(body, sendResponse, sender) {
      sendResponse(this.getData());
    }
  };

  // src/background/client/observable/observer/ClientObserver.ts
  var ClientObserver = class extends Observer {
    constructor(callback) {
      super(callback, instance.resolve("Client" /* CLIENT */).observable);
      this.callback = callback;
    }
  };

  // src/background/analytics/heartbeat/AnalyticsHeartbeat.ts
  var AnalyticsHeartbeat = class {
    constructor(onHeartbeat) {
      this.onHeartbeat = onHeartbeat;
      this.shepherd = instance.resolve("Shepherd" /* SHEPHERD */);
    }
    get heartbeatConfig() {
      return this.shepherd.getData().burger.heartbeat;
    }
    start() {
      return __async(this, null, function* () {
        var _a;
        this.interval = new Interval(this.onTimer.bind(this), "AnalyticsHeartbeatAlarm");
        this.interval.start(this.heartbeatConfig.checkInHours * 60);
        this.lastHeartbeat = (_a = yield new GetStorageDataQuery("analyticsLastHeartbeat" /* ANALYTICS_LAST_HEARTBEAT */).execute()) != null ? _a : 0;
        if (this.lastHeartbeat === 0) {
          yield new SetStorageDataCommand("heartBeatStartTime" /* HEARTBEAT_START_TIME */, Date.now()).execute();
        }
        yield this.checkAndSendHeartbeat();
      });
    }
    onTimer() {
      return __async(this, null, function* () {
        yield this.checkAndSendHeartbeat();
      });
    }
    checkAndSendHeartbeat() {
      return __async(this, null, function* () {
        var _a, _b;
        const lastHeartbeat = (_a = yield new GetStorageDataQuery("analyticsLastHeartbeat" /* ANALYTICS_LAST_HEARTBEAT */).execute()) != null ? _a : 0;
        const nextHeartbeat = lastHeartbeat + this.heartbeatConfig.intervalInHours * 60 * 60 * 1e3;
        const currentTime = Date.now();
        if (lastHeartbeat === 0 || currentTime >= nextHeartbeat) {
          const startTime = (_b = yield new GetStorageDataQuery("heartBeatStartTime" /* HEARTBEAT_START_TIME */).execute()) != null ? _b : currentTime;
          const upTime = currentTime - startTime;
          yield this.sendHeartbeat(upTime);
        }
      });
    }
    sendHeartbeat(upTime) {
      return __async(this, null, function* () {
        this.onHeartbeat(upTime);
        yield new SetStorageDataCommand("analyticsLastHeartbeat" /* ANALYTICS_LAST_HEARTBEAT */, Date.now()).execute();
      });
    }
  };

  // src/core/runtime/EnvironmentUtil.ts
  var EnvironmentUtil = class {
    static isDevelopment() {
      return false;
    }
  };

  // src/background/analytics/AnalyticsHandler.ts
  var AnalyticsHandler = class {
    constructor() {
      this.library = instance.resolve("AnalyticsLibrary" /* ANALYTICS_LIBRARY */);
      this.analyticsObserver = new BackgroundMessageObserver("analytics.send" /* SEND */, this.sendEvent.bind(this));
      this.clientObserver = new ClientObserver(this.onClientChanged.bind(this));
      this.heartbeat = new AnalyticsHeartbeat(this.onHeartbeat.bind(this));
      this.heartbeat.start();
      this.analyticsObserver.subscribe();
      this.clientObserver.subscribe();
    }
    dispose() {
      return __async(this, null, function* () {
        this.library = void 0;
        this.disposeAnalyticsObserver();
        this.disposeClientObserver();
        yield this.disposeHeartbeat();
      });
    }
    sendEvent(event) {
      if (EnvironmentUtil.isDevelopment()) {
        console.log(event);
      }
      switch (event.type) {
        case "analytics.event.click" /* CLICK */:
          return this.library.click(event.category, event.action, event.label, event.view);
        case "analytics.event.view" /* VIEW */:
          return this.library.view(event.view, event.label, event.category);
        case "analytics.event.preferences" /* PREFERENCES */:
          return this.library.preferences(event.config);
        case "analytics.event.error" /* ERROR */:
          return this.library.error(event.error);
        case "analytics.event.install" /* INSTALL */:
          return this.library.install();
        case "analytics.event.update" /* UPDATE */:
          return this.library.productUpdate(event.version);
        case "analytics.event.report" /* SEND_REPORT */:
          return this.library.userReport(event.category, event.issueType, event.firstCustomParam, event.secondCustomParam);
      }
    }
    onHeartbeat(uptime) {
      this.library.heartbeat(uptime);
    }
    onClientChanged(client) {
      this.library.refreshClient(client.identifiers, client.osBuild, client.version, client.extensionGUID);
    }
    disposeHeartbeat() {
      return __async(this, null, function* () {
        if (!this.heartbeat)
          return;
        yield this.heartbeat.dispose();
        this.heartbeat = void 0;
      });
    }
    disposeAnalyticsObserver() {
      if (!this.analyticsObserver)
        return;
      this.analyticsObserver.unsubscribe();
      this.analyticsObserver = void 0;
    }
    disposeClientObserver() {
      if (!this.clientObserver)
        return;
      this.clientObserver.unsubscribe();
      this.clientObserver = void 0;
    }
  };

  // src/background/analytics/Analytics.ts
  var Analytics = class extends CoreModule {
    constructor() {
      super(...arguments);
      this.stateObserver = new BackgroundMessageObserver("analytics.change.state" /* CHANGE_STATE */, this.onStateChanged.bind(this));
    }
    get trackingEnabled() {
      return this.model.getData().trackingEnabled;
    }
    init() {
      return __async(this, null, function* () {
        this.model = new AnalyticsModel();
        yield this.model.init();
        this.stateObserver.subscribe();
        if (this.trackingEnabled)
          this.initHandler();
      });
    }
    static buildModule() {
      return __async(this, null, function* () {
        const analytics = new Analytics();
        yield analytics.init();
        return analytics;
      });
    }
    sendEvent(event) {
      if (!this.trackingEnabled)
        return;
      this.handler.sendEvent(event);
    }
    onStateChanged(trackingEnabled) {
      return __async(this, null, function* () {
        const analyticsState = {
          trackingEnabled
        };
        yield this.model.changeState(analyticsState);
        yield new BackgroundMessageQuery("analytics.model.updated" /* MODEL_UPDATED */, analyticsState).execute();
        return analyticsState.trackingEnabled ? this.initHandler() : this.disposeHandler();
      });
    }
    initHandler() {
      if (this.handler)
        return;
      this.handler = new AnalyticsHandler();
    }
    disposeHandler() {
      if (!this.handler)
        return;
      this.handler.dispose();
      this.handler = void 0;
    }
  };

  // src/modules/maliciousPage/background/error/ShowMaliciousPageError.ts
  var ShowMaliciousPageError = class {
    constructor(message) {
      this.message = message;
      this.name = "ShowMaliciousPageError";
    }
  };

  // src/modules/maliciousPage/background/command/ShowMaliciousPageCommand.ts
  var ShowMaliciousPageCommand = class extends Command {
    constructor(pageType, tab) {
      super();
      this.pageType = pageType;
      this.tab = tab;
      this.config = instance.resolve("Config" /* CONFIG */);
    }
    execute() {
      return __async(this, null, function* () {
        try {
          yield this.showMaliciousPage();
        } catch (e) {
          return Promise.reject(new ShowMaliciousPageError(e.message));
        }
      });
    }
    showMaliciousPage() {
      return __async(this, null, function* () {
        const { id, url } = this.tab;
        const data = {
          type: this.pageType,
          safetyUrl: this.config.urlInfo.phishingRedirect,
          originalUrl: url
        };
        const redirectUrl = new GetAssetPathQuery("client/extensionPage.html").execute();
        yield new NavigateTabCommand(redirectUrl, id).execute();
        yield new BackgroundMessageQuery("showMaliciousPage" /* SHOW */, data).execute();
      });
    }
  };

  // src/background/urlInfo/loader/UrlInfoLoader.ts
  var import_UrlInfo2 = __toESM(require_UrlInfo());

  // src/background/urlInfo/UrlInfoResult.ts
  var import_UrlInfo = __toESM(require_UrlInfo());
  var UrlInfoResult = class {
    constructor(response) {
      this.response = response;
      this.answers = response.answers;
    }
    isPhishing(url) {
      const answer = this.getAnswer(url);
      return this.hasFinding(answer, import_UrlInfo.urlite.Finding.PHISHING);
    }
    isMalware(url) {
      const answer = this.getAnswer(url);
      return this.hasFinding(
        answer,
        import_UrlInfo.urlite.Finding.MALWARE,
        import_UrlInfo.urlite.Finding.BOTNET_ZOMBIE,
        import_UrlInfo.urlite.Finding.BOTNET_CNC
      );
    }
    isSafe(url) {
      return !this.isMalware(url) && !this.isPhishing(url);
    }
    hasFinding(answer, ...findings) {
      var _a;
      return (_a = answer == null ? void 0 : answer.findings) == null ? void 0 : _a.some((finding) => findings.some((f) => f === finding));
    }
    getAnswer(url) {
      var _a;
      return (_a = this.answers) == null ? void 0 : _a.find((answer) => answer.key === url);
    }
  };

  // src/background/urlInfo/loader/UrlInfoLoader.ts
  var UrlInfoLoader = class extends Loader {
    constructor(urls) {
      super();
      this.urls = urls;
      this.config = instance.resolve("Config" /* CONFIG */);
      this.method = "POST" /* POST */;
      this.url = this.config.urlInfo.production;
      this.proto = import_UrlInfo2.urlite;
    }
    get headers() {
      return { "Content-Type": "application/octet-stream" };
    }
    get body() {
      const request = this.proto.Request.create({ saveUrlFeed: true });
      const os = this.getOSType();
      this.urls.forEach(
        (url) => request.queries.push(
          {
            key: url,
            keyType: import_UrlInfo2.urlite.KeyType.URL,
            doNotTrack: false,
            clientInfo: {
              product: {
                id: 146
              },
              platform: {
                os
              }
            }
          }
        )
      );
      return this.proto.Request.encode(request).finish();
    }
    getOSType() {
      const os = BrowserUtil.getOsType();
      let osValue = 0;
      switch (os) {
        case "Windows" /* WINDOWS */:
          osValue = 1;
          break;
        case "Mac" /* MAC */:
          osValue = 2;
          break;
        case "Linux" /* LINUX */:
          osValue = 4;
          break;
      }
      return osValue;
    }
    handleRequest() {
      return __async(this, null, function* () {
        this.validateUrl();
        try {
          const response = yield fetch(this.getResolvedUrl(), this.getOptions());
          yield this.onCompleted(response);
        } catch (e) {
          this.reject(new LoaderError(e));
        }
      });
    }
    handleResponse(result) {
      return __async(this, null, function* () {
        const buffer = yield result.arrayBuffer();
        const decoded = this.proto.Response.decode(new Uint8Array(buffer));
        this.resolve(new UrlInfoResult(decoded));
      });
    }
  };

  // src/modules/maliciousPage/background/MaliciousPageHandler.ts
  var MaliciousPageHandler = class {
    constructor() {
      this.config = instance.resolve("Config" /* CONFIG */);
      this.tabObserver = new TabObserver("ACTIVE" /* ACTIVE */, this.onTabUpdated.bind(this));
      this.avoidSiteMessage = new MessageObserver("maliciousAvoid" /* AVOID */, this.onAvoidSiteMessage.bind(this));
      this.continueSiteMessage = new MessageObserver("maliciousContinue" /* CONTINUE */, this.onContinueSiteMessage.bind(this));
      this.tabObserver.subscribe();
      this.avoidSiteMessage.subscribe();
      this.continueSiteMessage.subscribe();
    }
    onTabUpdated(tabId, changeInfo, tab) {
      return __async(this, null, function* () {
        var _a;
        const isWhitelist = yield this.isWhitelistedUrl(tab.url);
        if (!tab.url || this.isIgnoredUrl(tab.url) || changeInfo.status === "loading")
          return;
        const result = yield new UrlInfoLoader([tab.url]).send();
        const pageType = result.isMalware(tab.url) ? "malware" /* MALWARE */ : "phishing" /* PHISHING */;
        const finding = this.getFinding(result, tab.url);
        const status = finding ? "unsafe" /* UNSAFE */ : "safe" /* SAFE */;
        if (!result.isMalware(tab.url) && !result.isPhishing(tab.url))
          return;
        const hostname = (_a = new URL(tab.url).hostname) == null ? void 0 : _a.replace("www.", "");
        if (!isWhitelist) {
          yield new ShowMaliciousPageCommand(pageType, tab).execute();
        }
        yield new BackgroundMessageQuery(
          "security.model.updated" /* MODEL_UPDATED */,
          { web: { name: hostname != null ? hostname : tab.url }, finding, status, safetyUrl: this.config.urlInfo.phishingRedirect },
          tab.id
        ).execute();
      });
    }
    isIgnoredUrl(url) {
      const ignoredTabs = this.config.ignoredTabs;
      return UrlUtil.isIgnoredUrl(url, ignoredTabs);
    }
    getFinding(result, url) {
      if (result.isMalware(url))
        return "malware" /* MALWARE */;
      if (result.isPhishing(url))
        return "phishing" /* PHISHING */;
      return void 0;
    }
    onAvoidSiteMessage(data) {
      return __async(this, null, function* () {
        yield new NavigateTabCommand(data.safetyUrl).execute();
      });
    }
    onContinueSiteMessage(data) {
      return __async(this, null, function* () {
        yield this.whitelistUrl(data.url);
        yield new NavigateTabCommand(data.url).execute();
      });
    }
    dispose() {
      this.disposeTabObserver();
      this.disposeAvoidSiteMessage();
      this.disposeContinueSiteMessage();
    }
    disposeTabObserver() {
      if (!this.tabObserver)
        return;
      this.tabObserver.unsubscribe();
      this.tabObserver = void 0;
    }
    disposeAvoidSiteMessage() {
      if (!this.avoidSiteMessage)
        return;
      this.avoidSiteMessage.unsubscribe();
      this.avoidSiteMessage = void 0;
    }
    disposeContinueSiteMessage() {
      if (!this.continueSiteMessage)
        return;
      this.continueSiteMessage.unsubscribe();
      this.continueSiteMessage = void 0;
    }
    getMaliciousWhitelist() {
      return __async(this, null, function* () {
        var _a;
        const urls = (_a = yield new GetStorageDataQuery("maliciousWhitelist" /* MALICIOUS_WHITELIST */, "session" /* SESSION */).execute()) != null ? _a : [];
        return urls;
      });
    }
    isWhitelistedUrl(url) {
      return __async(this, null, function* () {
        const urls = yield this.getMaliciousWhitelist();
        return urls.includes(url);
      });
    }
    whitelistUrl(url) {
      return __async(this, null, function* () {
        const urls = yield this.getMaliciousWhitelist();
        if (!urls.includes(url)) {
          urls.push(url);
          yield new SetStorageDataCommand("maliciousWhitelist" /* MALICIOUS_WHITELIST */, urls, "session" /* SESSION */).execute();
        }
      });
    }
  };

  // src/modules/maliciousPage/background/MaliciousPage.ts
  var MaliciousPage = class extends Feature {
    constructor() {
      super(...arguments);
      this.geoLocation = instance.resolve("GeoLocation" /* GEO_LOCATION */);
    }
    static buildFeature() {
      return __async(this, null, function* () {
        const feature = new MaliciousPage();
        yield feature.init();
        return feature;
      });
    }
    init() {
      return __async(this, null, function* () {
        this.pageHandler = new MaliciousPageHandler();
      });
    }
    dispose() {
      if (!this.pageHandler)
        return;
      this.pageHandler.dispose();
      this.pageHandler = void 0;
    }
    onDataChanged(data) {
    }
  };

  // src/modules/antitrack/background/command/EnableStaticRulesetCommand.ts
  var EnableStaticRulesetCommand = class extends Command {
    constructor(rulesetIds) {
      super();
      this.rulesetIds = rulesetIds;
    }
    execute() {
      return chrome.declarativeNetRequest.updateEnabledRulesets({ enableRulesetIds: this.rulesetIds });
    }
  };

  // src/modules/antitrack/background/command/DisableStaticRulesetCommand.ts
  var DisableStaticRulesetCommand = class extends Command {
    constructor(rulesetIds) {
      super();
      this.rulesetIds = rulesetIds;
    }
    execute() {
      return chrome.declarativeNetRequest.updateEnabledRulesets({ disableRulesetIds: this.rulesetIds });
    }
  };

  // src/modules/antitrack/util/StaticRulesetUtil.ts
  var StaticRulesetUtil = class {
    static setRulesets(currentCategories, previousCategories) {
      const [
        enableCategories,
        disableCategories
      ] = this.getEnabledAndDisabledCategories(currentCategories, previousCategories);
      if (enableCategories.length)
        new EnableStaticRulesetCommand(enableCategories).execute();
      if (disableCategories.length)
        new DisableStaticRulesetCommand(disableCategories).execute();
    }
    static getEnabledAndDisabledCategories(currentCategories, previousCategories) {
      const enables = [];
      const disables = [];
      for (const [index, prevCategory] of previousCategories.entries()) {
        const isCurrentEnabled = currentCategories[index].enabled;
        const hasChanged = isCurrentEnabled !== prevCategory.enabled;
        if (!hasChanged)
          continue;
        if (isCurrentEnabled) {
          enables.push(prevCategory.name);
          disables.push(`${prevCategory.name}_Allowed`);
          continue;
        }
        disables.push(prevCategory.name);
        enables.push(`${prevCategory.name}_Allowed`);
      }
      return [enables, disables];
    }
  };

  // src/modules/antitrack/background/command/InitiateAntiTrackDataCommand.ts
  var InitiateAntiTrackDataCommand = class extends Command {
    execute() {
      return __async(this, null, function* () {
        const state = yield this.handleStorageData();
        const settingsState = yield this.handleSettingsStorageData();
        state.countOnBadge = settingsState;
        return Promise.resolve(__spreadValues({}, state));
      });
    }
    handleStorageData() {
      return __async(this, null, function* () {
        const storageData = yield new GetStorageDataQuery("antiTrack" /* ANTI_TRACK */, "local" /* LOCAL */).execute();
        const defaultState = instance.resolve("Config" /* CONFIG */).antiTrack.defaultState;
        if (storageData && Object.keys(storageData).length) {
          StaticRulesetUtil.setRulesets(storageData.categories, defaultState.categories);
          return Promise.resolve(storageData);
        }
        yield new SetStorageDataCommand("antiTrack" /* ANTI_TRACK */, defaultState, "local" /* LOCAL */).execute();
        return Promise.resolve(defaultState);
      });
    }
    handleSettingsStorageData() {
      return __async(this, null, function* () {
        const settingsStorageData = yield new GetStorageDataQuery("dntBadge" /* ANTI_TRACK_COUNT_ON_BADGE */, "local" /* LOCAL */).execute();
        const defaultState = instance.resolve("Config" /* CONFIG */).antiTrack.defaultState.countOnBadge;
        if (settingsStorageData && Object.keys(settingsStorageData).length) {
          return Promise.resolve(settingsStorageData);
        }
        yield new SetStorageDataCommand("dntBadge" /* ANTI_TRACK_COUNT_ON_BADGE */, defaultState, "local" /* LOCAL */).execute();
        return Promise.resolve(defaultState);
      });
    }
  };

  // src/modules/antitrack/background/error/GetRelevantMatchedRuleError.ts
  var GetRelevantMatchedRuleError = class extends Error {
    constructor(message) {
      super(message);
      this.message = message;
      this.name = "GetRelevantMatchedRuleError";
    }
  };

  // src/modules/antitrack/background/command/GetRelevantMatchedRuleInfoQuery.ts
  var GetRelevantMatchedRuleInfoQuery = class extends Command {
    constructor(minTimeStamp, tabId) {
      super();
      this.minTimeStamp = minTimeStamp;
      this.tabId = tabId;
    }
    execute() {
      return __async(this, null, function* () {
        try {
          const rules = yield chrome.declarativeNetRequest.getMatchedRules({ tabId: this.tabId, minTimeStamp: this.minTimeStamp });
          const relevantRules = rules == null ? void 0 : rules.rulesMatchedInfo.filter((r) => Object.values(AntiTrackCategoryName).some((cat) => cat === r.rule.rulesetId));
          return relevantRules;
        } catch (error) {
          throw new GetRelevantMatchedRuleError(error.message);
        }
      });
    }
  };

  // res/rulesets/Meta.json
  var Meta_default = {
    "706": {
      name: "Google Analytics",
      category: "WebAnalytics"
    },
    "39": {
      name: "Google+",
      category: "Social"
    },
    "110": {
      name: "Linkedin",
      category: "Social"
    },
    "135": {
      name: "Disqus",
      category: "Social"
    },
    "400": {
      name: "Pinterest",
      category: "Social"
    },
    "703": {
      name: "Facebook",
      category: "Social"
    },
    "704": {
      name: "Twitter",
      category: "Social"
    },
    "705": {
      name: "Doubleclick",
      category: "AdTracking"
    },
    "707": {
      name: "Appnexus",
      category: "AdTracking"
    },
    "708": {
      name: "Quantcast",
      category: "AdTracking"
    },
    "710": {
      name: "Google Static",
      category: "WebAnalytics"
    },
    "711": {
      name: "Scorecard Research",
      category: "WebAnalytics"
    },
    "712": {
      name: "AddThis",
      category: "Social"
    },
    "714": {
      name: "Google Adsense",
      category: "AdTracking"
    },
    "715": {
      name: "ShareThis",
      category: "Social"
    },
    "716": {
      name: "Yahoo Ad YieldManager",
      category: "AdTracking"
    },
    "717": {
      name: "Rubicon",
      category: "AdTracking"
    },
    "718": {
      name: "Turn",
      category: "AdTracking"
    },
    "719": {
      name: "BlueKai",
      category: "AdTracking"
    },
    "720": {
      name: "Invite Media by Google",
      category: "AdTracking"
    },
    "721": {
      name: "Google Admeld",
      category: "AdTracking"
    },
    "722": {
      name: "Twitter Counter",
      category: "AdTracking"
    },
    "723": {
      name: "OpenX",
      category: "AdTracking"
    },
    "724": {
      name: "Criteo",
      category: "AdTracking"
    },
    "725": {
      name: "PubMatic",
      category: "AdTracking"
    },
    "726": {
      name: "CNZZ",
      category: "WebAnalytics"
    },
    "727": {
      name: "StatCounter",
      category: "WebAnalytics"
    },
    "728": {
      name: "Chartbeat",
      category: "WebAnalytics"
    },
    "729": {
      name: "Google GPT",
      category: "AdTracking"
    },
    "730": {
      name: "Atlas Advertiser Suite",
      category: "AdTracking"
    },
    "731": {
      name: "Simplicity Marketing Ltd",
      category: "AdTracking"
    },
    "732": {
      name: "AdTech AOL ",
      category: "AdTracking"
    },
    "733": {
      name: "Gemius SA",
      category: "AdTracking"
    },
    "734": {
      name: "Mediamind DG",
      category: "AdTracking"
    },
    "735": {
      name: "MediaMath",
      category: "AdTracking"
    },
    "736": {
      name: "ExoClick",
      category: "AdTracking"
    },
    "737": {
      name: "PulsePoint",
      category: "AdTracking"
    },
    "738": {
      name: "Tribal Fusion, Inc.",
      category: "AdTracking"
    },
    "739": {
      name: "Brightcove, Inc",
      category: "AdTracking"
    },
    "740": {
      name: "Tynt by 33across.com",
      category: "AdTracking"
    },
    "741": {
      name: "AdRoll",
      category: "AdTracking"
    },
    "742": {
      name: "Zedo, Inc.",
      category: "AdTracking"
    },
    "743": {
      name: "Smart AdServer",
      category: "AdTracking"
    },
    "744": {
      name: "Zanox Ltd",
      category: "AdTracking"
    },
    "745": {
      name: "BuySellAds.com",
      category: "AdTracking"
    },
    "746": {
      name: "Media Innovation Group",
      category: "AdTracking"
    },
    "747": {
      name: "Vibrant Media",
      category: "AdTracking"
    },
    "748": {
      name: "PlugRush",
      category: "AdTracking"
    },
    "749": {
      name: "eXelate",
      category: "AdTracking"
    },
    "751": {
      name: "AudienceScience Inc.",
      category: "AdTracking"
    },
    "752": {
      name: "AdScale",
      category: "AdTracking"
    },
    "753": {
      name: "Nielsen",
      category: "AdTracking"
    },
    "754": {
      name: "Lotame",
      category: "AdTracking"
    },
    "755": {
      name: "whos.amung.us Inc.",
      category: "WebAnalytics"
    },
    "756": {
      name: "Mediaplex",
      category: "WebAnalytics"
    },
    "758": {
      name: "2o7.net",
      category: "WebAnalytics"
    },
    "759": {
      name: "Improve Digital",
      category: "AdTracking"
    },
    "760": {
      name: "Histats",
      category: "WebAnalytics"
    },
    "761": {
      name: "Say Media",
      category: "AdTracking"
    },
    "762": {
      name: "INFOnline GmbH",
      category: "WebAnalytics"
    },
    "763": {
      name: "Adobe AudienceManager",
      category: "AdTracking"
    },
    "764": {
      name: "Advertising.com",
      category: "AdTracking"
    },
    "765": {
      name: "DataXu, Inc.",
      category: "AdTracking"
    },
    "766": {
      name: "Datalogix",
      category: "AdTracking"
    },
    "767": {
      name: "AdOcean",
      category: "AdTracking"
    },
    "768": {
      name: "Advanced Store",
      category: "AdTracking"
    },
    "769": {
      name: "Effective Measure",
      category: "WebAnalytics"
    },
    "770": {
      name: "TRUSTe",
      category: "AdTracking"
    },
    "771": {
      name: "JuicyAds",
      category: "AdTracking"
    },
    "772": {
      name: "Heias AdServing Tech.",
      category: "AdTracking"
    },
    "773": {
      name: "Redvertisment",
      category: "AdTracking"
    },
    "774": {
      name: "Rocket Fuel Inc.",
      category: "AdTracking"
    },
    "775": {
      name: "Caraytech",
      category: "AdTracking"
    },
    "776": {
      name: "Tumblr",
      category: "Social"
    },
    "777": {
      name: "Internet BillBoard",
      category: "AdTracking"
    },
    "778": {
      name: "Optimizely",
      category: "WebAnalytics"
    },
    "779": {
      name: "Omniture",
      category: "WebAnalytics"
    },
    "780": {
      name: "Rambler Media",
      category: "WebAnalytics"
    },
    "781": {
      name: "AdFox",
      category: "AdTracking"
    },
    "782": {
      name: "Mail.Ru Group",
      category: "WebAnalytics"
    },
    "783": {
      name: "XiTi By AT Internet",
      category: "WebAnalytics"
    },
    "784": {
      name: "Chango",
      category: "AdTracking"
    },
    "785": {
      name: "New Relic",
      category: "WebAnalytics"
    },
    "786": {
      name: "AudienceRate Ltd",
      category: "AdTracking"
    },
    "787": {
      name: "Casale Media",
      category: "AdTracking"
    },
    "788": {
      name: "LiveRamp, Inc.",
      category: "AdTracking"
    },
    "789": {
      name: "Neustar AdAdvisor",
      category: "AdTracking"
    },
    "790": {
      name: "Direct/Advert",
      category: "AdTracking"
    },
    "791": {
      name: "SiteScout",
      category: "AdTracking"
    },
    "792": {
      name: "Google GTM",
      category: "WebAnalytics"
    },
    "793": {
      name: "ValueClick Media",
      category: "AdTracking"
    },
    "794": {
      name: "Simpli.fi",
      category: "AdTracking"
    },
    "795": {
      name: "The Trade Desk",
      category: "AdTracking"
    },
    "796": {
      name: "Adobe Typekit",
      category: "Others"
    },
    "797": {
      name: "Alexa",
      category: "WebAnalytics"
    },
    "798": {
      name: "24/7 Real Media",
      category: "AdTracking"
    },
    "799": {
      name: "EroAdvertising",
      category: "AdTracking"
    },
    "800": {
      name: "News Distribution Network",
      category: "AdTracking"
    },
    "801": {
      name: "TNS Gallup Media",
      category: "AdTracking"
    },
    "802": {
      name: "Bizo Bizographic",
      category: "AdTracking"
    },
    "803": {
      name: "Burst Media",
      category: "AdTracking"
    },
    "804": {
      name: "[x+1]",
      category: "AdTracking"
    },
    "805": {
      name: "Dstillery",
      category: "AdTracking"
    },
    "806": {
      name: "Telemetry",
      category: "AdTracking"
    },
    "807": {
      name: "RadiumOne",
      category: "Social"
    },
    "808": {
      name: "AdPepper Media",
      category: "AdTracking"
    },
    "809": {
      name: "TLVMedia",
      category: "AdTracking"
    },
    "810": {
      name: "Feedjit",
      category: "WebAnalytics"
    },
    "811": {
      name: "MicroAd",
      category: "AdTracking"
    },
    "812": {
      name: "Adform",
      category: "AdTracking"
    },
    "813": {
      name: "AdRiver",
      category: "AdTracking"
    },
    "814": {
      name: "Lijit Networks",
      category: "AdTracking"
    },
    "815": {
      name: "ADITION",
      category: "AdTracking"
    },
    "816": {
      name: "Ligatus",
      category: "AdTracking"
    },
    "817": {
      name: "Digilant",
      category: "AdTracking"
    },
    "818": {
      name: "SpotXchange",
      category: "AdTracking"
    },
    "819": {
      name: "Tradedoubler",
      category: "AdTracking"
    },
    "820": {
      name: "i-mobile Co.",
      category: "AdTracking"
    },
    "821": {
      name: "Admeta",
      category: "AdTracking"
    },
    "822": {
      name: "Adconion Media Group",
      category: "AdTracking"
    },
    "823": {
      name: "Acxiom Corporation",
      category: "AdTracking"
    },
    "824": {
      name: "Krux",
      category: "WebAnalytics"
    },
    "825": {
      name: "Sociomantic Labs",
      category: "AdTracking"
    },
    "826": {
      name: "Federated Media Publishing",
      category: "AdTracking"
    },
    "827": {
      name: "Weborama",
      category: "AdTracking"
    },
    "828": {
      name: "nonstopConsulting",
      category: "AdTracking"
    },
    "829": {
      name: "Contentspread",
      category: "AdTracking"
    },
    "830": {
      name: "DoubleVerify",
      category: "AdTracking"
    },
    "831": {
      name: "Adzerk",
      category: "AdTracking"
    },
    "832": {
      name: "AdSpirit",
      category: "AdTracking"
    },
    "833": {
      name: "Specific Media",
      category: "AdTracking"
    },
    "834": {
      name: "AdXpansion",
      category: "AdTracking"
    },
    "835": {
      name: "OwnerIQ",
      category: "AdTracking"
    },
    "836": {
      name: "CPMStar",
      category: "AdTracking"
    },
    "837": {
      name: "Adlabs Media Network",
      category: "AdTracking"
    },
    "838": {
      name: "Webtrends",
      category: "WebAnalytics"
    },
    "839": {
      name: "AOL Time Warner",
      category: "AdTracking"
    },
    "840": {
      name: "Brandscreen",
      category: "AdTracking"
    },
    "841": {
      name: "Media.net",
      category: "AdTracking"
    },
    "842": {
      name: "Active Performance",
      category: "AdTracking"
    },
    "843": {
      name: "Experian Marketing Services",
      category: "AdTracking"
    },
    "844": {
      name: "Coremetrics",
      category: "WebAnalytics"
    },
    "845": {
      name: "Dotomi",
      category: "AdTracking"
    },
    "846": {
      name: "Chitika",
      category: "AdTracking"
    },
    "847": {
      name: "TownNews.com",
      category: "AdTracking"
    },
    "848": {
      name: "StumbleUpon",
      category: "Social"
    },
    "849": {
      name: "Triggit",
      category: "AdTracking"
    },
    "850": {
      name: "Site Meter",
      category: "WebAnalytics"
    },
    "851": {
      name: "ClixSense",
      category: "AdTracking"
    },
    "852": {
      name: "Google Feedburner",
      category: "Social"
    },
    "853": {
      name: "Aggregate Knowledge",
      category: "AdTracking"
    },
    "854": {
      name: "Matomy Media Group",
      category: "AdTracking"
    },
    "855": {
      name: "LiveRail",
      category: "AdTracking"
    },
    "856": {
      name: "Adify",
      category: "AdTracking"
    },
    "857": {
      name: "Adverticum",
      category: "AdTracking"
    },
    "858": {
      name: "AWeber",
      category: "Others"
    },
    "859": {
      name: "Connexity",
      category: "AdTracking"
    },
    "860": {
      name: "Collective",
      category: "AdTracking"
    },
    "861": {
      name: "Tremor Video",
      category: "AdTracking"
    },
    "862": {
      name: "Tealium",
      category: "AdTracking"
    },
    "863": {
      name: "Adap.tv",
      category: "AdTracking"
    },
    "864": {
      name: "DMG",
      category: "AdTracking"
    },
    "865": {
      name: "nugg.ad",
      category: "AdTracking"
    },
    "866": {
      name: "KISSmetrics",
      category: "WebAnalytics"
    },
    "867": {
      name: "Hatena",
      category: "Social"
    },
    "868": {
      name: "Clicky",
      category: "WebAnalytics"
    },
    "869": {
      name: "Target Performance",
      category: "AdTracking"
    },
    "870": {
      name: "myThings",
      category: "AdTracking"
    },
    "871": {
      name: "Cedexis",
      category: "WebAnalytics"
    },
    "872": {
      name: "CastAClip",
      category: "AdTracking"
    },
    "873": {
      name: "Twenty Four Interactive",
      category: "AdTracking"
    },
    "874": {
      name: "Cross Pixel",
      category: "AdTracking"
    },
    "875": {
      name: "D.A.Consortium",
      category: "AdTracking"
    },
    "876": {
      name: "Tanx",
      category: "AdTracking"
    },
    "877": {
      name: "51.La",
      category: "WebAnalytics"
    },
    "878": {
      name: "Expedia",
      category: "AdTracking"
    },
    "879": {
      name: "Skimlinks",
      category: "AdTracking"
    },
    "880": {
      name: "ClickTale",
      category: "WebAnalytics"
    },
    "881": {
      name: "Sina Weibo",
      category: "Social"
    },
    "882": {
      name: "Yieldlab",
      category: "AdTracking"
    },
    "883": {
      name: "Exponential Interactive",
      category: "AdTracking"
    },
    "884": {
      name: "Outbrain",
      category: "Others"
    },
    "885": {
      name: "Navegg",
      category: "AdTracking"
    },
    "886": {
      name: "AudienceTV",
      category: "AdTracking"
    },
    "887": {
      name: "YuMe, Inc.",
      category: "AdTracking"
    },
    "888": {
      name: "LinkWithin",
      category: "Social"
    },
    "889": {
      name: "YD World",
      category: "AdTracking"
    },
    "890": {
      name: "QQ Widgets",
      category: "Social"
    },
    "891": {
      name: "Affilinet",
      category: "AdTracking"
    },
    "892": {
      name: "UserVoice",
      category: "Social"
    },
    "893": {
      name: "Brandwire",
      category: "AdTracking"
    },
    "894": {
      name: "Visual Website Optimizer",
      category: "Others"
    },
    "895": {
      name: "TeaserNet",
      category: "AdTracking"
    },
    "896": {
      name: "99Widgets",
      category: "Social"
    },
    "897": {
      name: "AdJug",
      category: "AdTracking"
    },
    "898": {
      name: "OpenStat",
      category: "WebAnalytics"
    },
    "899": {
      name: "Eloqua",
      category: "AdTracking"
    },
    "900": {
      name: "Accuen",
      category: "AdTracking"
    },
    "901": {
      name: "Technorati Media",
      category: "AdTracking"
    },
    "902": {
      name: "Forumotion",
      category: "Others"
    },
    "903": {
      name: "Switch Concepts",
      category: "AdTracking"
    },
    "904": {
      name: "Truehits.net",
      category: "WebAnalytics"
    },
    "905": {
      name: "Begun",
      category: "AdTracking"
    },
    "906": {
      name: "Yahoo BlueLithium",
      category: "AdTracking"
    },
    "907": {
      name: "Future",
      category: "AdTracking"
    },
    "908": {
      name: "R7",
      category: "AdTracking"
    },
    "909": {
      name: "eBay Affiliate",
      category: "AdTracking"
    },
    "910": {
      name: "Commission Junction",
      category: "AdTracking"
    },
    "911": {
      name: "Olark",
      category: "Others"
    },
    "912": {
      name: "MadAds Media",
      category: "AdTracking"
    },
    "913": {
      name: "Videology",
      category: "AdTracking"
    },
    "914": {
      name: "Adorika Media Ltd",
      category: "AdTracking"
    },
    "915": {
      name: "Amazon Affiliate",
      category: "AdTracking"
    },
    "916": {
      name: "i2i.jp",
      category: "WebAnalytics"
    },
    "917": {
      name: "Visual Revenue - Outbrain",
      category: "WebAnalytics"
    },
    "918": {
      name: "Ebay Enterprise",
      category: "AdTracking"
    },
    "919": {
      name: "Ebuzzing",
      category: "AdTracking"
    },
    "920": {
      name: "Mixpanel",
      category: "WebAnalytics"
    },
    "921": {
      name: "OLX",
      category: "AdTracking"
    },
    "922": {
      name: "AdvertStream",
      category: "AdTracking"
    },
    "923": {
      name: "BuzzFeed Widgets",
      category: "Social"
    },
    "924": {
      name: "Netmining",
      category: "AdTracking"
    },
    "925": {
      name: "United Internet Media",
      category: "AdTracking"
    },
    "926": {
      name: "Clicksor",
      category: "AdTracking"
    },
    "927": {
      name: "BidVertiser",
      category: "AdTracking"
    }
  };

  // src/modules/antitrack/util/AntiTrackUtil.ts
  var AntiTrackUtil = class {
    static clearCountOnBadge(tabId) {
      chrome.action.setBadgeText({ text: "", tabId });
    }
    static setCountOnBadge(allowed, blocked, tabId) {
      let color;
      if (allowed === 0) {
        color = "#388700" /* GREEN */;
      } else if (blocked === 0) {
        color = "#F5203E" /* RED */;
      } else {
        color = "#FFBF00" /* YELLOW */;
      }
      chrome.action.setBadgeText({ text: (allowed + blocked).toString(), tabId });
      chrome.action.setBadgeBackgroundColor({ tabId, color });
    }
    static getTrackersFromRules(rules) {
      if (!rules || !Array.isArray(rules)) {
        return [];
      }
      let uniqueRulesMap = /* @__PURE__ */ new Map();
      rules.sort((a, b) => {
        return b.timeStamp - a.timeStamp;
      });
      rules.forEach((entry) => {
        if (entry.tabId > 0) {
          const key = entry.rule.ruleId + "_" + entry.rule.rulesetId + "_" + entry.tabId;
          let otherKey = "";
          const isAllowRule = entry.rule.rulesetId.includes("_Allowed");
          if (isAllowRule) {
            const blockRuleId = entry.rule.rulesetId.replace("_Allowed", "");
            otherKey = entry.rule.ruleId + "_" + blockRuleId + "_" + entry.tabId;
          } else {
            const allowRuleId = entry.rule.rulesetId + "_Allowed";
            otherKey = entry.rule.ruleId + "_" + allowRuleId + "_" + entry.tabId;
          }
          if (!uniqueRulesMap.has(key) && !uniqueRulesMap.has(otherKey)) {
            uniqueRulesMap.set(key, entry);
          }
        }
      });
      const uniqueRules = [...uniqueRulesMap.values()];
      let trackers = [];
      trackers = uniqueRules.map(({ rule, tabId, timeStamp }) => {
        const trackerData = Meta_default[String(rule.ruleId)];
        if (!trackerData) {
          return null;
        }
        return {
          name: trackerData.name,
          id: rule.ruleId,
          blocked: !rule.rulesetId.includes("_Allowed"),
          tabId,
          timeStamp
        };
      }).filter(Boolean);
      return trackers;
    }
    static getTabwiseTrackers(trackers) {
      let trackersMap = /* @__PURE__ */ new Map();
      if (!trackers) {
        return trackersMap;
      }
      trackers.forEach((tracker) => {
        if (trackersMap.has(tracker.tabId)) {
          const tabWiseTrackers = trackersMap.get(tracker.tabId);
          tabWiseTrackers.push(tracker);
        } else {
          trackersMap.set(tracker.tabId, [tracker]);
        }
      });
      return trackersMap;
    }
  };

  // src/modules/antitrack/background/model/AntiTrackModel.ts
  var AntiTrackModel = class {
    constructor(feature) {
      this.feature = feature;
      this.trackersCountTimer = new Interval(this.onTrackersCountAlarm.bind(this), "TrackersCountAlarm");
      this.trackersCountTimer.start(1);
    }
    init() {
      return __async(this, null, function* () {
        var _a;
        this.data = yield new InitiateAntiTrackDataCommand().execute();
        this.lastFetched = (_a = this.data) == null ? void 0 : _a.stats.timeStamp;
        this.observer = new BulkObserver([
          new BackgroundStorageObserver("antiTrack" /* ANTI_TRACK */, this.onStorageUpdated.bind(this), "local" /* LOCAL */),
          new BackgroundStorageObserver("dntBadge" /* ANTI_TRACK_COUNT_ON_BADGE */, this.onSettingsStorageUpdated.bind(this), "local" /* LOCAL */),
          new MessageObserver("antiTrack.model.get" /* GET_MODEL */, this.onGetModel.bind(this)),
          new MessageObserver("antiTrack.model.setCategories" /* SET_CATEGORIES */, this.setCategories.bind(this)),
          new ExtensionIconClickedObserver(this.onExtensionIconClicked.bind(this)),
          new MessageObserver("antiTrack.model.getUpdatedTrackers" /* GET_UPDATED_TRACKERS */, (...args) => {
            this.onGetUpdatedTrackers(...args);
            return true;
          }),
          new MessageObserver("antiTrack.countOnBadge.setEnabled" /* SET_COUNT_ON_BADGE_ENABLED */, (...args) => {
            this.onSetCountOnBadgeEnabled(...args);
            return true;
          })
        ]);
        this.observer.subscribe();
        yield this.refreshAndGetTrackers();
      });
    }
    getData() {
      return this.data;
    }
    dispose() {
      var _a;
      (_a = this.observer) == null ? void 0 : _a.unsubscribe();
      this.observer = void 0;
      this.data = void 0;
      this.feature = void 0;
    }
    fetchAllTrackers(minTimeStamp) {
      return __async(this, null, function* () {
        try {
          const matchedRules = yield new GetRelevantMatchedRuleInfoQuery(minTimeStamp).execute();
          const state = __spreadValues({}, this.data);
          return AntiTrackUtil.getTrackersFromRules(matchedRules);
        } catch (error) {
          console.error("Fetch All Trackers failed", error);
          return null;
        }
      });
    }
    refreshAndGetTrackers(tabId, trackersInput) {
      return __async(this, null, function* () {
        if (!trackersInput) {
          this.lastFetched = Date.now();
          this.trackers = yield this.fetchAllTrackers();
        }
        let deltaBlocked = 0;
        this.trackers && this.trackers.forEach((tracker) => {
          if (tracker.blocked && tracker.timeStamp > this.data.stats.timeStamp) {
            deltaBlocked += 1;
          }
        });
        this.data.stats.timeStamp = this.lastFetched;
        if (deltaBlocked > 0) {
          this.data.stats.timeStamp = this.trackers[0].timeStamp;
          this.data.stats.globalBlocked += deltaBlocked;
        }
        const state = __spreadValues({}, this.data);
        yield new SetStorageDataCommand("antiTrack" /* ANTI_TRACK */, state, "local" /* LOCAL */).execute();
        const countOnBadge = yield new GetStorageDataQuery("dntBadge" /* ANTI_TRACK_COUNT_ON_BADGE */).execute();
        const trackersMap = AntiTrackUtil.getTabwiseTrackers(this.trackers);
        const tabsToUpdate = tabId ? [tabId] : Array.from(trackersMap.keys());
        tabsToUpdate.forEach((tabId2) => {
          var _a, _b;
          const totalTrackers = ((_a = trackersMap.get(tabId2)) == null ? void 0 : _a.length) || 0;
          let blockedTrackers = 0;
          if (((_b = trackersMap.get(tabId2)) == null ? void 0 : _b.length) > 0) {
            trackersMap.get(tabId2).forEach((tracker) => {
              if (tracker.blocked) {
                blockedTrackers += 1;
              }
            });
          }
          const allowedTrackers = totalTrackers - blockedTrackers;
          if ((countOnBadge == null ? void 0 : countOnBadge.enabled) && totalTrackers > 0) {
            AntiTrackUtil.setCountOnBadge(allowedTrackers, blockedTrackers, tabId2);
          } else {
            AntiTrackUtil.clearCountOnBadge(tabId2);
          }
        });
        yield this.updateData(this.data);
        return tabId ? trackersMap.get(tabId) || [] : this.trackers;
      });
    }
    onGetUpdatedTrackers(body, sendResponse, sender) {
      return __async(this, null, function* () {
        if (!sender.tab.id)
          return sendResponse({ state: this.data, trackers: [] });
        const trackersForTab = yield this.refreshAndGetTrackers(sender.tab.id, this.trackers);
        const state = __spreadValues({}, this.data);
        return sendResponse({ state, trackers: trackersForTab });
      });
    }
    onSetCountOnBadgeEnabled(enabled, sendResponse, sender) {
      return __async(this, null, function* () {
        if (!sender.tab.id)
          return;
        yield new SetStorageDataCommand("dntBadge" /* ANTI_TRACK_COUNT_ON_BADGE */, { enabled }).execute();
        const trackersMap = AntiTrackUtil.getTabwiseTrackers(this.trackers);
        const tabsToUpdate = Array.from(trackersMap.keys());
        tabsToUpdate.forEach((tabId) => {
          var _a, _b;
          const totalTrackers = ((_a = trackersMap.get(tabId)) == null ? void 0 : _a.length) || 0;
          let blockedTrackers = 0;
          if (((_b = trackersMap.get(tabId)) == null ? void 0 : _b.length) > 0) {
            trackersMap.get(tabId).forEach((tracker) => {
              if (tracker.blocked) {
                blockedTrackers += 1;
              }
            });
          }
          const allowedTrackers = totalTrackers - blockedTrackers;
          if (enabled && totalTrackers > 0) {
            AntiTrackUtil.setCountOnBadge(allowedTrackers, blockedTrackers, tabId);
          } else {
            AntiTrackUtil.clearCountOnBadge(tabId);
          }
        });
      });
    }
    onTrackersCountAlarm() {
      return __async(this, null, function* () {
        try {
          yield this.refreshAndGetTrackers();
        } catch (err) {
          console.error("Error onTrackersCountAlarm ", err);
        }
      });
    }
    onExtensionIconClicked(tab) {
      return __async(this, null, function* () {
        try {
          yield this.refreshAndGetTrackers(tab.id);
        } catch (error) {
          console.error(error);
        }
      });
    }
    updateData(data) {
      return __async(this, null, function* () {
        const prevData = __spreadProps(__spreadValues({}, this.data), { categories: [...this.data.categories] });
        this.data = data;
        this.feature.onDataChanged(this.data, prevData);
        yield new BackgroundMessageQuery("antiTrack.model.updated" /* MODEL_UPDATED */, this.data).execute();
      });
    }
    onStorageUpdated(data) {
      return __async(this, null, function* () {
        yield this.updateData(__spreadValues(__spreadValues({}, this.data), data));
      });
    }
    onSettingsStorageUpdated(countOnBadge) {
      return __async(this, null, function* () {
        yield this.updateData(__spreadProps(__spreadValues({}, this.data), { countOnBadge }));
      });
    }
    setCategories(categories) {
      return __async(this, null, function* () {
        yield new SetStorageDataCommand("antiTrack" /* ANTI_TRACK */, __spreadProps(__spreadValues({}, this.data), { categories }), "local" /* LOCAL */).execute();
      });
    }
    onGetModel(body, sendResponse, sender) {
      sendResponse(this.getData());
    }
  };

  // src/modules/antitrack/background/AntiTrack.ts
  var AntiTrack = class extends Feature {
    static buildFeature() {
      return __async(this, null, function* () {
        const feature = new AntiTrack();
        yield feature.init();
        return feature;
      });
    }
    init() {
      return __async(this, null, function* () {
        this.model = new AntiTrackModel(this);
        yield this.model.init();
      });
    }
    dispose() {
      var _a;
      (_a = this.model) == null ? void 0 : _a.dispose();
      this.model = void 0;
    }
    onDataChanged(data, prevData) {
      StaticRulesetUtil.setRulesets(data.categories, prevData.categories);
    }
  };

  // src/modules/cookieConsent/background/command/InitiateCookieConsentDataCommand.ts
  var InitiateCookieConsentDataCommand = class extends Command {
    execute() {
      return __async(this, null, function* () {
        const data = yield this.handleStorageData();
        return Promise.resolve(__spreadValues({}, data));
      });
    }
    getShepherdData() {
      return instance.resolve("Shepherd" /* SHEPHERD */).getData();
    }
    handleStorageData() {
      return __async(this, null, function* () {
        var _a, _b;
        const isOSSupported = BrowserUtil.getOsType() === "Windows" /* WINDOWS */ || EnvironmentUtil.isDevelopment();
        const storageData = yield new GetStorageDataQuery("cookieConsent" /* COOKIE_CONSENT */, "local" /* LOCAL */).execute();
        const shepherdData2 = this.getShepherdData();
        const defaultState = instance.resolve("Config" /* CONFIG */).cookieConsent.defaultState;
        if ((storageData == null ? void 0 : storageData.enabled) !== void 0) {
          let newStorageData = storageData;
          if (storageData.cookieParams === void 0) {
            newStorageData = __spreadValues(__spreadValues({}, storageData), (_a = shepherdData2 == null ? void 0 : shepherdData2.cookieConsent) == null ? void 0 : _a.data);
            newStorageData.enabled = isOSSupported;
            newStorageData.state = isOSSupported ? defaultState.state : "disabled" /* DISABLED */;
            yield new SetStorageDataCommand("cookieConsent" /* COOKIE_CONSENT */, newStorageData).execute();
          }
          return Promise.resolve(newStorageData);
        }
        let finalData = __spreadValues(__spreadValues({}, defaultState), (_b = shepherdData2 == null ? void 0 : shepherdData2.cookieConsent) == null ? void 0 : _b.data);
        if (storageData) {
          finalData = __spreadProps(__spreadValues(__spreadValues({}, finalData), storageData), { state: storageData.state });
        } else {
          finalData.enabled = isOSSupported;
          finalData.state = isOSSupported ? defaultState.state : "disabled" /* DISABLED */;
        }
        yield new SetStorageDataCommand("cookieConsent" /* COOKIE_CONSENT */, finalData).execute();
        return Promise.resolve(finalData);
      });
    }
  };

  // src/background/analytics/command/BackgroundAnalyticsQuery.ts
  var BackgroundAnalyticsQuery = class extends Command {
    constructor(event) {
      super();
      this.event = event;
      this.analytics = instance.resolve("Analytics" /* ANALYTICS */);
    }
    execute() {
      return this.analytics.sendEvent(this.event);
    }
  };

  // src/modules/cookieConsent/util/CookieManagerUtil.ts
  var CookieManagerUtil = class {
    static isEnabled(enabled, state) {
      return enabled && state === "enabled" /* ENABLED */;
    }
    static getScenarioSection(scenarios, params) {
      var _a, _b;
      const { scenario, variant, operation } = params;
      return (_b = (_a = scenarios == null ? void 0 : scenarios[scenario]) == null ? void 0 : _a[variant]) == null ? void 0 : _b[operation];
    }
    static isAllowedWebsite(url, allowedWebsites, iframe) {
      if (iframe || allowedWebsites.length === 0)
        return false;
      const host = url.match(this.CLEAR_WEBSITE_PATTERN)[1];
      return allowedWebsites.some((site) => site === host);
    }
    static hideCookieBanners(cssText) {
      this.injectCssTextStyle(cssText);
      this.setCookieHiddenAttribute();
    }
    static showCookieBanners() {
      if (!document.body)
        return;
      document.body.setAttribute("aosp-cookie", "visible");
    }
    static setCookieHiddenAttribute() {
      if (document.body) {
        document.body.setAttribute("aosp-cookie", "hidden");
        return;
      }
      window.addEventListener("DOMContentLoaded", (event) => {
        document.body.setAttribute("aosp-cookie", "hidden");
      });
    }
    static injectCssTextStyle(cssText) {
      const style = document.createElement("style");
      style.innerText = cssText;
      document.head.append(style);
    }
  };
  CookieManagerUtil.CLEAR_WEBSITE_PATTERN = "^(?:https?://)?(?:[^@/\n]+@)?(?:www.)?([^:/?\n]+)";

  // src/client/localization/util/LangMap.json
  var LangMap_exports = {};
  __export(LangMap_exports, {
    cs: () => cs,
    da: () => da,
    de: () => de,
    default: () => LangMap_default,
    "en-US": () => en_US,
    es: () => es,
    "es-ES": () => es_ES,
    fi: () => fi,
    fr: () => fr,
    hu: () => hu,
    it: () => it,
    ja: () => ja,
    ko: () => ko,
    nb: () => nb,
    "nb-No": () => nb_No,
    nl: () => nl,
    pl: () => pl,
    "pt-BR": () => pt_BR,
    "pt-pt": () => pt_pt,
    ru: () => ru,
    sk: () => sk,
    sv: () => sv,
    "sv-SE": () => sv_SE,
    tr: () => tr,
    "zh-CN": () => zh_CN,
    "zh-TW": () => zh_TW
  });
  var cs = "cs-cz";
  var da = "da-dk";
  var de = "de-de";
  var en_US = "en-us";
  var es_ES = "es-es";
  var es = "es-es";
  var fi = "fi-fi";
  var fr = "fr-fr";
  var hu = "hu-hu";
  var it = "it-it";
  var ja = "ja-jp";
  var ko = "ko-kr";
  var nb_No = "no-no";
  var nb = "no-no";
  var nl = "nl-nl";
  var pl = "pl-pl";
  var pt_BR = "pt-br";
  var pt_pt = "pt-pt";
  var ru = "ru-ru";
  var sk = "cs-sk";
  var sv_SE = "sv-se";
  var sv = "sv-se";
  var tr = "tr-tr";
  var zh_CN = "zh-cn";
  var zh_TW = "zh-tw";
  var LangMap_default = {
    cs,
    da,
    de,
    "en-US": en_US,
    "es-ES": es_ES,
    es,
    fi,
    fr,
    hu,
    it,
    ja,
    ko,
    "nb-No": nb_No,
    nb,
    nl,
    pl,
    "pt-BR": pt_BR,
    "pt-pt": pt_pt,
    ru,
    sk,
    "sv-SE": sv_SE,
    sv,
    tr,
    "zh-CN": zh_CN,
    "zh-TW": zh_TW
  };

  // src/client/localization/util/ExternalLinkUtil.ts
  var ExternalLinkUtil = class {
    static mapLocale(locale) {
      var _a;
      return (_a = LangMap_exports[locale]) != null ? _a : "";
    }
  };

  // src/client/ui/components/common/elements/banner/PromotionUtil.ts
  var PromotionUtil = class {
    static get browserName() {
      return BrowserUtil.getBrowserType();
    }
    static getPromotedProduct(application) {
      const { product, a1GeoAvailable } = application;
      if (BrowserUtil.getOsType() === "Mac" /* MAC */)
        return "none" /* NONE */;
      if (product === "free_av" /* AV_FREE */)
        return "avast-premium-security" /* AVAST_PREMIUM_SECURITY */;
      if (product === "one_free" /* ONE_FREE */)
        return "avast-one-premium" /* AVAST_ONE_PREMIUM */;
      if (a1GeoAvailable && product === "unavailable" /* UNAVAILABLE */)
        return "avast-one-free" /* AVAST_ONE_FREE */;
      if (product === "unavailable" /* UNAVAILABLE */)
        return "avast-premium-security" /* AVAST_PREMIUM_SECURITY */;
      return "none" /* NONE */;
    }
    static getPromotedButtonLabel(product) {
      switch (product) {
        case "avast-premium-security" /* AVAST_PREMIUM_SECURITY */:
        case "avast-one-premium" /* AVAST_ONE_PREMIUM */:
          return "tracking.banner.button.goPremium";
        case "avast-one-free" /* AVAST_ONE_FREE */:
          return "tracking.banner.button.getAvastOne";
        case "none" /* NONE */:
          return null;
      }
    }
    static getTitleBarPromotedButtonLabel(product) {
      switch (product) {
        case "avast-premium-security" /* AVAST_PREMIUM_SECURITY */:
        case "avast-one-premium" /* AVAST_ONE_PREMIUM */:
          return "common.header.button.upgrade";
        case "avast-one-free" /* AVAST_ONE_FREE */:
          return "common.header.button.getAvastOne";
        case "none" /* NONE */:
          return null;
      }
    }
    static getPromotionLinkFromPromotedProduct(product) {
      switch (product) {
        case "avast-premium-security" /* AVAST_PREMIUM_SECURITY */:
          return PromotionLink.AVAST_PREMIUM_SECURITY;
        case "avast-one-premium" /* AVAST_ONE_PREMIUM */:
        case "avast-one-free" /* AVAST_ONE_FREE */:
          return PromotionLink.AVAST_ONE;
        case "none" /* NONE */:
          return null;
      }
    }
    static getLocaleLink(productName, mappedLocale) {
      if (productName !== PromotionLink.AVAST_ONE)
        return mappedLocale ? `${mappedLocale}/` : "";
      return this.AVAST_ONE_LANGUAGES.indexOf(mappedLocale) > -1 ? `${mappedLocale}/` : "en-ww/";
    }
    static getPromotionLink(productName, locale) {
      const mappedLocale = ExternalLinkUtil.mapLocale(locale);
      const localeLink = this.getLocaleLink(productName, mappedLocale);
      return `https://www.avast.com/${localeLink}${productName}?utm_campaign=${productName}-promo&utm_source=AOSP-${this.browserName}&utm_medium=extension-banner`;
    }
  };
  PromotionUtil.AVAST_ONE_LANGUAGES = ["en-us", "en-gb", "en-ca", "en-au", "de-ch", "de-de", "fr-fr", "fr-ca", "fr-ch", "pt-br", "pt-pt"];
  var PromotionLink = /* @__PURE__ */ ((PromotionLink2) => {
    PromotionLink2["BREACH_GUARD"] = "breachguard";
    PromotionLink2["ANTI_TRACK"] = "antitrack";
    PromotionLink2["SECURELINE_VPN"] = "secureline-vpn";
    PromotionLink2["AVAST_ONE"] = "avast-one";
    PromotionLink2["AVAST_PREMIUM_SECURITY"] = "premium-security";
    return PromotionLink2;
  })(PromotionLink || {});

  // src/modules/cookieConsent/background/model/CookieConsentModel.ts
  var CookieConsentModel = class {
    constructor(feature) {
      this.feature = feature;
      this.localization = instance.resolve("Localization" /* LOCALIZATION */);
      this.client = instance.resolve("Client" /* CLIENT */);
      this.config = instance.resolve("Config" /* CONFIG */);
    }
    get notification() {
      return __spreadProps(__spreadValues({}, this.data.notification), {
        promotedProduct: this.getPromotedProduct(),
        locale: this.localization.clientLanguage,
        managerState: this.data.state
      });
    }
    init() {
      return __async(this, null, function* () {
        this.data = yield new InitiateCookieConsentDataCommand().execute();
        this.observer = new BulkObserver([
          new ShepherdObserver(this.onShepherdUpdated.bind(this), "cookieConsent"),
          new BackgroundStorageObserver("cookieConsent" /* COOKIE_CONSENT */, this.onStorageUpdated.bind(this), "local" /* LOCAL */),
          new MessageObserver("cookieConsent.model.get" /* GET_MODEL */, this.onGetModel.bind(this)),
          new MessageObserver("cookieManager.injectClientScript" /* INJECT_SCRIPT */, this.injectContentScript.bind(this)),
          new MessageObserver("cookieManager.getNotification" /* GET_NOTIFICATION */, this.onGetNotification.bind(this)),
          new MessageObserver("cookieManager.getPromotedProduct" /* GET_PROMOTED_PRODUCT */, this.onGetPromotedProduct.bind(this)),
          new MessageObserver("cookieManager.getScenario" /* GET_SCENARIO */, this.onGetScenario.bind(this)),
          new MessageObserver("cookieManager.getCookieStyles" /* GET_COOKIE_STYLES */, this.onGetCookieStyles.bind(this)),
          new MessageObserver("cookieManager.setState" /* SET_STATE */, this.onSetState.bind(this)),
          new MessageObserver("cookieManager.bannerResolved" /* COOKIE_BANNER_RESOLVED */, this.onBannerResolved.bind(this)),
          new MessageObserver("cookieManager.trackScenarioStarted" /* SCENARIO_STARTED */, this.onScenarioStarted.bind(this)),
          new MessageObserver("cookieManager.trackScenarioFailed" /* SCENARIO_FAILED */, this.onScenarioFailed.bind(this)),
          new MessageObserver("cookieManager.setPreferences" /* SET_PREFERENCES */, this.onSetPreferences.bind(this)),
          new MessageObserver("cookieManager.addAllowedWebsite" /* ADD_ALLOWED_WEBSITE */, this.onAddAllowedWebsite.bind(this)),
          new MessageObserver("cookieManager.removeAllowedWebsite" /* REMOVE_ALLOWED_WEBSITE */, this.onRemoveAllowedWebsite.bind(this)),
          new MessageObserver("cookieManager.dismissCookieNotification" /* DISMISS_COOKIE_NOTIFICATION */, this.onDismissCookieNotification.bind(this)),
          new MessageObserver("cookieManager.notificationDisplayed" /* NOTIFICATION_DISPLAYED */, this.setNotificationDisplayed.bind(this)),
          new MessageObserver("cookie.enable-cookie-manager" /* ENABLE_COOKIE_MANAGER */, this.onEnableCookieManager.bind(this)),
          new MessageObserver("cookie.openPromotedLink" /* OPEN_PROMOTED_LINK */, this.openPromotedLink.bind(this)),
          new MessageObserver("cookieManager.runFrameScenario" /* RUN_FRAME_SCENARIO */, this.onRunFrameScenario.bind(this)),
          new MessageObserver("cookieManager.frameScenarioFinished" /* FRAME_SCENARIO_FINISHED */, this.onFrameScenarioFinished.bind(this))
        ]);
        this.observer.subscribe();
      });
    }
    updateData(data) {
      const prevData = __spreadValues({}, this.data);
      this.data = data;
      this.feature.onDataChanged(this.data, prevData);
    }
    onShepherdUpdated(shepherdData2) {
      this.updateData(__spreadValues(__spreadValues({}, this.data), shepherdData2));
    }
    onStorageUpdated(data) {
      this.updateData(data);
    }
    dispose() {
      var _a;
      (_a = this.observer) == null ? void 0 : _a.unsubscribe();
      this.observer = void 0;
    }
    onGetModel(_, sendResponse) {
      sendResponse(this.data);
    }
    onSetState(data, sendResponse) {
      return __async(this, null, function* () {
        yield this.setState(data.state);
      });
    }
    onGetNotification(_, sendResponse) {
      sendResponse(this.notification);
    }
    onGetPromotedProduct(_, sendResponse) {
      sendResponse(this.getPromotedProduct());
    }
    onGetScenario(data, sendResponse) {
      sendResponse(this.getScenario(data.scenarioParams));
    }
    onGetCookieStyles(data, sendResponse) {
      sendResponse(this.data.cookieBannerSelectors);
    }
    onScenarioStarted(data, sendResponse) {
      this.track("started" /* STARTED */, data.scenarioParams);
    }
    onScenarioFailed(data, sendResponse) {
      this.track("error" /* ERROR */, data.scenarioParams, data.error);
    }
    onSetPreferences(data, sendResponse) {
      this.setPreferences(data.preferences);
    }
    onAddAllowedWebsite(data, sendResponse) {
      this.addAllowedWebsite(data.allowedWebsite);
    }
    onRemoveAllowedWebsite(data, sendResponse) {
      this.removeAllowedWebsite(data.allowedWebsite);
    }
    onRunFrameScenario(data, sendResponse, sender) {
      new BackgroundMessageQuery("cookieManager.runFrameScenario" /* RUN_FRAME_SCENARIO */, data, sender.tab.id).execute();
    }
    onFrameScenarioFinished(data, sendResponse, sender) {
      new BackgroundMessageQuery("cookieManager.frameScenarioFinished" /* FRAME_SCENARIO_FINISHED */, data, sender.tab.id).execute();
    }
    onDismissCookieNotification(data, sendResponse) {
      this.data.notification.state === "show" /* SHOW */ ? this.setNotificationState("dismissed" /* DISMISSED */) : this.setNotificationState("doNotShow" /* DO_NOT_SHOW */);
    }
    onEnableCookieManager(data, sendResponse, sender) {
      this.openAndEnableCookieManager(sender.tab);
    }
    onBannerResolved(data) {
      this.increaseDismissedPopups(data.resolveTime);
      this.track("successful" /* SUCCESSFUL */, data.scenarioParams);
    }
    increaseDismissedPopups(resolveTime) {
      const currentStats = this.data.stats;
      new SetStorageDataCommand("cookieConsent" /* COOKIE_CONSENT */, __spreadProps(__spreadValues({}, this.data), {
        stats: __spreadProps(__spreadValues({}, currentStats), {
          dismissedPopups: currentStats.dismissedPopups + 1,
          savedTime: currentStats.savedTime + resolveTime
        })
      })).execute();
    }
    setPreferences(preferences) {
      new SetStorageDataCommand("cookieConsent" /* COOKIE_CONSENT */, __spreadProps(__spreadValues({}, this.data), {
        preferences
      })).execute();
    }
    setState(state) {
      return __async(this, null, function* () {
        yield new SetStorageDataCommand("cookieConsent" /* COOKIE_CONSENT */, __spreadProps(__spreadValues({}, this.data), {
          state
        })).execute();
        this.track("preferences" /* PREFERENCES */);
      });
    }
    addAllowedWebsite(website) {
      let allowedWebsites = this.data.allowedWebsites;
      if (allowedWebsites.includes(website))
        allowedWebsites = allowedWebsites.filter((item) => item !== website);
      new SetStorageDataCommand("cookieConsent" /* COOKIE_CONSENT */, __spreadProps(__spreadValues({}, this.data), { allowedWebsites: [website, ...allowedWebsites] })).execute();
    }
    removeAllowedWebsite(website) {
      const allowedWebsites = this.data.allowedWebsites.filter((item) => item !== website);
      new SetStorageDataCommand("cookieConsent" /* COOKIE_CONSENT */, __spreadProps(__spreadValues({}, this.data), { allowedWebsites })).execute();
    }
    openAndEnableCookieManager(tab) {
      this.setNotificationState("doNotShow" /* DO_NOT_SHOW */);
      this.setState("enabled" /* ENABLED */);
      new BackgroundMessageQuery("panel.show" /* SHOW */, { route: "cookies" }, tab.id).execute();
    }
    setNotificationState(state) {
      new SetStorageDataCommand("cookieConsent" /* COOKIE_CONSENT */, __spreadProps(__spreadValues({}, this.data), { notification: __spreadProps(__spreadValues({}, this.data.notification), { state }) })).execute();
    }
    setNotificationDisplayed() {
      new SetStorageDataCommand("cookieConsent" /* COOKIE_CONSENT */, __spreadProps(__spreadValues({}, this.data), { notification: __spreadProps(__spreadValues({}, this.data.notification), { alreadyDisplayed: true }) })).execute();
    }
    track(eventName, params, error) {
      switch (eventName) {
        case "error" /* ERROR */:
          new BackgroundAnalyticsQuery({
            type: "analytics.event.click" /* CLICK */,
            category: "cookies" /* COOKIE_MANAGER */,
            action: eventName,
            label: this.data.preferences,
            view: params ? `${params.scenario}.${params.operation}.${params.variant}` : void 0
          }).execute();
          return new BackgroundAnalyticsQuery({
            type: "analytics.event.error" /* ERROR */,
            error
          }).execute();
      }
      return new BackgroundAnalyticsQuery({
        type: "analytics.event.click" /* CLICK */,
        category: "cookies" /* COOKIE_MANAGER */,
        action: eventName,
        label: this.data.preferences,
        view: params ? `${params.scenario}.${params.operation}.${params.variant}` : void 0
      }).execute();
    }
    injectContentScript(body, sendResponse, sender) {
      return __async(this, null, function* () {
        if (CookieManagerUtil.isAllowedWebsite(sender.url, this.data.allowedWebsites, body.isIFrame) || UrlUtil.isIgnoredUrl(sender.url, this.config.ignoredTabs) || UrlUtil.isIgnoredUrl(sender.tab.url, this.config.ignoredTabs))
          return;
        const script = body.isIFrame ? CookieHandlerScript.FRAME : CookieHandlerScript.CONTENT;
        yield new InjectContentStyleCommand(sender.tab.id, ["client/runner-components.css"]).execute();
        yield new InjectContentScriptCommand(sender.tab.id, [`client/cookie/${script}`], [sender.frameId]).execute();
      });
    }
    getScenario(scenarioParams) {
      var _a;
      const params = __spreadProps(__spreadValues({}, scenarioParams), {
        operation: (_a = scenarioParams.operation) != null ? _a : this.data.preferences
      });
      return CookieManagerUtil.getScenarioSection(this.data.scenarios, params);
    }
    getPromotedProduct() {
      const clientData = this.client.getData();
      return PromotionUtil.getPromotedProduct({
        product: clientData.identifiers.localAppType,
        a1GeoAvailable: clientData.a1GeoAvailable
      });
    }
    openPromotedLink() {
      const url = PromotionUtil.getPromotionLink(
        PromotionUtil.getPromotionLinkFromPromotedProduct(this.notification.promotedProduct),
        this.notification.locale
      );
      new CreateTabCommand({ url, active: true }).execute();
    }
  };
  var CookieHandlerScript = /* @__PURE__ */ ((CookieHandlerScript2) => {
    CookieHandlerScript2["FRAME"] = "cookieFrameHandler.js";
    CookieHandlerScript2["CONTENT"] = "cookieHandler.js";
    return CookieHandlerScript2;
  })(CookieHandlerScript || {});

  // src/modules/cookieConsent/background/CookieConsent.ts
  var CookieConsent = class extends Feature {
    static buildFeature() {
      return __async(this, null, function* () {
        const feature = new CookieConsent();
        yield feature.init();
        return feature;
      });
    }
    init() {
      return __async(this, null, function* () {
        this.model = new CookieConsentModel(this);
        yield this.model.init();
      });
    }
    onDataChanged(data, prevData) {
      new BackgroundMessageQuery("cookieConsent.model.updated" /* MODEL_UPDATED */, data).execute();
    }
    dispose() {
      var _a;
      (_a = this.model) == null ? void 0 : _a.dispose();
      this.model = void 0;
    }
  };
  var CookieConsent_default = CookieConsent;

  // src/modules/searchResults/background/command/InitiateSearchResultsDataCommand.ts
  var InitiateSearchResultsDataCommand = class extends Command {
    execute() {
      return __async(this, null, function* () {
        const shepherd = this.getShepherdData();
        const state = yield this.handleStorageData();
        return Promise.resolve(__spreadValues(__spreadValues({}, state), shepherd.searchResults));
      });
    }
    getShepherdData() {
      return instance.resolve("Shepherd" /* SHEPHERD */).getData();
    }
    handleStorageData() {
      return __async(this, null, function* () {
        const storageData = yield new GetStorageDataQuery("searchResults" /* SEARCH_RESULTS */, "local" /* LOCAL */).execute();
        if (storageData && Object.keys(storageData).length)
          return Promise.resolve(storageData);
        const defaultState = instance.resolve("Config" /* CONFIG */).searchResults.defaultState;
        yield new SetStorageDataCommand("searchResults" /* SEARCH_RESULTS */, defaultState, "local" /* LOCAL */).execute();
        return Promise.resolve(defaultState);
      });
    }
  };

  // src/modules/searchResults/background/model/SearchResultsModel.ts
  var SearchResultsModel = class {
    constructor(feature) {
      this.feature = feature;
    }
    init() {
      return __async(this, null, function* () {
        this.data = yield new InitiateSearchResultsDataCommand().execute();
        this.observers = new BulkObserver([
          new MessageObserver("serp.setEnabled" /* SET_ENABLED */, this.onSetEnabled.bind(this)),
          new MessageObserver("serp.getModel" /* GET_MODEL */, this.onGetModel.bind(this)),
          new MessageObserver("serp.requestUrlsSafetyInfo" /* REQUEST_URLS_SAFETY_INFO */, (...args) => {
            this.onCheckUrlsRequest(...args);
            return true;
          }),
          new MessageObserver("serp.getRule" /* GET_SERP_RULE */, (...args) => {
            this.onGetRule(...args);
            return true;
          }),
          new ShepherdObserver(this.onShepherdUpdated.bind(this), "searchResults" /* SEARCH_RESULTS */),
          new BackgroundStorageObserver("searchResults" /* SEARCH_RESULTS */, this.onStorageUpdated.bind(this), "local" /* LOCAL */)
        ]);
        this.observers.subscribe();
      });
    }
    getData() {
      return this.data;
    }
    getRule(url) {
      return __async(this, null, function* () {
        var _a, _b;
        if (!url)
          return;
        const rule = (_b = (_a = this.getData()) == null ? void 0 : _a.rules) == null ? void 0 : _b.find((rule2) => rule2.url && url.search(rule2.url) > -1);
        if (!rule || !Object.keys(rule).length)
          return;
        return rule;
      });
    }
    dispose() {
      this.observers.unsubscribe();
      this.data = void 0;
      this.feature = void 0;
    }
    updateData(data) {
      const prevData = __spreadValues({}, this.data);
      this.data = data;
      this.feature.onDataChanged(this.data, prevData);
      new BackgroundMessageQuery("serp.modelUpdated" /* MODEL_UPDATED */, this.data).execute();
    }
    onShepherdUpdated(data) {
      this.updateData(__spreadValues(__spreadValues({}, this.data), data));
    }
    onStorageUpdated(data) {
      this.updateData(__spreadValues(__spreadValues({}, this.data), data));
    }
    onSetEnabled(enabled) {
      new SetStorageDataCommand("searchResults" /* SEARCH_RESULTS */, { enabled }).execute();
    }
    onGetModel(body, sendResponse, sender) {
      sendResponse(this.getData());
    }
    onCheckUrlsRequest(_0, _1, _2) {
      return __async(this, arguments, function* ({ urls }, sendResponse, sender) {
        const rule = yield this.getRule(sender.url);
        if (!rule || !urls || urls.length === 0) {
          return;
        }
        const extractedLinkMap = this.getExtractedToOriginalLinkMap(urls, rule.urlExtractor);
        const urlsSafetyInfo = yield this.getUrlsSafetyInfo(urls, extractedLinkMap);
        sendResponse({ urlsSafetyInfo, rule });
      });
    }
    onGetRule(_, sendResponse, sender) {
      return __async(this, null, function* () {
        sendResponse(yield this.getRule(sender.url));
      });
    }
    getExtractedToOriginalLinkMap(urls, urlExtractor) {
      if (!urlExtractor)
        return;
      const map = /* @__PURE__ */ new Map();
      for (const url of urls) {
        const extractedLink = this.getExtractedLink(url, urlExtractor);
        if (!extractedLink) {
          map.set(url, [url]);
          continue;
        }
        const originalUrls = map.get(extractedLink) || [];
        map.set(extractedLink, [...originalUrls, url]);
      }
      return map;
    }
    getExtractedLink(url, urlExtractor) {
      const decodedUrl = decodeURIComponent(url);
      const matched = decodedUrl.match(urlExtractor);
      if (matched && matched.length > 1)
        return matched[1];
    }
    getUrlsSafetyInfo(originalUrls, extractedLinkMap) {
      return __async(this, null, function* () {
        const hasExtractedLinks = extractedLinkMap == null ? void 0 : extractedLinkMap.size;
        const urls = hasExtractedLinks ? [...extractedLinkMap.keys()] : originalUrls;
        const urlInfoResult = yield new UrlInfoLoader(urls).send();
        return hasExtractedLinks ? this.getSafetyStatusFromLinkMap(extractedLinkMap, urlInfoResult) : this.getSafetyStatusFromUrl(urls, urlInfoResult);
      });
    }
    getSafetyStatusFromUrl(urls, urlInfoResult) {
      return urls.map((url) => ({ url, isSafe: urlInfoResult.isSafe(url) }));
    }
    getSafetyStatusFromLinkMap(extractedLinkMap, urlInfoResult) {
      const results = [];
      for (const answer of urlInfoResult.answers) {
        const originalLinks = extractedLinkMap.get(answer.key);
        if (originalLinks && originalLinks.length) {
          originalLinks.forEach((originalLink) => results.push({
            url: originalLink,
            isSafe: urlInfoResult.isSafe(answer.key)
          }));
          continue;
        }
        results.push({ url: answer.key, isSafe: urlInfoResult.isSafe(answer.key) });
      }
      return results;
    }
  };

  // src/modules/searchResults/background/SearchResultsHandler.ts
  var SearchResultsHandler = class {
    constructor(model) {
      this.model = model;
      this.config = instance.resolve("Config" /* CONFIG */);
      this.tabObserver = new TabObserver("ACTIVE" /* ACTIVE */, this.onTabUpdated.bind(this));
      this.tabObserver.subscribe();
    }
    onTabUpdated(tabId, changeInfo, tab) {
      return __async(this, null, function* () {
        if (this.isIgnoredUrl(tab == null ? void 0 : tab.url)) {
          return;
        }
        const injected = yield this.isInjected(tab.id);
        const rule = yield this.model.getRule(tab.url);
        const searchResultsData = this.model.getData();
        if (changeInfo.status === "complete" && !this.isIgnoredUrl(tab.url) && searchResultsData.enabled && rule && !injected) {
          yield this.injectAssets(tab.id);
        }
      });
    }
    injectAssets(tabId) {
      return __async(this, null, function* () {
        yield new InjectContentScriptCommand(tabId, ["client/searchResults.js"]).execute();
        yield new InjectContentStyleCommand(tabId, ["client/search.css", "client/searchResults.css"]).execute();
      });
    }
    dispose() {
      var _a;
      (_a = this.tabObserver) == null ? void 0 : _a.unsubscribe();
      this.tabObserver = void 0;
    }
    isInjected(tabId) {
      try {
        return new BackgroundMessageQuery("serp.clientInjected" /* CLIENT_INJECTED */, tabId).execute();
      } catch (e) {
        return Promise.resolve(false);
      }
    }
    isIgnoredUrl(url) {
      return this.config.ignoredTabs.some((ignoredUrl) => url.match(new RegExp(ignoredUrl)));
    }
  };

  // src/modules/searchResults/background/SearchResults.ts
  var SearchResults = class extends Feature {
    static buildFeature() {
      return __async(this, null, function* () {
        const feature = new SearchResults();
        yield feature.init();
        return feature;
      });
    }
    init() {
      return __async(this, null, function* () {
        this.model = new SearchResultsModel(this);
        yield this.model.init();
        this.handler = new SearchResultsHandler(this.model);
      });
    }
    dispose() {
      this.disposeModel();
      this.disposeHandler();
    }
    disposeModel() {
      var _a;
      (_a = this.model) == null ? void 0 : _a.dispose();
      this.model = void 0;
    }
    disposeHandler() {
      var _a;
      (_a = this.handler) == null ? void 0 : _a.dispose();
      this.handler = void 0;
    }
    onDataChanged() {
    }
  };

  // src/modules/advertiser/background/command/InitiateAdvertiserDataCommand.ts
  var InitiateAdvertiserDataCommand = class extends Command {
    execute() {
      return __async(this, null, function* () {
        var _a, _b;
        const storageData = yield new GetStorageDataQuery("advertiser" /* ADVERTISER */, "local" /* LOCAL */).execute();
        if ((storageData == null ? void 0 : storageData.state) !== void 0) {
          return Promise.resolve(storageData);
        }
        const autoOptOut = ((_a = storageData == null ? void 0 : storageData.settings) == null ? void 0 : _a.autoOptOut) === void 0 ? true : (_b = storageData == null ? void 0 : storageData.settings) == null ? void 0 : _b.autoOptOut;
        const advertisers = this.getShepherdData().advertisers;
        const brokerNames = advertisers.scenarios.map((scenario) => scenario.name);
        const brokersToOptOut = {};
        brokerNames.forEach((brokerName) => {
          brokersToOptOut[brokerName] = true;
        });
        const data = __spreadProps(__spreadValues({}, advertisers), {
          state: "INITIALIZED" /* INITIALIZED */,
          settings: {
            autoOptOut,
            brokersOptOut: brokersToOptOut,
            optedOutBrokers: []
          }
        });
        const finalData = __spreadValues(__spreadValues({}, data), storageData);
        yield new SetStorageDataCommand("advertiser" /* ADVERTISER */, finalData, "local" /* LOCAL */).execute();
        return Promise.resolve(finalData);
      });
    }
    getShepherdData() {
      return instance.resolve("Shepherd" /* SHEPHERD */).getData();
    }
  };

  // src/modules/advertiser/util/AdvertiserUtil.ts
  var AdvertiserUtil = class {
    static getScenarioByName(scenarios, scenarioName) {
      if (!scenarios || !scenarios.length)
        return void 0;
      return scenarios.find((scenario) => scenario.name === scenarioName);
    }
    static isRegex(string) {
      return string.length > 0 && string[0] === "/";
    }
    static testRegex(regex, string) {
      const re = new RegExp(regex.slice(1));
      return re.test(string);
    }
    static pathnameMatches(currentUrl, url) {
      return typeof url === "string" && AdvertiserUtil.isRegex(url) ? AdvertiserUtil.testRegex(url, currentUrl) : currentUrl.includes(url);
    }
  };

  // src/modules/advertiser/background/command/scenario/AdvertiserCommandBase.ts
  var AdvertiserCommandBase = class extends Command {
    constructor(scenario, tabId) {
      super();
      this.scenario = scenario;
      this.tabId = tabId;
    }
    dispose() {
      this.scenario = void 0;
      this.tabId = void 0;
    }
    injectClientAssets() {
      return __async(this, null, function* () {
        const result = Promise.race([
          new InjectContentScriptCommand(this.tabId, ["client/advertiser.js"]).execute(),
          new Promise((resolve, reject) => setTimeout(reject, 3e4))
        ]);
        return result;
      });
    }
  };

  // src/modules/advertiser/background/command/scenario/AdvertiserScenarioCommand.ts
  var AdvertiserScenarioCommand = class extends AdvertiserCommandBase {
    execute() {
      return __async(this, null, function* () {
        try {
          yield this.injectClientAssets();
        } catch (e) {
          return Promise.reject();
        } finally {
          this.dispose();
        }
      });
    }
  };

  // src/modules/advertiser/background/command/scenario/AwaitScenarioResultQuery.ts
  var AwaitScenarioResultQuery2 = class extends Command {
    constructor(tabId, scenarioName) {
      super();
      this.tabId = tabId;
      this.scenarioName = scenarioName;
      this.observer = new BackgroundMessageObserver("Advertiser.scenario.result" /* SCENARIO_RESULT */, this.onMessageHandler.bind(this));
    }
    execute() {
      return __async(this, null, function* () {
        const SCENARIO_RUN_THRESHOLD_TIME_MS = 3e4;
        return new Promise((resolve) => {
          this.resolve = resolve;
          this.observer.subscribe();
          setTimeout(() => {
            resolve({
              type: "Advertiser.scenario.type.optOut" /* OPT_OUT */,
              result: new ScenarioResult(this.scenarioName, Resolution.succeeded, [])
            });
          }, SCENARIO_RUN_THRESHOLD_TIME_MS);
        });
      });
    }
    dispose() {
      this.disposeObserver();
      this.tabId = void 0;
      this.scenarioName = void 0;
    }
    onMessageHandler(message, sendResponse, sender) {
      if (!this.currentScenarioMessage(message, sender))
        return;
      this.dispose();
      this.resolve(message);
    }
    currentScenarioMessage(message, sender) {
      var _a;
      return this.tabMatch((_a = sender == null ? void 0 : sender.tab) == null ? void 0 : _a.id) && this.scenarioNameMatch(message);
    }
    tabMatch(tabId) {
      return this.tabId === tabId;
    }
    scenarioNameMatch(message) {
      return this.scenarioName === message.result.scenarioName;
    }
    disposeObserver() {
      if (!this.observer)
        return;
      this.observer.unsubscribe();
      this.observer = void 0;
    }
  };

  // src/modules/advertiser/background/command/model/AdvertiserHandler.ts
  var AdvertiserHandler = class {
    constructor() {
      this.shepherd = instance.resolve("Shepherd" /* SHEPHERD */);
    }
    startScenario(scenarioName) {
      return __async(this, null, function* () {
        const scenarios = this.shepherd.getData().advertisers.scenarios;
        const scenario = AdvertiserUtil.getScenarioByName(scenarios, scenarioName);
        const CLOSE_WINDOW_DELAY_MS = 5e3;
        if (!scenario)
          return;
        const url = scenario.scenario.metadata.start_url;
        const window2 = yield chrome.windows.create({ url, state: "minimized", focused: false });
        const tabId = window2.tabs[0].id;
        if (scenario.scenario.metadata.isDoNotWaitForResponse) {
          yield new Promise((resolve) => setTimeout(resolve, CLOSE_WINDOW_DELAY_MS));
          yield chrome.windows.remove(window2.id);
          return new ScenarioResult(scenarioName, Resolution.succeeded, []);
        }
        let result;
        try {
          yield new AdvertiserScenarioCommand(scenario, tabId).execute();
          yield new BackgroundMessageQuery("Advertiser.run.scenario" /* RUN_SCENARIO */, scenario, tabId).execute();
          const response = yield new AwaitScenarioResultQuery2(tabId, scenario.name).execute();
          result = response.result;
        } catch (error) {
          console.log(error);
          result = new ScenarioResult(scenario.name, Resolution.failed, []);
        }
        yield new Promise((resolve) => setTimeout(resolve, CLOSE_WINDOW_DELAY_MS));
        yield chrome.windows.remove(window2.id);
        return result;
      });
    }
  };

  // src/modules/advertiser/background/model/AdvertiserModel.ts
  var _AdvertiserModel = class {
    constructor(feature) {
      this.feature = feature;
    }
    init() {
      return __async(this, null, function* () {
        this.advertiserData = yield new InitiateAdvertiserDataCommand().execute();
        this.observer = new BulkObserver([
          new ShepherdObserver(this.onShepherdUpdated.bind(this), "advertisers"),
          new BackgroundStorageObserver("advertiser" /* ADVERTISER */, this.onStorageUpdated.bind(this), "local" /* LOCAL */),
          new MessageObserver("set.advertisers.autoOptOut" /* SET_AUTO_OPT_OUT */, this.onSetAdvertisersOptOut.bind(this)),
          new MessageObserver("advertisersSelectOneForOptOut" /* SELECT_FOR_OPT_OUT */, this.onSelectForOptOut.bind(this)),
          new MessageObserver("advertisersStartOptOut" /* START_OPT_OUT */, this.onAdvertiserStartOptOut.bind(this)),
          new MessageObserver("Advertiser.model.get" /* GET_MODEL */, this.onGetModel.bind(this))
        ]);
        this.observer.subscribe();
        this.advertiserHandler = new AdvertiserHandler();
        this.autoOptOutTimer = new Interval(this.onAutoOptOutTimer.bind(this), "AutoOptOutTimer");
        this.autoOptOutTimer.start(_AdvertiserModel.AUTO_SCAN_CHECK_INTERVAL_MINS);
      });
    }
    getData() {
      return this.advertiserData;
    }
    dispose() {
      var _a;
      (_a = this.observer) == null ? void 0 : _a.unsubscribe();
      this.observer = void 0;
      this.advertiserData = void 0;
      this.feature = void 0;
    }
    updateData(newAdvertiserData) {
      const prevData = __spreadValues({}, this.advertiserData);
      this.advertiserData = newAdvertiserData;
      this.feature.onDataChanged(this.advertiserData, prevData);
    }
    onShepherdUpdated(newAdvertiserData) {
      this.updateData(__spreadValues(__spreadValues({}, this.advertiserData), newAdvertiserData));
    }
    onStorageUpdated(newAdvertiserData) {
      this.updateData(__spreadValues(__spreadValues({}, this.advertiserData), newAdvertiserData));
    }
    onGetModel(body, sendResponse, sender) {
      sendResponse(this.getData());
    }
    onSelectForOptOut(state) {
      return __async(this, null, function* () {
        const updatedData = this.advertiserData;
        updatedData.settings.brokersOptOut[state.title] = state.value;
        yield new SetStorageDataCommand("advertiser" /* ADVERTISER */, updatedData).execute();
      });
    }
    onSetAdvertisersOptOut(state) {
      return __async(this, null, function* () {
        const updatedData = this.advertiserData;
        updatedData.settings.autoOptOut = state.value;
        yield new SetStorageDataCommand("advertiser" /* ADVERTISER */, updatedData).execute();
      });
    }
    setAdvertisersState(state) {
      return __async(this, null, function* () {
        this.advertiserData.state = state;
        yield new SetStorageDataCommand("advertiser" /* ADVERTISER */, this.advertiserData).execute();
        try {
          yield new BackgroundMessageQuery("Advertiser.set.notification" /* SET_ADVERTISER_NOTIFICATION */, state).execute();
        } catch (err) {
        }
      });
    }
    getAllBrokersToOptOut() {
      return Object.keys(this.advertiserData.settings.brokersOptOut).filter((key) => {
        if (this.advertiserData.settings.optedOutBrokers.includes(key)) {
          return false;
        }
        return this.advertiserData.settings.brokersOptOut[key];
      });
    }
    onAdvertiserStartOptOut(brokers) {
      return __async(this, null, function* () {
        yield this.setAdvertisersState("RUNNING" /* RUNNING */);
        const brokersToOptOut = Array.isArray(brokers) ? brokers : this.getAllBrokersToOptOut();
        for (const brokerName of brokersToOptOut) {
          const scenarioResult = yield this.advertiserHandler.startScenario(brokerName);
          if (scenarioResult.resolution !== Resolution.succeeded) {
            continue;
          }
          if (!this.advertiserData.settings.optedOutBrokers.includes(brokerName)) {
            this.advertiserData.settings.optedOutBrokers.push(brokerName);
            delete this.advertiserData.settings.brokersOptOut[brokerName];
            yield new SetStorageDataCommand("advertiser" /* ADVERTISER */, this.advertiserData).execute();
          }
          ;
        }
        yield new SetStorageDataCommand("advertiser.auto.optOut.lastRun" /* ADVERTISER_AUTO_OPT_OUT_LAST_RUN */, {
          timestamp: Date.now(),
          brokers: brokersToOptOut
        }).execute();
        yield this.setAdvertisersState("FINISHED" /* FINISHED */);
      });
    }
    onAutoOptOutTimer() {
      return __async(this, null, function* () {
        this.advertiserData = yield new GetStorageDataQuery("advertiser" /* ADVERTISER */).execute();
        if (!this.advertiserData.settings.brokersOptOut) {
          console.log("Advertiser opt out not set");
          return;
        }
        const lastRunData = yield new GetStorageDataQuery("advertiser.auto.optOut.lastRun" /* ADVERTISER_AUTO_OPT_OUT_LAST_RUN */).execute();
        if (!lastRunData) {
          console.log("No last run yet, ignoring timer");
          return;
        }
        if (Date.now() - lastRunData.timestamp > _AdvertiserModel.AUTO_SCAN_DURATION_MS) {
          if (this.advertiserData.state === "RUNNING" /* RUNNING */) {
            console.log("Advertiser opt out running already");
            return;
          }
          yield this.onAdvertiserStartOptOut();
        } else {
          console.log("Time not reached, ignoring timer");
        }
      });
    }
  };
  var AdvertiserModel = _AdvertiserModel;
  AdvertiserModel.AUTO_SCAN_DURATION_MS = 24 * 60 * 60 * 1e3;
  AdvertiserModel.AUTO_SCAN_CHECK_INTERVAL_MINS = 15;

  // src/modules/advertiser/background/Advertiser.ts
  var Advertiser = class extends Feature {
    static buildFeature() {
      return __async(this, null, function* () {
        const feature = new Advertiser();
        yield feature.init();
        return feature;
      });
    }
    init() {
      return __async(this, null, function* () {
        this.model = new AdvertiserModel(this);
        yield this.model.init();
      });
    }
    onDataChanged(data) {
      new BackgroundMessageQuery("Advertiser.model.updated" /* MODEL_UPDATED */, data).execute();
    }
    dispose() {
      this.disposeModel();
    }
    disposeModel() {
      if (!this.model)
        return;
      this.model.dispose();
      this.model = void 0;
    }
  };

  // src/background/telemetryManager/TelemetryConstants.ts
  var MEASUREMENT_ID = "G-ZX2JJQD3BV";
  var GA4_API_SECRET = "2yOW819-R6KZ0ryKJr_s-Q";
  var REQUEST_TYPE = "POST";
  var GA4_ANALYTICS_URL = "https://www.google-analytics.com/mp/collect";
  var DEFAULT_FETCH_TIMEOUT = 60 * 1e3;
  var PAGE_VIEW_EVENT = "pageView";
  var GOOGLE_ANALYTICS_PROTOCOL_VERSION = 2;
  var ANONYMIZE_IP = 1;
  var DATA_SOURCE = "web";
  var FTC_NOTIFICATION_EVENT = {
    learnMore: "click_learnmore",
    close: "click_close",
    shown: "notification_shown",
    error: "notification_error",
    heartbeat: "heartbeat"
  };

  // src/modules/compliance/background/command/InitiateComplianceStateCommand.ts
  var InitiateComplianceStateCommand = class extends Command {
    constructor() {
      super(...arguments);
      this.geoLocation = instance.resolve("GeoLocation" /* GEO_LOCATION */);
      this.telemetry = instance.resolve("Telemetry" /* TELEMETRY */);
      this.MAX_ERROR_COUNT = 15;
    }
    getGeoLocationRegion() {
      return __async(this, null, function* () {
        let region = "";
        let errorMsg = "";
        const currentDay = Date.now();
        try {
          const response = yield this.geoLocation.retrieveGeoLocationRegion("compliance");
          region = response.get("region");
          errorMsg = region ? "" : response.get("error");
          if (region) {
            yield new SetStorageDataCommand("firstErrorDate" /* FIRST_ERROR_DATE */, {
              sentDate: ""
            }).execute();
          } else if (errorMsg) {
            let firstErrorDate = yield new GetStorageDataQuery("firstErrorDate" /* FIRST_ERROR_DATE */, "local" /* LOCAL */).execute();
            let failureCount = yield new GetStorageDataQuery("fetchFailureCounter" /* FETCH_FAILURE_COUNTER */, "local" /* LOCAL */).execute();
            if (failureCount > this.MAX_ERROR_COUNT && (firstErrorDate == null ? void 0 : firstErrorDate.sentDate)) {
              const isErrorMoreThan7days = this.isOlderThan7Days(firstErrorDate.sentDate);
              const isUSLocale = navigator.language.toLowerCase().includes("en-us");
              region = isErrorMoreThan7days && isUSLocale ? "US" : region;
            } else if (!(firstErrorDate == null ? void 0 : firstErrorDate.sentDate)) {
              yield new SetStorageDataCommand("firstErrorDate" /* FIRST_ERROR_DATE */, {
                sentDate: currentDay
              }).execute();
            }
          }
        } catch (error) {
          errorMsg = error.toString();
        }
        if (errorMsg) {
          yield this.sendErrorTelemetry(errorMsg);
        }
        return {
          region
        };
      });
    }
    isOlderThan7Days(date) {
      const today = new Date();
      const inputDate = new Date(date);
      const diff = Math.abs(today - inputDate);
      const diffDays = Math.floor(diff / (1e3 * 60 * 60 * 24));
      return diffDays > 7;
    }
    checkAndSendLocationHeartBeat(region, errorMsg) {
      return __async(this, null, function* () {
        let islocationHbSent = yield new GetStorageDataQuery("complianceHeartbeatSent" /* COMPLIANCE_HEARTBEAT_SENT */, "local" /* LOCAL */).execute();
        if (!islocationHbSent) {
          this.sendTelemetry(FTC_NOTIFICATION_EVENT.heartbeat, region || "error", errorMsg);
          yield new SetStorageDataCommand("complianceHeartbeatSent" /* COMPLIANCE_HEARTBEAT_SENT */, Date.now()).execute();
        }
      });
    }
    sendErrorTelemetry(errorMsg) {
      return __async(this, null, function* () {
        var _a;
        const currentError = errorMsg ? errorMsg.substring(0, 100) : "";
        const currentTime = Date.now();
        try {
          const prevSentError = (_a = yield new GetStorageDataQuery("prevComplianceError" /* PREV_COMPLIANCE_ERROR */, "local" /* LOCAL */).execute()) != null ? _a : {};
          if (!prevSentError.message || currentError && currentError !== prevSentError.message) {
            this.sendTelemetry(FTC_NOTIFICATION_EVENT.error, "error", errorMsg);
            yield new SetStorageDataCommand("prevComplianceError" /* PREV_COMPLIANCE_ERROR */, {
              sentTime: currentTime,
              message: currentError
            }).execute();
          }
        } catch (error) {
          console.error(error);
        }
      });
    }
    sendTelemetry(eventName, region, errorMsg) {
      this.telemetry.sendEvent(eventName, {
        LOC: region,
        BROWSERLOCALE: navigator.language,
        ERROR: errorMsg ? errorMsg.substring(0, 100) : ""
      });
    }
    execute() {
      return __async(this, null, function* () {
        const storedComplianceState = yield new GetStorageDataQuery("complianceState" /* COMPLIANCE_STATE */, "local" /* LOCAL */).execute();
        if (storedComplianceState && storedComplianceState !== "error" /* ERROR */) {
          return Promise.resolve(storedComplianceState);
        }
        const response = yield this.getGeoLocationRegion();
        if (!(response == null ? void 0 : response.region) || response.region === "") {
          Promise.resolve("error" /* ERROR */);
        }
        if (response.region && response.region.toLowerCase() === "us") {
          let complianceState = yield new GetStorageDataQuery("complianceState" /* COMPLIANCE_STATE */, "local" /* LOCAL */).execute();
          if (complianceState) {
            return Promise.resolve(complianceState);
          }
          complianceState = "initial" /* INITIAL */;
          yield new SetStorageDataCommand("complianceState" /* COMPLIANCE_STATE */, complianceState, "local" /* LOCAL */).execute();
          return Promise.resolve(complianceState);
        } else {
          Promise.resolve("notApplicable" /* NOT_APPLICABLE */);
        }
      });
    }
  };

  // src/background/messages/command/BackgroundMessageQueryAllTabs.ts
  var BackgroundMessageQueryAllTabs = class extends BackgroundMessageQuery {
    sendMessage() {
      return __async(this, null, function* () {
        const tabs = yield chrome.tabs.query({});
        tabs.forEach((tab) => {
          chrome.tabs.sendMessage(tab.id, this.message);
        });
      });
    }
  };

  // src/modules/compliance/background/model/ComplianceModel.ts
  var ComplianceModel = class {
    constructor(feature) {
      this.feature = feature;
      this.telemetry = instance.resolve("Telemetry" /* TELEMETRY */);
    }
    init() {
      return __async(this, null, function* () {
        this.complianceState = yield new InitiateComplianceStateCommand().execute();
        this.observer = new BulkObserver([
          new BackgroundStorageObserver("complianceState" /* COMPLIANCE_STATE */, this.onStorageUpdated.bind(this), "local" /* LOCAL */),
          new MessageObserver("Compliance.notification.accepted" /* COMPLIANCE_NOTIFICATION_ACCEPTED */, this.onComplianceNotificationAccepted.bind(this)),
          new MessageObserver("Compliance.notification.closed" /* COMPLIANCE_NOTIFICATION_CLOSED */, this.onComplianceNotificationClosed.bind(this)),
          new MessageObserver("Compliance.notification.shown" /* COMPLIANCE_NOTIFICATION_SHOWN */, this.onComplianceNotificationShown.bind(this)),
          new MessageObserver("Compliance.model.get" /* GET_MODEL */, this.onGetModel.bind(this))
        ]);
        this.observer.subscribe();
      });
    }
    getData() {
      return {
        complianceState: this.complianceState
      };
    }
    dispose() {
      var _a;
      (_a = this.observer) == null ? void 0 : _a.unsubscribe();
      this.observer = void 0;
    }
    updateState(complianceState) {
      const prevData = this.complianceState;
      this.complianceState = complianceState;
      this.feature.onDataChanged(this.complianceState, prevData);
    }
    onStorageUpdated(complianceState) {
      this.updateState(complianceState);
    }
    onGetModel(body, sendResponse, sender) {
      sendResponse(this.getData());
    }
    onComplianceNotificationAccepted() {
      return __async(this, null, function* () {
        this.complianceState = "accepted" /* ACCEPTED */;
        yield this.closeAllCompliancePopups();
        this.telemetry.sendEvent(FTC_NOTIFICATION_EVENT.learnMore);
        yield new SetStorageDataCommand("complianceState" /* COMPLIANCE_STATE */, this.complianceState).execute();
      });
    }
    onComplianceNotificationClosed() {
      return __async(this, null, function* () {
        this.complianceState = "closed" /* CLOSED */;
        yield this.closeAllCompliancePopups();
        this.telemetry.sendEvent(FTC_NOTIFICATION_EVENT.close);
        yield new SetStorageDataCommand("complianceState" /* COMPLIANCE_STATE */, this.complianceState).execute();
      });
    }
    onComplianceNotificationShown() {
      return __async(this, null, function* () {
        this.telemetry.sendEvent(FTC_NOTIFICATION_EVENT.shown);
      });
    }
    closeAllCompliancePopups() {
      return __async(this, null, function* () {
        yield new BackgroundMessageQueryAllTabs("Compliance.closePopups" /* CLOSE_ALL_POPUPS */, null).execute();
      });
    }
  };

  // src/modules/compliance/background/Compliance.ts
  var Compliance = class extends Feature {
    static buildFeature() {
      return __async(this, null, function* () {
        const feature = new Compliance();
        yield feature.init();
        return feature;
      });
    }
    init() {
      return __async(this, null, function* () {
        this.model = new ComplianceModel(this);
        yield this.model.init();
      });
    }
    onDataChanged(data) {
      new BackgroundMessageQuery("Compliance.model.updated" /* MODEL_UPDATED */, data).execute();
    }
    dispose() {
      this.disposeModel();
    }
    disposeModel() {
      if (!this.model)
        return;
      this.model.dispose();
    }
  };

  // src/background/telemetryManager/TelemetryManager.ts
  var TelemetryManager = class {
    constructor(defaultParameters) {
      this._defaultParameters = defaultParameters;
    }
    sendEvent(eventName, attr) {
      return __async(this, null, function* () {
        const event = {
          name: eventName,
          params: __spreadValues({}, attr)
        };
        yield this.send(event);
      });
    }
    sendPageViewEvent() {
      return __async(this, null, function* () {
        const event = {
          name: PAGE_VIEW_EVENT,
          params: {}
        };
        yield this.send(event);
      });
    }
    _constructMessageBody(ga4Event) {
      if (!this._defaultParameters.CLIENT_ID) {
        return null;
      }
      const msgBody = {
        client_id: this._defaultParameters.CLIENT_ID,
        events: []
      };
      const defaultEventParameters = Object.fromEntries(
        Object.entries(this._defaultParameters).filter(([key, value]) => key !== MEASUREMENT_ID && key !== GA4_API_SECRET)
      );
      ga4Event.params = __spreadValues(__spreadValues({}, ga4Event.params), defaultEventParameters);
      msgBody.events.push(ga4Event);
      return msgBody;
    }
    _safeFetch(_0) {
      return __async(this, arguments, function* (url, options = {}, timeout = DEFAULT_FETCH_TIMEOUT) {
        return new Promise(function(resolve, reject) {
          const timeoutid = setTimeout(function() {
            reject(new Error("Request timed out " + url));
          }, timeout);
          fetch(url, options).then(function(response) {
            clearTimeout(timeoutid);
            resolve(response);
          }).catch(function(err) {
            clearTimeout(timeoutid);
            reject(err);
          });
        });
      });
    }
    send(ga4Event) {
      return __async(this, null, function* () {
        if (!this._defaultParameters) {
          return false;
        }
        const requestBody = this._constructMessageBody(ga4Event);
        if (!requestBody || Object.keys(requestBody).length === 0) {
          return false;
        }
        const reqOptions = {
          method: REQUEST_TYPE,
          body: JSON.stringify(requestBody)
        };
        const ga4QueryParams = `?measurement_id=${this._defaultParameters.MEASUREMENT_ID}&api_secret=${this._defaultParameters.GA4_API_SECRET}`;
        const ga4EndPointUrl = `${GA4_ANALYTICS_URL}${ga4QueryParams}`;
        let isTelemetrySent = true;
        try {
          const httpResponse = yield this._safeFetch(ga4EndPointUrl, reqOptions);
          if (!httpResponse.ok) {
            console.debug(`error response for sending telemetry. response code: ${httpResponse.status}`);
            isTelemetrySent = false;
          } else {
            console.log(`success telemetry. reqOptions: ${reqOptions.body}`);
          }
        } catch (error) {
          console.debug(`sending telemetry failed due to ${error}`);
          isTelemetrySent = false;
          return isTelemetrySent;
        }
        return isTelemetrySent;
      });
    }
  };

  // src/background/telemetryManager/Telemetry.ts
  var Telemetry = class extends CoreModule {
    constructor() {
      super(...arguments);
      this.config = instance.resolve("Config" /* CONFIG */);
    }
    init() {
      return __async(this, null, function* () {
        const initialData = yield new GetInitialClientDataQuery().execute();
        const appVersion = chrome.runtime.getManifest().version;
        this.telemetryManager = new TelemetryManager({
          APPLICATION_NAME: `AOSP_${appVersion}`,
          APPLICATION_VERSION: appVersion,
          CLIENT_ID: initialData.identifiers.localAppGUID || initialData.extensionGUID || "",
          DATA_SOURCE,
          MEASUREMENT_ID,
          GA4_API_SECRET,
          GOOGLE_ANALYTICS_PROTOCOL_VERSION,
          ANONYMIZE_IP,
          BROWSER_NAME: BrowserUtil.getBrowserType()
        });
      });
    }
    static buildModule() {
      return __async(this, null, function* () {
        const telemetry = new Telemetry();
        yield telemetry.init();
        return telemetry;
      });
    }
    sendPageViewEvent() {
      this.telemetryManager.sendPageViewEvent();
    }
    sendEvent(eventName, attr) {
      this.telemetryManager.sendEvent(eventName, attr);
    }
  };

  // src/background/geoLocation/geoLocationWrapperConstants.js
  var GEO_LOCATION_API = "https://geolocation.norton.com/api/v2/GeoLocation";
  var FETCH_GEO_LOCATION_FETCH_DELAY = 9e5;
  var LOCATION_STORAGE_CONFIG = {
    compliance: {
      REGION_STORAGE_KEY: "553c0724-d1aa-4d9c-a67b-a5bd87ab66b8",
      LAST_FETCHED_TIME_STORAGE_KEY: "8f25d359-9cbe-4083-a178-b7585e7152c6",
      ERROR_STRING_STORAGE_KEY: "d5e1c3b7-4f3e-4f5d-ba0e-1c3a4f5d6b7a",
      FETCH_INERVAL_IN_MS: void 0,
      FETCH_FAILURE_COUNTER: true
    },
    urllite: {
      REGION_STORAGE_KEY: "553c0724-d1aa-4d9c-a67b-a5bd87ab66b9",
      LAST_FETCHED_TIME_STORAGE_KEY: "8f25d359-9cbe-4083-a178-b7585e7152c7",
      ERROR_STRING_STORAGE_KEY: "d5e1c3b7-4f3e-4f5d-ba0e-1c3a4f5d6b7b",
      FETCH_INERVAL_IN_MS: 7 * 24 * 60 * 60 * 1e3,
      FETCH_FAILURE_COUNTER: false
    }
  };

  // src/background/geoLocation/geoLocationWrapper.js
  var GeoLocationWrapper = class {
    constructor() {
      this.retrieveGeoLocationRegion = this.retrieveGeoLocationRegion.bind(this);
    }
    getStorageValue(key) {
      return __async(this, null, function* () {
        return new Promise((resolve, reject) => {
          chrome.storage.local.get([key], function(result) {
            resolve(result[key]);
          });
        });
      });
    }
    fetchJsonData(url, retries = 0, maxRetries = 0) {
      return __async(this, null, function* () {
        return new Promise((resolve, reject) => {
          fetch(url, {
            headers: {
              "X-NLOK-USER-AGENT": "AOSP"
            }
          }).then((response) => {
            if (!response.ok) {
              throw new Error(`Network response was not ok, status code: ${response.status}`);
            }
            return response.json();
          }).then((data) => {
            resolve(data);
          }).catch((error) => {
            retries++;
            console.error(`Error fetching data (attempt ${retries} of ${maxRetries}):`, error);
            if (retries < maxRetries) {
              setTimeout(() => {
                const geoLocationUrl = `${GEO_LOCATION_API}`;
                this.fetchJsonData(geoLocationUrl, retries, maxRetries).then(resolve).catch(reject);
              }, 1e3);
            } else {
              reject(error);
            }
          });
        });
      });
    }
    shouldFetch(lastFetchTime, delayInMilliseconds) {
      const currentTime = Date.now();
      return currentTime - lastFetchTime >= delayInMilliseconds;
    }
    handleFetch(locationKey) {
      return __async(this, null, function* () {
        const storageConfig = LOCATION_STORAGE_CONFIG[locationKey];
        const {
          REGION_STORAGE_KEY,
          ERROR_STRING_STORAGE_KEY,
          LAST_FETCHED_TIME_STORAGE_KEY,
          FETCH_FAILURE_COUNTER
        } = storageConfig;
        let lastFetchTime = Date.now();
        const errorStrKey = `${ERROR_STRING_STORAGE_KEY}`;
        chrome.storage.local.set({ [errorStrKey]: null });
        const lastFetchTimeKey = `${LAST_FETCHED_TIME_STORAGE_KEY}`;
        chrome.storage.local.set({ [lastFetchTimeKey]: lastFetchTime });
        try {
          const geoLocationUrl = `${GEO_LOCATION_API}`;
          const jsonData = yield this.fetchJsonData(geoLocationUrl);
          if (jsonData && jsonData.countryCode) {
            const regionKey = `${REGION_STORAGE_KEY}`;
            chrome.storage.local.set({ [regionKey]: jsonData.countryCode });
            const resultMap2 = /* @__PURE__ */ new Map([
              ["region", jsonData.countryCode],
              ["error", null]
            ]);
            return resultMap2;
          }
          const errorStrKey2 = `${ERROR_STRING_STORAGE_KEY}`;
          chrome.storage.local.set({ [errorStrKey2]: "CountryCode is undefined" });
          if (FETCH_FAILURE_COUNTER) {
            const fetchFailureCounterKey = "fetchFailureCounter";
            const fetchFailureCounter = yield this.getStorageValue(`${fetchFailureCounterKey}`);
            chrome.storage.local.set({ [fetchFailureCounterKey]: fetchFailureCounter ? fetchFailureCounter + 1 : FETCH_FAILURE_COUNTER });
          }
          const resultMap = /* @__PURE__ */ new Map([
            ["region", null],
            ["error", "CountryCode is undefined"]
          ]);
          return resultMap;
        } catch (error) {
          console.error(error);
          const errorStrKey2 = `${ERROR_STRING_STORAGE_KEY}`;
          chrome.storage.local.set({ [errorStrKey2]: error.toString() });
          if (FETCH_FAILURE_COUNTER) {
            const fetchFailureCounterKey = "fetchFailureCounter";
            const fetchFailureCounter = yield this.getStorageValue(`${fetchFailureCounterKey}`);
            chrome.storage.local.set({ [fetchFailureCounterKey]: fetchFailureCounter ? fetchFailureCounter + 1 : FETCH_FAILURE_COUNTER });
          }
          const resultMap = /* @__PURE__ */ new Map([
            ["region", null],
            ["error", error.toString()]
          ]);
          return resultMap;
        }
      });
    }
    retrieveGeoLocationRegion(locationKey) {
      return __async(this, null, function* () {
        const storageConfig = LOCATION_STORAGE_CONFIG[locationKey];
        const {
          REGION_STORAGE_KEY,
          ERROR_STRING_STORAGE_KEY,
          LAST_FETCHED_TIME_STORAGE_KEY,
          FETCH_INERVAL_IN_MS
        } = storageConfig;
        let lastFetchTime = yield this.getStorageValue(`${LAST_FETCHED_TIME_STORAGE_KEY}`);
        let region = yield this.getStorageValue(`${REGION_STORAGE_KEY}`);
        const errorStr = yield this.getStorageValue(`${ERROR_STRING_STORAGE_KEY}`);
        if (region !== void 0) {
          const resultMap = /* @__PURE__ */ new Map([
            ["region", region],
            ["error", null]
          ]);
          return resultMap;
        }
        if (lastFetchTime !== void 0) {
          if (!this.shouldFetch(lastFetchTime, `${FETCH_GEO_LOCATION_FETCH_DELAY}`)) {
            if (errorStr === void 0 || errorStr === null) {
              console.log("Unknown Error fetching data:");
              const resultMap = /* @__PURE__ */ new Map([
                ["region", null],
                ["error", "Error unknown"]
              ]);
              return resultMap;
            } else {
              console.log("Error fetching data:", errorStr);
              const resultMap = /* @__PURE__ */ new Map([
                ["region", null],
                ["error", errorStr]
              ]);
              return resultMap;
            }
          }
        }
        const response = yield this.handleFetch(locationKey);
        return response;
      });
    }
  };

  // src/background/geoLocation/GeoLocation.ts
  var GeoLocation = class extends CoreModule {
    init() {
      return __async(this, null, function* () {
        this.geoLocationWrapper = new GeoLocationWrapper();
      });
    }
    static buildModule() {
      return __async(this, null, function* () {
        const geoLocation = new GeoLocation();
        yield geoLocation.init();
        return geoLocation;
      });
    }
    retrieveGeoLocationRegion(locationKey) {
      return this.geoLocationWrapper.retrieveGeoLocationRegion(locationKey);
    }
  };

  // src/modules/postInstallPage/background/error/ShowPostInstallPageError.ts
  var ShowPostInstallPageError = class {
    constructor(message, stack) {
      this.message = message;
      this.stack = stack;
      this.name = "ShowPostInstallPageError";
    }
  };

  // src/modules/postInstallPage/background/command/OpenPostInstallPageCommand.ts
  var OpenPostInstallPageCommand = class extends Command {
    constructor() {
      super();
    }
    execute() {
      return __async(this, null, function* () {
        try {
          const url = new GetAssetPathQuery("client/extensionPage.html").execute();
          const tab = yield this.createOrRedirectTab(url);
          yield new BackgroundMessageQuery("extensionPage.postInstallPage.show" /* SHOW */, "install", tab.id).execute();
        } catch (e) {
          return Promise.reject(new ShowPostInstallPageError(e.message, e.stack));
        }
      });
    }
    createOrRedirectTab(url) {
      return __async(this, null, function* () {
        return yield new CreateTabCommand({ url, active: true }).execute();
      });
    }
  };

  // src/background/PostInstallHandler.ts
  var _PostInstallHandler = class extends Feature {
    static addListeners() {
      chrome.runtime.onInstalled.addListener((details) => __async(this, null, function* () {
        if (details.reason === "install") {
          _PostInstallHandler.isFreshInstall = true;
        }
        if (details.reason === chrome.runtime.OnInstalledReason.UPDATE) {
          _PostInstallHandler.isUpgrade = true;
          yield new SetStorageDataCommand("shepherd" /* SHEPHERD */, null).execute();
        }
        if (details.reason !== chrome.runtime.OnInstalledReason.UPDATE) {
          return;
        }
        if (_PostInstallHandler.isMigrationRequired(details.previousVersion)) {
          console.log("Migrate settings ...");
          try {
            yield _PostInstallHandler.migrateSettings();
          } catch (error) {
            console.log("Error during migration");
          }
        }
      }));
      chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
        if (changeInfo.status === "complete" && UrlUtil.isExtensionTab(tab.url)) {
          setTimeout(() => {
            new BackgroundMessageQuery("extensionPage.emptyTabPage.show" /* SHOW */, true, tabId).execute();
          }, 100);
        }
      });
    }
    static buildFeature() {
      return __async(this, null, function* () {
        if (_PostInstallHandler.isFreshInstall) {
          _PostInstallHandler.isFreshInstall = false;
          try {
            yield new OpenPostInstallPageCommand().execute();
            new BackgroundAnalyticsQuery({
              type: "analytics.event.install" /* INSTALL */
            }).execute();
          } catch (error) {
            console.error(error);
          }
        } else if (_PostInstallHandler.isUpgrade) {
          _PostInstallHandler.isUpgrade = false;
          try {
            new BackgroundAnalyticsQuery({
              type: "analytics.event.update" /* UPDATE */,
              version: chrome.runtime.getManifest().version
            }).execute();
          } catch (error) {
            console.error(error);
          }
        }
        return new _PostInstallHandler();
      });
    }
    static isMigrationRequired(previousVersion) {
      if (!_PostInstallHandler.REDESIGN_BROWSERS.includes(BrowserUtil.getBrowserType())) {
        return false;
      }
      const currentVersion = chrome.runtime.getManifest().version;
      if (previousVersion === currentVersion) {
        return false;
      }
      const [
        prevMajorVersion,
        prevMinorVersion,
        prevPatchVersion
      ] = previousVersion.split(".");
      const [
        redesignMajorVersion,
        redesignMinorVersion,
        redesignPatchVersion
      ] = _PostInstallHandler.REDESIGN_VERSION.split(".");
      if (prevMajorVersion < redesignMajorVersion) {
        return true;
      }
      if (prevMajorVersion === redesignMajorVersion && prevMinorVersion < redesignMinorVersion) {
        return true;
      }
      if (prevMajorVersion === redesignMajorVersion && prevMinorVersion === redesignMinorVersion && prevPatchVersion < redesignPatchVersion) {
        return true;
      }
      return false;
    }
    static getFromStorage(storageKey, attribute = null, storageArea = "local") {
      return __async(this, null, function* () {
        var _a;
        const container = yield chrome.storage[storageArea].get(storageKey);
        return attribute ? (_a = container == null ? void 0 : container[storageKey]) == null ? void 0 : _a[attribute] : container == null ? void 0 : container[storageKey];
      });
    }
    static migrateSettings() {
      return __async(this, null, function* () {
        const migratedSettings = {};
        const prevFeatureSettings = yield _PostInstallHandler.getFromStorage(_PostInstallHandler.SETTINGS, _PostInstallHandler.FEATURES);
        const globalBlocked = (yield _PostInstallHandler.getFromStorage(_PostInstallHandler.TRACKERS_STAT, _PostInstallHandler.GLOBAL_BLOCKED)) || 0;
        if (prevFeatureSettings) {
          migratedSettings["globalPrivacyControl" /* GLOBAL_PRIVACY_CONTROL */] = {
            gpcEnabled: prevFeatureSettings.gpc
          };
          migratedSettings["privacyAdvisorNotification" /* SET_PRIVACY_ADVISOR_NOTIFICATION */] = {
            enabled: prevFeatureSettings.advisorNotification
          };
          migratedSettings["searchResults" /* SEARCH_RESULTS */] = {
            enabled: prevFeatureSettings.serp
          };
          migratedSettings["dntBadge" /* ANTI_TRACK_COUNT_ON_BADGE */] = {
            enabled: prevFeatureSettings.dntBadge
          };
          migratedSettings["analytics" /* ANALYTICS */] = {
            trackingEnabled: prevFeatureSettings.productAnalysis
          };
          migratedSettings["antiTrack" /* ANTI_TRACK */] = {
            categories: [
              {
                name: "Social",
                enabled: prevFeatureSettings.dntSocial
              },
              {
                name: "AdTracking",
                enabled: prevFeatureSettings.dntAdTracking
              },
              {
                name: "WebAnalytics",
                enabled: prevFeatureSettings.dntWebAnalytics
              },
              {
                name: "Others",
                enabled: prevFeatureSettings.dntOthers
              }
            ],
            stats: {
              globalBlocked,
              timeStamp: Date.now()
            }
          };
        }
        const prevBrokers = yield _PostInstallHandler.getFromStorage(_PostInstallHandler.ADVERTISERS_RUN, _PostInstallHandler.BROKERS);
        const autoOptOut = (yield _PostInstallHandler.getFromStorage(_PostInstallHandler.AUTO_OPT_OUT)) === "false" ? false : true;
        const brokersOptOut = {};
        const optedOutBrokers = [];
        if (prevBrokers) {
          prevBrokers.forEach((broker) => {
            brokersOptOut[broker.title] = broker.isSelectedForOptOut;
            if (broker.state === _PostInstallHandler.OPTED_OUT) {
              optedOutBrokers.push(broker.title);
            }
          });
        }
        migratedSettings["advertiser" /* ADVERTISER */] = {
          settings: {
            autoOptOut,
            brokersOptOut,
            optedOutBrokers
          }
        };
        const prevCookieManager = yield _PostInstallHandler.getFromStorage(_PostInstallHandler.COOKIE_MANAGER);
        if (prevCookieManager) {
          migratedSettings["cookieConsent" /* COOKIE_CONSENT */] = {
            state: prevCookieManager.state,
            allowedWebsites: prevCookieManager.allowedWebsites,
            notification: prevCookieManager.notification,
            preferences: prevCookieManager.preferences,
            stats: prevCookieManager.stats,
            enabled: prevCookieManager.enabled
          };
        }
        const prevOnboarded = (yield _PostInstallHandler.getFromStorage(_PostInstallHandler.APPLICATION, _PostInstallHandler.ONBOARDED)) || false;
        migratedSettings["panel" /* PANEL */] = {
          onboarded: prevOnboarded
        };
        yield chrome.storage.local.set(migratedSettings);
        const completedGuides = (yield _PostInstallHandler.getFromStorage(_PostInstallHandler.COMPLETED_GUIDES, null, "sync")) || [];
        const stoppedGuides = (yield _PostInstallHandler.getFromStorage(_PostInstallHandler.STOPPED_GUIDES, null, "sync")) || [];
        yield chrome.storage.sync.set({
          ["privacyAdvisor" /* PRIVACY_ADVISOR */]: {
            completed: completedGuides,
            stopped: stoppedGuides,
            triggerNotification: true
          }
        });
      });
    }
    onDataChanged() {
    }
    dispose() {
    }
  };
  var PostInstallHandler = _PostInstallHandler;
  PostInstallHandler.REDESIGN_VERSION = "22.12.0";
  PostInstallHandler.REDESIGN_BROWSERS = ["CHROME" /* CHROME */, "CHROMIUMEDGE" /* CHROMIUMEDGE */, "OPERA" /* OPERA */];
  PostInstallHandler.isFreshInstall = false;
  PostInstallHandler.isUpgrade = false;
  PostInstallHandler.SETTINGS = "settings";
  PostInstallHandler.FEATURES = "features";
  PostInstallHandler.COOKIE_MANAGER = "cookieManager";
  PostInstallHandler.BROKERS = "brokers";
  PostInstallHandler.ADVERTISERS_RUN = "aos.advertisers.run";
  PostInstallHandler.OPTED_OUT = "OPTED_OUT";
  PostInstallHandler.TRACKERS_STAT = "trackers.stats";
  PostInstallHandler.GLOBAL_BLOCKED = "globalBlocked";
  PostInstallHandler.COMPLETED_GUIDES = "aos.guides.completed";
  PostInstallHandler.STOPPED_GUIDES = "aos.guides.stopped";
  PostInstallHandler.AUTO_OPT_OUT = "aos.advertisers.autoOptOutSettings";
  PostInstallHandler.APPLICATION = "APPLICATION";
  PostInstallHandler.ONBOARDED = "onboarded";

  // src/background/config/modules/ModulesConfig.ts
  var ModulesConfig = class {
    constructor() {
      this.coreModules = [
        { containerKey: "Telemetry" /* TELEMETRY */, factory: Telemetry.buildModule },
        { containerKey: "GeoLocation" /* GEO_LOCATION */, factory: GeoLocation.buildModule },
        { containerKey: "Client" /* CLIENT */, factory: Client.buildModule },
        { containerKey: "Shepherd" /* SHEPHERD */, factory: Shepherd.buildModule },
        { containerKey: "PanelHandler" /* PANEL_HANDLER */, factory: PanelHandler.buildModule }
      ];
      this.commonModules = [
        { containerKey: "Localization" /* LOCALIZATION */, factory: Localization.buildModule },
        { containerKey: "Analytics" /* ANALYTICS */, factory: Analytics.buildModule }
      ];
      this.featureModules = [
        { toggleKey: "privacyAdvisor" /* PRIVACY_ADVISOR */, factory: PrivacyAdvisor.buildFeature },
        { toggleKey: "globalPrivacyControl" /* GLOBAL_PRIVACY_CONTROL */, factory: GlobalPrivacyControl.buildFeature },
        { toggleKey: "maliciousPage" /* MALICIOUS_PAGE */, factory: MaliciousPage.buildFeature },
        { toggleKey: "antiTrack" /* ANTI_TRACK */, factory: AntiTrack.buildFeature },
        { toggleKey: "cookieConsent" /* COOKIE_CONSENT */, factory: CookieConsent_default.buildFeature },
        { toggleKey: "searchResults" /* SEARCH_RESULTS */, factory: SearchResults.buildFeature },
        { toggleKey: "advertisers" /* ADVERTISER */, factory: Advertiser.buildFeature },
        { toggleKey: "compNotification" /* COMPLIANCE */, factory: Compliance.buildFeature },
        { toggleKey: "PostInstallHandler" /* POST_INSTALL_HANDLER */, factory: PostInstallHandler.buildFeature }
      ];
    }
  };

  // src/core/localization/library/NitroLocalizationLibrary.ts
  var import_nitro_ui_lib_translate = __toESM(require_libs());
  var NitroLocalizationLibrary = class {
    constructor() {
      this.nitroLibrary = import_nitro_ui_lib_translate.default;
    }
    get clientLanguage() {
      return this.locale;
    }
    setLanguage(locale) {
      this.nitroLibrary.locale = locale;
      this.locale = locale;
    }
    registerLocales(locales) {
      const translations = this.parseTranslations(locales);
      this.nitroLibrary.register(translations, false);
    }
    translate(key, ...args) {
      return this.nitroLibrary.nls(key, ...args);
    }
    translateToLocale(key, locale) {
      const translated = this.nitroLibrary.nlsRaw(key, locale);
      if (translated && Array.isArray(translated))
        return translated[0];
      return translated;
    }
    parseTranslations(translations) {
      const parsedData = { resources: {} };
      Object.keys(translations).forEach((locale) => {
        parsedData.resources[locale] = { translation: translations[locale] };
      });
      return parsedData;
    }
  };

  // src/background/analytics/library/burger/BurgerClientFactory.ts
  var import_burger_client = __toESM(require_burger_client());
  var import_pbjs5Adapter = __toESM(require_pbjs5Adapter());
  var import_envelopes = __toESM(require_envelopes());
  var BurgerClientFactory = class {
    static get adapter() {
      return import_pbjs5Adapter.default.create(__spreadValues({}, import_envelopes.default));
    }
    static buildModule() {
      const config = instance.resolve("Config" /* CONFIG */);
      const client = instance.resolve("Client" /* CLIENT */);
      const endpoint = EnvironmentUtil.isDevelopment() ? config.burger.stage : config.burger.production;
      const options = this.getBurgerOptions(config.burger, client.getData());
      return new import_burger_client.default(endpoint, BurgerClientFactory.adapter, options);
    }
    static getBurgerOptions(burgerConfig, clientData) {
      return {
        batchTimeoutMs: burgerConfig.batchTimeout,
        localStorage: instance.resolve("LocalStorage" /* LOCAL_STORAGE */),
        identity: {
          guid: clientData.identifiers.localAppPluginGUID || clientData.extensionGUID,
          hwid: clientData.identifiers.localAppHWID
        },
        product: { id: burgerConfig.id, lang: clientData.language, version_app: clientData.version },
        license: { type: "NO_LICENSE" },
        extensionProductIdentity: {
          guid: clientData.identifiers.localAppGUID,
          hwid: clientData.identifiers.localAppHWID
        },
        extensionProduct: { version_app: clientData.identifiers.localAppVersion },
        platform: { build: clientData.osBuild },
        caller_id: burgerConfig.callerId
      };
    }
  };

  // src/background/analytics/library/burger/Burger.ts
  var Burger = class {
    constructor() {
      this.client = BurgerClientFactory.buildModule();
    }
    heartbeat(uptime) {
      this.client.send.heartbeat(uptime);
    }
    install(operation = 1) {
      this.client.send.install(operation);
    }
    preferences(config) {
      this.client.send.preferences({ configuration: config });
    }
    productUpdate(version) {
      this.client.send.update({ version: { "version_app": version } });
    }
    refreshClient(identifiers, osBuild, version, extensionGuid) {
      this.client.updateIdentity({ guid: identifiers.localAppGUID, hwid: identifiers.localAppHWID }).updatePlatform({ build: osBuild }).updateProduct({ "version_app": version }).updateExtensionProduct({ "version_app": identifiers.localAppVersion }).updateExtensionProductIdentity({ guid: extensionGuid, hwid: identifiers.localAppHWID });
    }
    userReport(category, issueType, firstParam, secondParam) {
      this.client.send.commonActivity({ category, label: "userReport", action: issueType, f1: firstParam, f2: secondParam });
    }
    click(category, action, label, view) {
      this.client.send.activity.click({ object: { category, action, label, view } });
    }
    view(view, label, category) {
      this.client.send.activity.view({ object: { category, view, label } });
    }
    error(error, optSource = null) {
      this.client.send.issue.error(error, optSource);
    }
  };

  // src/background/localstorage/LocalStorage.ts
  var _LocalStorage = class {
    constructor(storage = /* @__PURE__ */ new Map()) {
      this.storage = storage;
    }
    static buildStorage() {
      return __async(this, null, function* () {
        const storage = yield _LocalStorage.resolveStoredData();
        return new _LocalStorage(storage);
      });
    }
    static resolveStoredData() {
      return __async(this, null, function* () {
        const storage = /* @__PURE__ */ new Map();
        try {
          const data = yield new GetStorageDataQuery(_LocalStorage.STORAGE_PREFIX).execute();
          Object.keys(data).forEach((key) => storage.set(key, data[key]));
        } catch (e) {
        }
        return storage;
      });
    }
    get length() {
      return this.storage.size;
    }
    clear() {
      return __async(this, null, function* () {
        this.storage.clear();
        yield this.updateStorageData();
      });
    }
    getItem(key) {
      return this.storage.get(key);
    }
    key(index) {
      return Array.from(this.storage.keys())[index];
    }
    removeItem(key) {
      return __async(this, null, function* () {
        this.storage.delete(key);
        yield this.updateStorageData();
      });
    }
    setItem(key, value) {
      return __async(this, null, function* () {
        this.storage.set(key, value);
        yield this.updateStorageData();
      });
    }
    updateStorageData() {
      return __async(this, null, function* () {
        const value = Object.fromEntries(this.storage);
        yield new SetStorageDataCommand(_LocalStorage.STORAGE_PREFIX, value).execute();
      });
    }
  };
  var LocalStorage = _LocalStorage;
  LocalStorage.STORAGE_PREFIX = "LOCAL-STORAGE";

  // src/background/container/BackgroundContainer.ts
  var BackgroundContainer = class {
    static registerModules() {
      return __async(this, null, function* () {
        yield BackgroundContainer.registerAsyncModules();
        instance.register("Config" /* CONFIG */, { useClass: Config }, { lifecycle: lifecycle_default.Singleton });
        instance.register("ModulesConfig" /* MODULES_CONFIG */, { useClass: ModulesConfig }, { lifecycle: lifecycle_default.Singleton });
        instance.register("ExtensionIconObservable" /* EXTENSION_ICON_OBSERVABLE */, { useClass: ExtensionIconClickedObservable }, { lifecycle: lifecycle_default.Singleton });
        instance.register("TabsObservable" /* TABS_OBSERVABLE */, { useClass: TabsObservable }, { lifecycle: lifecycle_default.Singleton });
        instance.register("MessageObservable" /* MESSAGE_OBSERVABLE */, { useClass: BackgroundMessageObservable }, { lifecycle: lifecycle_default.Singleton });
        instance.register("StorageObservable" /* STORAGE_OBSERVABLE */, { useClass: StorageObservable }, { lifecycle: lifecycle_default.Singleton });
        instance.register("LocalizationLibrary" /* LOCALIZATION_LIBRARY */, { useClass: NitroLocalizationLibrary }, { lifecycle: lifecycle_default.Singleton });
        instance.register("AnalyticsLibrary" /* ANALYTICS_LIBRARY */, { useClass: Burger }, { lifecycle: lifecycle_default.Singleton });
      });
    }
    static registerAsyncModules() {
      return __async(this, null, function* () {
        const localStorage2 = yield LocalStorage.buildStorage();
        instance.register("LocalStorage" /* LOCAL_STORAGE */, { useValue: localStorage2 });
      });
    }
  };

  // src/background/background.ts
  var Background = class {
    constructor() {
    }
    start() {
      return __async(this, null, function* () {
        yield BackgroundContainer.registerModules();
        yield new StartupCommand().execute();
      });
    }
  };
  PostInstallHandler.addListeners();
  new Background().start();
})();
/*! *****************************************************************************
Copyright (C) Microsoft. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/**
 * @license bytebuffer.js (c) 2015 Daniel Wirtz <dcode@dcode.io>
 * Backing buffer: ArrayBuffer, Accessor: Uint8Array
 * Released under the Apache License, Version 2.0
 * see: https://github.com/dcodeIO/bytebuffer.js for details
 */
/**
 * @license long.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
 * Released under the Apache License, Version 2.0
 * see: https://github.com/dcodeIO/long.js for details
 */
/**
 * @license protobuf.js (c) 2013 Daniel Wirtz <dcode@dcode.io>
 * Released under the Apache License, Version 2.0
 * see: https://github.com/dcodeIO/protobuf.js for details
 */
/**
 * @preserve jed.js https://github.com/SlexAxton/Jed
 */
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! moment.js
//! momentjs.com
//! version : 2.12.0
