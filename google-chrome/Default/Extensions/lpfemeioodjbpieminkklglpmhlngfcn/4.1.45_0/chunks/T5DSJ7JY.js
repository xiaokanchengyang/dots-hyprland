import{b as c}from"./BKPH2F7R.js";var m=n=>{let e=n.split(""),t=[],a=(i,l)=>{for(let o=l;o<e.length;o+=1)if(i.includes(e[o]))return o;return-1},r=0;for(;r<e.length;)if(e[r]==="{"&&r+1<e.length&&e[r+1]==="{")t.push({type:"literal",text:"{"}),r+=2;else if(e[r]==="}"&&r+1<e.length&&e[r+1]==="}")t.push({type:"literal",text:"}"}),r+=2;else if(e[r]==="{"){let i=a("}",r);if(i<0)throw new Error("Unclosed '{' in template.");t.push({type:"variable",name:e.slice(r+1,i).join("")}),r=i+1}else{if(e[r]==="}")throw new Error("Single '}' in template.");{let i=a("{}",r),l=(i<0?e.slice(r):e.slice(r,i)).join("");t.push({type:"literal",text:l}),r=i<0?e.length:i}}return t},b=(n,e)=>m(n).reduce((t,a)=>{if(a.type==="variable"){if(a.name in e)return t+e[a.name];throw new Error(`Missing value for input ${a.name}`)}return t+a.text},""),p={"f-string":b,jinja2:(n,e)=>""},w={"f-string":m,jinja2:n=>[]},u=(n,e,t)=>p[e](n,t),h=(n,e)=>w[e](n),f=(n,e,t)=>{if(!(e in p)){let a=Object.keys(p);throw new Error(`Invalid template format. Got \`${e}\`;
                         should be one of ${a}`)}try{let a=t.reduce((r,i)=>(r[i]="foo",r),{});u(n,e,a)}catch(a){throw new Error("Invalid prompt schema.")}};var s=class extends c{constructor(e){if(super(e),Object.defineProperty(this,"template",{enumerable:!0,configurable:!0,writable:!0,value:void 0}),Object.defineProperty(this,"templateFormat",{enumerable:!0,configurable:!0,writable:!0,value:"f-string"}),Object.defineProperty(this,"validateTemplate",{enumerable:!0,configurable:!0,writable:!0,value:!0}),Object.assign(this,e),this.validateTemplate){let t=this.inputVariables;this.partialVariables&&(t=t.concat(Object.keys(this.partialVariables))),f(this.template,this.templateFormat,t)}}_getPromptType(){return"prompt"}async format(e){let t=await this.mergePartialAndUserVariables(e);return u(this.template,this.templateFormat,t)}static fromExamples(e,t,a,r=`

`,i=""){let l=[i,...e,t].join(r);return new s({inputVariables:a,template:l})}static fromTemplate(e,{templateFormat:t="f-string",...a}={}){let r=new Set;return h(e,t).forEach(i=>{i.type==="variable"&&r.add(i.name)}),new s({inputVariables:[...r],templateFormat:t,template:e,...a})}async partial(e){var a;let t={...this};return t.inputVariables=this.inputVariables.filter(r=>!(r in e)),t.partialVariables={...(a=this.partialVariables)!=null?a:{},...e},new s(t)}serialize(){if(this.outputParser!==void 0)throw new Error("Cannot serialize a prompt template with an output parser");return{_type:this._getPromptType(),input_variables:this.inputVariables,template:this.template,template_format:this.templateFormat}}static async deserialize(e){if(!e.template)throw new Error("Prompt template must have a template");return new s({inputVariables:e.input_variables,template:e.template,templateFormat:e.template_format})}};export{u as a,f as b,s as c};
